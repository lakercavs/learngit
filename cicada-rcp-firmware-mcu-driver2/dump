
app.elf:     file format elf32-csky-little


Disassembly of section .text:

00000000 <ckcpu_vsr_table>:
	.balign 4
printch:
		addruart r3
		mov	r1, r0
		movi	r0, 0
		br	1b
       0:	0628      	br      	0xfffffc50	//fffffc50 <__stack+0xffbffc58>
       2:	0000      	bkpt
       4:	0400      	br      	0x4	//4 <ckcpu_vsr_table+0x4>
       6:	0000      	bkpt
       8:	0400      	br      	0x8	//8 <ckcpu_vsr_table+0x8>
       a:	0000      	bkpt
       c:	0400      	br      	0xc	//c <ckcpu_vsr_table+0xc>
       e:	0000      	bkpt
      10:	0400      	br      	0x10	//10 <ckcpu_vsr_table+0x10>
      12:	0000      	bkpt
      14:	0400      	br      	0x14	//14 <ckcpu_vsr_table+0x14>
      16:	0000      	bkpt
      18:	0400      	br      	0x18	//18 <ckcpu_vsr_table+0x18>
      1a:	0000      	bkpt
      1c:	0400      	br      	0x1c	//1c <ckcpu_vsr_table+0x1c>
      1e:	0000      	bkpt
      20:	0400      	br      	0x20	//20 <ckcpu_vsr_table+0x20>
      22:	0000      	bkpt
      24:	0400      	br      	0x24	//24 <ckcpu_vsr_table+0x24>
      26:	0000      	bkpt
      28:	0400      	br      	0x28	//28 <ckcpu_vsr_table+0x28>
      2a:	0000      	bkpt
      2c:	0400      	br      	0x2c	//2c <ckcpu_vsr_table+0x2c>
      2e:	0000      	bkpt
      30:	0400      	br      	0x30	//30 <ckcpu_vsr_table+0x30>
      32:	0000      	bkpt
      34:	0400      	br      	0x34	//34 <ckcpu_vsr_table+0x34>
      36:	0000      	bkpt
      38:	0400      	br      	0x38	//38 <ckcpu_vsr_table+0x38>
      3a:	0000      	bkpt
      3c:	0400      	br      	0x3c	//3c <ckcpu_vsr_table+0x3c>
      3e:	0000      	bkpt
      40:	0400      	br      	0x40	//40 <ckcpu_vsr_table+0x40>
      42:	0000      	bkpt
      44:	0400      	br      	0x44	//44 <ckcpu_vsr_table+0x44>
      46:	0000      	bkpt
      48:	0400      	br      	0x48	//48 <ckcpu_vsr_table+0x48>
      4a:	0000      	bkpt
      4c:	0400      	br      	0x4c	//4c <ckcpu_vsr_table+0x4c>
      4e:	0000      	bkpt
      50:	0400      	br      	0x50	//50 <ckcpu_vsr_table+0x50>
      52:	0000      	bkpt
      54:	0400      	br      	0x54	//54 <ckcpu_vsr_table+0x54>
      56:	0000      	bkpt
      58:	0400      	br      	0x58	//58 <ckcpu_vsr_table+0x58>
      5a:	0000      	bkpt
      5c:	0400      	br      	0x5c	//5c <ckcpu_vsr_table+0x5c>
      5e:	0000      	bkpt
      60:	0400      	br      	0x60	//60 <ckcpu_vsr_table+0x60>
      62:	0000      	bkpt
      64:	0400      	br      	0x64	//64 <ckcpu_vsr_table+0x64>
      66:	0000      	bkpt
      68:	0400      	br      	0x68	//68 <ckcpu_vsr_table+0x68>
      6a:	0000      	bkpt
      6c:	0400      	br      	0x6c	//6c <ckcpu_vsr_table+0x6c>
      6e:	0000      	bkpt
      70:	0400      	br      	0x70	//70 <ckcpu_vsr_table+0x70>
      72:	0000      	bkpt
      74:	0400      	br      	0x74	//74 <ckcpu_vsr_table+0x74>
      76:	0000      	bkpt
      78:	0400      	br      	0x78	//78 <ckcpu_vsr_table+0x78>
      7a:	0000      	bkpt
      7c:	0400      	br      	0x7c	//7c <ckcpu_vsr_table+0x7c>
      7e:	0000      	bkpt
      80:	0400      	br      	0x80	//80 <ckcpu_vsr_table+0x80>
      82:	0000      	bkpt
      84:	0400      	br      	0x84	//84 <ckcpu_vsr_table+0x84>
      86:	0000      	bkpt
      88:	0400      	br      	0x88	//88 <ckcpu_vsr_table+0x88>
      8a:	0000      	bkpt
      8c:	0400      	br      	0x8c	//8c <ckcpu_vsr_table+0x8c>
      8e:	0000      	bkpt
      90:	0400      	br      	0x90	//90 <ckcpu_vsr_table+0x90>
      92:	0000      	bkpt
      94:	0400      	br      	0x94	//94 <ckcpu_vsr_table+0x94>
      96:	0000      	bkpt
      98:	0400      	br      	0x98	//98 <ckcpu_vsr_table+0x98>
      9a:	0000      	bkpt
      9c:	0400      	br      	0x9c	//9c <ckcpu_vsr_table+0x9c>
      9e:	0000      	bkpt
      a0:	0400      	br      	0xa0	//a0 <ckcpu_vsr_table+0xa0>
      a2:	0000      	bkpt
      a4:	0400      	br      	0xa4	//a4 <ckcpu_vsr_table+0xa4>
      a6:	0000      	bkpt
      a8:	0400      	br      	0xa8	//a8 <ckcpu_vsr_table+0xa8>
      aa:	0000      	bkpt
      ac:	0400      	br      	0xac	//ac <ckcpu_vsr_table+0xac>
      ae:	0000      	bkpt
      b0:	0400      	br      	0xb0	//b0 <ckcpu_vsr_table+0xb0>
      b2:	0000      	bkpt
      b4:	0400      	br      	0xb4	//b4 <ckcpu_vsr_table+0xb4>
      b6:	0000      	bkpt
      b8:	0400      	br      	0xb8	//b8 <ckcpu_vsr_table+0xb8>
      ba:	0000      	bkpt
      bc:	0400      	br      	0xbc	//bc <ckcpu_vsr_table+0xbc>
      be:	0000      	bkpt
      c0:	0400      	br      	0xc0	//c0 <ckcpu_vsr_table+0xc0>
      c2:	0000      	bkpt
      c4:	0400      	br      	0xc4	//c4 <ckcpu_vsr_table+0xc4>
      c6:	0000      	bkpt
      c8:	0400      	br      	0xc8	//c8 <ckcpu_vsr_table+0xc8>
      ca:	0000      	bkpt
      cc:	0400      	br      	0xcc	//cc <ckcpu_vsr_table+0xcc>
      ce:	0000      	bkpt
      d0:	0400      	br      	0xd0	//d0 <ckcpu_vsr_table+0xd0>
      d2:	0000      	bkpt
      d4:	0400      	br      	0xd4	//d4 <ckcpu_vsr_table+0xd4>
      d6:	0000      	bkpt
      d8:	0400      	br      	0xd8	//d8 <ckcpu_vsr_table+0xd8>
      da:	0000      	bkpt
      dc:	0400      	br      	0xdc	//dc <ckcpu_vsr_table+0xdc>
      de:	0000      	bkpt
      e0:	0400      	br      	0xe0	//e0 <ckcpu_vsr_table+0xe0>
      e2:	0000      	bkpt
      e4:	0400      	br      	0xe4	//e4 <ckcpu_vsr_table+0xe4>
      e6:	0000      	bkpt
      e8:	0400      	br      	0xe8	//e8 <ckcpu_vsr_table+0xe8>
      ea:	0000      	bkpt
      ec:	0400      	br      	0xec	//ec <ckcpu_vsr_table+0xec>
      ee:	0000      	bkpt
      f0:	0400      	br      	0xf0	//f0 <ckcpu_vsr_table+0xf0>
      f2:	0000      	bkpt
      f4:	0400      	br      	0xf4	//f4 <ckcpu_vsr_table+0xf4>
      f6:	0000      	bkpt
      f8:	0400      	br      	0xf8	//f8 <ckcpu_vsr_table+0xf8>
      fa:	0000      	bkpt
      fc:	0400      	br      	0xfc	//fc <ckcpu_vsr_table+0xfc>
      fe:	0000      	bkpt
     100:	0400      	br      	0x100	//100 <ckcpu_vsr_table+0x100>
     102:	0000      	bkpt
     104:	0400      	br      	0x104	//104 <ckcpu_vsr_table+0x104>
     106:	0000      	bkpt
     108:	0400      	br      	0x108	//108 <ckcpu_vsr_table+0x108>
     10a:	0000      	bkpt
     10c:	0400      	br      	0x10c	//10c <ckcpu_vsr_table+0x10c>
     10e:	0000      	bkpt
     110:	0400      	br      	0x110	//110 <ckcpu_vsr_table+0x110>
     112:	0000      	bkpt
     114:	0400      	br      	0x114	//114 <ckcpu_vsr_table+0x114>
     116:	0000      	bkpt
     118:	0400      	br      	0x118	//118 <ckcpu_vsr_table+0x118>
     11a:	0000      	bkpt
     11c:	0400      	br      	0x11c	//11c <ckcpu_vsr_table+0x11c>
     11e:	0000      	bkpt
     120:	0400      	br      	0x120	//120 <ckcpu_vsr_table+0x120>
     122:	0000      	bkpt
     124:	0400      	br      	0x124	//124 <ckcpu_vsr_table+0x124>
     126:	0000      	bkpt
     128:	0400      	br      	0x128	//128 <ckcpu_vsr_table+0x128>
     12a:	0000      	bkpt
     12c:	0400      	br      	0x12c	//12c <ckcpu_vsr_table+0x12c>
     12e:	0000      	bkpt
     130:	0400      	br      	0x130	//130 <ckcpu_vsr_table+0x130>
     132:	0000      	bkpt
     134:	0400      	br      	0x134	//134 <ckcpu_vsr_table+0x134>
     136:	0000      	bkpt
     138:	0400      	br      	0x138	//138 <ckcpu_vsr_table+0x138>
     13a:	0000      	bkpt
     13c:	0400      	br      	0x13c	//13c <ckcpu_vsr_table+0x13c>
     13e:	0000      	bkpt
     140:	0400      	br      	0x140	//140 <ckcpu_vsr_table+0x140>
     142:	0000      	bkpt
     144:	0400      	br      	0x144	//144 <ckcpu_vsr_table+0x144>
     146:	0000      	bkpt
     148:	0400      	br      	0x148	//148 <ckcpu_vsr_table+0x148>
     14a:	0000      	bkpt
     14c:	0400      	br      	0x14c	//14c <ckcpu_vsr_table+0x14c>
     14e:	0000      	bkpt
     150:	0400      	br      	0x150	//150 <ckcpu_vsr_table+0x150>
     152:	0000      	bkpt
     154:	0400      	br      	0x154	//154 <ckcpu_vsr_table+0x154>
     156:	0000      	bkpt
     158:	0400      	br      	0x158	//158 <ckcpu_vsr_table+0x158>
     15a:	0000      	bkpt
     15c:	0400      	br      	0x15c	//15c <ckcpu_vsr_table+0x15c>
     15e:	0000      	bkpt
     160:	0400      	br      	0x160	//160 <ckcpu_vsr_table+0x160>
     162:	0000      	bkpt
     164:	0400      	br      	0x164	//164 <ckcpu_vsr_table+0x164>
     166:	0000      	bkpt
     168:	0400      	br      	0x168	//168 <ckcpu_vsr_table+0x168>
     16a:	0000      	bkpt
     16c:	0400      	br      	0x16c	//16c <ckcpu_vsr_table+0x16c>
     16e:	0000      	bkpt
     170:	0400      	br      	0x170	//170 <ckcpu_vsr_table+0x170>
     172:	0000      	bkpt
     174:	0400      	br      	0x174	//174 <ckcpu_vsr_table+0x174>
     176:	0000      	bkpt
     178:	0400      	br      	0x178	//178 <ckcpu_vsr_table+0x178>
     17a:	0000      	bkpt
     17c:	0400      	br      	0x17c	//17c <ckcpu_vsr_table+0x17c>
     17e:	0000      	bkpt
     180:	0400      	br      	0x180	//180 <ckcpu_vsr_table+0x180>
     182:	0000      	bkpt
     184:	0400      	br      	0x184	//184 <ckcpu_vsr_table+0x184>
     186:	0000      	bkpt
     188:	0400      	br      	0x188	//188 <ckcpu_vsr_table+0x188>
     18a:	0000      	bkpt
     18c:	0400      	br      	0x18c	//18c <ckcpu_vsr_table+0x18c>
     18e:	0000      	bkpt
     190:	0400      	br      	0x190	//190 <ckcpu_vsr_table+0x190>
     192:	0000      	bkpt
     194:	0400      	br      	0x194	//194 <ckcpu_vsr_table+0x194>
     196:	0000      	bkpt
     198:	0400      	br      	0x198	//198 <ckcpu_vsr_table+0x198>
     19a:	0000      	bkpt
     19c:	0400      	br      	0x19c	//19c <ckcpu_vsr_table+0x19c>
     19e:	0000      	bkpt
     1a0:	0400      	br      	0x1a0	//1a0 <ckcpu_vsr_table+0x1a0>
     1a2:	0000      	bkpt
     1a4:	0400      	br      	0x1a4	//1a4 <ckcpu_vsr_table+0x1a4>
     1a6:	0000      	bkpt
     1a8:	0400      	br      	0x1a8	//1a8 <ckcpu_vsr_table+0x1a8>
     1aa:	0000      	bkpt
     1ac:	0400      	br      	0x1ac	//1ac <ckcpu_vsr_table+0x1ac>
     1ae:	0000      	bkpt
     1b0:	0400      	br      	0x1b0	//1b0 <ckcpu_vsr_table+0x1b0>
     1b2:	0000      	bkpt
     1b4:	0400      	br      	0x1b4	//1b4 <ckcpu_vsr_table+0x1b4>
     1b6:	0000      	bkpt
     1b8:	0400      	br      	0x1b8	//1b8 <ckcpu_vsr_table+0x1b8>
     1ba:	0000      	bkpt
     1bc:	0400      	br      	0x1bc	//1bc <ckcpu_vsr_table+0x1bc>
     1be:	0000      	bkpt
     1c0:	0400      	br      	0x1c0	//1c0 <ckcpu_vsr_table+0x1c0>
     1c2:	0000      	bkpt
     1c4:	0400      	br      	0x1c4	//1c4 <ckcpu_vsr_table+0x1c4>
     1c6:	0000      	bkpt
     1c8:	0400      	br      	0x1c8	//1c8 <ckcpu_vsr_table+0x1c8>
     1ca:	0000      	bkpt
     1cc:	0400      	br      	0x1cc	//1cc <ckcpu_vsr_table+0x1cc>
     1ce:	0000      	bkpt
     1d0:	0400      	br      	0x1d0	//1d0 <ckcpu_vsr_table+0x1d0>
     1d2:	0000      	bkpt
     1d4:	0400      	br      	0x1d4	//1d4 <ckcpu_vsr_table+0x1d4>
     1d6:	0000      	bkpt
     1d8:	0400      	br      	0x1d8	//1d8 <ckcpu_vsr_table+0x1d8>
     1da:	0000      	bkpt
     1dc:	0400      	br      	0x1dc	//1dc <ckcpu_vsr_table+0x1dc>
     1de:	0000      	bkpt
     1e0:	0400      	br      	0x1e0	//1e0 <ckcpu_vsr_table+0x1e0>
     1e2:	0000      	bkpt
     1e4:	0400      	br      	0x1e4	//1e4 <ckcpu_vsr_table+0x1e4>
     1e6:	0000      	bkpt
     1e8:	0400      	br      	0x1e8	//1e8 <ckcpu_vsr_table+0x1e8>
     1ea:	0000      	bkpt
     1ec:	0400      	br      	0x1ec	//1ec <ckcpu_vsr_table+0x1ec>
     1ee:	0000      	bkpt
     1f0:	0400      	br      	0x1f0	//1f0 <ckcpu_vsr_table+0x1f0>
     1f2:	0000      	bkpt
     1f4:	0400      	br      	0x1f4	//1f4 <ckcpu_vsr_table+0x1f4>
     1f6:	0000      	bkpt
     1f8:	0400      	br      	0x1f8	//1f8 <ckcpu_vsr_table+0x1f8>
     1fa:	0000      	bkpt
     1fc:	0400      	br      	0x1fc	//1fc <ckcpu_vsr_table+0x1fc>
     1fe:	0000      	bkpt
     200:	0400      	br      	0x200	//200 <ckcpu_vsr_table+0x200>
     202:	0000      	bkpt
     204:	0400      	br      	0x204	//204 <ckcpu_vsr_table+0x204>
     206:	0000      	bkpt
     208:	0400      	br      	0x208	//208 <ckcpu_vsr_table+0x208>
     20a:	0000      	bkpt
     20c:	0400      	br      	0x20c	//20c <ckcpu_vsr_table+0x20c>
     20e:	0000      	bkpt
     210:	0400      	br      	0x210	//210 <ckcpu_vsr_table+0x210>
     212:	0000      	bkpt
     214:	0400      	br      	0x214	//214 <ckcpu_vsr_table+0x214>
     216:	0000      	bkpt
     218:	0400      	br      	0x218	//218 <ckcpu_vsr_table+0x218>
     21a:	0000      	bkpt
     21c:	0400      	br      	0x21c	//21c <ckcpu_vsr_table+0x21c>
     21e:	0000      	bkpt
     220:	0400      	br      	0x220	//220 <ckcpu_vsr_table+0x220>
     222:	0000      	bkpt
     224:	0400      	br      	0x224	//224 <ckcpu_vsr_table+0x224>
     226:	0000      	bkpt
     228:	0400      	br      	0x228	//228 <ckcpu_vsr_table+0x228>
     22a:	0000      	bkpt
     22c:	0400      	br      	0x22c	//22c <ckcpu_vsr_table+0x22c>
     22e:	0000      	bkpt
     230:	0400      	br      	0x230	//230 <ckcpu_vsr_table+0x230>
     232:	0000      	bkpt
     234:	0400      	br      	0x234	//234 <ckcpu_vsr_table+0x234>
     236:	0000      	bkpt
     238:	0400      	br      	0x238	//238 <ckcpu_vsr_table+0x238>
     23a:	0000      	bkpt
     23c:	0400      	br      	0x23c	//23c <ckcpu_vsr_table+0x23c>
     23e:	0000      	bkpt
     240:	0400      	br      	0x240	//240 <ckcpu_vsr_table+0x240>
     242:	0000      	bkpt
     244:	0400      	br      	0x244	//244 <ckcpu_vsr_table+0x244>
     246:	0000      	bkpt
     248:	0400      	br      	0x248	//248 <ckcpu_vsr_table+0x248>
     24a:	0000      	bkpt
     24c:	0400      	br      	0x24c	//24c <ckcpu_vsr_table+0x24c>
     24e:	0000      	bkpt
     250:	0400      	br      	0x250	//250 <ckcpu_vsr_table+0x250>
     252:	0000      	bkpt
     254:	0400      	br      	0x254	//254 <ckcpu_vsr_table+0x254>
     256:	0000      	bkpt
     258:	0400      	br      	0x258	//258 <ckcpu_vsr_table+0x258>
     25a:	0000      	bkpt
     25c:	0400      	br      	0x25c	//25c <ckcpu_vsr_table+0x25c>
     25e:	0000      	bkpt
     260:	0400      	br      	0x260	//260 <ckcpu_vsr_table+0x260>
     262:	0000      	bkpt
     264:	0400      	br      	0x264	//264 <ckcpu_vsr_table+0x264>
     266:	0000      	bkpt
     268:	0400      	br      	0x268	//268 <ckcpu_vsr_table+0x268>
     26a:	0000      	bkpt
     26c:	0400      	br      	0x26c	//26c <ckcpu_vsr_table+0x26c>
     26e:	0000      	bkpt
     270:	0400      	br      	0x270	//270 <ckcpu_vsr_table+0x270>
     272:	0000      	bkpt
     274:	0400      	br      	0x274	//274 <ckcpu_vsr_table+0x274>
     276:	0000      	bkpt
     278:	0400      	br      	0x278	//278 <ckcpu_vsr_table+0x278>
     27a:	0000      	bkpt
     27c:	0400      	br      	0x27c	//27c <ckcpu_vsr_table+0x27c>
     27e:	0000      	bkpt
     280:	0400      	br      	0x280	//280 <ckcpu_vsr_table+0x280>
     282:	0000      	bkpt
     284:	0400      	br      	0x284	//284 <ckcpu_vsr_table+0x284>
     286:	0000      	bkpt
     288:	0400      	br      	0x288	//288 <ckcpu_vsr_table+0x288>
     28a:	0000      	bkpt
     28c:	0400      	br      	0x28c	//28c <ckcpu_vsr_table+0x28c>
     28e:	0000      	bkpt
     290:	0400      	br      	0x290	//290 <ckcpu_vsr_table+0x290>
     292:	0000      	bkpt
     294:	0400      	br      	0x294	//294 <ckcpu_vsr_table+0x294>
     296:	0000      	bkpt
     298:	0400      	br      	0x298	//298 <ckcpu_vsr_table+0x298>
     29a:	0000      	bkpt
     29c:	0400      	br      	0x29c	//29c <ckcpu_vsr_table+0x29c>
     29e:	0000      	bkpt
     2a0:	0400      	br      	0x2a0	//2a0 <ckcpu_vsr_table+0x2a0>
     2a2:	0000      	bkpt
     2a4:	0400      	br      	0x2a4	//2a4 <ckcpu_vsr_table+0x2a4>
     2a6:	0000      	bkpt
     2a8:	0400      	br      	0x2a8	//2a8 <ckcpu_vsr_table+0x2a8>
     2aa:	0000      	bkpt
     2ac:	0400      	br      	0x2ac	//2ac <ckcpu_vsr_table+0x2ac>
     2ae:	0000      	bkpt
     2b0:	0400      	br      	0x2b0	//2b0 <ckcpu_vsr_table+0x2b0>
     2b2:	0000      	bkpt
     2b4:	0400      	br      	0x2b4	//2b4 <ckcpu_vsr_table+0x2b4>
     2b6:	0000      	bkpt
     2b8:	0400      	br      	0x2b8	//2b8 <ckcpu_vsr_table+0x2b8>
     2ba:	0000      	bkpt
     2bc:	0400      	br      	0x2bc	//2bc <ckcpu_vsr_table+0x2bc>
     2be:	0000      	bkpt
     2c0:	0400      	br      	0x2c0	//2c0 <ckcpu_vsr_table+0x2c0>
     2c2:	0000      	bkpt
     2c4:	0400      	br      	0x2c4	//2c4 <ckcpu_vsr_table+0x2c4>
     2c6:	0000      	bkpt
     2c8:	0400      	br      	0x2c8	//2c8 <ckcpu_vsr_table+0x2c8>
     2ca:	0000      	bkpt
     2cc:	0400      	br      	0x2cc	//2cc <ckcpu_vsr_table+0x2cc>
     2ce:	0000      	bkpt
     2d0:	0400      	br      	0x2d0	//2d0 <ckcpu_vsr_table+0x2d0>
     2d2:	0000      	bkpt
     2d4:	0400      	br      	0x2d4	//2d4 <ckcpu_vsr_table+0x2d4>
     2d6:	0000      	bkpt
     2d8:	0400      	br      	0x2d8	//2d8 <ckcpu_vsr_table+0x2d8>
     2da:	0000      	bkpt
     2dc:	0400      	br      	0x2dc	//2dc <ckcpu_vsr_table+0x2dc>
     2de:	0000      	bkpt
     2e0:	0400      	br      	0x2e0	//2e0 <ckcpu_vsr_table+0x2e0>
     2e2:	0000      	bkpt
     2e4:	0400      	br      	0x2e4	//2e4 <ckcpu_vsr_table+0x2e4>
     2e6:	0000      	bkpt
     2e8:	0400      	br      	0x2e8	//2e8 <ckcpu_vsr_table+0x2e8>
     2ea:	0000      	bkpt
     2ec:	0400      	br      	0x2ec	//2ec <ckcpu_vsr_table+0x2ec>
     2ee:	0000      	bkpt
     2f0:	0400      	br      	0x2f0	//2f0 <ckcpu_vsr_table+0x2f0>
     2f2:	0000      	bkpt
     2f4:	0400      	br      	0x2f4	//2f4 <ckcpu_vsr_table+0x2f4>
     2f6:	0000      	bkpt
     2f8:	0400      	br      	0x2f8	//2f8 <ckcpu_vsr_table+0x2f8>
     2fa:	0000      	bkpt
     2fc:	0400      	br      	0x2fc	//2fc <ckcpu_vsr_table+0x2fc>
     2fe:	0000      	bkpt
     300:	0400      	br      	0x300	//300 <ckcpu_vsr_table+0x300>
     302:	0000      	bkpt
     304:	0400      	br      	0x304	//304 <ckcpu_vsr_table+0x304>
     306:	0000      	bkpt
     308:	0400      	br      	0x308	//308 <ckcpu_vsr_table+0x308>
     30a:	0000      	bkpt
     30c:	0400      	br      	0x30c	//30c <ckcpu_vsr_table+0x30c>
     30e:	0000      	bkpt
     310:	0400      	br      	0x310	//310 <ckcpu_vsr_table+0x310>
     312:	0000      	bkpt
     314:	0400      	br      	0x314	//314 <ckcpu_vsr_table+0x314>
     316:	0000      	bkpt
     318:	0400      	br      	0x318	//318 <ckcpu_vsr_table+0x318>
     31a:	0000      	bkpt
     31c:	0400      	br      	0x31c	//31c <ckcpu_vsr_table+0x31c>
     31e:	0000      	bkpt
     320:	0400      	br      	0x320	//320 <ckcpu_vsr_table+0x320>
     322:	0000      	bkpt
     324:	0400      	br      	0x324	//324 <ckcpu_vsr_table+0x324>
     326:	0000      	bkpt
     328:	0400      	br      	0x328	//328 <ckcpu_vsr_table+0x328>
     32a:	0000      	bkpt
     32c:	0400      	br      	0x32c	//32c <ckcpu_vsr_table+0x32c>
     32e:	0000      	bkpt
     330:	0400      	br      	0x330	//330 <ckcpu_vsr_table+0x330>
     332:	0000      	bkpt
     334:	0400      	br      	0x334	//334 <ckcpu_vsr_table+0x334>
     336:	0000      	bkpt
     338:	0400      	br      	0x338	//338 <ckcpu_vsr_table+0x338>
     33a:	0000      	bkpt
     33c:	0400      	br      	0x33c	//33c <ckcpu_vsr_table+0x33c>
     33e:	0000      	bkpt
     340:	0400      	br      	0x340	//340 <ckcpu_vsr_table+0x340>
     342:	0000      	bkpt
     344:	0400      	br      	0x344	//344 <ckcpu_vsr_table+0x344>
     346:	0000      	bkpt
     348:	0400      	br      	0x348	//348 <ckcpu_vsr_table+0x348>
     34a:	0000      	bkpt
     34c:	0400      	br      	0x34c	//34c <ckcpu_vsr_table+0x34c>
     34e:	0000      	bkpt
     350:	0400      	br      	0x350	//350 <ckcpu_vsr_table+0x350>
     352:	0000      	bkpt
     354:	0400      	br      	0x354	//354 <ckcpu_vsr_table+0x354>
     356:	0000      	bkpt
     358:	0400      	br      	0x358	//358 <ckcpu_vsr_table+0x358>
     35a:	0000      	bkpt
     35c:	0400      	br      	0x35c	//35c <ckcpu_vsr_table+0x35c>
     35e:	0000      	bkpt
     360:	0400      	br      	0x360	//360 <ckcpu_vsr_table+0x360>
     362:	0000      	bkpt
     364:	0400      	br      	0x364	//364 <ckcpu_vsr_table+0x364>
     366:	0000      	bkpt
     368:	0400      	br      	0x368	//368 <ckcpu_vsr_table+0x368>
     36a:	0000      	bkpt
     36c:	0400      	br      	0x36c	//36c <ckcpu_vsr_table+0x36c>
     36e:	0000      	bkpt
     370:	0400      	br      	0x370	//370 <ckcpu_vsr_table+0x370>
     372:	0000      	bkpt
     374:	0400      	br      	0x374	//374 <ckcpu_vsr_table+0x374>
     376:	0000      	bkpt
     378:	0400      	br      	0x378	//378 <ckcpu_vsr_table+0x378>
     37a:	0000      	bkpt
     37c:	0400      	br      	0x37c	//37c <ckcpu_vsr_table+0x37c>
     37e:	0000      	bkpt
     380:	0400      	br      	0x380	//380 <ckcpu_vsr_table+0x380>
     382:	0000      	bkpt
     384:	0400      	br      	0x384	//384 <ckcpu_vsr_table+0x384>
     386:	0000      	bkpt
     388:	0400      	br      	0x388	//388 <ckcpu_vsr_table+0x388>
     38a:	0000      	bkpt
     38c:	0400      	br      	0x38c	//38c <ckcpu_vsr_table+0x38c>
     38e:	0000      	bkpt
     390:	0400      	br      	0x390	//390 <ckcpu_vsr_table+0x390>
     392:	0000      	bkpt
     394:	0400      	br      	0x394	//394 <ckcpu_vsr_table+0x394>
     396:	0000      	bkpt
     398:	0400      	br      	0x398	//398 <ckcpu_vsr_table+0x398>
     39a:	0000      	bkpt
     39c:	0400      	br      	0x39c	//39c <ckcpu_vsr_table+0x39c>
     39e:	0000      	bkpt
     3a0:	0400      	br      	0x3a0	//3a0 <ckcpu_vsr_table+0x3a0>
     3a2:	0000      	bkpt
     3a4:	0400      	br      	0x3a4	//3a4 <ckcpu_vsr_table+0x3a4>
     3a6:	0000      	bkpt
     3a8:	0400      	br      	0x3a8	//3a8 <ckcpu_vsr_table+0x3a8>
     3aa:	0000      	bkpt
     3ac:	0400      	br      	0x3ac	//3ac <ckcpu_vsr_table+0x3ac>
     3ae:	0000      	bkpt
     3b0:	0400      	br      	0x3b0	//3b0 <ckcpu_vsr_table+0x3b0>
     3b2:	0000      	bkpt
     3b4:	0400      	br      	0x3b4	//3b4 <ckcpu_vsr_table+0x3b4>
     3b6:	0000      	bkpt
     3b8:	0400      	br      	0x3b8	//3b8 <ckcpu_vsr_table+0x3b8>
     3ba:	0000      	bkpt
     3bc:	0400      	br      	0x3bc	//3bc <ckcpu_vsr_table+0x3bc>
     3be:	0000      	bkpt
     3c0:	0400      	br      	0x3c0	//3c0 <ckcpu_vsr_table+0x3c0>
     3c2:	0000      	bkpt
     3c4:	0400      	br      	0x3c4	//3c4 <ckcpu_vsr_table+0x3c4>
     3c6:	0000      	bkpt
     3c8:	0400      	br      	0x3c8	//3c8 <ckcpu_vsr_table+0x3c8>
     3ca:	0000      	bkpt
     3cc:	0400      	br      	0x3cc	//3cc <ckcpu_vsr_table+0x3cc>
     3ce:	0000      	bkpt
     3d0:	0400      	br      	0x3d0	//3d0 <ckcpu_vsr_table+0x3d0>
     3d2:	0000      	bkpt
     3d4:	0400      	br      	0x3d4	//3d4 <ckcpu_vsr_table+0x3d4>
     3d6:	0000      	bkpt
     3d8:	0400      	br      	0x3d8	//3d8 <ckcpu_vsr_table+0x3d8>
     3da:	0000      	bkpt
     3dc:	0400      	br      	0x3dc	//3dc <ckcpu_vsr_table+0x3dc>
     3de:	0000      	bkpt
     3e0:	0400      	br      	0x3e0	//3e0 <ckcpu_vsr_table+0x3e0>
     3e2:	0000      	bkpt
     3e4:	0400      	br      	0x3e4	//3e4 <ckcpu_vsr_table+0x3e4>
     3e6:	0000      	bkpt
     3e8:	0400      	br      	0x3e8	//3e8 <ckcpu_vsr_table+0x3e8>
     3ea:	0000      	bkpt
     3ec:	0400      	br      	0x3ec	//3ec <ckcpu_vsr_table+0x3ec>
     3ee:	0000      	bkpt
     3f0:	0400      	br      	0x3f0	//3f0 <ckcpu_vsr_table+0x3f0>
     3f2:	0000      	bkpt
     3f4:	0400      	br      	0x3f4	//3f4 <ckcpu_vsr_table+0x3f4>
     3f6:	0000      	bkpt
     3f8:	0400      	br      	0x3f8	//3f8 <ckcpu_vsr_table+0x3f8>
     3fa:	0000      	bkpt
     3fc:	0400      	br      	0x3fc	//3fc <ckcpu_vsr_table+0x3fc>
	...

00000400 <default_exception_handler>:
     400:	0400      	br      	0x400	//400 <default_exception_handler>
     402:	c0004020 	rte
	...

00000408 <hw_vsr_default>:
     408:	1427      	subi      	sp, sp, 28
     40a:	b800      	st.w      	r0, (sp, 0x0)
     40c:	b821      	st.w      	r1, (sp, 0x4)
     40e:	b842      	st.w      	r2, (sp, 0x8)
     410:	b863      	st.w      	r3, (sp, 0xc)
     412:	dd8e2004 	st.w      	r12, (sp, 0x10)
     416:	ddae2005 	st.w      	r13, (sp, 0x14)
     41a:	ddee2006 	st.w      	r15, (sp, 0x18)
     41e:	1422      	subi      	sp, sp, 8
     420:	c0026023 	mfcr      	r3, cr<2, 0>
     424:	b861      	st.w      	r3, (sp, 0x4)
     426:	c0046022 	mfcr      	r2, cr<4, 0>
     42a:	b840      	st.w      	r2, (sp, 0x0)
     42c:	c0006020 	mfcr      	r0, cr<0, 0>
     430:	4810      	lsri      	r0, r0, 16
     432:	327f      	movi      	r2, 127      	//0x7f
     434:	6808      	and      	r0, r2
     436:	e000324b 	bsr      	0x68cc	//68cc <CK_INTC_DefaultService>
     43a:	6e43      	mov      	r9, r0
     43c:	e000023e 	bsr      	0x8b8	//8b8 <__error_p>
     440:	9860      	ld.w      	r3, (sp, 0x0)
     442:	c0036424 	mtcr      	r3, cr<4, 0>
     446:	9841      	ld.w      	r2, (sp, 0x4)
     448:	c0026422 	mtcr      	r2, cr<2, 0>
     44c:	1402      	addi      	sp, sp, 8
     44e:	9800      	ld.w      	r0, (sp, 0x0)
     450:	9821      	ld.w      	r1, (sp, 0x4)
     452:	9842      	ld.w      	r2, (sp, 0x8)
     454:	9863      	ld.w      	r3, (sp, 0xc)
     456:	d98e2004 	ld.w      	r12, (sp, 0x10)
     45a:	d9ae2005 	ld.w      	r13, (sp, 0x14)
     45e:	d9ee2006 	ld.w      	r15, (sp, 0x18)
     462:	1407      	addi      	sp, sp, 28
     464:	e80000e2 	br      	0x628	//628 <__start>

00000468 <hw_vsr_alignment>:
     468:	1427      	subi      	sp, sp, 28
     46a:	b800      	st.w      	r0, (sp, 0x0)
     46c:	b821      	st.w      	r1, (sp, 0x4)
     46e:	b842      	st.w      	r2, (sp, 0x8)
     470:	b863      	st.w      	r3, (sp, 0xc)
     472:	dd8e2004 	st.w      	r12, (sp, 0x10)
     476:	ddae2005 	st.w      	r13, (sp, 0x14)
     47a:	ddee2006 	st.w      	r15, (sp, 0x18)
     47e:	1422      	subi      	sp, sp, 8
     480:	c0026023 	mfcr      	r3, cr<2, 0>
     484:	b861      	st.w      	r3, (sp, 0x4)
     486:	c0046022 	mfcr      	r2, cr<4, 0>
     48a:	b840      	st.w      	r2, (sp, 0x0)
     48c:	c1007420 	psrset      	ee
     490:	6c3b      	mov      	r0, sp
     492:	e000432b 	bsr      	0x8ae8	//8ae8 <CK_INTC_AlignmentService>
     496:	9860      	ld.w      	r3, (sp, 0x0)
     498:	c0036424 	mtcr      	r3, cr<4, 0>
     49c:	9841      	ld.w      	r2, (sp, 0x4)
     49e:	c0026422 	mtcr      	r2, cr<2, 0>
     4a2:	1402      	addi      	sp, sp, 8
     4a4:	9800      	ld.w      	r0, (sp, 0x0)
     4a6:	9821      	ld.w      	r1, (sp, 0x4)
     4a8:	9842      	ld.w      	r2, (sp, 0x8)
     4aa:	9863      	ld.w      	r3, (sp, 0xc)
     4ac:	d98e2004 	ld.w      	r12, (sp, 0x10)
     4b0:	d9ae2005 	ld.w      	r13, (sp, 0x14)
     4b4:	d9ee2006 	ld.w      	r15, (sp, 0x18)
     4b8:	1407      	addi      	sp, sp, 28
     4ba:	c0004020 	rte
	...

000004c0 <hw_vsr_privil>:
     4c0:	c0006426 	mtcr      	r0, cr<6, 0>
     4c4:	c0006020 	mfcr      	r0, cr<0, 0>
     4c8:	38bf      	bseti      	r0, 31
     4ca:	c0006420 	mtcr      	r0, cr<0, 0>
     4ce:	4810      	lsri      	r0, r0, 16
     4d0:	327f      	movi      	r2, 127      	//0x7f
     4d2:	6808      	and      	r0, r2
     4d4:	e00031b0 	bsr      	0x6834	//6834 <CK_INTC_UpdateExceptStatus>
     4d8:	c0066020 	mfcr      	r0, cr<6, 0>
     4dc:	c0004020 	rte

000004e0 <hw_vsr_trap>:
     4e0:	1427      	subi      	sp, sp, 28
     4e2:	b800      	st.w      	r0, (sp, 0x0)
     4e4:	b821      	st.w      	r1, (sp, 0x4)
     4e6:	b842      	st.w      	r2, (sp, 0x8)
     4e8:	b863      	st.w      	r3, (sp, 0xc)
     4ea:	dd8e2004 	st.w      	r12, (sp, 0x10)
     4ee:	ddae2005 	st.w      	r13, (sp, 0x14)
     4f2:	ddee2006 	st.w      	r15, (sp, 0x18)
     4f6:	1422      	subi      	sp, sp, 8
     4f8:	c0026023 	mfcr      	r3, cr<2, 0>
     4fc:	b861      	st.w      	r3, (sp, 0x4)
     4fe:	c0046022 	mfcr      	r2, cr<4, 0>
     502:	b840      	st.w      	r2, (sp, 0x0)
     504:	c0006020 	mfcr      	r0, cr<0, 0>
     508:	4810      	lsri      	r0, r0, 16
     50a:	327f      	movi      	r2, 127      	//0x7f
     50c:	6808      	and      	r0, r2
     50e:	e0003193 	bsr      	0x6834	//6834 <CK_INTC_UpdateExceptStatus>
     512:	6e43      	mov      	r9, r0
     514:	e00001d2 	bsr      	0x8b8	//8b8 <__error_p>
     518:	9860      	ld.w      	r3, (sp, 0x0)
     51a:	c0036424 	mtcr      	r3, cr<4, 0>
     51e:	9841      	ld.w      	r2, (sp, 0x4)
     520:	c0026422 	mtcr      	r2, cr<2, 0>
     524:	1402      	addi      	sp, sp, 8
     526:	9800      	ld.w      	r0, (sp, 0x0)
     528:	9821      	ld.w      	r1, (sp, 0x4)
     52a:	9842      	ld.w      	r2, (sp, 0x8)
     52c:	9863      	ld.w      	r3, (sp, 0xc)
     52e:	d98e2004 	ld.w      	r12, (sp, 0x10)
     532:	d9ae2005 	ld.w      	r13, (sp, 0x14)
     536:	d9ee2006 	ld.w      	r15, (sp, 0x18)
     53a:	1407      	addi      	sp, sp, 28
     53c:	e8000076 	br      	0x628	//628 <__start>

00000540 <hw_vsr_autovec>:
     540:	1427      	subi      	sp, sp, 28
     542:	b800      	st.w      	r0, (sp, 0x0)
     544:	b821      	st.w      	r1, (sp, 0x4)
     546:	b842      	st.w      	r2, (sp, 0x8)
     548:	b863      	st.w      	r3, (sp, 0xc)
     54a:	dd8e2004 	st.w      	r12, (sp, 0x10)
     54e:	ddae2005 	st.w      	r13, (sp, 0x14)
     552:	ddee2006 	st.w      	r15, (sp, 0x18)
     556:	1422      	subi      	sp, sp, 8
     558:	c0026023 	mfcr      	r3, cr<2, 0>
     55c:	b861      	st.w      	r3, (sp, 0x4)
     55e:	c0046022 	mfcr      	r2, cr<4, 0>
     562:	b840      	st.w      	r2, (sp, 0x0)
     564:	c1007420 	psrset      	ee
     568:	ea231900 	movih      	r3, 6400      	//0x1900
     56c:	9300      	ld.w      	r0, (r3, 0x0)
     56e:	327f      	movi      	r2, 127      	//0x7f
     570:	6808      	and      	r0, r2
     572:	281f      	subi      	r0, 32      	//0x20
     574:	e00031cc 	bsr      	0x690c	//690c <CK_INTC_IrqService>
     578:	9860      	ld.w      	r3, (sp, 0x0)
     57a:	c0036424 	mtcr      	r3, cr<4, 0>
     57e:	9841      	ld.w      	r2, (sp, 0x4)
     580:	c0026422 	mtcr      	r2, cr<2, 0>
     584:	1402      	addi      	sp, sp, 8
     586:	9800      	ld.w      	r0, (sp, 0x0)
     588:	9821      	ld.w      	r1, (sp, 0x4)
     58a:	9842      	ld.w      	r2, (sp, 0x8)
     58c:	9863      	ld.w      	r3, (sp, 0xc)
     58e:	d98e2004 	ld.w      	r12, (sp, 0x10)
     592:	d9ae2005 	ld.w      	r13, (sp, 0x14)
     596:	d9ee2006 	ld.w      	r15, (sp, 0x18)
     59a:	1407      	addi      	sp, sp, 28
     59c:	c0004020 	rte

000005a0 <hw_vsr_inthandler>:
     5a0:	1427      	subi      	sp, sp, 28
     5a2:	b800      	st.w      	r0, (sp, 0x0)
     5a4:	b821      	st.w      	r1, (sp, 0x4)
     5a6:	b842      	st.w      	r2, (sp, 0x8)
     5a8:	b863      	st.w      	r3, (sp, 0xc)
     5aa:	dd8e2004 	st.w      	r12, (sp, 0x10)
     5ae:	ddae2005 	st.w      	r13, (sp, 0x14)
     5b2:	ddee2006 	st.w      	r15, (sp, 0x18)
     5b6:	1422      	subi      	sp, sp, 8
     5b8:	c0026023 	mfcr      	r3, cr<2, 0>
     5bc:	b861      	st.w      	r3, (sp, 0x4)
     5be:	c0046022 	mfcr      	r2, cr<4, 0>
     5c2:	b840      	st.w      	r2, (sp, 0x0)
     5c4:	c1007420 	psrset      	ee
     5c8:	c0006020 	mfcr      	r0, cr<0, 0>
     5cc:	4810      	lsri      	r0, r0, 16
     5ce:	327f      	movi      	r2, 127      	//0x7f
     5d0:	6808      	and      	r0, r2
     5d2:	281f      	subi      	r0, 32      	//0x20
     5d4:	e000319c 	bsr      	0x690c	//690c <CK_INTC_IrqService>
     5d8:	9860      	ld.w      	r3, (sp, 0x0)
     5da:	c0036424 	mtcr      	r3, cr<4, 0>
     5de:	9841      	ld.w      	r2, (sp, 0x4)
     5e0:	c0026422 	mtcr      	r2, cr<2, 0>
     5e4:	1402      	addi      	sp, sp, 8
     5e6:	9800      	ld.w      	r0, (sp, 0x0)
     5e8:	9821      	ld.w      	r1, (sp, 0x4)
     5ea:	9842      	ld.w      	r2, (sp, 0x8)
     5ec:	9863      	ld.w      	r3, (sp, 0xc)
     5ee:	d98e2004 	ld.w      	r12, (sp, 0x10)
     5f2:	d9ae2005 	ld.w      	r13, (sp, 0x14)
     5f6:	d9ee2006 	ld.w      	r15, (sp, 0x18)
     5fa:	1407      	addi      	sp, sp, 28
     5fc:	c0004020 	rte

00000600 <hw_vsr_fiqautovec>:
     600:	ea231900 	movih      	r3, 6400      	//0x1900
     604:	9300      	ld.w      	r0, (r3, 0x0)
     606:	327f      	movi      	r2, 127      	//0x7f
     608:	6808      	and      	r0, r2
     60a:	281f      	subi      	r0, 32      	//0x20
     60c:	e00031b6 	bsr      	0x6978	//6978 <CK_INTC_FiqService>
     610:	c0004420 	rfi

00000614 <hw_vsr_fiqhandler>:
     614:	c0006020 	mfcr      	r0, cr<0, 0>
     618:	4810      	lsri      	r0, r0, 16
     61a:	327f      	movi      	r2, 127      	//0x7f
     61c:	6808      	and      	r0, r2
     61e:	281f      	subi      	r0, 32      	//0x20
     620:	e00031ac 	bsr      	0x6978	//6978 <CK_INTC_FiqService>
     624:	c0004420 	rfi

00000628 <__start>:
     628:	ea238000 	movih      	r3, 32768      	//0x8000
     62c:	3ba8      	bseti      	r3, 8
     62e:	c0036420 	mtcr      	r3, cr<0, 0>
     632:	c0116023 	mfcr      	r3, cr<17, 0>
     636:	3bb0      	bseti      	r3, 16
     638:	3bb1      	bseti      	r3, 17
     63a:	c0036431 	mtcr      	r3, cr<17, 0>
     63e:	ea800098 	lrw      	r0, 0x12345678	//12345678 <__stack+0x11f45680>
     642:	ea810098 	lrw      	r1, 0x11280	//11280 <reset_status>
     646:	9140      	ld.w      	r2, (r1, 0x0)
     648:	6482      	cmpne      	r0, r2
     64a:	087d      	bt      	0x744	//744 <__create_page_table>

0000064c <warm_reset>:
     64c:	6fbb      	mov      	sp, sp
     64e:	6fbb      	mov      	sp, sp
     650:	6fbb      	mov      	sp, sp
     652:	6fbb      	mov      	sp, sp
     654:	6fbb      	mov      	sp, sp
     656:	6fbb      	mov      	sp, sp
     658:	6fbb      	mov      	sp, sp
     65a:	6fbb      	mov      	sp, sp
     65c:	3000      	movi      	r0, 0      	//0x0
     65e:	3100      	movi      	r1, 0      	//0x0
     660:	3200      	movi      	r2, 0      	//0x0
     662:	3300      	movi      	r3, 0      	//0x0
     664:	3400      	movi      	r4, 0      	//0x0
     666:	3500      	movi      	r5, 0      	//0x0
     668:	3600      	movi      	r6, 0      	//0x0
     66a:	3700      	movi      	r7, 0      	//0x0
     66c:	ea080000 	movi      	r8, 0      	//0x0
     670:	ea090000 	movi      	r9, 0      	//0x0
     674:	ea0a0000 	movi      	r10, 0      	//0x0
     678:	ea0b0000 	movi      	r11, 0      	//0x0
     67c:	ea0c0000 	movi      	r12, 0      	//0x0
     680:	ea0d0000 	movi      	r13, 0      	//0x0
     684:	ea0e0000 	movi      	sp, 0      	//0x0
     688:	ea0f0000 	movi      	r15, 0      	//0x0
     68c:	ea100000 	movi      	r16, 0      	//0x0
     690:	ea110000 	movi      	r17, 0      	//0x0
     694:	ea120000 	movi      	r18, 0      	//0x0
     698:	ea130000 	movi      	r19, 0      	//0x0
     69c:	ea140000 	movi      	r20, 0      	//0x0
     6a0:	ea150000 	movi      	r21, 0      	//0x0
     6a4:	ea160000 	movi      	r22, 0      	//0x0
     6a8:	ea170000 	movi      	r23, 0      	//0x0
     6ac:	ea180000 	movi      	r24, 0      	//0x0
     6b0:	ea190000 	movi      	r25, 0      	//0x0
     6b4:	ea1a0000 	movi      	r26, 0      	//0x0
     6b8:	ea1b0000 	movi      	r27, 0      	//0x0
     6bc:	ea1c0000 	movi      	r28, 0      	//0x0
     6c0:	ea1d0000 	movi      	r29, 0      	//0x0
     6c4:	ea1e0000 	movi      	r30, 0      	//0x0
     6c8:	ea1f0000 	movi      	r31, 0      	//0x0
     6cc:	ea208000 	movih      	r0, 32768      	//0x8000
     6d0:	c0006420 	mtcr      	r0, cr<0, 0>
     6d4:	3000      	movi      	r0, 0      	//0x0
     6d6:	c0006421 	mtcr      	r0, cr<1, 0>
     6da:	c000642b 	mtcr      	r0, cr<11, 0>
     6de:	c0006431 	mtcr      	r0, cr<17, 0>
     6e2:	c0006432 	mtcr      	r0, cr<18, 0>
     6e6:	c0006436 	mtcr      	r0, cr<22, 0>
     6ea:	c0006437 	mtcr      	r0, cr<23, 0>
     6ee:	c0006438 	mtcr      	r0, cr<24, 0>
     6f2:	c000643f 	mtcr      	r0, cr<31, 0>
     6f6:	c1e06420 	mtcr      	r0, cr<0, 15>
     6fa:	c1e06422 	mtcr      	r0, cr<2, 15>
     6fe:	c1e06423 	mtcr      	r0, cr<3, 15>
     702:	c1e06424 	mtcr      	r0, cr<4, 15>
     706:	c1e06426 	mtcr      	r0, cr<6, 15>
     70a:	c1e06428 	mtcr      	r0, cr<8, 15>
     70e:	c1e0643d 	mtcr      	r0, cr<29, 15>
     712:	c1e0643e 	mtcr      	r0, cr<30, 15>
     716:	c1e0643f 	mtcr      	r0, cr<31, 15>
     71a:	c0116023 	mfcr      	r3, cr<17, 0>
     71e:	3bb0      	bseti      	r3, 16
     720:	3bb1      	bseti      	r3, 17
     722:	c0036431 	mtcr      	r3, cr<17, 0>
     726:	1300      	lrw      	r0, 0x11284	//11284 <exception_status_addr>
     728:	3100      	movi      	r1, 0      	//0x0
     72a:	d0200022 	ldr.b      	r2, (r0, r1<<0)
     72e:	c4e22880 	btsti      	r2, 7
     732:	0c06      	bf      	0x73e	//73e <warm_reset+0xf2>
     734:	e442200f 	andi      	r2, r2, 15
     738:	3a01      	cmphsi      	r2, 2      	//0x2
     73a:	e860fe63 	bt      	0x400	//400 <default_exception_handler>
     73e:	2100      	addi      	r1, 1      	//0x1
     740:	3907      	cmphsi      	r1, 8      	//0x8
     742:	0ff4      	bf      	0x72a	//72a <warm_reset+0xde>

00000744 <__create_page_table>:
     744:	c0126023 	mfcr      	r3, cr<18, 0>
     748:	3b80      	bclri      	r3, 0
     74a:	3b81      	bclri      	r3, 1
     74c:	c0036432 	mtcr      	r3, cr<18, 0>
     750:	3100      	movi      	r1, 0      	//0x0
     752:	c1e16422 	mtcr      	r1, cr<2, 15>
     756:	c1e16423 	mtcr      	r1, cr<3, 15>
     75a:	c1e16426 	mtcr      	r1, cr<6, 15>
     75e:	ea200400 	movih      	r0, 1024      	//0x400
     762:	c1e06428 	mtcr      	r0, cr<8, 15>
     766:	ea261800 	movih      	r6, 6144      	//0x1800
     76a:	ea070fff 	movi      	r7, 4095      	//0xfff
     76e:	ea080001 	movi      	r8, 1      	//0x1
     772:	ea090019 	movi      	r9, 25      	//0x19
     776:	ea0a0019 	movi      	r10, 25      	//0x19
     77a:	ea0b0208 	movi      	r11, 520      	//0x208
     77e:	ea0c0016 	movi      	r12, 22      	//0x16
     782:	e0000066 	bsr      	0x84e	//84e <__fill_tlb>
     786:	ea260c00 	movih      	r6, 3072      	//0xc00
     78a:	ea070fff 	movi      	r7, 4095      	//0xfff
     78e:	ea080001 	movi      	r8, 1      	//0x1
     792:	ea090019 	movi      	r9, 25      	//0x19
     796:	ea0a0019 	movi      	r10, 25      	//0x19
     79a:	ea0b020a 	movi      	r11, 522      	//0x20a
     79e:	ea0c0016 	movi      	r12, 22      	//0x16
     7a2:	e0000056 	bsr      	0x84e	//84e <__fill_tlb>
     7a6:	ea261a00 	movih      	r6, 6656      	//0x1a00
     7aa:	ea070fff 	movi      	r7, 4095      	//0xfff
     7ae:	ea080001 	movi      	r8, 1      	//0x1
     7b2:	ea090019 	movi      	r9, 25      	//0x19
     7b6:	ea0a0019 	movi      	r10, 25      	//0x19
     7ba:	ea0b0209 	movi      	r11, 521      	//0x209
     7be:	ea0c0016 	movi      	r12, 22      	//0x16
     7c2:	e0000046 	bsr      	0x84e	//84e <__fill_tlb>
     7c6:	3600      	movi      	r6, 0      	//0x0
     7c8:	370f      	movi      	r7, 15      	//0xf
     7ca:	ea080020 	movi      	r8, 32      	//0x20
     7ce:	ea090011 	movi      	r9, 17      	//0x11
     7d2:	ea0a0013 	movi      	r10, 19      	//0x13
     7d6:	ea0b0000 	movi      	r11, 0      	//0x0
     7da:	ea0c001e 	movi      	r12, 30      	//0x1e
     7de:	e0000038 	bsr      	0x84e	//84e <__fill_tlb>
     7e2:	ea208000 	movih      	r0, 32768      	//0x8000
     7e6:	3106      	movi      	r1, 6      	//0x6
     7e8:	6c04      	or      	r0, r1
     7ea:	c1e0643e 	mtcr      	r0, cr<30, 15>
     7ee:	ea20a000 	movih      	r0, 40960      	//0xa000
     7f2:	3106      	movi      	r1, 6      	//0x6
     7f4:	6c04      	or      	r0, r1
     7f6:	c1e0643f 	mtcr      	r0, cr<31, 15>
     7fa:	c0126023 	mfcr      	r3, cr<18, 0>
     7fe:	3bab      	bseti      	r3, 11
     800:	3ba6      	bseti      	r3, 6
     802:	3ba5      	bseti      	r3, 5
     804:	3ba4      	bseti      	r3, 4
     806:	c0036432 	mtcr      	r3, cr<18, 0>
     80a:	c0126023 	mfcr      	r3, cr<18, 0>
     80e:	3ba0      	bseti      	r3, 0
     810:	3b81      	bclri      	r3, 1
     812:	c0036432 	mtcr      	r3, cr<18, 0>
     816:	ea080080 	movi      	r8, 128      	//0x80
     81a:	ea090000 	movi      	r9, 0      	//0x0
     81e:	e000005a 	bsr      	0x8d2	//8d2 <__tlb_print>
     822:	ea080004 	movi      	r8, 4      	//0x4
     826:	ea090208 	movi      	r9, 520      	//0x208
     82a:	1140      	lrw      	r2, 0x0	// from address pool at 0x8a8
     82c:	c0026421 	mtcr      	r2, cr<1, 0>
     830:	107f      	lrw      	r3, 0x134c0	//134c0 <__bss_start>
     832:	1140      	lrw      	r2, 0x13ac0	//13ac0 <__ebss>
     834:	608e      	subu      	r2, r3
     836:	4a42      	lsri      	r2, r2, 2
     838:	3100      	movi      	r1, 0      	//0x0
     83a:	b320      	st.w      	r1, (r3, 0x0)
     83c:	2303      	addi      	r3, 4      	//0x4
     83e:	c4221082 	decne      	r2, r2, 1
     842:	0bfc      	bt      	0x83a	//83a <__create_page_table+0xf6>
     844:	107c      	lrw      	r3, 0x3ffff8	//3ffff8 <__stack>
     846:	6f8f      	mov      	sp, r3

00000848 <__goto_c>:
     848:	e00000f4 	bsr      	0xa30	//a30 <main>

0000084c <__exit>:
	...

0000084e <__fill_tlb>:
     84e:	6f7f      	mov      	r13, r15
     850:	3400      	movi      	r4, 0      	//0x0
     852:	c5244023 	lsl      	r3, r4, r9
     856:	60d8      	addu      	r3, r6
     858:	c1e36424 	mtcr      	r3, cr<4, 15>
     85c:	474d      	lsli      	r2, r7, 13
     85e:	c1e26426 	mtcr      	r2, cr<6, 15>
     862:	c5444025 	lsl      	r5, r4, r10
     866:	6158      	addu      	r5, r6
     868:	6c73      	mov      	r1, r12
     86a:	6c54      	or      	r1, r5
     86c:	c1e16422 	mtcr      	r1, cr<2, 15>
     870:	e4491000 	subi      	r2, r9, 1      	//0x1
     874:	3301      	movi      	r3, 1      	//0x1
     876:	70c8      	lsl      	r3, r2
     878:	614c      	addu      	r5, r3
     87a:	6c33      	mov      	r0, r12
     87c:	6c14      	or      	r0, r5
     87e:	c1e06423 	mtcr      	r0, cr<3, 15>
     882:	c5640022 	addu      	r2, r4, r11
     886:	c1e26420 	mtcr      	r2, cr<0, 15>
     88a:	ea202000 	movih      	r0, 8192      	//0x2000
     88e:	c1e06428 	mtcr      	r0, cr<8, 15>
     892:	2400      	addi      	r4, 1      	//0x1
     894:	6610      	cmphs      	r4, r8
     896:	0fde      	bf      	0x852	//852 <__fill_tlb+0x4>
     898:	7834      	jmp      	r13
     89a:	0000      	.short	0x0000
     89c:	12345678 	.long	0x12345678
     8a0:	00011280 	.long	0x00011280
     8a4:	00011284 	.long	0x00011284
     8a8:	00000000 	.long	0x00000000
     8ac:	000134c0 	.long	0x000134c0
     8b0:	00013ac0 	.long	0x00013ac0
     8b4:	003ffff8 	.long	0x003ffff8

000008b8 <__error_p>:
     8b8:	6eff      	mov      	r11, r15
     8ba:	1016      	lrw      	r0, 0x112a8	//112a8 <str_p1>
     8bc:	6c27      	mov      	r0, r9
     8be:	1016      	lrw      	r0, 0x112cd	//112cd <str_p2>
     8c0:	6fbb      	mov      	sp, sp
     8c2:	6fbb      	mov      	sp, sp
     8c4:	6fbb      	mov      	sp, sp
     8c6:	6fbb      	mov      	sp, sp
     8c8:	6fbb      	mov      	sp, sp
     8ca:	6fbb      	mov      	sp, sp
     8cc:	6fbb      	mov      	sp, sp
     8ce:	6fbb      	mov      	sp, sp
     8d0:	782c      	jmp      	r11

000008d2 <__tlb_print>:
     8d2:	6eff      	mov      	r11, r15
     8d4:	3400      	movi      	r4, 0      	//0x0
     8d6:	1011      	lrw      	r0, 0x112d1	//112d1 <str_p3>
     8d8:	c5240022 	addu      	r2, r4, r9
     8dc:	c1e26420 	mtcr      	r2, cr<0, 15>
     8e0:	ea204000 	movih      	r0, 16384      	//0x4000
     8e4:	c1e06428 	mtcr      	r0, cr<8, 15>
     8e8:	c1e46020 	mfcr      	r0, cr<4, 15>
     8ec:	480b      	lsri      	r0, r0, 11
     8ee:	c1e26020 	mfcr      	r0, cr<2, 15>
     8f2:	c1e36020 	mfcr      	r0, cr<3, 15>
     8f6:	2400      	addi      	r4, 1      	//0x1
     8f8:	6610      	cmphs      	r4, r8
     8fa:	0fee      	bf      	0x8d6	//8d6 <__tlb_print+0x4>
     8fc:	1008      	lrw      	r0, 0x112e6	//112e6 <str_p4>
     8fe:	6fbb      	mov      	sp, sp
     900:	6fbb      	mov      	sp, sp
     902:	6fbb      	mov      	sp, sp
     904:	6fbb      	mov      	sp, sp
     906:	6fbb      	mov      	sp, sp
     908:	6fbb      	mov      	sp, sp
     90a:	6fbb      	mov      	sp, sp
     90c:	6fbb      	mov      	sp, sp
     90e:	782c      	jmp      	r11
     910:	000112a8 	.long	0x000112a8
     914:	000112cd 	.long	0x000112cd
     918:	000112d1 	.long	0x000112d1
     91c:	000112e6 	.long	0x000112e6

00000920 <CK_Drivers_Init>:

/*
 * initialize the device registered
 */
static void CK_Drivers_Init(void)
{
     920:	14d0      	push      	r15
	CK_Uart_DriverInit();
     922:	e0006601 	bsr      	0xd524	//d524 <CK_Uart_DriverInit>
     926:	c4004820 	lsli      	r0, r0, 0
    CK_INTC_Init();
     92a:	e0002ce1 	bsr      	0x62ec	//62ec <CK_INTC_Init>
     92e:	c4004820 	lsli      	r0, r0, 0
}
     932:	1490      	pop      	r15

00000934 <CK_Console_CallBack>:


static void CK_Console_CallBack(CK_INT8 error)
{
     934:	14d0      	push      	r15
     936:	1421      	subi      	sp, sp, 4
     938:	6c83      	mov      	r2, r0
     93a:	6cfb      	mov      	r3, sp
     93c:	a340      	st.b      	r2, (r3, 0x0)
  if(error==CK_Uart_CTRL_C)
     93e:	6cfb      	mov      	r3, sp
     940:	8360      	ld.b      	r3, (r3, 0x0)
     942:	74ce      	sextb      	r3, r3
     944:	e9230009 	bnez      	r3, 0x956	//956 <CK_Console_CallBack+0x22>
  {
    CK_UART_ClearRxBuffer(consoleuart);
     948:	106c      	lrw      	r3, 0x134c0	//134c0 <__bss_start>
     94a:	9360      	ld.w      	r3, (r3, 0x0)
     94c:	6c0f      	mov      	r0, r3
     94e:	e00067e1 	bsr      	0xd910	//d910 <CK_UART_ClearRxBuffer>
     952:	c4004820 	lsli      	r0, r0, 0
  }
}
     956:	1401      	addi      	sp, sp, 4
     958:	1490      	pop      	r15
	...

0000095c <CK_Console_Init>:

static void CK_Console_Init()
{
     95c:	14d0      	push      	r15
  CK_Uart_Open(consoleuart,CK_Console_CallBack);
     95e:	1067      	lrw      	r3, 0x134c0	//134c0 <__bss_start>
     960:	9360      	ld.w      	r3, (r3, 0x0)
     962:	6c0f      	mov      	r0, r3
     964:	1027      	lrw      	r1, 0x934	//934 <CK_Console_CallBack>
     966:	e000626b 	bsr      	0xce3c	//ce3c <CK_Uart_Open>
     96a:	c4004820 	lsli      	r0, r0, 0
}
     96e:	1490      	pop      	r15
     970:	0000d524 	.long	0x0000d524
     974:	000062ec 	.long	0x000062ec
     978:	000134c0 	.long	0x000134c0
     97c:	0000d910 	.long	0x0000d910
     980:	00000934 	.long	0x00000934
     984:	0000ce3c 	.long	0x0000ce3c

00000988 <IP_Test>:

void IP_Test(void)
{
     988:	14d0      	push      	r15

	printf ("Step1:Test rtc\n");
     98a:	101d      	lrw      	r0, 0xfbb0	//fbb0 <__etext>
     98c:	e0006fe2 	bsr      	0xe950	//e950 <printf>
     990:	c4004820 	lsli      	r0, r0, 0
	RTC_Test2();
     994:	e0005682 	bsr      	0xb698	//b698 <RTC_Test2>
     998:	c4004820 	lsli      	r0, r0, 0

	printf ("Step2:Test timer\n");
     99c:	101b      	lrw      	r0, 0xfbc0	//fbc0 <__etext+0x10>
     99e:	e0006fd9 	bsr      	0xe950	//e950 <printf>
     9a2:	c4004820 	lsli      	r0, r0, 0
	CK_Timer_Test();
     9a6:	e0005ed7 	bsr      	0xc754	//c754 <CK_Timer_Test>
     9aa:	c4004820 	lsli      	r0, r0, 0

	printf ("Step3:Test dma signal \n");
     9ae:	1019      	lrw      	r0, 0xfbd4	//fbd4 <__etext+0x24>
     9b0:	e0006fd0 	bsr      	0xe950	//e950 <printf>
     9b4:	c4004820 	lsli      	r0, r0, 0
	test_dma_singal_allchan(1);
     9b8:	3001      	movi      	r0, 1      	//0x1
     9ba:	e0001529 	bsr      	0x340c	//340c <test_dma_singal_allchan>
     9be:	c4004820 	lsli      	r0, r0, 0

	printf ("Step4:Test dma lli \n");
     9c2:	1016      	lrw      	r0, 0xfbec	//fbec <__etext+0x3c>
     9c4:	e0006fc6 	bsr      	0xe950	//e950 <printf>
     9c8:	c4004820 	lsli      	r0, r0, 0
	test_dma_lli_allchan(1);
     9cc:	3001      	movi      	r0, 1      	//0x1
     9ce:	e00006f7 	bsr      	0x17bc	//17bc <test_dma_lli_allchan>
     9d2:	c4004820 	lsli      	r0, r0, 0

	//printf ("Step5:Test IIC \n");   // not available for Simulation
	//I2C_Test_For_EEPROM();

	printf ("Step6:Test gpio\n");
     9d6:	1013      	lrw      	r0, 0xfc04	//fc04 <__etext+0x54>
     9d8:	e0006fbc 	bsr      	0xe950	//e950 <printf>
     9dc:	c4004820 	lsli      	r0, r0, 0
	GPIO_test2();
     9e0:	e0001d28 	bsr      	0x4430	//4430 <GPIO_test2>
     9e4:	c4004820 	lsli      	r0, r0, 0

	printf ("Step7:Test wdt\n");
     9e8:	1010      	lrw      	r0, 0xfc18	//fc18 <__etext+0x68>
     9ea:	e0006fb3 	bsr      	0xe950	//e950 <printf>
     9ee:	c4004820 	lsli      	r0, r0, 0
	WDT_Test1();
     9f2:	e0006b5b 	bsr      	0xe0a8	//e0a8 <WDT_Test1>
     9f6:	c4004820 	lsli      	r0, r0, 0

}
     9fa:	1490      	pop      	r15
     9fc:	0000fbb0 	.long	0x0000fbb0
     a00:	0000e950 	.long	0x0000e950
     a04:	0000b698 	.long	0x0000b698
     a08:	0000fbc0 	.long	0x0000fbc0
     a0c:	0000c754 	.long	0x0000c754
     a10:	0000fbd4 	.long	0x0000fbd4
     a14:	0000340c 	.long	0x0000340c
     a18:	0000fbec 	.long	0x0000fbec
     a1c:	000017bc 	.long	0x000017bc
     a20:	0000fc04 	.long	0x0000fc04
     a24:	00004430 	.long	0x00004430
     a28:	0000fc18 	.long	0x0000fc18
     a2c:	0000e0a8 	.long	0x0000e0a8

00000a30 <main>:

/*
 * the main function of Uart demo project
 */
int main ( void )
{
     a30:	14d0      	push      	r15

#ifdef CONFIG_CPU_HAS_FPU
	init_fpu();
#endif

    CK_Drivers_Init();
     a32:	e3ffff77 	bsr      	0x920	//920 <CK_Drivers_Init>
     a36:	c4004820 	lsli      	r0, r0, 0
    CK_Exception_Init();
     a3a:	e0002ea9 	bsr      	0x678c	//678c <CK_Exception_Init>
     a3e:	c4004820 	lsli      	r0, r0, 0
    CK_Console_Init();
     a42:	e3ffff8d 	bsr      	0x95c	//95c <CK_Console_Init>
     a46:	c4004820 	lsli      	r0, r0, 0

    printf("Begin to test IP\n");
     a4a:	1009      	lrw      	r0, 0xfc28	//fc28 <__etext+0x78>
     a4c:	e0006f82 	bsr      	0xe950	//e950 <printf>
     a50:	c4004820 	lsli      	r0, r0, 0
    //test_dma_singal_allchan(8);
    //test_dma_lli_allchan(8);
    //GPIO_test2();
    //I2C_Test_For_EEPROM(); //not available for Simulation
    //WDT_Test1();
	pci_altera_rc_test();
     a54:	e0005430 	bsr      	0xb2b4	//b2b4 <pci_altera_rc_test>
     a58:	c4004820 	lsli      	r0, r0, 0

    while(1);
     a5c:	0400      	br      	0xa5c	//a5c <main+0x2c>
     a5e:	0000      	.short	0x0000
     a60:	00000920 	.long	0x00000920
     a64:	0000678c 	.long	0x0000678c
     a68:	0000095c 	.long	0x0000095c
     a6c:	0000fc28 	.long	0x0000fc28
     a70:	0000e950 	.long	0x0000e950
     a74:	0000b2b4 	.long	0x0000b2b4

00000a78 <ATL_Init>:
#include "atl.h"

Bit32u ATL_Init() // return 0 if no error, otherwiths non 0
{
     *(Bit32u *)ATL_ACR_OFFSET = 0x7;
     a78:	3328      	movi      	r3, 40      	//0x28
     a7a:	3207      	movi      	r2, 7      	//0x7
     a7c:	b340      	st.w      	r2, (r3, 0x0)
     return 0;
     a7e:	3300      	movi      	r3, 0      	//0x0
}
     a80:	6c0f      	mov      	r0, r3
     a82:	783c      	rts

00000a84 <ATL_Completion_Check>:
Bit32u ATL_Completion_Check()// check whether the ATL work has complete.
{
     a84:	1421      	subi      	sp, sp, 4
	Bit32u ater = *(Bit32u *)ATL_ATER_OFFSET;
     a86:	3230      	movi      	r2, 48      	//0x30
     a88:	6cfb      	mov      	r3, sp
     a8a:	9240      	ld.w      	r2, (r2, 0x0)
     a8c:	b340      	st.w      	r2, (r3, 0x0)
     return (ater >> 10) & 0x1;
     a8e:	6cfb      	mov      	r3, sp
     a90:	9360      	ld.w      	r3, (r3, 0x0)
     a92:	4b6a      	lsri      	r3, r3, 10
     a94:	e4632001 	andi      	r3, r3, 1
}
     a98:	6c0f      	mov      	r0, r3
     a9a:	1401      	addi      	sp, sp, 4
     a9c:	783c      	rts
	...

00000aa0 <ATL_Interrupt_handler_Register>:
Bit32u ATL_Interrupt_handler_Register(void*func) // return 0 if no error, otherwiths non 0
{
     aa0:	1421      	subi      	sp, sp, 4
     aa2:	6cfb      	mov      	r3, sp
     aa4:	b300      	st.w      	r0, (r3, 0x0)
    //register handler to interrupt;
	return 0;
     aa6:	3300      	movi      	r3, 0      	//0x0
}
     aa8:	6c0f      	mov      	r0, r3
     aaa:	1401      	addi      	sp, sp, 4
     aac:	783c      	rts
	...

00000ab0 <ATL_CPU_State_set>:

Bit32u ATL_CPU_State_set(Bit32u Reg_id, Bit64u value)
{
     ab0:	14c1      	push      	r4
     ab2:	1423      	subi      	sp, sp, 12
     ab4:	1b02      	addi      	r3, sp, 8
     ab6:	b300      	st.w      	r0, (r3, 0x0)
     ab8:	6cfb      	mov      	r3, sp
     aba:	b320      	st.w      	r1, (r3, 0x0)
     abc:	b341      	st.w      	r2, (r3, 0x4)
	 *(Bit64u *)(ATL_CPU_STATE_ADDR(Reg_id)) = value;
     abe:	1b02      	addi      	r3, sp, 8
     ac0:	9360      	ld.w      	r3, (r3, 0x0)
     ac2:	23ff      	addi      	r3, 256      	//0x100
     ac4:	4363      	lsli      	r3, r3, 3
     ac6:	6c8f      	mov      	r2, r3
     ac8:	6cfb      	mov      	r3, sp
     aca:	9381      	ld.w      	r4, (r3, 0x4)
     acc:	9360      	ld.w      	r3, (r3, 0x0)
     ace:	b260      	st.w      	r3, (r2, 0x0)
     ad0:	b281      	st.w      	r4, (r2, 0x4)
	 return 0;
     ad2:	3300      	movi      	r3, 0      	//0x0
}
     ad4:	6c0f      	mov      	r0, r3
     ad6:	1403      	addi      	sp, sp, 12
     ad8:	1481      	pop      	r4
	...

00000adc <ATL_CPU_State_get>:
Bit32u ATL_CPU_State_get(Bit32u Reg_id, Bit64u *value)
{
     adc:	14c1      	push      	r4
     ade:	1422      	subi      	sp, sp, 8
     ae0:	1b01      	addi      	r3, sp, 4
     ae2:	b300      	st.w      	r0, (r3, 0x0)
     ae4:	6cfb      	mov      	r3, sp
     ae6:	b320      	st.w      	r1, (r3, 0x0)
	*value = *(Bit64u *)(ATL_CPU_STATE_ADDR(Reg_id)) ;
     ae8:	1b01      	addi      	r3, sp, 4
     aea:	9360      	ld.w      	r3, (r3, 0x0)
     aec:	23ff      	addi      	r3, 256      	//0x100
     aee:	4363      	lsli      	r3, r3, 3
     af0:	9381      	ld.w      	r4, (r3, 0x4)
     af2:	9360      	ld.w      	r3, (r3, 0x0)
     af4:	6cbb      	mov      	r2, sp
     af6:	9240      	ld.w      	r2, (r2, 0x0)
     af8:	b260      	st.w      	r3, (r2, 0x0)
     afa:	b281      	st.w      	r4, (r2, 0x4)
    return 0;
     afc:	3300      	movi      	r3, 0      	//0x0
}
     afe:	6c0f      	mov      	r0, r3
     b00:	1402      	addi      	sp, sp, 8
     b02:	1481      	pop      	r4

00000b04 <ATL_FMT_Table_Set>:

Bit32u ATL_FMT_Table_Set(Bit32u fmt_index, Bit64u gpa_base, Bit64u gpa_top, Bit64u hpa_offset)
{
     b04:	1421      	subi      	sp, sp, 4
     b06:	14c1      	push      	r4
     b08:	1423      	subi      	sp, sp, 12
     b0a:	e58e0007 	addi      	r12, sp, 8      	//0x8
     b0e:	dc0c2000 	st.w      	r0, (r12, 0x0)
     b12:	6c3b      	mov      	r0, sp
     b14:	b020      	st.w      	r1, (r0, 0x0)
     b16:	b041      	st.w      	r2, (r0, 0x4)
     b18:	b864      	st.w      	r3, (sp, 0x10)
	*(Bit64u*)(ATL_MMT_ENTRY_ADDR(fmt_index)) = gpa_base;
     b1a:	1b02      	addi      	r3, sp, 8
     b1c:	9360      	ld.w      	r3, (r3, 0x0)
     b1e:	e46301ff 	addi      	r3, r3, 512      	//0x200
     b22:	4363      	lsli      	r3, r3, 3
     b24:	6c8f      	mov      	r2, r3
     b26:	6cfb      	mov      	r3, sp
     b28:	9381      	ld.w      	r4, (r3, 0x4)
     b2a:	9360      	ld.w      	r3, (r3, 0x0)
     b2c:	b260      	st.w      	r3, (r2, 0x0)
     b2e:	b281      	st.w      	r4, (r2, 0x4)
	*(Bit64u*)(ATL_MMT_ENTRY_ADDR(fmt_index) + ATL_MMT_ENTRY_SIZE) = gpa_top;
     b30:	1b02      	addi      	r3, sp, 8
     b32:	9360      	ld.w      	r3, (r3, 0x0)
     b34:	e4630200 	addi      	r3, r3, 513      	//0x201
     b38:	4363      	lsli      	r3, r3, 3
     b3a:	6c8f      	mov      	r2, r3
     b3c:	9864      	ld.w      	r3, (sp, 0x10)
     b3e:	9885      	ld.w      	r4, (sp, 0x14)
     b40:	b260      	st.w      	r3, (r2, 0x0)
     b42:	b281      	st.w      	r4, (r2, 0x4)
	*(Bit64u*)(ATL_MMT_ENTRY_ADDR(fmt_index) + ATL_MMT_ENTRY_SIZE * 2) = hpa_offset;
     b44:	1b02      	addi      	r3, sp, 8
     b46:	9360      	ld.w      	r3, (r3, 0x0)
     b48:	e4630201 	addi      	r3, r3, 514      	//0x202
     b4c:	4363      	lsli      	r3, r3, 3
     b4e:	6c8f      	mov      	r2, r3
     b50:	9866      	ld.w      	r3, (sp, 0x18)
     b52:	9887      	ld.w      	r4, (sp, 0x1c)
     b54:	b260      	st.w      	r3, (r2, 0x0)
     b56:	b281      	st.w      	r4, (r2, 0x4)
	*(Bit32u*)(ATL_MMT_ENTRY_ADDR(fmt_index) + ATL_MMT_ENTRY_SIZE * 3) = 1;
     b58:	1b02      	addi      	r3, sp, 8
     b5a:	9360      	ld.w      	r3, (r3, 0x0)
     b5c:	e4630202 	addi      	r3, r3, 515      	//0x203
     b60:	4363      	lsli      	r3, r3, 3
     b62:	3201      	movi      	r2, 1      	//0x1
     b64:	b340      	st.w      	r2, (r3, 0x0)
	return 0;
     b66:	3300      	movi      	r3, 0      	//0x0
}
     b68:	6c0f      	mov      	r0, r3
     b6a:	1403      	addi      	sp, sp, 12
     b6c:	9880      	ld.w      	r4, (sp, 0x0)
     b6e:	1402      	addi      	sp, sp, 8
     b70:	783c      	rts
	...

00000b74 <ATL_FMT_Table_Get>:
Bit32u ATL_FMT_Table_Get(Bit32u fmt_index, Bit64u *gpa_base, Bit64u *gpa_top, Bit64u *hpa_offset)
{
     b74:	14c1      	push      	r4
     b76:	1424      	subi      	sp, sp, 16
     b78:	e58e000b 	addi      	r12, sp, 12      	//0xc
     b7c:	dc0c2000 	st.w      	r0, (r12, 0x0)
     b80:	1802      	addi      	r0, sp, 8
     b82:	b020      	st.w      	r1, (r0, 0x0)
     b84:	1901      	addi      	r1, sp, 4
     b86:	b140      	st.w      	r2, (r1, 0x0)
     b88:	6cbb      	mov      	r2, sp
     b8a:	b260      	st.w      	r3, (r2, 0x0)
	*gpa_base = *(Bit64u*)(ATL_MMT_ENTRY_ADDR(fmt_index));
     b8c:	1b03      	addi      	r3, sp, 12
     b8e:	9360      	ld.w      	r3, (r3, 0x0)
     b90:	e46301ff 	addi      	r3, r3, 512      	//0x200
     b94:	4363      	lsli      	r3, r3, 3
     b96:	9381      	ld.w      	r4, (r3, 0x4)
     b98:	9360      	ld.w      	r3, (r3, 0x0)
     b9a:	1a02      	addi      	r2, sp, 8
     b9c:	9240      	ld.w      	r2, (r2, 0x0)
     b9e:	b260      	st.w      	r3, (r2, 0x0)
     ba0:	b281      	st.w      	r4, (r2, 0x4)
	*gpa_top  =	*(Bit64u*)(ATL_MMT_ENTRY_ADDR(fmt_index) + ATL_MMT_ENTRY_SIZE);
     ba2:	1b03      	addi      	r3, sp, 12
     ba4:	9360      	ld.w      	r3, (r3, 0x0)
     ba6:	e4630200 	addi      	r3, r3, 513      	//0x201
     baa:	4363      	lsli      	r3, r3, 3
     bac:	9381      	ld.w      	r4, (r3, 0x4)
     bae:	9360      	ld.w      	r3, (r3, 0x0)
     bb0:	1a01      	addi      	r2, sp, 4
     bb2:	9240      	ld.w      	r2, (r2, 0x0)
     bb4:	b260      	st.w      	r3, (r2, 0x0)
     bb6:	b281      	st.w      	r4, (r2, 0x4)
	*hpa_offset = *(Bit64u*)(ATL_MMT_ENTRY_ADDR(fmt_index) + ATL_MMT_ENTRY_SIZE * 2);
     bb8:	1b03      	addi      	r3, sp, 12
     bba:	9360      	ld.w      	r3, (r3, 0x0)
     bbc:	e4630201 	addi      	r3, r3, 514      	//0x202
     bc0:	4363      	lsli      	r3, r3, 3
     bc2:	9381      	ld.w      	r4, (r3, 0x4)
     bc4:	9360      	ld.w      	r3, (r3, 0x0)
     bc6:	6cbb      	mov      	r2, sp
     bc8:	9240      	ld.w      	r2, (r2, 0x0)
     bca:	b260      	st.w      	r3, (r2, 0x0)
     bcc:	b281      	st.w      	r4, (r2, 0x4)

	return *(Bit32u*)(ATL_MMT_ENTRY_ADDR(fmt_index) + ATL_MMT_ENTRY_SIZE * 3);
     bce:	1b03      	addi      	r3, sp, 12
     bd0:	9360      	ld.w      	r3, (r3, 0x0)
     bd2:	e4630202 	addi      	r3, r3, 515      	//0x203
     bd6:	4363      	lsli      	r3, r3, 3
     bd8:	9360      	ld.w      	r3, (r3, 0x0)
}
     bda:	6c0f      	mov      	r0, r3
     bdc:	1404      	addi      	sp, sp, 16
     bde:	1481      	pop      	r4

00000be0 <ATL_MMT_Set>:

Bit32u ATL_MMT_Set(Bit32u index, Bit64u x86_base)
{
     be0:	14c1      	push      	r4
     be2:	1425      	subi      	sp, sp, 20
     be4:	e64e0007 	addi      	r18, sp, 8      	//0x8
     be8:	dc122000 	st.w      	r0, (r18, 0x0)
     bec:	6c3b      	mov      	r0, sp
     bee:	b020      	st.w      	r1, (r0, 0x0)
     bf0:	b041      	st.w      	r2, (r0, 0x4)
	Bit64u wr_data = (x86_base & 0xFFFFFFFFFFFFF000) | 0x1;
     bf2:	6cbb      	mov      	r2, sp
     bf4:	9220      	ld.w      	r1, (r2, 0x0)
     bf6:	9241      	ld.w      	r2, (r2, 0x4)
     bf8:	ea030fff 	movi      	r3, 4095      	//0xfff
     bfc:	6cce      	nor      	r3, r3
     bfe:	3400      	movi      	r4, 0      	//0x0
     c00:	2c00      	subi      	r4, 1      	//0x1
     c02:	68c4      	and      	r3, r1
     c04:	6908      	and      	r4, r2
     c06:	1a03      	addi      	r2, sp, 12
     c08:	ea0c0001 	movi      	r12, 1      	//0x1
     c0c:	ea0d0000 	movi      	r13, 0      	//0x0
     c10:	6cf0      	or      	r3, r12
     c12:	6d34      	or      	r4, r13
     c14:	b260      	st.w      	r3, (r2, 0x0)
     c16:	b281      	st.w      	r4, (r2, 0x4)
	*(Bit64u *)(ATL_MMT_ENTRY_ADDR(index)) = wr_data;
     c18:	1b02      	addi      	r3, sp, 8
     c1a:	9360      	ld.w      	r3, (r3, 0x0)
     c1c:	e46301ff 	addi      	r3, r3, 512      	//0x200
     c20:	4363      	lsli      	r3, r3, 3
     c22:	6c8f      	mov      	r2, r3
     c24:	1b03      	addi      	r3, sp, 12
     c26:	9381      	ld.w      	r4, (r3, 0x4)
     c28:	9360      	ld.w      	r3, (r3, 0x0)
     c2a:	b260      	st.w      	r3, (r2, 0x0)
     c2c:	b281      	st.w      	r4, (r2, 0x4)
	return 0;
     c2e:	3300      	movi      	r3, 0      	//0x0
}
     c30:	6c0f      	mov      	r0, r3
     c32:	1405      	addi      	sp, sp, 20
     c34:	1481      	pop      	r4
	...

00000c38 <ATL_MMT_Get>:
Bit32u ATL_MMT_Get(Bit32u index, Bit64u *x86_base)
{
     c38:	14c1      	push      	r4
     c3a:	1424      	subi      	sp, sp, 16
     c3c:	1a01      	addi      	r2, sp, 4
     c3e:	b200      	st.w      	r0, (r2, 0x0)
     c40:	6cbb      	mov      	r2, sp
     c42:	b220      	st.w      	r1, (r2, 0x0)
	Bit64u data = *(Bit64u *)(ATL_MMT_ENTRY_ADDR(index));
     c44:	1a01      	addi      	r2, sp, 4
     c46:	9240      	ld.w      	r2, (r2, 0x0)
     c48:	e44201ff 	addi      	r2, r2, 512      	//0x200
     c4c:	4243      	lsli      	r2, r2, 3
     c4e:	1802      	addi      	r0, sp, 8
     c50:	9220      	ld.w      	r1, (r2, 0x0)
     c52:	9241      	ld.w      	r2, (r2, 0x4)
     c54:	b020      	st.w      	r1, (r0, 0x0)
     c56:	b041      	st.w      	r2, (r0, 0x4)
	*x86_base = (data & 0xFFFFFFFFFFFFF000);
     c58:	1a02      	addi      	r2, sp, 8
     c5a:	9220      	ld.w      	r1, (r2, 0x0)
     c5c:	9241      	ld.w      	r2, (r2, 0x4)
     c5e:	ea030fff 	movi      	r3, 4095      	//0xfff
     c62:	6cce      	nor      	r3, r3
     c64:	3400      	movi      	r4, 0      	//0x0
     c66:	2c00      	subi      	r4, 1      	//0x1
     c68:	68c4      	and      	r3, r1
     c6a:	6908      	and      	r4, r2
     c6c:	6cbb      	mov      	r2, sp
     c6e:	9240      	ld.w      	r2, (r2, 0x0)
     c70:	b260      	st.w      	r3, (r2, 0x0)
     c72:	b281      	st.w      	r4, (r2, 0x4)
	return (Bit32u)(data & 0x1);
     c74:	1b02      	addi      	r3, sp, 8
     c76:	9360      	ld.w      	r3, (r3, 0x0)
     c78:	e4632001 	andi      	r3, r3, 1
}
     c7c:	6c0f      	mov      	r0, r3
     c7e:	1404      	addi      	sp, sp, 16
     c80:	1481      	pop      	r4
	...

00000c84 <ATL_GLA_Translation>:

Bit32u ATL_GLA_Translation(Bit64u Gla, Bit2u Access_Type, Bit1u us, Bit4u len, Bit1u Mod, Bit1u explicita)
{
     c84:	1429      	subi      	sp, sp, 36
     c86:	e58e0013 	addi      	r12, sp, 20      	//0x14
     c8a:	dc0c2000 	st.w      	r0, (r12, 0x0)
     c8e:	dc2c2001 	st.w      	r1, (r12, 0x4)
     c92:	6f4b      	mov      	r13, r2
     c94:	6f0f      	mov      	r12, r3
     c96:	9809      	ld.w      	r0, (sp, 0x24)
     c98:	982a      	ld.w      	r1, (sp, 0x28)
     c9a:	984b      	ld.w      	r2, (sp, 0x2c)
     c9c:	1b04      	addi      	r3, sp, 16
     c9e:	dda30000 	st.b      	r13, (r3, 0x0)
     ca2:	1b03      	addi      	r3, sp, 12
     ca4:	dd830000 	st.b      	r12, (r3, 0x0)
     ca8:	1b02      	addi      	r3, sp, 8
     caa:	a300      	st.b      	r0, (r3, 0x0)
     cac:	1b01      	addi      	r3, sp, 4
     cae:	a320      	st.b      	r1, (r3, 0x0)
     cb0:	6cfb      	mov      	r3, sp
     cb2:	a340      	st.b      	r2, (r3, 0x0)
    Bit32u data_h = (((Bit32u)len << 22) & 0xF) | (((Bit32u)explicita << 21)& 0x1) | (((Bit32u)Mod << 20)& 0x1) | (((Bit32u)us << 19)& 0x1) |
    		        (((Bit32u)Access_Type << 17)& 0x3) | (((Bit32u)Gla > 31)& 0x1FFFF);
     cb4:	1b05      	addi      	r3, sp, 20
     cb6:	9340      	ld.w      	r2, (r3, 0x0)
	return (Bit32u)(data & 0x1);
}

Bit32u ATL_GLA_Translation(Bit64u Gla, Bit2u Access_Type, Bit1u us, Bit4u len, Bit1u Mod, Bit1u explicita)
{
    Bit32u data_h = (((Bit32u)len << 22) & 0xF) | (((Bit32u)explicita << 21)& 0x1) | (((Bit32u)Mod << 20)& 0x1) | (((Bit32u)us << 19)& 0x1) |
     cb8:	1b08      	addi      	r3, sp, 32
     cba:	3a1f      	cmphsi      	r2, 32      	//0x20
     cbc:	c4000502 	mvc      	r2
     cc0:	b340      	st.w      	r2, (r3, 0x0)
    		        (((Bit32u)Access_Type << 17)& 0x3) | (((Bit32u)Gla > 31)& 0x1FFFF);
    Bit32u data_l = (((Bit32u)Gla << 1)& 0x7FFFFFFF) | 0x1;
     cc2:	1b05      	addi      	r3, sp, 20
     cc4:	9360      	ld.w      	r3, (r3, 0x0)
     cc6:	5b6c      	addu      	r3, r3, r3
     cc8:	c4032822 	bclri      	r2, r3, 0
     ccc:	3a9f      	bclri      	r2, 31
     cce:	1b07      	addi      	r3, sp, 28
     cd0:	3aa0      	bseti      	r2, 0
     cd2:	b340      	st.w      	r2, (r3, 0x0)
    *(Bit32u *) ATL_GLARH_OFFSET = data_h;
     cd4:	3304      	movi      	r3, 4      	//0x4
     cd6:	1a08      	addi      	r2, sp, 32
     cd8:	9240      	ld.w      	r2, (r2, 0x0)
     cda:	b340      	st.w      	r2, (r3, 0x0)
    *(Bit32u *) ATL_GLARL_OFFSET = data_l;
     cdc:	3300      	movi      	r3, 0      	//0x0
     cde:	1a07      	addi      	r2, sp, 28
     ce0:	9240      	ld.w      	r2, (r2, 0x0)
     ce2:	b340      	st.w      	r2, (r3, 0x0)
    return 0;
     ce4:	3300      	movi      	r3, 0      	//0x0
}
     ce6:	6c0f      	mov      	r0, r3
     ce8:	1409      	addi      	sp, sp, 36
     cea:	783c      	rts

00000cec <ATL_GPA_Translation>:
Bit32u ATL_GPA_Translation(Bit64u Gpa, Bit2u Access_Type, Bit4u len, Bit1u Mod)
{
     cec:	1427      	subi      	sp, sp, 28
     cee:	e58e000b 	addi      	r12, sp, 12      	//0xc
     cf2:	dc0c2000 	st.w      	r0, (r12, 0x0)
     cf6:	dc2c2001 	st.w      	r1, (r12, 0x4)
     cfa:	6c0b      	mov      	r0, r2
     cfc:	6c4f      	mov      	r1, r3
     cfe:	9847      	ld.w      	r2, (sp, 0x1c)
     d00:	1b02      	addi      	r3, sp, 8
     d02:	a300      	st.b      	r0, (r3, 0x0)
     d04:	1b01      	addi      	r3, sp, 4
     d06:	a320      	st.b      	r1, (r3, 0x0)
     d08:	6cfb      	mov      	r3, sp
     d0a:	a340      	st.b      	r2, (r3, 0x0)
    Bit32u data_h = (((Bit32u)len << 24) & 0xF) |  (((Bit32u)Mod << 23)& 0x1) |
    		        (((Bit32u)Access_Type << 21)& 0x3) | (((Bit32u)Gpa > 31)& 0x1FFFF);
     d0c:	1b03      	addi      	r3, sp, 12
     d0e:	9340      	ld.w      	r2, (r3, 0x0)
    *(Bit32u *) ATL_GLARL_OFFSET = data_l;
    return 0;
}
Bit32u ATL_GPA_Translation(Bit64u Gpa, Bit2u Access_Type, Bit4u len, Bit1u Mod)
{
    Bit32u data_h = (((Bit32u)len << 24) & 0xF) |  (((Bit32u)Mod << 23)& 0x1) |
     d10:	1b06      	addi      	r3, sp, 24
     d12:	3a1f      	cmphsi      	r2, 32      	//0x20
     d14:	c4000502 	mvc      	r2
     d18:	b340      	st.w      	r2, (r3, 0x0)
    		        (((Bit32u)Access_Type << 21)& 0x3) | (((Bit32u)Gpa > 31)& 0x1FFFF);
    Bit32u data_l = (((Bit32u)Gpa << 1)& 0x7FFFFFFF) | 0x1;
     d1a:	1b03      	addi      	r3, sp, 12
     d1c:	9360      	ld.w      	r3, (r3, 0x0)
     d1e:	5b6c      	addu      	r3, r3, r3
     d20:	c4032822 	bclri      	r2, r3, 0
     d24:	3a9f      	bclri      	r2, 31
     d26:	1b05      	addi      	r3, sp, 20
     d28:	3aa0      	bseti      	r2, 0
     d2a:	b340      	st.w      	r2, (r3, 0x0)
    *(Bit32u *) ATL_EPPTR_OFFSET = data_h;
     d2c:	3310      	movi      	r3, 16      	//0x10
     d2e:	1a06      	addi      	r2, sp, 24
     d30:	9240      	ld.w      	r2, (r2, 0x0)
     d32:	b340      	st.w      	r2, (r3, 0x0)
    *(Bit32u *) ATL_EPPTR_OFFSET = data_l;
     d34:	3310      	movi      	r3, 16      	//0x10
     d36:	1a05      	addi      	r2, sp, 20
     d38:	9240      	ld.w      	r2, (r2, 0x0)
     d3a:	b340      	st.w      	r2, (r3, 0x0)
    return 0;
     d3c:	3300      	movi      	r3, 0      	//0x0
}
     d3e:	6c0f      	mov      	r0, r3
     d40:	1407      	addi      	sp, sp, 28
     d42:	783c      	rts

00000d44 <ATL_HPA_Translation>:
Bit32u ATL_HPA_Translation(Bit64u Hpa,  Bit2u Access_Type,Bit4u len)
{
     d44:	14c1      	push      	r4
     d46:	1426      	subi      	sp, sp, 24
     d48:	e64e0007 	addi      	r18, sp, 8      	//0x8
     d4c:	dc122000 	st.w      	r0, (r18, 0x0)
     d50:	dc322001 	st.w      	r1, (r18, 0x4)
     d54:	6c4b      	mov      	r1, r2
     d56:	6c8f      	mov      	r2, r3
     d58:	1b01      	addi      	r3, sp, 4
     d5a:	a320      	st.b      	r1, (r3, 0x0)
     d5c:	6cfb      	mov      	r3, sp
     d5e:	a340      	st.b      	r2, (r3, 0x0)
	Bit32u data_h = (((Bit32u)Hpa > 20)& 0xFFFFFFF);
     d60:	1b02      	addi      	r3, sp, 8
     d62:	9340      	ld.w      	r2, (r3, 0x0)
     d64:	1b05      	addi      	r3, sp, 20
     d66:	3a14      	cmphsi      	r2, 21      	//0x15
     d68:	c4000502 	mvc      	r2
     d6c:	b340      	st.w      	r2, (r3, 0x0)
	Bit32u data_l = (((Bit32u)Hpa << 12)& 0xFFFFF) | (((Bit32u)Access_Type << 5)& 0x1) |(((Bit32u)len << 1) & 0xF)  | 0x1;
     d6e:	1b02      	addi      	r3, sp, 8
     d70:	9360      	ld.w      	r3, (r3, 0x0)
     d72:	434c      	lsli      	r2, r3, 12
     d74:	6ccb      	mov      	r3, r2
     d76:	c660502c 	bmaski      	r12, 20      	//0x14
     d7a:	ea0d0000 	movi      	r13, 0      	//0x0
     d7e:	68f0      	and      	r3, r12
     d80:	6934      	and      	r4, r13
     d82:	6c8f      	mov      	r2, r3
     d84:	6cfb      	mov      	r3, sp
     d86:	8360      	ld.b      	r3, (r3, 0x0)
     d88:	74cc      	zextb      	r3, r3
     d8a:	5b6c      	addu      	r3, r3, r3
     d8c:	e463200f 	andi      	r3, r3, 15
     d90:	6c8c      	or      	r2, r3
     d92:	1b04      	addi      	r3, sp, 16
     d94:	3aa0      	bseti      	r2, 0
     d96:	b340      	st.w      	r2, (r3, 0x0)
	*(Bit32u *) ATL_MARL_OFFSET = data_h;
     d98:	3320      	movi      	r3, 32      	//0x20
     d9a:	1a05      	addi      	r2, sp, 20
     d9c:	9240      	ld.w      	r2, (r2, 0x0)
     d9e:	b340      	st.w      	r2, (r3, 0x0)
    *(Bit32u *) ATL_MARH_OFFSET = data_l;
     da0:	3324      	movi      	r3, 36      	//0x24
     da2:	1a04      	addi      	r2, sp, 16
     da4:	9240      	ld.w      	r2, (r2, 0x0)
     da6:	b340      	st.w      	r2, (r3, 0x0)
    return 0;
     da8:	3300      	movi      	r3, 0      	//0x0
}
     daa:	6c0f      	mov      	r0, r3
     dac:	1406      	addi      	sp, sp, 24
     dae:	1481      	pop      	r4

00000db0 <ATL_Exception_Check>:

Bit32u ATL_Exception_Check()
{
	return *(Bit32u *)ATL_ATER_OFFSET & 0xFF;
     db0:	3330      	movi      	r3, 48      	//0x30
     db2:	9360      	ld.w      	r3, (r3, 0x0)
     db4:	e46320ff 	andi      	r3, r3, 255
}
     db8:	6c0f      	mov      	r0, r3
     dba:	783c      	rts

00000dbc <ATL_MMIO_Check>:
Bit32u ATL_MMIO_Check() //return 1 is mmio, 0 is not mmio.
{
	return ((*(Bit32u *)ATL_ATER_OFFSET) >> 8) & 0x1;
     dbc:	3330      	movi      	r3, 48      	//0x30
     dbe:	9360      	ld.w      	r3, (r3, 0x0)
     dc0:	4b68      	lsri      	r3, r3, 8
     dc2:	e4632001 	andi      	r3, r3, 1
}
     dc6:	6c0f      	mov      	r0, r3
     dc8:	783c      	rts
	...

00000dcc <ATL_GPA_Read>:

Bit32u ATL_GPA_Read(Bit64u *Gpa, Bit2u *len)
{
     dcc:	14c1      	push      	r4
     dce:	1422      	subi      	sp, sp, 8
     dd0:	1a01      	addi      	r2, sp, 4
     dd2:	b200      	st.w      	r0, (r2, 0x0)
     dd4:	6cbb      	mov      	r2, sp
     dd6:	b220      	st.w      	r1, (r2, 0x0)
	*Gpa = (((*(Bit64u *)ATL_GPARH_OFFSET) & 0xFFFFFFFF) << 32) | (((*(Bit64u *)ATL_GPARL_OFFSET)) & 0xFFFFF000);
     dd8:	320c      	movi      	r2, 12      	//0xc
     dda:	9220      	ld.w      	r1, (r2, 0x0)
     ddc:	9241      	ld.w      	r2, (r2, 0x4)
     dde:	3000      	movi      	r0, 0      	//0x0
     de0:	c4014024 	lsl      	r4, r1, r0
     de4:	3300      	movi      	r3, 0      	//0x0
     de6:	3208      	movi      	r2, 8      	//0x8
     de8:	9220      	ld.w      	r1, (r2, 0x0)
     dea:	9241      	ld.w      	r2, (r2, 0x4)
     dec:	ea0c0fff 	movi      	r12, 4095      	//0xfff
     df0:	6f32      	nor      	r12, r12
     df2:	ea0d0000 	movi      	r13, 0      	//0x0
     df6:	6870      	and      	r1, r12
     df8:	68b4      	and      	r2, r13
     dfa:	6cc4      	or      	r3, r1
     dfc:	6d08      	or      	r4, r2
     dfe:	1a01      	addi      	r2, sp, 4
     e00:	9240      	ld.w      	r2, (r2, 0x0)
     e02:	b260      	st.w      	r3, (r2, 0x0)
     e04:	b281      	st.w      	r4, (r2, 0x4)
    *len = ((*(Bit32u *)ATL_GPARL_OFFSET) >> 1) & 0x3;
     e06:	3308      	movi      	r3, 8      	//0x8
     e08:	9360      	ld.w      	r3, (r3, 0x0)
     e0a:	4b61      	lsri      	r3, r3, 1
     e0c:	74cc      	zextb      	r3, r3
     e0e:	e4632003 	andi      	r3, r3, 3
     e12:	748c      	zextb      	r2, r3
     e14:	6cfb      	mov      	r3, sp
     e16:	9360      	ld.w      	r3, (r3, 0x0)
     e18:	a340      	st.b      	r2, (r3, 0x0)
	return 0;
     e1a:	3300      	movi      	r3, 0      	//0x0
}
     e1c:	6c0f      	mov      	r0, r3
     e1e:	1402      	addi      	sp, sp, 8
     e20:	1481      	pop      	r4
	...

00000e24 <ATL_HPA_Read>:

Bit32u ATL_HPA_Read(Bit64u *Hpa)
{
     e24:	14c1      	push      	r4
     e26:	1421      	subi      	sp, sp, 4
     e28:	6f3b      	mov      	r12, sp
     e2a:	dc0c2000 	st.w      	r0, (r12, 0x0)
	*Hpa =  (((*(Bit64u *)ATL_HPARH_OFFSET) & 0xFFFFFFFF) << 32) | ((*(Bit64u *)ATL_HPARL_OFFSET)) & 0xFFFFF000;
     e2e:	301c      	movi      	r0, 28      	//0x1c
     e30:	d9802000 	ld.w      	r12, (r0, 0x0)
     e34:	d9a02001 	ld.w      	r13, (r0, 0x4)
     e38:	3200      	movi      	r2, 0      	//0x0
     e3a:	c44c4024 	lsl      	r4, r12, r2
     e3e:	3300      	movi      	r3, 0      	//0x0
     e40:	3018      	movi      	r0, 24      	//0x18
     e42:	d9802000 	ld.w      	r12, (r0, 0x0)
     e46:	d9a02001 	ld.w      	r13, (r0, 0x4)
     e4a:	ea010fff 	movi      	r1, 4095      	//0xfff
     e4e:	6c46      	nor      	r1, r1
     e50:	3200      	movi      	r2, 0      	//0x0
     e52:	6870      	and      	r1, r12
     e54:	68b4      	and      	r2, r13
     e56:	6cc4      	or      	r3, r1
     e58:	6d08      	or      	r4, r2
     e5a:	6cbb      	mov      	r2, sp
     e5c:	9240      	ld.w      	r2, (r2, 0x0)
     e5e:	b260      	st.w      	r3, (r2, 0x0)
     e60:	b281      	st.w      	r4, (r2, 0x4)
	return 0;
     e62:	3300      	movi      	r3, 0      	//0x0
}
     e64:	6c0f      	mov      	r0, r3
     e66:	1401      	addi      	sp, sp, 4
     e68:	1481      	pop      	r4
	...

00000e6c <ATL_TLB_Flush_MMT_Invalid>:

Bit32u ATL_TLB_Flush_MMT_Invalid()
{
	 *(Bit32u *)ATL_ACR_OFFSET = 0x3;
     e6c:	3328      	movi      	r3, 40      	//0x28
     e6e:	3203      	movi      	r2, 3      	//0x3
     e70:	b340      	st.w      	r2, (r3, 0x0)
     return 0;
     e72:	3300      	movi      	r3, 0      	//0x0
}
     e74:	6c0f      	mov      	r0, r3
     e76:	783c      	rts

00000e78 <ATL_Data_Read>:

Bit32u ATL_Data_Read(Bit32u len, void *data)
{
     e78:	14d0      	push      	r15
     e7a:	1422      	subi      	sp, sp, 8
     e7c:	1b01      	addi      	r3, sp, 4
     e7e:	b300      	st.w      	r0, (r3, 0x0)
     e80:	6cfb      	mov      	r3, sp
     e82:	b320      	st.w      	r1, (r3, 0x0)
   memcpy(data, ATL_MADR_OFFSET, len);
     e84:	6cbb      	mov      	r2, sp
     e86:	1b01      	addi      	r3, sp, 4
     e88:	9200      	ld.w      	r0, (r2, 0x0)
     e8a:	3140      	movi      	r1, 64      	//0x40
     e8c:	9340      	ld.w      	r2, (r3, 0x0)
     e8e:	e000727f 	bsr      	0xf38c	//f38c <__memcpy_fast>
     e92:	c4004820 	lsli      	r0, r0, 0
   return 0;
     e96:	3300      	movi      	r3, 0      	//0x0
}
     e98:	6c0f      	mov      	r0, r3
     e9a:	1402      	addi      	sp, sp, 8
     e9c:	1490      	pop      	r15
	...

00000ea0 <ATL_Data_Write>:
Bit32u ATL_Data_Write(Bit32u len, void *data)
{
     ea0:	14d0      	push      	r15
     ea2:	1422      	subi      	sp, sp, 8
     ea4:	1b01      	addi      	r3, sp, 4
     ea6:	b300      	st.w      	r0, (r3, 0x0)
     ea8:	6cfb      	mov      	r3, sp
     eaa:	b320      	st.w      	r1, (r3, 0x0)
	memcpy(ATL_MADR_OFFSET,data, len);
     eac:	6cbb      	mov      	r2, sp
     eae:	1b01      	addi      	r3, sp, 4
     eb0:	3040      	movi      	r0, 64      	//0x40
     eb2:	9220      	ld.w      	r1, (r2, 0x0)
     eb4:	9340      	ld.w      	r2, (r3, 0x0)
     eb6:	e000726b 	bsr      	0xf38c	//f38c <__memcpy_fast>
     eba:	c4004820 	lsli      	r0, r0, 0
	return 0;
     ebe:	3300      	movi      	r3, 0      	//0x0
}
     ec0:	6c0f      	mov      	r0, r3
     ec2:	1402      	addi      	sp, sp, 8
     ec4:	1490      	pop      	r15
	...

00000ec8 <ATL_BDF_Table_Set>:

Bit32u ATL_BDF_Table_Set(Bit32u bdf_index, Bit64u gpa_base, Bit64u gpa_top, Bit16u bdf)
{
     ec8:	1421      	subi      	sp, sp, 4
     eca:	14c1      	push      	r4
     ecc:	1424      	subi      	sp, sp, 16
     ece:	e58e000b 	addi      	r12, sp, 12      	//0xc
     ed2:	dc0c2000 	st.w      	r0, (r12, 0x0)
     ed6:	1801      	addi      	r0, sp, 4
     ed8:	b020      	st.w      	r1, (r0, 0x0)
     eda:	b041      	st.w      	r2, (r0, 0x4)
     edc:	b865      	st.w      	r3, (sp, 0x14)
     ede:	9847      	ld.w      	r2, (sp, 0x1c)
     ee0:	6cfb      	mov      	r3, sp
     ee2:	ab40      	st.h      	r2, (r3, 0x0)
	*(Bit64u*)(ATL_IOBDF_ENTRY_ADDR(bdf_index)) = gpa_base;
     ee4:	1b03      	addi      	r3, sp, 12
     ee6:	9360      	ld.w      	r3, (r3, 0x0)
     ee8:	23ff      	addi      	r3, 256      	//0x100
     eea:	4365      	lsli      	r3, r3, 5
     eec:	6c8f      	mov      	r2, r3
     eee:	1b01      	addi      	r3, sp, 4
     ef0:	9381      	ld.w      	r4, (r3, 0x4)
     ef2:	9360      	ld.w      	r3, (r3, 0x0)
     ef4:	b260      	st.w      	r3, (r2, 0x0)
     ef6:	b281      	st.w      	r4, (r2, 0x4)
    *(Bit64u*)(ATL_IOBDF_ENTRY_ADDR(bdf_index) + 8) = gpa_top;
     ef8:	1b03      	addi      	r3, sp, 12
     efa:	9360      	ld.w      	r3, (r3, 0x0)
     efc:	23ff      	addi      	r3, 256      	//0x100
     efe:	4365      	lsli      	r3, r3, 5
     f00:	2307      	addi      	r3, 8      	//0x8
     f02:	6c8f      	mov      	r2, r3
     f04:	9865      	ld.w      	r3, (sp, 0x14)
     f06:	9886      	ld.w      	r4, (sp, 0x18)
     f08:	b260      	st.w      	r3, (r2, 0x0)
     f0a:	b281      	st.w      	r4, (r2, 0x4)
	*(Bit16u*)(ATL_IOBDF_ENTRY_ADDR(bdf_index) + 16) = bdf;
     f0c:	1b03      	addi      	r3, sp, 12
     f0e:	9360      	ld.w      	r3, (r3, 0x0)
     f10:	23ff      	addi      	r3, 256      	//0x100
     f12:	4365      	lsli      	r3, r3, 5
     f14:	230f      	addi      	r3, 16      	//0x10
     f16:	6cbb      	mov      	r2, sp
     f18:	8a40      	ld.h      	r2, (r2, 0x0)
     f1a:	ab40      	st.h      	r2, (r3, 0x0)
	*(Bit32u*)(ATL_IOBDF_ENTRY_ADDR(bdf_index) + 24) = 1;
     f1c:	1b03      	addi      	r3, sp, 12
     f1e:	9360      	ld.w      	r3, (r3, 0x0)
     f20:	23ff      	addi      	r3, 256      	//0x100
     f22:	4365      	lsli      	r3, r3, 5
     f24:	2317      	addi      	r3, 24      	//0x18
     f26:	3201      	movi      	r2, 1      	//0x1
     f28:	b340      	st.w      	r2, (r3, 0x0)
	return 0;
     f2a:	3300      	movi      	r3, 0      	//0x0
}
     f2c:	6c0f      	mov      	r0, r3
     f2e:	1404      	addi      	sp, sp, 16
     f30:	9880      	ld.w      	r4, (sp, 0x0)
     f32:	1402      	addi      	sp, sp, 8
     f34:	783c      	rts
	...

00000f38 <ATL_BDF_Table_Get>:
Bit32u ATL_BDF_Table_Get(Bit32u bdf_index, Bit64u *gpa_base, Bit64u *gpa_top, Bit16u *bdf)
{
     f38:	14c1      	push      	r4
     f3a:	1424      	subi      	sp, sp, 16
     f3c:	e58e000b 	addi      	r12, sp, 12      	//0xc
     f40:	dc0c2000 	st.w      	r0, (r12, 0x0)
     f44:	1802      	addi      	r0, sp, 8
     f46:	b020      	st.w      	r1, (r0, 0x0)
     f48:	1901      	addi      	r1, sp, 4
     f4a:	b140      	st.w      	r2, (r1, 0x0)
     f4c:	6cbb      	mov      	r2, sp
     f4e:	b260      	st.w      	r3, (r2, 0x0)
	*gpa_base = *(Bit64u*)(ATL_IOBDF_ENTRY_ADDR(bdf_index));
     f50:	1b03      	addi      	r3, sp, 12
     f52:	9360      	ld.w      	r3, (r3, 0x0)
     f54:	23ff      	addi      	r3, 256      	//0x100
     f56:	4365      	lsli      	r3, r3, 5
     f58:	9381      	ld.w      	r4, (r3, 0x4)
     f5a:	9360      	ld.w      	r3, (r3, 0x0)
     f5c:	1a02      	addi      	r2, sp, 8
     f5e:	9240      	ld.w      	r2, (r2, 0x0)
     f60:	b260      	st.w      	r3, (r2, 0x0)
     f62:	b281      	st.w      	r4, (r2, 0x4)
	*gpa_top =  *(Bit64u*)(ATL_IOBDF_ENTRY_ADDR(bdf_index) + 8);
     f64:	1b03      	addi      	r3, sp, 12
     f66:	9360      	ld.w      	r3, (r3, 0x0)
     f68:	23ff      	addi      	r3, 256      	//0x100
     f6a:	4365      	lsli      	r3, r3, 5
     f6c:	2307      	addi      	r3, 8      	//0x8
     f6e:	9381      	ld.w      	r4, (r3, 0x4)
     f70:	9360      	ld.w      	r3, (r3, 0x0)
     f72:	1a01      	addi      	r2, sp, 4
     f74:	9240      	ld.w      	r2, (r2, 0x0)
     f76:	b260      	st.w      	r3, (r2, 0x0)
     f78:	b281      	st.w      	r4, (r2, 0x4)
	*bdf = 	*(Bit16u*)(ATL_IOBDF_ENTRY_ADDR(bdf_index) + 16);
     f7a:	1b03      	addi      	r3, sp, 12
     f7c:	9360      	ld.w      	r3, (r3, 0x0)
     f7e:	23ff      	addi      	r3, 256      	//0x100
     f80:	4365      	lsli      	r3, r3, 5
     f82:	230f      	addi      	r3, 16      	//0x10
     f84:	8b60      	ld.h      	r3, (r3, 0x0)
     f86:	748d      	zexth      	r2, r3
     f88:	6cfb      	mov      	r3, sp
     f8a:	9360      	ld.w      	r3, (r3, 0x0)
     f8c:	ab40      	st.h      	r2, (r3, 0x0)
	return  *(Bit32u*)(ATL_IOBDF_ENTRY_ADDR(bdf_index) + 24);
     f8e:	1b03      	addi      	r3, sp, 12
     f90:	9360      	ld.w      	r3, (r3, 0x0)
     f92:	23ff      	addi      	r3, 256      	//0x100
     f94:	4365      	lsli      	r3, r3, 5
     f96:	2317      	addi      	r3, 24      	//0x18
     f98:	9360      	ld.w      	r3, (r3, 0x0)
}
     f9a:	6c0f      	mov      	r0, r3
     f9c:	1404      	addi      	sp, sp, 16
     f9e:	1481      	pop      	r4

00000fa0 <ATL_GPA_BDF_Translation>:

Bit32u ATL_GPA_BDF_Translation(Bit64u gpa, Bit16u *bdf)
{
     fa0:	14c1      	push      	r4
     fa2:	1425      	subi      	sp, sp, 20
     fa4:	e64e0003 	addi      	r18, sp, 4      	//0x4
     fa8:	dc122000 	st.w      	r0, (r18, 0x0)
     fac:	dc322001 	st.w      	r1, (r18, 0x4)
     fb0:	6c7b      	mov      	r1, sp
     fb2:	b140      	st.w      	r2, (r1, 0x0)
    Bit32u datah,datal;
    datah = (gpa >> 31) & 0x1FFFFF;
     fb4:	1a01      	addi      	r2, sp, 4
     fb6:	9221      	ld.w      	r1, (r2, 0x4)
     fb8:	4121      	lsli      	r1, r1, 1
     fba:	9200      	ld.w      	r0, (r2, 0x0)
     fbc:	487f      	lsri      	r3, r0, 31
     fbe:	6cc4      	or      	r3, r1
     fc0:	9241      	ld.w      	r2, (r2, 0x4)
     fc2:	4a9f      	lsri      	r4, r2, 31
     fc4:	6c4f      	mov      	r1, r3
     fc6:	1a04      	addi      	r2, sp, 16
     fc8:	6cc7      	mov      	r3, r1
     fca:	c680502c 	bmaski      	r12, 21      	//0x15
     fce:	ea0d0000 	movi      	r13, 0      	//0x0
     fd2:	68f0      	and      	r3, r12
     fd4:	6934      	and      	r4, r13
     fd6:	b260      	st.w      	r3, (r2, 0x0)
    datal = (gpa & 0x7FFFFFFF) << 1 | 0x1;
     fd8:	1b01      	addi      	r3, sp, 4
     fda:	9360      	ld.w      	r3, (r3, 0x0)
     fdc:	5b6c      	addu      	r3, r3, r3
     fde:	6c8f      	mov      	r2, r3
     fe0:	1b03      	addi      	r3, sp, 12
     fe2:	3aa0      	bseti      	r2, 0
     fe4:	b340      	st.w      	r2, (r3, 0x0)
    *(Bit32u*)(ATL_IOTRH_OFFSET) =datah;
     fe6:	333c      	movi      	r3, 60      	//0x3c
     fe8:	1a04      	addi      	r2, sp, 16
     fea:	9240      	ld.w      	r2, (r2, 0x0)
     fec:	b340      	st.w      	r2, (r3, 0x0)
    *(Bit32u*)(ATL_IOTRL_OFFSET) =datal;
     fee:	3338      	movi      	r3, 56      	//0x38
     ff0:	1a03      	addi      	r2, sp, 12
     ff2:	9240      	ld.w      	r2, (r2, 0x0)
     ff4:	b340      	st.w      	r2, (r3, 0x0)

    while(!(*(Bit32u*)(ATL_IOTRL_OFFSET) & 0x1));
     ff6:	6c00      	or      	r0, r0
     ff8:	3338      	movi      	r3, 56      	//0x38
     ffa:	9360      	ld.w      	r3, (r3, 0x0)
     ffc:	e4632001 	andi      	r3, r3, 1
    1000:	e903fffc 	bez      	r3, 0xff8	//ff8 <ATL_GPA_BDF_Translation+0x58>

    return *(Bit32u*)(ATL_IOTRL_OFFSET);
    1004:	3338      	movi      	r3, 56      	//0x38
    1006:	9360      	ld.w      	r3, (r3, 0x0)
}
    1008:	6c0f      	mov      	r0, r3
    100a:	1405      	addi      	sp, sp, 20
    100c:	1481      	pop      	r4
    100e:	0000      	.short	0x0000
    1010:	0000f38c 	.long	0x0000f38c

00001014 <cmdresq_test>:
#include "cmdresq.h"

Bit32u cmdresq_test(){

}
    1014:	6c0f      	mov      	r0, r3
    1016:	783c      	rts

00001018 <readl>:
{
    *(volatile Bit16u *)addr = value;
}

static inline Bit32u readl(const volatile void *addr)
{
    1018:	1421      	subi      	sp, sp, 4
    101a:	6cfb      	mov      	r3, sp
    101c:	b300      	st.w      	r0, (r3, 0x0)
    return *(const volatile Bit32u *)addr;
    101e:	6cfb      	mov      	r3, sp
    1020:	9360      	ld.w      	r3, (r3, 0x0)
    1022:	9360      	ld.w      	r3, (r3, 0x0)
}
    1024:	6c0f      	mov      	r0, r3
    1026:	1401      	addi      	sp, sp, 4
    1028:	783c      	rts
	...

0000102c <writel>:

static inline void writel(Bit32u value, volatile void *addr)
{
    102c:	1422      	subi      	sp, sp, 8
    102e:	1b01      	addi      	r3, sp, 4
    1030:	b300      	st.w      	r0, (r3, 0x0)
    1032:	6cfb      	mov      	r3, sp
    1034:	b320      	st.w      	r1, (r3, 0x0)
    *(volatile Bit32u *)addr = value;
    1036:	6cfb      	mov      	r3, sp
    1038:	9360      	ld.w      	r3, (r3, 0x0)
    103a:	1a01      	addi      	r2, sp, 4
    103c:	9240      	ld.w      	r2, (r2, 0x0)
    103e:	b340      	st.w      	r2, (r3, 0x0)
}
    1040:	1402      	addi      	sp, sp, 8
    1042:	783c      	rts

00001044 <dw_write>:

static inline void dw_write(Bit32u val, void* addr)
{
    1044:	14d1      	push      	r4, r15
    1046:	1423      	subi      	sp, sp, 12
    1048:	1b01      	addi      	r3, sp, 4
    104a:	b300      	st.w      	r0, (r3, 0x0)
    104c:	6cfb      	mov      	r3, sp
    104e:	b320      	st.w      	r1, (r3, 0x0)
	Bit32u value;
	value =readl(addr);
    1050:	1c02      	addi      	r4, sp, 8
    1052:	6cfb      	mov      	r3, sp
    1054:	9300      	ld.w      	r0, (r3, 0x0)
    1056:	e3ffffe1 	bsr      	0x1018	//1018 <readl>
    105a:	c4004820 	lsli      	r0, r0, 0
    105e:	b400      	st.w      	r0, (r4, 0x0)
	value |= val;
    1060:	1b02      	addi      	r3, sp, 8
    1062:	1902      	addi      	r1, sp, 8
    1064:	1a01      	addi      	r2, sp, 4
    1066:	9120      	ld.w      	r1, (r1, 0x0)
    1068:	9240      	ld.w      	r2, (r2, 0x0)
    106a:	6c84      	or      	r2, r1
    106c:	b340      	st.w      	r2, (r3, 0x0)
	writel(value, addr);
    106e:	1a02      	addi      	r2, sp, 8
    1070:	6cfb      	mov      	r3, sp
    1072:	9200      	ld.w      	r0, (r2, 0x0)
    1074:	9320      	ld.w      	r1, (r3, 0x0)
    1076:	e3ffffdb 	bsr      	0x102c	//102c <writel>
    107a:	c4004820 	lsli      	r0, r0, 0
}
    107e:	1403      	addi      	sp, sp, 12
    1080:	1491      	pop      	r4, r15
	...

00001084 <dw_clear>:

static inline void dw_clear(Bit32u val, void* addr)
{
    1084:	14d1      	push      	r4, r15
    1086:	1423      	subi      	sp, sp, 12
    1088:	1b01      	addi      	r3, sp, 4
    108a:	b300      	st.w      	r0, (r3, 0x0)
    108c:	6cfb      	mov      	r3, sp
    108e:	b320      	st.w      	r1, (r3, 0x0)
	Bit32u value;
	value =readl(addr);
    1090:	1c02      	addi      	r4, sp, 8
    1092:	6cfb      	mov      	r3, sp
    1094:	9300      	ld.w      	r0, (r3, 0x0)
    1096:	e3ffffc1 	bsr      	0x1018	//1018 <readl>
    109a:	c4004820 	lsli      	r0, r0, 0
    109e:	b400      	st.w      	r0, (r4, 0x0)
	value &= ~val;
    10a0:	1b01      	addi      	r3, sp, 4
    10a2:	9360      	ld.w      	r3, (r3, 0x0)
    10a4:	c4632481 	nor      	r1, r3, r3
    10a8:	1b02      	addi      	r3, sp, 8
    10aa:	1a02      	addi      	r2, sp, 8
    10ac:	9240      	ld.w      	r2, (r2, 0x0)
    10ae:	6884      	and      	r2, r1
    10b0:	b340      	st.w      	r2, (r3, 0x0)
	writel(value, addr);
    10b2:	1a02      	addi      	r2, sp, 8
    10b4:	6cfb      	mov      	r3, sp
    10b6:	9200      	ld.w      	r0, (r2, 0x0)
    10b8:	9320      	ld.w      	r1, (r3, 0x0)
    10ba:	e3ffffb9 	bsr      	0x102c	//102c <writel>
    10be:	c4004820 	lsli      	r0, r0, 0
}
    10c2:	1403      	addi      	sp, sp, 12
    10c4:	1491      	pop      	r4, r15
    10c6:	0000      	.short	0x0000
    10c8:	00001018 	.long	0x00001018
    10cc:	0000102c 	.long	0x0000102c

000010d0 <cmdresq_msg_recv>:
#include "io.h"

struct cmdresq_t* p_cmdresq;
static CKStruct_IRQHandler irqhandler;  /*the struct must be put outside the function*/

Bit32u cmdresq_msg_recv(cmdresq_mcu_number mcu_number, struct comdresq_msg_info* msg_info){
    10d0:	14d1      	push      	r4, r15
    10d2:	1425      	subi      	sp, sp, 20
    10d4:	1b01      	addi      	r3, sp, 4
    10d6:	b300      	st.w      	r0, (r3, 0x0)
    10d8:	6cfb      	mov      	r3, sp
    10da:	b320      	st.w      	r1, (r3, 0x0)
	Bit32u payload;
	Bit32u val;
	Bit32u pending_number;

	val = reg_readl(p_cmdresq, irq);
    10dc:	1361      	lrw      	r3, 0x13ab8	//13ab8 <p_cmdresq>
    10de:	9360      	ld.w      	r3, (r3, 0x0)
    10e0:	2307      	addi      	r3, 8      	//0x8
    10e2:	1c02      	addi      	r4, sp, 8
    10e4:	6c0f      	mov      	r0, r3
    10e6:	e3ffff99 	bsr      	0x1018	//1018 <readl>
    10ea:	c4004820 	lsli      	r0, r0, 0
    10ee:	b400      	st.w      	r0, (r4, 0x0)

	switch(mcu_number){
    10f0:	1b01      	addi      	r3, sp, 4
    10f2:	9360      	ld.w      	r3, (r3, 0x0)
    10f4:	3b42      	cmpnei      	r3, 2
    10f6:	0c0d      	bf      	0x1110	//1110 <cmdresq_msg_recv+0x40>
    10f8:	3b43      	cmpnei      	r3, 3
    10fa:	0c13      	bf      	0x1120	//1120 <cmdresq_msg_recv+0x50>
    10fc:	3b41      	cmpnei      	r3, 1
    10fe:	0819      	bt      	0x1130	//1130 <cmdresq_msg_recv+0x60>
		case cmdresq_mcu1:
			pending_number = (val >> CMDRESQ_IRQ_LEFT_MCU1_BIT)&CMDRESQ_IRQ_LEFT_MCU_MASK;
    1100:	1b02      	addi      	r3, sp, 8
    1102:	9360      	ld.w      	r3, (r3, 0x0)
    1104:	4b50      	lsri      	r2, r3, 16
    1106:	1b03      	addi      	r3, sp, 12
    1108:	e442200f 	andi      	r2, r2, 15
    110c:	b340      	st.w      	r2, (r3, 0x0)
		   break;
    110e:	0412      	br      	0x1132	//1132 <cmdresq_msg_recv+0x62>
		case cmdresq_mcu2:
			pending_number = (val >> CMDRESQ_IRQ_LEFT_MCU2_BIT)&CMDRESQ_IRQ_LEFT_MCU_MASK;
    1110:	1b02      	addi      	r3, sp, 8
    1112:	9360      	ld.w      	r3, (r3, 0x0)
    1114:	4b54      	lsri      	r2, r3, 20
    1116:	1b03      	addi      	r3, sp, 12
    1118:	e442200f 	andi      	r2, r2, 15
    111c:	b340      	st.w      	r2, (r3, 0x0)
		   break;	
    111e:	040a      	br      	0x1132	//1132 <cmdresq_msg_recv+0x62>
		case cmdresq_mcu3:
			pending_number = (val >> CMDRESQ_IRQ_LEFT_MCU3_BIT)&CMDRESQ_IRQ_LEFT_MCU_MASK;
    1120:	1b02      	addi      	r3, sp, 8
    1122:	9360      	ld.w      	r3, (r3, 0x0)
    1124:	4b58      	lsri      	r2, r3, 24
    1126:	1b03      	addi      	r3, sp, 12
    1128:	e442200f 	andi      	r2, r2, 15
    112c:	b340      	st.w      	r2, (r3, 0x0)
		   break;	
    112e:	0402      	br      	0x1132	//1132 <cmdresq_msg_recv+0x62>
		default:
		   break;
    1130:	6c00      	or      	r0, r0
	}

	if(pending_number){
    1132:	1b03      	addi      	r3, sp, 12
    1134:	9360      	ld.w      	r3, (r3, 0x0)
    1136:	e903001a 	bez      	r3, 0x116a	//116a <cmdresq_msg_recv+0x9a>
		val = reg_readl(p_cmdresq, cmd);
    113a:	126a      	lrw      	r3, 0x13ab8	//13ab8 <p_cmdresq>
    113c:	9360      	ld.w      	r3, (r3, 0x0)
    113e:	2303      	addi      	r3, 4      	//0x4
    1140:	1c02      	addi      	r4, sp, 8
    1142:	6c0f      	mov      	r0, r3
    1144:	e3ffff6a 	bsr      	0x1018	//1018 <readl>
    1148:	c4004820 	lsli      	r0, r0, 0
    114c:	b400      	st.w      	r0, (r4, 0x0)
		payload = val&CMDRESQ_PAYLOAD_MASK;
    114e:	1b04      	addi      	r3, sp, 16
    1150:	1a02      	addi      	r2, sp, 8
    1152:	9240      	ld.w      	r2, (r2, 0x0)
    1154:	b340      	st.w      	r2, (r3, 0x0)
		msg_info->src =  (val>>CMDRESQ_CMD_SOURCE)&CMDRESQ_ADDR_MASK;
    1156:	1b02      	addi      	r3, sp, 8
    1158:	9360      	ld.w      	r3, (r3, 0x0)
    115a:	4b7c      	lsri      	r3, r3, 28
    115c:	74cc      	zextb      	r3, r3
    115e:	e4632003 	andi      	r3, r3, 3
    1162:	748c      	zextb      	r2, r3
    1164:	6cfb      	mov      	r3, sp
    1166:	9360      	ld.w      	r3, (r3, 0x0)
    1168:	a340      	st.b      	r2, (r3, 0x0)
	}

	msg_info->payload = payload;
    116a:	6cfb      	mov      	r3, sp
    116c:	9360      	ld.w      	r3, (r3, 0x0)
    116e:	1a04      	addi      	r2, sp, 16
    1170:	9240      	ld.w      	r2, (r2, 0x0)
    1172:	b341      	st.w      	r2, (r3, 0x4)
	msg_info->dst = mcu_number; 
    1174:	1b01      	addi      	r3, sp, 4
    1176:	9360      	ld.w      	r3, (r3, 0x0)
    1178:	748c      	zextb      	r2, r3
    117a:	6cfb      	mov      	r3, sp
    117c:	9360      	ld.w      	r3, (r3, 0x0)
    117e:	a341      	st.b      	r2, (r3, 0x1)

	return 0;
    1180:	3300      	movi      	r3, 0      	//0x0
}
    1182:	6c0f      	mov      	r0, r3
    1184:	1405      	addi      	sp, sp, 20
    1186:	1491      	pop      	r4, r15

00001188 <cmdresq_msg_send>:

Bit32u cmdresq_msg_send(struct comdresq_msg_info* msg_info){
    1188:	14d0      	push      	r15
    118a:	1422      	subi      	sp, sp, 8
    118c:	6cfb      	mov      	r3, sp
    118e:	b300      	st.w      	r0, (r3, 0x0)
	Bit32u val = 0;
    1190:	1b01      	addi      	r3, sp, 4
    1192:	3200      	movi      	r2, 0      	//0x0
    1194:	b340      	st.w      	r2, (r3, 0x0)

	/* set source addr */
	val |= (msg_info->src << CMDRESQ_PD_DESTINATION);
    1196:	6cfb      	mov      	r3, sp
    1198:	9360      	ld.w      	r3, (r3, 0x0)
    119a:	8360      	ld.b      	r3, (r3, 0x0)
    119c:	74cc      	zextb      	r3, r3
    119e:	437c      	lsli      	r3, r3, 28
    11a0:	6c4f      	mov      	r1, r3
    11a2:	1b01      	addi      	r3, sp, 4
    11a4:	1a01      	addi      	r2, sp, 4
    11a6:	9240      	ld.w      	r2, (r2, 0x0)
    11a8:	6c84      	or      	r2, r1
    11aa:	b340      	st.w      	r2, (r3, 0x0)
	val |= (msg_info->payload&CMDRESQ_PAYLOAD_MASK);
    11ac:	6cfb      	mov      	r3, sp
    11ae:	9360      	ld.w      	r3, (r3, 0x0)
    11b0:	9321      	ld.w      	r1, (r3, 0x4)
    11b2:	1b01      	addi      	r3, sp, 4
    11b4:	1a01      	addi      	r2, sp, 4
    11b6:	9240      	ld.w      	r2, (r2, 0x0)
    11b8:	6c84      	or      	r2, r1
    11ba:	b340      	st.w      	r2, (r3, 0x0)
	reg_writel(val, p_cmdresq, cmd);
    11bc:	1169      	lrw      	r3, 0x13ab8	//13ab8 <p_cmdresq>
    11be:	9360      	ld.w      	r3, (r3, 0x0)
    11c0:	2303      	addi      	r3, 4      	//0x4
    11c2:	1a01      	addi      	r2, sp, 4
    11c4:	9200      	ld.w      	r0, (r2, 0x0)
    11c6:	6c4f      	mov      	r1, r3
    11c8:	e3ffff3e 	bsr      	0x1044	//1044 <dw_write>
    11cc:	c4004820 	lsli      	r0, r0, 0
}
    11d0:	6c0f      	mov      	r0, r3
    11d2:	1402      	addi      	sp, sp, 8
    11d4:	1490      	pop      	r15
	...

000011d8 <CK_cmdresq_Handler>:

void CK_cmdresq_Handler(Bit32u irqid)
{
    11d8:	14d1      	push      	r4, r15
    11da:	1422      	subi      	sp, sp, 8
    11dc:	6cfb      	mov      	r3, sp
    11de:	b300      	st.w      	r0, (r3, 0x0)
	Bit32u val;
	val = reg_readl(p_cmdresq, irq); 
    11e0:	1160      	lrw      	r3, 0x13ab8	//13ab8 <p_cmdresq>
    11e2:	9360      	ld.w      	r3, (r3, 0x0)
    11e4:	2307      	addi      	r3, 8      	//0x8
    11e6:	1c01      	addi      	r4, sp, 4
    11e8:	6c0f      	mov      	r0, r3
    11ea:	e3ffff17 	bsr      	0x1018	//1018 <readl>
    11ee:	c4004820 	lsli      	r0, r0, 0
    11f2:	b400      	st.w      	r0, (r4, 0x0)

	/* deal with irq */

	/* clear irq */
	reg_direct_writel(val, p_cmdresq, irq);
    11f4:	107b      	lrw      	r3, 0x13ab8	//13ab8 <p_cmdresq>
    11f6:	9360      	ld.w      	r3, (r3, 0x0)
    11f8:	2307      	addi      	r3, 8      	//0x8
    11fa:	1a01      	addi      	r2, sp, 4
    11fc:	9200      	ld.w      	r0, (r2, 0x0)
    11fe:	6c4f      	mov      	r1, r3
    1200:	e3ffff16 	bsr      	0x102c	//102c <writel>
    1204:	c4004820 	lsli      	r0, r0, 0
}
    1208:	1402      	addi      	sp, sp, 8
    120a:	1491      	pop      	r4, r15

0000120c <cmdresq_init>:

Bit32u cmdresq_init(){
    120c:	14d0      	push      	r15
	p_cmdresq = (struct cmdresq_t*)CMDRESQ_BASE_ADDR;
    120e:	1055      	lrw      	r2, 0x13ab8	//13ab8 <p_cmdresq>
    1210:	33c0      	movi      	r3, 192      	//0xc0
    1212:	4375      	lsli      	r3, r3, 21
    1214:	b260      	st.w      	r3, (r2, 0x0)

	/* disable irq, not ready  */
	reg_clearl(CMDRESQ_CTRL_IRQENABLE, p_cmdresq, ctrl);
    1216:	1073      	lrw      	r3, 0x13ab8	//13ab8 <p_cmdresq>
    1218:	9360      	ld.w      	r3, (r3, 0x0)
    121a:	230b      	addi      	r3, 12      	//0xc
    121c:	3001      	movi      	r0, 1      	//0x1
    121e:	6c4f      	mov      	r1, r3
    1220:	e3ffff32 	bsr      	0x1084	//1084 <dw_clear>
    1224:	c4004820 	lsli      	r0, r0, 0
	/* clear interrupt flag */
	reg_clearl(0, p_cmdresq, irq);
    1228:	106e      	lrw      	r3, 0x13ab8	//13ab8 <p_cmdresq>
    122a:	9360      	ld.w      	r3, (r3, 0x0)
    122c:	2307      	addi      	r3, 8      	//0x8
    122e:	3000      	movi      	r0, 0      	//0x0
    1230:	6c4f      	mov      	r1, r3
    1232:	e3ffff29 	bsr      	0x1084	//1084 <dw_clear>
    1236:	c4004820 	lsli      	r0, r0, 0

	/* register cmdresq irq */
	CK_INTC_RequestIrq(CK_INTC_CMDRESQ, CK_cmdresq_Handler);
    123a:	3013      	movi      	r0, 19      	//0x13
    123c:	102e      	lrw      	r1, 0x11d8	//11d8 <CK_cmdresq_Handler>
    123e:	e00029dd 	bsr      	0x65f8	//65f8 <CK_INTC_RequestIrq>
    1242:	c4004820 	lsli      	r0, r0, 0

	/* enable irq */
	reg_writel(CMDRESQ_CTRL_IRQENABLE, p_cmdresq, ctrl);
    1246:	1067      	lrw      	r3, 0x13ab8	//13ab8 <p_cmdresq>
    1248:	9360      	ld.w      	r3, (r3, 0x0)
    124a:	230b      	addi      	r3, 12      	//0xc
    124c:	3001      	movi      	r0, 1      	//0x1
    124e:	6c4f      	mov      	r1, r3
    1250:	e3fffefa 	bsr      	0x1044	//1044 <dw_write>
    1254:	c4004820 	lsli      	r0, r0, 0
	return 0;
    1258:	3300      	movi      	r3, 0      	//0x0
}
    125a:	6c0f      	mov      	r0, r3
    125c:	1490      	pop      	r15
    125e:	0000      	.short	0x0000
    1260:	00013ab8 	.long	0x00013ab8
    1264:	00001018 	.long	0x00001018
    1268:	00001044 	.long	0x00001044
    126c:	0000102c 	.long	0x0000102c
    1270:	00001084 	.long	0x00001084
    1274:	000011d8 	.long	0x000011d8
    1278:	000065f8 	.long	0x000065f8

0000127c <dma_lli_init>:
}
*/

Bit8u channelid = 0;

Bit32u dma_lli_init(){
    127c:	14d1      	push      	r4, r15
    127e:	1422      	subi      	sp, sp, 8
	Bit32u val;
	struct dw_dma_common_reg* common_reg;

	common_reg = (struct dw_dma_common_reg*)APB_DMA_BASEADDR;
    1280:	1a01      	addi      	r2, sp, 4
    1282:	33cc      	movi      	r3, 204      	//0xcc
    1284:	4375      	lsli      	r3, r3, 21
    1286:	b260      	st.w      	r3, (r2, 0x0)
	dma.common_reg = common_reg;
    1288:	1165      	lrw      	r3, 0x13700	//13700 <dma>
    128a:	1a01      	addi      	r2, sp, 4
    128c:	9240      	ld.w      	r2, (r2, 0x0)
    128e:	b340      	st.w      	r2, (r3, 0x0)

	/* Disable DMA IRQ */
	dma_gloabe_int_disable(common_reg);
    1290:	1b01      	addi      	r3, sp, 4
    1292:	9300      	ld.w      	r0, (r3, 0x0)
    1294:	e0000854 	bsr      	0x233c	//233c <dma_gloabe_int_disable>
    1298:	c4004820 	lsli      	r0, r0, 0

	/* Verify DMA version number */
	val = dma_get_comp_ver(common_reg);
    129c:	6d3b      	mov      	r4, sp
    129e:	1b01      	addi      	r3, sp, 4
    12a0:	9300      	ld.w      	r0, (r3, 0x0)
    12a2:	e0000827 	bsr      	0x22f0	//22f0 <dma_get_comp_ver>
    12a6:	c4004820 	lsli      	r0, r0, 0
    12aa:	b400      	st.w      	r0, (r4, 0x0)
	printf("DMA VERSION:0x%x\n", val);
    12ac:	6cfb      	mov      	r3, sp
    12ae:	101f      	lrw      	r0, 0xfc3c	//fc3c <__etext+0x8c>
    12b0:	9320      	ld.w      	r1, (r3, 0x0)
    12b2:	e0006b4f 	bsr      	0xe950	//e950 <printf>
    12b6:	c4004820 	lsli      	r0, r0, 0
	if(val != DMA_VERSION){
    12ba:	6cfb      	mov      	r3, sp
    12bc:	9340      	ld.w      	r2, (r3, 0x0)
    12be:	107d      	lrw      	r3, 0x3130302a	//3130302a <__stack+0x30f03032>
    12c0:	64ca      	cmpne      	r2, r3
    12c2:	0c09      	bf      	0x12d4	//12d4 <dma_lli_init+0x58>
		printf("Wrong DMA VERSION, exit\n");
    12c4:	101c      	lrw      	r0, 0xfc50	//fc50 <__etext+0xa0>
    12c6:	e0006b45 	bsr      	0xe950	//e950 <printf>
    12ca:	c4004820 	lsli      	r0, r0, 0
		return DMA_ERROR;
    12ce:	3300      	movi      	r3, 0      	//0x0
    12d0:	2b00      	subi      	r3, 1      	//0x1
    12d2:	0421      	br      	0x1314	//1314 <dma_lli_init+0x98>
	}

	dma_reset(common_reg);
    12d4:	1b01      	addi      	r3, sp, 4
    12d6:	9300      	ld.w      	r0, (r3, 0x0)
    12d8:	e0000a8c 	bsr      	0x27f0	//27f0 <dma_reset>
    12dc:	c4004820 	lsli      	r0, r0, 0
	while(dma_reset_read(common_reg));
    12e0:	6c00      	or      	r0, r0
    12e2:	1b01      	addi      	r3, sp, 4
    12e4:	9300      	ld.w      	r0, (r3, 0x0)
    12e6:	e0000a95 	bsr      	0x2810	//2810 <dma_reset_read>
    12ea:	c4004820 	lsli      	r0, r0, 0
    12ee:	6cc3      	mov      	r3, r0
    12f0:	e923fff9 	bnez      	r3, 0x12e2	//12e2 <dma_lli_init+0x66>

	/* Enable DMA */
	if(!dma_dmac_is_enable(common_reg))
    12f4:	1b01      	addi      	r3, sp, 4
    12f6:	9300      	ld.w      	r0, (r3, 0x0)
    12f8:	e0000866 	bsr      	0x23c4	//23c4 <dma_dmac_is_enable>
    12fc:	c4004820 	lsli      	r0, r0, 0
    1300:	6cc3      	mov      	r3, r0
    1302:	e9230008 	bnez      	r3, 0x1312	//1312 <dma_lli_init+0x96>
		dma_dmac_enable(common_reg);
    1306:	1b01      	addi      	r3, sp, 4
    1308:	9300      	ld.w      	r0, (r3, 0x0)
    130a:	e0000829 	bsr      	0x235c	//235c <dma_dmac_enable>
    130e:	c4004820 	lsli      	r0, r0, 0
	return 0;
    1312:	3300      	movi      	r3, 0      	//0x0
}
    1314:	6c0f      	mov      	r0, r3
    1316:	1402      	addi      	sp, sp, 8
    1318:	1491      	pop      	r4, r15
    131a:	0000      	.short	0x0000
    131c:	00013700 	.long	0x00013700
    1320:	0000233c 	.long	0x0000233c
    1324:	000022f0 	.long	0x000022f0
    1328:	0000fc3c 	.long	0x0000fc3c
    132c:	0000e950 	.long	0x0000e950
    1330:	3130302a 	.long	0x3130302a
    1334:	0000fc50 	.long	0x0000fc50
    1338:	000027f0 	.long	0x000027f0
    133c:	00002810 	.long	0x00002810
    1340:	000023c4 	.long	0x000023c4
    1344:	0000235c 	.long	0x0000235c

00001348 <dma_prepare_lli_1>:

Bit32u dma_prepare_lli_1(struct dw_dma* dma,Bit8u chanid)
{
    1348:	14d0      	push      	r15
    134a:	142a      	subi      	sp, sp, 40
    134c:	1b01      	addi      	r3, sp, 4
    134e:	b300      	st.w      	r0, (r3, 0x0)
    1350:	6c87      	mov      	r2, r1
    1352:	6cfb      	mov      	r3, sp
    1354:	a340      	st.b      	r2, (r3, 0x0)
	Bit32u cfg_lo=0, cfg_hi=0, ctl_lo=0, ctl_hi=0;
    1356:	1b08      	addi      	r3, sp, 32
    1358:	3200      	movi      	r2, 0      	//0x0
    135a:	b340      	st.w      	r2, (r3, 0x0)
    135c:	1b07      	addi      	r3, sp, 28
    135e:	3200      	movi      	r2, 0      	//0x0
    1360:	b340      	st.w      	r2, (r3, 0x0)
    1362:	1b06      	addi      	r3, sp, 24
    1364:	3200      	movi      	r2, 0      	//0x0
    1366:	b340      	st.w      	r2, (r3, 0x0)
    1368:	1b05      	addi      	r3, sp, 20
    136a:	3200      	movi      	r2, 0      	//0x0
    136c:	b340      	st.w      	r2, (r3, 0x0)
	Bit32u period;
	Bit32u i;
	struct dw_dma_chan_reg * chan_reg;
	struct dma_chx_config_t* config = &dma->config[chanid];
    136e:	1b01      	addi      	r3, sp, 4
    1370:	9360      	ld.w      	r3, (r3, 0x0)
    1372:	e4230023 	addi      	r1, r3, 36      	//0x24
    1376:	6cfb      	mov      	r3, sp
    1378:	8360      	ld.b      	r3, (r3, 0x0)
    137a:	748c      	zextb      	r2, r3
    137c:	3334      	movi      	r3, 52      	//0x34
    137e:	7c8c      	mult      	r2, r3
    1380:	1b04      	addi      	r3, sp, 16
    1382:	5948      	addu      	r2, r1, r2
    1384:	b340      	st.w      	r2, (r3, 0x0)

	chan_reg = (struct dw_dma_chan_reg*)(APB_DMA_CH(chanid+1));
    1386:	6cfb      	mov      	r3, sp
    1388:	8360      	ld.b      	r3, (r3, 0x0)
    138a:	74cc      	zextb      	r3, r3
    138c:	2300      	addi      	r3, 1      	//0x1
    138e:	4368      	lsli      	r3, r3, 8
    1390:	31cc      	movi      	r1, 204      	//0xcc
    1392:	4135      	lsli      	r1, r1, 21
    1394:	5b44      	addu      	r2, r3, r1
    1396:	1b03      	addi      	r3, sp, 12
    1398:	b340      	st.w      	r2, (r3, 0x0)
	dma->chan_reg[chanid] = chan_reg;
    139a:	6cfb      	mov      	r3, sp
    139c:	8360      	ld.b      	r3, (r3, 0x0)
    139e:	748c      	zextb      	r2, r3
    13a0:	1b01      	addi      	r3, sp, 4
    13a2:	9360      	ld.w      	r3, (r3, 0x0)
    13a4:	2200      	addi      	r2, 1      	//0x1
    13a6:	1903      	addi      	r1, sp, 12
    13a8:	9120      	ld.w      	r1, (r1, 0x0)
    13aa:	d4430881 	str.w      	r1, (r3, r2<<2)
	config->channel = chanid+1;
    13ae:	6cfb      	mov      	r3, sp
    13b0:	8360      	ld.b      	r3, (r3, 0x0)
    13b2:	74cc      	zextb      	r3, r3
    13b4:	2300      	addi      	r3, 1      	//0x1
    13b6:	6c8f      	mov      	r2, r3
    13b8:	1b04      	addi      	r3, sp, 16
    13ba:	9360      	ld.w      	r3, (r3, 0x0)
    13bc:	b340      	st.w      	r2, (r3, 0x0)

	/* Clear chx CFG to 0 */
	dma_chx_cfg_lo_direct_write(chan_reg, 0);
    13be:	1b03      	addi      	r3, sp, 12
    13c0:	9300      	ld.w      	r0, (r3, 0x0)
    13c2:	3100      	movi      	r1, 0      	//0x0
    13c4:	e0000b2c 	bsr      	0x2a1c	//2a1c <dma_chx_cfg_lo_direct_write>
    13c8:	c4004820 	lsli      	r0, r0, 0
	dma_chx_cfg_hi_direct_write(chan_reg, 0);
    13cc:	1b03      	addi      	r3, sp, 12
    13ce:	9300      	ld.w      	r0, (r3, 0x0)
    13d0:	3100      	movi      	r1, 0      	//0x0
    13d2:	e0000b59 	bsr      	0x2a84	//2a84 <dma_chx_cfg_hi_direct_write>
    13d6:	c4004820 	lsli      	r0, r0, 0

	/* set chx cfg Low */
	cfg_lo |= DMA_CHX_CFG_SRC_MULTBLK_TYPE(config->src_trf_mode);
    13da:	1b04      	addi      	r3, sp, 16
    13dc:	9360      	ld.w      	r3, (r3, 0x0)
    13de:	932a      	ld.w      	r1, (r3, 0x28)
    13e0:	1b08      	addi      	r3, sp, 32
    13e2:	1a08      	addi      	r2, sp, 32
    13e4:	9240      	ld.w      	r2, (r2, 0x0)
    13e6:	6c84      	or      	r2, r1
    13e8:	b340      	st.w      	r2, (r3, 0x0)
	cfg_lo |= DMA_CHX_CFG_DST_MULTBLK_TYPE(config->dst_trf_mode);
    13ea:	1b04      	addi      	r3, sp, 16
    13ec:	9360      	ld.w      	r3, (r3, 0x0)
    13ee:	936b      	ld.w      	r3, (r3, 0x2c)
    13f0:	4322      	lsli      	r1, r3, 2
    13f2:	1b08      	addi      	r3, sp, 32
    13f4:	1a08      	addi      	r2, sp, 32
    13f6:	9240      	ld.w      	r2, (r2, 0x0)
    13f8:	6c84      	or      	r2, r1
    13fa:	b340      	st.w      	r2, (r3, 0x0)
	/* set chx cfg High */
	cfg_hi |= DMA_CHX_CFG_TT_FC(config->trf_type);
    13fc:	1b04      	addi      	r3, sp, 16
    13fe:	9360      	ld.w      	r3, (r3, 0x0)
    1400:	9329      	ld.w      	r1, (r3, 0x24)
    1402:	1b07      	addi      	r3, sp, 28
    1404:	1a07      	addi      	r2, sp, 28
    1406:	9240      	ld.w      	r2, (r2, 0x0)
    1408:	6c84      	or      	r2, r1
    140a:	b340      	st.w      	r2, (r3, 0x0)
	cfg_hi |= DMA_CHX_CFG_HS_SEL_SRC;	/*src software handshark */
    140c:	1b07      	addi      	r3, sp, 28
    140e:	1a07      	addi      	r2, sp, 28
    1410:	9240      	ld.w      	r2, (r2, 0x0)
    1412:	3aa3      	bseti      	r2, 3
    1414:	b340      	st.w      	r2, (r3, 0x0)
	cfg_hi |= DMA_CHX_CFG_HS_SEL_DST;	/*dst software handshark */
    1416:	1b07      	addi      	r3, sp, 28
    1418:	1a07      	addi      	r2, sp, 28
    141a:	9240      	ld.w      	r2, (r2, 0x0)
    141c:	3aa4      	bseti      	r2, 4
    141e:	b340      	st.w      	r2, (r3, 0x0)

	dma_chx_cfg_lo_direct_write(chan_reg, cfg_lo);
    1420:	1a03      	addi      	r2, sp, 12
    1422:	1b08      	addi      	r3, sp, 32
    1424:	9200      	ld.w      	r0, (r2, 0x0)
    1426:	9320      	ld.w      	r1, (r3, 0x0)
    1428:	e0000afa 	bsr      	0x2a1c	//2a1c <dma_chx_cfg_lo_direct_write>
    142c:	c4004820 	lsli      	r0, r0, 0
	dma_chx_cfg_hi_direct_write(chan_reg, cfg_hi);
    1430:	1a03      	addi      	r2, sp, 12
    1432:	1b07      	addi      	r3, sp, 28
    1434:	9200      	ld.w      	r0, (r2, 0x0)
    1436:	9320      	ld.w      	r1, (r3, 0x0)
    1438:	e0000b26 	bsr      	0x2a84	//2a84 <dma_chx_cfg_hi_direct_write>
    143c:	c4004820 	lsli      	r0, r0, 0

	/* set chx CTL Low */
	ctl_lo |= DMA_CHX_CTL_SMS(config->sms);
    1440:	1b04      	addi      	r3, sp, 16
    1442:	9360      	ld.w      	r3, (r3, 0x0)
    1444:	9322      	ld.w      	r1, (r3, 0x8)
    1446:	1b06      	addi      	r3, sp, 24
    1448:	1a06      	addi      	r2, sp, 24
    144a:	9240      	ld.w      	r2, (r2, 0x0)
    144c:	6c84      	or      	r2, r1
    144e:	b340      	st.w      	r2, (r3, 0x0)
	ctl_lo |= DMA_CHX_CTL_DMS(config->dms);
    1450:	1b04      	addi      	r3, sp, 16
    1452:	9360      	ld.w      	r3, (r3, 0x0)
    1454:	9363      	ld.w      	r3, (r3, 0xc)
    1456:	4322      	lsli      	r1, r3, 2
    1458:	1b06      	addi      	r3, sp, 24
    145a:	1a06      	addi      	r2, sp, 24
    145c:	9240      	ld.w      	r2, (r2, 0x0)
    145e:	6c84      	or      	r2, r1
    1460:	b340      	st.w      	r2, (r3, 0x0)
	ctl_lo |= DMA_CHX_CTL_SING(config->src_addr_mode);
    1462:	1b04      	addi      	r3, sp, 16
    1464:	9360      	ld.w      	r3, (r3, 0x0)
    1466:	9367      	ld.w      	r3, (r3, 0x1c)
    1468:	4324      	lsli      	r1, r3, 4
    146a:	1b06      	addi      	r3, sp, 24
    146c:	1a06      	addi      	r2, sp, 24
    146e:	9240      	ld.w      	r2, (r2, 0x0)
    1470:	6c84      	or      	r2, r1
    1472:	b340      	st.w      	r2, (r3, 0x0)
	ctl_lo |= DMA_CHX_CTL_DING(config->dst_addr_mode);
    1474:	1b04      	addi      	r3, sp, 16
    1476:	9360      	ld.w      	r3, (r3, 0x0)
    1478:	9368      	ld.w      	r3, (r3, 0x20)
    147a:	4326      	lsli      	r1, r3, 6
    147c:	1b06      	addi      	r3, sp, 24
    147e:	1a06      	addi      	r2, sp, 24
    1480:	9240      	ld.w      	r2, (r2, 0x0)
    1482:	6c84      	or      	r2, r1
    1484:	b340      	st.w      	r2, (r3, 0x0)
	ctl_lo |= DMA_CHX_CTL_SRC_TR_WIDTH(DMA_CTL_TR_WIDTH_128);	/* src transfer width */
    1486:	1b06      	addi      	r3, sp, 24
    1488:	1a06      	addi      	r2, sp, 24
    148a:	9240      	ld.w      	r2, (r2, 0x0)
    148c:	3aaa      	bseti      	r2, 10
    148e:	b340      	st.w      	r2, (r3, 0x0)
	ctl_lo |= DMA_CHX_CTL_DST_TR_WIDTH(DMA_CTL_TR_WIDTH_128);	/* dst transfer width */
    1490:	1b06      	addi      	r3, sp, 24
    1492:	1a06      	addi      	r2, sp, 24
    1494:	9240      	ld.w      	r2, (r2, 0x0)
    1496:	3aad      	bseti      	r2, 13
    1498:	b340      	st.w      	r2, (r3, 0x0)
	ctl_lo |= DMA_CHX_CTL_SRC_MSIZE(DMA_CTL_BURST_LENGTH_512);	/* src burst transaction length */
    149a:	1b06      	addi      	r3, sp, 24
    149c:	1a06      	addi      	r2, sp, 24
    149e:	9240      	ld.w      	r2, (r2, 0x0)
    14a0:	3ab1      	bseti      	r2, 17
    14a2:	b340      	st.w      	r2, (r3, 0x0)
	ctl_lo |= DMA_CHX_CTL_DST_MSIZE(DMA_CTL_BURST_LENGTH_512);	/* dst burst transaction length */
    14a4:	1b06      	addi      	r3, sp, 24
    14a6:	1a06      	addi      	r2, sp, 24
    14a8:	9240      	ld.w      	r2, (r2, 0x0)
    14aa:	3ab5      	bseti      	r2, 21
    14ac:	b340      	st.w      	r2, (r3, 0x0)
	/* set chx CTL High */
	ctl_hi |= DMA_CHX_CTL_ARLEN_EN;							/* Src Burst Lenght Enable */
    14ae:	1b05      	addi      	r3, sp, 20
    14b0:	1a05      	addi      	r2, sp, 20
    14b2:	9240      	ld.w      	r2, (r2, 0x0)
    14b4:	3aa6      	bseti      	r2, 6
    14b6:	b340      	st.w      	r2, (r3, 0x0)
	ctl_hi |= DMA_CHX_CTL_AWLEN_EN;							/* Dst Burst Lenght Enable */
    14b8:	1b05      	addi      	r3, sp, 20
    14ba:	1a05      	addi      	r2, sp, 20
    14bc:	9240      	ld.w      	r2, (r2, 0x0)
    14be:	3aaf      	bseti      	r2, 15
    14c0:	b340      	st.w      	r2, (r3, 0x0)
	ctl_hi |= DMA_CHX_CTL_ARLEN(DMA_CTL_BURST_LENGTH_4);		/* Src Burst Lenght Size */
    14c2:	1b05      	addi      	r3, sp, 20
    14c4:	1a05      	addi      	r2, sp, 20
    14c6:	9240      	ld.w      	r2, (r2, 0x0)
    14c8:	3aa7      	bseti      	r2, 7
    14ca:	b340      	st.w      	r2, (r3, 0x0)
	ctl_hi |= DMA_CHX_CTL_AWLEN(DMA_CTL_BURST_LENGTH_4);		/* Dst Burst Lenght Size */
    14cc:	1b05      	addi      	r3, sp, 20
    14ce:	1a05      	addi      	r2, sp, 20
    14d0:	9240      	ld.w      	r2, (r2, 0x0)
    14d2:	3ab0      	bseti      	r2, 16
    14d4:	b340      	st.w      	r2, (r3, 0x0)
	ctl_hi |= DMA_CHX_CTL_SHADOWREG_OR_LLI_VALID;
    14d6:	1b05      	addi      	r3, sp, 20
    14d8:	1a05      	addi      	r2, sp, 20
    14da:	9240      	ld.w      	r2, (r2, 0x0)
    14dc:	3abf      	bseti      	r2, 31
    14de:	b340      	st.w      	r2, (r3, 0x0)
	//ctl_hi |= DMA_CHX_CTL_SHADOWREG_OR_LLI_LAST;
	ctl_hi |= DMA_CHX_CTL_SRC_STAT_EN;
    14e0:	1b05      	addi      	r3, sp, 20
    14e2:	1a05      	addi      	r2, sp, 20
    14e4:	9240      	ld.w      	r2, (r2, 0x0)
    14e6:	3ab8      	bseti      	r2, 24
    14e8:	b340      	st.w      	r2, (r3, 0x0)
	ctl_hi |= DMA_CHX_CTL_DST_STAT_EN;
    14ea:	1b05      	addi      	r3, sp, 20
    14ec:	1a05      	addi      	r2, sp, 20
    14ee:	9240      	ld.w      	r2, (r2, 0x0)
    14f0:	3ab9      	bseti      	r2, 25
    14f2:	b340      	st.w      	r2, (r3, 0x0)

	/* dma_chx_ctl_hi_write(chan_reg, ctl_hi); */
	/* dma_chx_ctl_lo_write(chan_reg, ctl_lo); */

	 //period =  config->data_size/64;
	period =  config->data_size/128;
    14f4:	1b04      	addi      	r3, sp, 16
    14f6:	9360      	ld.w      	r3, (r3, 0x0)
    14f8:	9344      	ld.w      	r2, (r3, 0x10)
    14fa:	1b02      	addi      	r3, sp, 8
    14fc:	4a47      	lsri      	r2, r2, 7
    14fe:	b340      	st.w      	r2, (r3, 0x0)
	config->lli = lli;
    1500:	1b04      	addi      	r3, sp, 16
    1502:	9360      	ld.w      	r3, (r3, 0x0)
    1504:	1148      	lrw      	r2, 0x13900	//13900 <lli>
    1506:	b34c      	st.w      	r2, (r3, 0x30)

	for(i=0; i<period; i++){
    1508:	1b09      	addi      	r3, sp, 36
    150a:	3200      	movi      	r2, 0      	//0x0
    150c:	b340      	st.w      	r2, (r3, 0x0)
    150e:	04f2      	br      	0x16f2	//16f2 <dma_prepare_lli_1+0x3aa>
		lli[i].block_ts = config->data_size * period;
    1510:	1b04      	addi      	r3, sp, 16
    1512:	9360      	ld.w      	r3, (r3, 0x0)
    1514:	9344      	ld.w      	r2, (r3, 0x10)
    1516:	1b02      	addi      	r3, sp, 8
    1518:	9360      	ld.w      	r3, (r3, 0x0)
    151a:	7c8c      	mult      	r2, r3
    151c:	1102      	lrw      	r0, 0x13900	//13900 <lli>
    151e:	1b09      	addi      	r3, sp, 36
    1520:	9320      	ld.w      	r1, (r3, 0x0)
    1522:	3310      	movi      	r3, 16      	//0x10
    1524:	4126      	lsli      	r1, r1, 6
    1526:	5824      	addu      	r1, r0, r1
    1528:	596c      	addu      	r3, r1, r3
    152a:	b340      	st.w      	r2, (r3, 0x0)

		switch (config->dir) {
    152c:	1b04      	addi      	r3, sp, 16
    152e:	9360      	ld.w      	r3, (r3, 0x0)
    1530:	9361      	ld.w      	r3, (r3, 0x4)
    1532:	3b41      	cmpnei      	r3, 1
    1534:	0c06      	bf      	0x1540	//1540 <dma_prepare_lli_1+0x1f8>
    1536:	3b00      	cmphsi      	r3, 1      	//0x1
    1538:	0c65      	bf      	0x1602	//1602 <dma_prepare_lli_1+0x2ba>
    153a:	3b42      	cmpnei      	r3, 2
    153c:	0c36      	bf      	0x15a8	//15a8 <dma_prepare_lli_1+0x260>
							lli[i].dar = config->dst_addr + 0x200 * i;
							lli[i].ctl_lo = ctl_lo;
							lli[i].ctl_hi = ctl_hi;
							break;
			default:
				break;
    153e:	0493      	br      	0x1664	//1664 <dma_prepare_lli_1+0x31c>
	for(i=0; i<period; i++){
		lli[i].block_ts = config->data_size * period;

		switch (config->dir) {
			case DMA_MEM_TO_DEV:
				lli[i].sar = config->src_addr + 0x200 * i;
    1540:	1b04      	addi      	r3, sp, 16
    1542:	9360      	ld.w      	r3, (r3, 0x0)
    1544:	9345      	ld.w      	r2, (r3, 0x14)
    1546:	1b09      	addi      	r3, sp, 36
    1548:	9360      	ld.w      	r3, (r3, 0x0)
    154a:	4369      	lsli      	r3, r3, 9
    154c:	5a2c      	addu      	r1, r2, r3
    154e:	1076      	lrw      	r3, 0x13900	//13900 <lli>
    1550:	1a09      	addi      	r2, sp, 36
    1552:	9240      	ld.w      	r2, (r2, 0x0)
    1554:	4246      	lsli      	r2, r2, 6
    1556:	d4620821 	str.w      	r1, (r2, r3<<0)
				lli[i].dar = config->dst_addr;
    155a:	1b04      	addi      	r3, sp, 16
    155c:	9360      	ld.w      	r3, (r3, 0x0)
    155e:	9346      	ld.w      	r2, (r3, 0x18)
    1560:	1011      	lrw      	r0, 0x13900	//13900 <lli>
    1562:	1b09      	addi      	r3, sp, 36
    1564:	9320      	ld.w      	r1, (r3, 0x0)
    1566:	3308      	movi      	r3, 8      	//0x8
    1568:	4126      	lsli      	r1, r1, 6
    156a:	5824      	addu      	r1, r0, r1
    156c:	596c      	addu      	r3, r1, r3
    156e:	b340      	st.w      	r2, (r3, 0x0)
				lli[i].ctl_lo = ctl_lo;
    1570:	102d      	lrw      	r1, 0x13900	//13900 <lli>
    1572:	1b09      	addi      	r3, sp, 36
    1574:	9340      	ld.w      	r2, (r3, 0x0)
    1576:	3320      	movi      	r3, 32      	//0x20
    1578:	4246      	lsli      	r2, r2, 6
    157a:	5948      	addu      	r2, r1, r2
    157c:	5a6c      	addu      	r3, r2, r3
    157e:	1a06      	addi      	r2, sp, 24
    1580:	9240      	ld.w      	r2, (r2, 0x0)
    1582:	b340      	st.w      	r2, (r3, 0x0)
				lli[i].ctl_hi = ctl_hi;
    1584:	1028      	lrw      	r1, 0x13900	//13900 <lli>
    1586:	1b09      	addi      	r3, sp, 36
    1588:	9340      	ld.w      	r2, (r3, 0x0)
    158a:	3324      	movi      	r3, 36      	//0x24
    158c:	4246      	lsli      	r2, r2, 6
    158e:	5948      	addu      	r2, r1, r2
    1590:	5a6c      	addu      	r3, r2, r3
    1592:	1a05      	addi      	r2, sp, 20
    1594:	9240      	ld.w      	r2, (r2, 0x0)
    1596:	b340      	st.w      	r2, (r3, 0x0)
				break;
    1598:	0466      	br      	0x1664	//1664 <dma_prepare_lli_1+0x31c>
    159a:	0000      	.short	0x0000
    159c:	00002a1c 	.long	0x00002a1c
    15a0:	00002a84 	.long	0x00002a84
    15a4:	00013900 	.long	0x00013900
			case DMA_DEV_TO_MEM:
				lli[i].sar = config->src_addr;
    15a8:	1b04      	addi      	r3, sp, 16
    15aa:	9360      	ld.w      	r3, (r3, 0x0)
    15ac:	9325      	ld.w      	r1, (r3, 0x14)
    15ae:	136e      	lrw      	r3, 0x13900	//13900 <lli>
    15b0:	1a09      	addi      	r2, sp, 36
    15b2:	9240      	ld.w      	r2, (r2, 0x0)
    15b4:	4246      	lsli      	r2, r2, 6
    15b6:	d4620821 	str.w      	r1, (r2, r3<<0)
				lli[i].dar = config->dst_addr + 0x200 * i;
    15ba:	1b04      	addi      	r3, sp, 16
    15bc:	9360      	ld.w      	r3, (r3, 0x0)
    15be:	9346      	ld.w      	r2, (r3, 0x18)
    15c0:	1b09      	addi      	r3, sp, 36
    15c2:	9360      	ld.w      	r3, (r3, 0x0)
    15c4:	4369      	lsli      	r3, r3, 9
    15c6:	5a4c      	addu      	r2, r2, r3
    15c8:	1307      	lrw      	r0, 0x13900	//13900 <lli>
    15ca:	1b09      	addi      	r3, sp, 36
    15cc:	9320      	ld.w      	r1, (r3, 0x0)
    15ce:	3308      	movi      	r3, 8      	//0x8
    15d0:	4126      	lsli      	r1, r1, 6
    15d2:	5824      	addu      	r1, r0, r1
    15d4:	596c      	addu      	r3, r1, r3
    15d6:	b340      	st.w      	r2, (r3, 0x0)
				lli[i].ctl_lo = ctl_lo;
    15d8:	1323      	lrw      	r1, 0x13900	//13900 <lli>
    15da:	1b09      	addi      	r3, sp, 36
    15dc:	9340      	ld.w      	r2, (r3, 0x0)
    15de:	3320      	movi      	r3, 32      	//0x20
    15e0:	4246      	lsli      	r2, r2, 6
    15e2:	5948      	addu      	r2, r1, r2
    15e4:	5a6c      	addu      	r3, r2, r3
    15e6:	1a06      	addi      	r2, sp, 24
    15e8:	9240      	ld.w      	r2, (r2, 0x0)
    15ea:	b340      	st.w      	r2, (r3, 0x0)
				lli[i].ctl_hi = ctl_hi;
    15ec:	123e      	lrw      	r1, 0x13900	//13900 <lli>
    15ee:	1b09      	addi      	r3, sp, 36
    15f0:	9340      	ld.w      	r2, (r3, 0x0)
    15f2:	3324      	movi      	r3, 36      	//0x24
    15f4:	4246      	lsli      	r2, r2, 6
    15f6:	5948      	addu      	r2, r1, r2
    15f8:	5a6c      	addu      	r3, r2, r3
    15fa:	1a05      	addi      	r2, sp, 20
    15fc:	9240      	ld.w      	r2, (r2, 0x0)
    15fe:	b340      	st.w      	r2, (r3, 0x0)
				break;
    1600:	0432      	br      	0x1664	//1664 <dma_prepare_lli_1+0x31c>
			case DMA_MEM_TO_MEM:
							lli[i].sar = config->src_addr + 0x200 * i;
    1602:	1b04      	addi      	r3, sp, 16
    1604:	9360      	ld.w      	r3, (r3, 0x0)
    1606:	9345      	ld.w      	r2, (r3, 0x14)
    1608:	1b09      	addi      	r3, sp, 36
    160a:	9360      	ld.w      	r3, (r3, 0x0)
    160c:	4369      	lsli      	r3, r3, 9
    160e:	5a2c      	addu      	r1, r2, r3
    1610:	1275      	lrw      	r3, 0x13900	//13900 <lli>
    1612:	1a09      	addi      	r2, sp, 36
    1614:	9240      	ld.w      	r2, (r2, 0x0)
    1616:	4246      	lsli      	r2, r2, 6
    1618:	d4620821 	str.w      	r1, (r2, r3<<0)
							lli[i].dar = config->dst_addr + 0x200 * i;
    161c:	1b04      	addi      	r3, sp, 16
    161e:	9360      	ld.w      	r3, (r3, 0x0)
    1620:	9346      	ld.w      	r2, (r3, 0x18)
    1622:	1b09      	addi      	r3, sp, 36
    1624:	9360      	ld.w      	r3, (r3, 0x0)
    1626:	4369      	lsli      	r3, r3, 9
    1628:	5a4c      	addu      	r2, r2, r3
    162a:	120f      	lrw      	r0, 0x13900	//13900 <lli>
    162c:	1b09      	addi      	r3, sp, 36
    162e:	9320      	ld.w      	r1, (r3, 0x0)
    1630:	3308      	movi      	r3, 8      	//0x8
    1632:	4126      	lsli      	r1, r1, 6
    1634:	5824      	addu      	r1, r0, r1
    1636:	596c      	addu      	r3, r1, r3
    1638:	b340      	st.w      	r2, (r3, 0x0)
							lli[i].ctl_lo = ctl_lo;
    163a:	122b      	lrw      	r1, 0x13900	//13900 <lli>
    163c:	1b09      	addi      	r3, sp, 36
    163e:	9340      	ld.w      	r2, (r3, 0x0)
    1640:	3320      	movi      	r3, 32      	//0x20
    1642:	4246      	lsli      	r2, r2, 6
    1644:	5948      	addu      	r2, r1, r2
    1646:	5a6c      	addu      	r3, r2, r3
    1648:	1a06      	addi      	r2, sp, 24
    164a:	9240      	ld.w      	r2, (r2, 0x0)
    164c:	b340      	st.w      	r2, (r3, 0x0)
							lli[i].ctl_hi = ctl_hi;
    164e:	1226      	lrw      	r1, 0x13900	//13900 <lli>
    1650:	1b09      	addi      	r3, sp, 36
    1652:	9340      	ld.w      	r2, (r3, 0x0)
    1654:	3324      	movi      	r3, 36      	//0x24
    1656:	4246      	lsli      	r2, r2, 6
    1658:	5948      	addu      	r2, r1, r2
    165a:	5a6c      	addu      	r3, r2, r3
    165c:	1a05      	addi      	r2, sp, 20
    165e:	9240      	ld.w      	r2, (r2, 0x0)
    1660:	b340      	st.w      	r2, (r3, 0x0)
							break;
    1662:	6c00      	or      	r0, r0
			default:
				break;
		}
		if(i + 1 < period)
    1664:	1b09      	addi      	r3, sp, 36
    1666:	9360      	ld.w      	r3, (r3, 0x0)
    1668:	5b42      	addi      	r2, r3, 1      	//0x1
    166a:	1b02      	addi      	r3, sp, 8
    166c:	9360      	ld.w      	r3, (r3, 0x0)
    166e:	64c8      	cmphs      	r2, r3
    1670:	0811      	bt      	0x1692	//1692 <dma_prepare_lli_1+0x34a>
			lli[i].llp = (Bit32u)&lli[i+1];
    1672:	1b09      	addi      	r3, sp, 36
    1674:	9360      	ld.w      	r3, (r3, 0x0)
    1676:	2300      	addi      	r3, 1      	//0x1
    1678:	4346      	lsli      	r2, r3, 6
    167a:	117b      	lrw      	r3, 0x13900	//13900 <lli>
    167c:	5a6c      	addu      	r3, r2, r3
    167e:	6c8f      	mov      	r2, r3
    1680:	1119      	lrw      	r0, 0x13900	//13900 <lli>
    1682:	1b09      	addi      	r3, sp, 36
    1684:	9320      	ld.w      	r1, (r3, 0x0)
    1686:	3318      	movi      	r3, 24      	//0x18
    1688:	4126      	lsli      	r1, r1, 6
    168a:	5824      	addu      	r1, r0, r1
    168c:	596c      	addu      	r3, r1, r3
    168e:	b340      	st.w      	r2, (r3, 0x0)
    1690:	041c      	br      	0x16c8	//16c8 <dma_prepare_lli_1+0x380>
		else{
			lli[i].llp = (Bit32u)NULL;
    1692:	1135      	lrw      	r1, 0x13900	//13900 <lli>
    1694:	1b09      	addi      	r3, sp, 36
    1696:	9340      	ld.w      	r2, (r3, 0x0)
    1698:	3318      	movi      	r3, 24      	//0x18
    169a:	4246      	lsli      	r2, r2, 6
    169c:	5948      	addu      	r2, r1, r2
    169e:	5a6c      	addu      	r3, r2, r3
    16a0:	3200      	movi      	r2, 0      	//0x0
    16a2:	b340      	st.w      	r2, (r3, 0x0)
			lli[i].ctl_hi |= DMA_CHX_CTL_SHADOWREG_OR_LLI_LAST;
    16a4:	1130      	lrw      	r1, 0x13900	//13900 <lli>
    16a6:	1b09      	addi      	r3, sp, 36
    16a8:	9340      	ld.w      	r2, (r3, 0x0)
    16aa:	3324      	movi      	r3, 36      	//0x24
    16ac:	4246      	lsli      	r2, r2, 6
    16ae:	5948      	addu      	r2, r1, r2
    16b0:	5a6c      	addu      	r3, r2, r3
    16b2:	9360      	ld.w      	r3, (r3, 0x0)
    16b4:	c7c32842 	bseti      	r2, r3, 30
    16b8:	110b      	lrw      	r0, 0x13900	//13900 <lli>
    16ba:	1b09      	addi      	r3, sp, 36
    16bc:	9320      	ld.w      	r1, (r3, 0x0)
    16be:	3324      	movi      	r3, 36      	//0x24
    16c0:	4126      	lsli      	r1, r1, 6
    16c2:	5824      	addu      	r1, r0, r1
    16c4:	596c      	addu      	r3, r1, r3
    16c6:	b340      	st.w      	r2, (r3, 0x0)
		}
		printf("lli[%d]:0x%x\n", i, lli[i].llp);
    16c8:	1127      	lrw      	r1, 0x13900	//13900 <lli>
    16ca:	1b09      	addi      	r3, sp, 36
    16cc:	9340      	ld.w      	r2, (r3, 0x0)
    16ce:	3318      	movi      	r3, 24      	//0x18
    16d0:	4246      	lsli      	r2, r2, 6
    16d2:	5948      	addu      	r2, r1, r2
    16d4:	5a6c      	addu      	r3, r2, r3
    16d6:	9360      	ld.w      	r3, (r3, 0x0)
    16d8:	1a09      	addi      	r2, sp, 36
    16da:	1104      	lrw      	r0, 0xfc6c	//fc6c <__etext+0xbc>
    16dc:	9220      	ld.w      	r1, (r2, 0x0)
    16de:	6c8f      	mov      	r2, r3
    16e0:	e0006938 	bsr      	0xe950	//e950 <printf>
    16e4:	c4004820 	lsli      	r0, r0, 0

	 //period =  config->data_size/64;
	period =  config->data_size/128;
	config->lli = lli;

	for(i=0; i<period; i++){
    16e8:	1b09      	addi      	r3, sp, 36
    16ea:	1a09      	addi      	r2, sp, 36
    16ec:	9240      	ld.w      	r2, (r2, 0x0)
    16ee:	2200      	addi      	r2, 1      	//0x1
    16f0:	b340      	st.w      	r2, (r3, 0x0)
    16f2:	1a09      	addi      	r2, sp, 36
    16f4:	1b02      	addi      	r3, sp, 8
    16f6:	9240      	ld.w      	r2, (r2, 0x0)
    16f8:	9360      	ld.w      	r3, (r3, 0x0)
    16fa:	64c8      	cmphs      	r2, r3
    16fc:	0f0a      	bf      	0x1510	//1510 <dma_prepare_lli_1+0x1c8>
			lli[i].llp = (Bit32u)NULL;
			lli[i].ctl_hi |= DMA_CHX_CTL_SHADOWREG_OR_LLI_LAST;
		}
		printf("lli[%d]:0x%x\n", i, lli[i].llp);
	}
	return 0;
    16fe:	3300      	movi      	r3, 0      	//0x0
}
    1700:	6c0f      	mov      	r0, r3
    1702:	140a      	addi      	sp, sp, 40
    1704:	1490      	pop      	r15
	...

00001708 <dma_lli_start_1>:

Bit32u dma_lli_start_1(struct dw_dma* dma,Bit8u chanid)
{
    1708:	14d0      	push      	r15
    170a:	1422      	subi      	sp, sp, 8
    170c:	1b01      	addi      	r3, sp, 4
    170e:	b300      	st.w      	r0, (r3, 0x0)
    1710:	6c87      	mov      	r2, r1
    1712:	6cfb      	mov      	r3, sp
    1714:	a340      	st.b      	r2, (r3, 0x0)
	/*First Block */
	dma_chx_llp_write(dma->chan_reg[chanid], (Bit32u)&lli[0]);
    1716:	6cfb      	mov      	r3, sp
    1718:	8360      	ld.b      	r3, (r3, 0x0)
    171a:	748c      	zextb      	r2, r3
    171c:	1b01      	addi      	r3, sp, 4
    171e:	9360      	ld.w      	r3, (r3, 0x0)
    1720:	2200      	addi      	r2, 1      	//0x1
    1722:	d0430882 	ldr.w      	r2, (r3, r2<<2)
    1726:	1070      	lrw      	r3, 0x13900	//13900 <lli>
    1728:	6c0b      	mov      	r0, r2
    172a:	6c4f      	mov      	r1, r3
    172c:	e00009ce 	bsr      	0x2ac8	//2ac8 <dma_chx_llp_write>
    1730:	c4004820 	lsli      	r0, r0, 0

	/* enable channel*/
	dma_ch_enable(dma->common_reg, dma->config[chanid].channel);
    1734:	1b01      	addi      	r3, sp, 4
    1736:	9360      	ld.w      	r3, (r3, 0x0)
    1738:	9340      	ld.w      	r2, (r3, 0x0)
    173a:	6cfb      	mov      	r3, sp
    173c:	8360      	ld.b      	r3, (r3, 0x0)
    173e:	740c      	zextb      	r0, r3
    1740:	1b01      	addi      	r3, sp, 4
    1742:	9320      	ld.w      	r1, (r3, 0x0)
    1744:	3334      	movi      	r3, 52      	//0x34
    1746:	7cc0      	mult      	r3, r0
    1748:	596c      	addu      	r3, r1, r3
    174a:	2323      	addi      	r3, 36      	//0x24
    174c:	9360      	ld.w      	r3, (r3, 0x0)
    174e:	74cc      	zextb      	r3, r3
    1750:	6c0b      	mov      	r0, r2
    1752:	6c4f      	mov      	r1, r3
    1754:	e000065c 	bsr      	0x240c	//240c <dma_ch_enable>
    1758:	c4004820 	lsli      	r0, r0, 0

	/* Software Handshake request */
	//dma_blk_tfr_resume_req(dma->chan_reg[chanid);

	return 0;
    175c:	3300      	movi      	r3, 0      	//0x0
}
    175e:	6c0f      	mov      	r0, r3
    1760:	1402      	addi      	sp, sp, 8
    1762:	1490      	pop      	r15
    1764:	00013900 	.long	0x00013900
    1768:	0000fc6c 	.long	0x0000fc6c
    176c:	0000e950 	.long	0x0000e950
    1770:	00002ac8 	.long	0x00002ac8
    1774:	0000240c 	.long	0x0000240c

00001778 <dma_lli_stop_1>:

Bit32u dma_lli_stop_1(struct dw_dma* dma,Bit8u chanid)
{
    1778:	14d0      	push      	r15
    177a:	1422      	subi      	sp, sp, 8
    177c:	1b01      	addi      	r3, sp, 4
    177e:	b300      	st.w      	r0, (r3, 0x0)
    1780:	6c87      	mov      	r2, r1
    1782:	6cfb      	mov      	r3, sp
    1784:	a340      	st.b      	r2, (r3, 0x0)
	dma_ch_disable(dma->common_reg, dma->config[chanid].channel);
    1786:	1b01      	addi      	r3, sp, 4
    1788:	9360      	ld.w      	r3, (r3, 0x0)
    178a:	9340      	ld.w      	r2, (r3, 0x0)
    178c:	6cfb      	mov      	r3, sp
    178e:	8360      	ld.b      	r3, (r3, 0x0)
    1790:	740c      	zextb      	r0, r3
    1792:	1b01      	addi      	r3, sp, 4
    1794:	9320      	ld.w      	r1, (r3, 0x0)
    1796:	3334      	movi      	r3, 52      	//0x34
    1798:	7cc0      	mult      	r3, r0
    179a:	596c      	addu      	r3, r1, r3
    179c:	2323      	addi      	r3, 36      	//0x24
    179e:	9360      	ld.w      	r3, (r3, 0x0)
    17a0:	74cc      	zextb      	r3, r3
    17a2:	6c0b      	mov      	r0, r2
    17a4:	6c4f      	mov      	r1, r3
    17a6:	e000065d 	bsr      	0x2460	//2460 <dma_ch_disable>
    17aa:	c4004820 	lsli      	r0, r0, 0
	return 0;
    17ae:	3300      	movi      	r3, 0      	//0x0
}
    17b0:	6c0f      	mov      	r0, r3
    17b2:	1402      	addi      	sp, sp, 8
    17b4:	1490      	pop      	r15
    17b6:	0000      	.short	0x0000
    17b8:	00002460 	.long	0x00002460

000017bc <test_dma_lli_allchan>:

int test_dma_lli_allchan(Bit8u testnum)
{
    17bc:	14d1      	push      	r4, r15
    17be:	142b      	subi      	sp, sp, 44
    17c0:	6c83      	mov      	r2, r0
    17c2:	6cfb      	mov      	r3, sp
    17c4:	a340      	st.b      	r2, (r3, 0x0)
	printf("dma lli test begins.\n");
    17c6:	1319      	lrw      	r0, 0xfc7c	//fc7c <__etext+0xcc>
    17c8:	e00068c4 	bsr      	0xe950	//e950 <printf>
    17cc:	c4004820 	lsli      	r0, r0, 0
	struct dma_chx_config_t* config;
	Bit32u val;
	Bit32u* srcaddr = (Bit32u*)0x200000;
    17d0:	1a05      	addi      	r2, sp, 20
    17d2:	3380      	movi      	r3, 128      	//0x80
    17d4:	436e      	lsli      	r3, r3, 14
    17d6:	b260      	st.w      	r3, (r2, 0x0)
	Bit32u* dstaddr = (Bit32u*)0x210000;
    17d8:	1a04      	addi      	r2, sp, 16
    17da:	3384      	movi      	r3, 132      	//0x84
    17dc:	436e      	lsli      	r3, r3, 14
    17de:	b260      	st.w      	r3, (r2, 0x0)
	Bit8u i,temp;
	Bit32u j;
	Bit32u* psrcaddr;
	Bit32u* pdstaddr;
	Bit32u transize=0x600;
    17e0:	1a03      	addi      	r2, sp, 12
    17e2:	33c0      	movi      	r3, 192      	//0xc0
    17e4:	4363      	lsli      	r3, r3, 3
    17e6:	b260      	st.w      	r3, (r2, 0x0)

	val = dma_lli_init();
    17e8:	1c02      	addi      	r4, sp, 8
    17ea:	e3fffd49 	bsr      	0x127c	//127c <dma_lli_init>
    17ee:	c4004820 	lsli      	r0, r0, 0
    17f2:	b400      	st.w      	r0, (r4, 0x0)
	if(val < 0){
		printf("dma init error.\n");
		return -1;
	}

    psrcaddr = srcaddr;
    17f4:	1b07      	addi      	r3, sp, 28
    17f6:	1a05      	addi      	r2, sp, 20
    17f8:	9240      	ld.w      	r2, (r2, 0x0)
    17fa:	b340      	st.w      	r2, (r3, 0x0)
    pdstaddr = dstaddr;
    17fc:	1b06      	addi      	r3, sp, 24
    17fe:	1a04      	addi      	r2, sp, 16
    1800:	9240      	ld.w      	r2, (r2, 0x0)
    1802:	b340      	st.w      	r2, (r3, 0x0)
    for(j=0; j<transize; j++)
    1804:	1b08      	addi      	r3, sp, 32
    1806:	3200      	movi      	r2, 0      	//0x0
    1808:	b340      	st.w      	r2, (r3, 0x0)
    180a:	0419      	br      	0x183c	//183c <test_dma_lli_allchan+0x80>
    {
		*psrcaddr++ = j;
    180c:	1b07      	addi      	r3, sp, 28
    180e:	9360      	ld.w      	r3, (r3, 0x0)
    1810:	1a08      	addi      	r2, sp, 32
    1812:	9240      	ld.w      	r2, (r2, 0x0)
    1814:	b340      	st.w      	r2, (r3, 0x0)
    1816:	1b07      	addi      	r3, sp, 28
    1818:	1a07      	addi      	r2, sp, 28
    181a:	9240      	ld.w      	r2, (r2, 0x0)
    181c:	2203      	addi      	r2, 4      	//0x4
    181e:	b340      	st.w      	r2, (r3, 0x0)
		*pdstaddr++ = 0;
    1820:	1b06      	addi      	r3, sp, 24
    1822:	9360      	ld.w      	r3, (r3, 0x0)
    1824:	3200      	movi      	r2, 0      	//0x0
    1826:	b340      	st.w      	r2, (r3, 0x0)
    1828:	1b06      	addi      	r3, sp, 24
    182a:	1a06      	addi      	r2, sp, 24
    182c:	9240      	ld.w      	r2, (r2, 0x0)
    182e:	2203      	addi      	r2, 4      	//0x4
    1830:	b340      	st.w      	r2, (r3, 0x0)
		return -1;
	}

    psrcaddr = srcaddr;
    pdstaddr = dstaddr;
    for(j=0; j<transize; j++)
    1832:	1b08      	addi      	r3, sp, 32
    1834:	1a08      	addi      	r2, sp, 32
    1836:	9240      	ld.w      	r2, (r2, 0x0)
    1838:	2200      	addi      	r2, 1      	//0x1
    183a:	b340      	st.w      	r2, (r3, 0x0)
    183c:	1a08      	addi      	r2, sp, 32
    183e:	1b03      	addi      	r3, sp, 12
    1840:	9240      	ld.w      	r2, (r2, 0x0)
    1842:	9360      	ld.w      	r3, (r3, 0x0)
    1844:	64c8      	cmphs      	r2, r3
    1846:	0fe3      	bf      	0x180c	//180c <test_dma_lli_allchan+0x50>
		*psrcaddr++ = j;
		*pdstaddr++ = 0;
    }

	//for(i=1;i<=8;i++)
    for(i=1;i<(testnum+1);i++)
    1848:	e46e0026 	addi      	r3, sp, 39      	//0x27
    184c:	3201      	movi      	r2, 1      	//0x1
    184e:	a340      	st.b      	r2, (r3, 0x0)
    1850:	04fa      	br      	0x1a44	//1a44 <test_dma_lli_allchan+0x288>
	{
		/*channel is free?*/
		temp=dma_channel_free_query(&dma,i);
    1852:	e46e0026 	addi      	r3, sp, 39      	//0x27
    1856:	8360      	ld.b      	r3, (r3, 0x0)
    1858:	74cc      	zextb      	r3, r3
    185a:	e48e0006 	addi      	r4, sp, 7      	//0x7
    185e:	1216      	lrw      	r0, 0x13700	//13700 <dma>
    1860:	6c4f      	mov      	r1, r3
    1862:	e0000b43 	bsr      	0x2ee8	//2ee8 <dma_channel_free_query>
    1866:	c4004820 	lsli      	r0, r0, 0
    186a:	6cc3      	mov      	r3, r0
    186c:	a460      	st.b      	r3, (r4, 0x0)
		if(!temp)
    186e:	e46e0006 	addi      	r3, sp, 7      	//0x7
    1872:	8360      	ld.b      	r3, (r3, 0x0)
    1874:	74cc      	zextb      	r3, r3
    1876:	e9230081 	bnez      	r3, 0x1978	//1978 <test_dma_lli_allchan+0x1bc>
		{
			channelid=i-1;
    187a:	e46e0026 	addi      	r3, sp, 39      	//0x27
    187e:	8360      	ld.b      	r3, (r3, 0x0)
    1880:	2b00      	subi      	r3, 1      	//0x1
    1882:	748c      	zextb      	r2, r3
    1884:	126e      	lrw      	r3, 0x134cc	//134cc <channelid>
    1886:	a340      	st.b      	r2, (r3, 0x0)
			config = &dma.config[channelid];
    1888:	126d      	lrw      	r3, 0x134cc	//134cc <channelid>
    188a:	8360      	ld.b      	r3, (r3, 0x0)
    188c:	74cc      	zextb      	r3, r3
    188e:	6c8f      	mov      	r2, r3
    1890:	3334      	movi      	r3, 52      	//0x34
    1892:	c4628421 	mult      	r1, r2, r3
    1896:	1b0a      	addi      	r3, sp, 40
    1898:	124a      	lrw      	r2, 0x13724	//13724 <dma+0x24>
    189a:	5948      	addu      	r2, r1, r2
    189c:	b340      	st.w      	r2, (r3, 0x0)
			config->dir = DMA_MEM_TO_MEM;
    189e:	1b0a      	addi      	r3, sp, 40
    18a0:	9360      	ld.w      	r3, (r3, 0x0)
    18a2:	3200      	movi      	r2, 0      	//0x0
    18a4:	b341      	st.w      	r2, (r3, 0x4)
			config->data_size = transize;           /* total size to be transfer */
    18a6:	1b0a      	addi      	r3, sp, 40
    18a8:	9360      	ld.w      	r3, (r3, 0x0)
    18aa:	1a03      	addi      	r2, sp, 12
    18ac:	9240      	ld.w      	r2, (r2, 0x0)
    18ae:	b344      	st.w      	r2, (r3, 0x10)
			config->sms = DMX_AXI_MASTER_1;
    18b0:	1b0a      	addi      	r3, sp, 40
    18b2:	9360      	ld.w      	r3, (r3, 0x0)
    18b4:	3200      	movi      	r2, 0      	//0x0
    18b6:	b342      	st.w      	r2, (r3, 0x8)
			config->dms = DMX_AXI_MASTER_2;
    18b8:	1b0a      	addi      	r3, sp, 40
    18ba:	9360      	ld.w      	r3, (r3, 0x0)
    18bc:	3201      	movi      	r2, 1      	//0x1
    18be:	b343      	st.w      	r2, (r3, 0xc)
			config->src_addr = (Bit32u)(srcaddr)+0x600000;
    18c0:	1b05      	addi      	r3, sp, 20
    18c2:	9360      	ld.w      	r3, (r3, 0x0)
    18c4:	31c0      	movi      	r1, 192      	//0xc0
    18c6:	412f      	lsli      	r1, r1, 15
    18c8:	5b44      	addu      	r2, r3, r1
    18ca:	1b0a      	addi      	r3, sp, 40
    18cc:	9360      	ld.w      	r3, (r3, 0x0)
    18ce:	b345      	st.w      	r2, (r3, 0x14)
		    config->dst_addr = (Bit32u)(dstaddr)+0x600000;;
    18d0:	1b04      	addi      	r3, sp, 16
    18d2:	9360      	ld.w      	r3, (r3, 0x0)
    18d4:	31c0      	movi      	r1, 192      	//0xc0
    18d6:	412f      	lsli      	r1, r1, 15
    18d8:	5b44      	addu      	r2, r3, r1
    18da:	1b0a      	addi      	r3, sp, 40
    18dc:	9360      	ld.w      	r3, (r3, 0x0)
    18de:	b346      	st.w      	r2, (r3, 0x18)
		    config->src_addr_mode = DMA_ADDR_INC;
    18e0:	1b0a      	addi      	r3, sp, 40
    18e2:	9360      	ld.w      	r3, (r3, 0x0)
    18e4:	3200      	movi      	r2, 0      	//0x0
    18e6:	b347      	st.w      	r2, (r3, 0x1c)
		    config->dst_addr_mode = DMA_ADDR_INC;
    18e8:	1b0a      	addi      	r3, sp, 40
    18ea:	9360      	ld.w      	r3, (r3, 0x0)
    18ec:	3200      	movi      	r2, 0      	//0x0
    18ee:	b348      	st.w      	r2, (r3, 0x20)
		    config->trf_type = DMA_CFG_MEM2MEM_WITH_DMA_CTRL;
    18f0:	1b0a      	addi      	r3, sp, 40
    18f2:	9360      	ld.w      	r3, (r3, 0x0)
    18f4:	3200      	movi      	r2, 0      	//0x0
    18f6:	b349      	st.w      	r2, (r3, 0x24)
		    config->src_trf_mode = DMA_MULTI_BLOCK_LINKEDLIST;
    18f8:	1b0a      	addi      	r3, sp, 40
    18fa:	9360      	ld.w      	r3, (r3, 0x0)
    18fc:	3203      	movi      	r2, 3      	//0x3
    18fe:	b34a      	st.w      	r2, (r3, 0x28)
		    config->dst_trf_mode = DMA_MULTI_BLOCK_LINKEDLIST;
    1900:	1b0a      	addi      	r3, sp, 40
    1902:	9360      	ld.w      	r3, (r3, 0x0)
    1904:	3203      	movi      	r2, 3      	//0x3
    1906:	b34b      	st.w      	r2, (r3, 0x2c)
		    dma_prepare_lli_1(&dma,channelid);
    1908:	116d      	lrw      	r3, 0x134cc	//134cc <channelid>
    190a:	8360      	ld.b      	r3, (r3, 0x0)
    190c:	74cc      	zextb      	r3, r3
    190e:	110a      	lrw      	r0, 0x13700	//13700 <dma>
    1910:	6c4f      	mov      	r1, r3
    1912:	e3fffd1b 	bsr      	0x1348	//1348 <dma_prepare_lli_1>
    1916:	c4004820 	lsli      	r0, r0, 0
		    dma_intc_init_1(&dma,channelid);
    191a:	1169      	lrw      	r3, 0x134cc	//134cc <channelid>
    191c:	8360      	ld.b      	r3, (r3, 0x0)
    191e:	74cc      	zextb      	r3, r3
    1920:	1105      	lrw      	r0, 0x13700	//13700 <dma>
    1922:	6c4f      	mov      	r1, r3
    1924:	e0000b22 	bsr      	0x2f68	//2f68 <dma_intc_init_1>
    1928:	c4004820 	lsli      	r0, r0, 0
		    dma_lli_start_1(&dma,channelid);
    192c:	1164      	lrw      	r3, 0x134cc	//134cc <channelid>
    192e:	8360      	ld.b      	r3, (r3, 0x0)
    1930:	74cc      	zextb      	r3, r3
    1932:	1101      	lrw      	r0, 0x13700	//13700 <dma>
    1934:	6c4f      	mov      	r1, r3
    1936:	e3fffee9 	bsr      	0x1708	//1708 <dma_lli_start_1>
    193a:	c4004820 	lsli      	r0, r0, 0
		    delay(1);
    193e:	3001      	movi      	r0, 1      	//0x1
    1940:	e0006b2a 	bsr      	0xef94	//ef94 <delay>
    1944:	c4004820 	lsli      	r0, r0, 0
		    dma_lli_stop_1(&dma,channelid);
    1948:	107d      	lrw      	r3, 0x134cc	//134cc <channelid>
    194a:	8360      	ld.b      	r3, (r3, 0x0)
    194c:	74cc      	zextb      	r3, r3
    194e:	101a      	lrw      	r0, 0x13700	//13700 <dma>
    1950:	6c4f      	mov      	r1, r3
    1952:	e3ffff13 	bsr      	0x1778	//1778 <dma_lli_stop_1>
    1956:	c4004820 	lsli      	r0, r0, 0
		    printf(" channel%d dma lli test sucess.\n",i);
    195a:	e46e0026 	addi      	r3, sp, 39      	//0x27
    195e:	8360      	ld.b      	r3, (r3, 0x0)
    1960:	74cc      	zextb      	r3, r3
    1962:	101e      	lrw      	r0, 0xfc94	//fc94 <__etext+0xe4>
    1964:	6c4f      	mov      	r1, r3
    1966:	e00067f5 	bsr      	0xe950	//e950 <printf>
    196a:	c4004820 	lsli      	r0, r0, 0
		    CK_INTC_FreeIrq(CK_INTC_DMAC);
    196e:	3006      	movi      	r0, 6      	//0x6
    1970:	e00026d4 	bsr      	0x6718	//6718 <CK_INTC_FreeIrq>
    1974:	c4004820 	lsli      	r0, r0, 0
		}
		psrcaddr = srcaddr;
    1978:	1b07      	addi      	r3, sp, 28
    197a:	1a05      	addi      	r2, sp, 20
    197c:	9240      	ld.w      	r2, (r2, 0x0)
    197e:	b340      	st.w      	r2, (r3, 0x0)
		pdstaddr = dstaddr;
    1980:	1b06      	addi      	r3, sp, 24
    1982:	1a04      	addi      	r2, sp, 16
    1984:	9240      	ld.w      	r2, (r2, 0x0)
    1986:	b340      	st.w      	r2, (r3, 0x0)
		printf("psrcaddr = %x, pdstaddr = %x, data_size = %x \n", psrcaddr, pdstaddr, config->data_size);
    1988:	1b0a      	addi      	r3, sp, 40
    198a:	9360      	ld.w      	r3, (r3, 0x0)
    198c:	9364      	ld.w      	r3, (r3, 0x10)
    198e:	1907      	addi      	r1, sp, 28
    1990:	1a06      	addi      	r2, sp, 24
    1992:	1014      	lrw      	r0, 0xfcb8	//fcb8 <__etext+0x108>
    1994:	9120      	ld.w      	r1, (r1, 0x0)
    1996:	9240      	ld.w      	r2, (r2, 0x0)
    1998:	e00067dc 	bsr      	0xe950	//e950 <printf>
    199c:	c4004820 	lsli      	r0, r0, 0

		for(j=0; j<config->data_size; j++){
    19a0:	1b08      	addi      	r3, sp, 32
    19a2:	3200      	movi      	r2, 0      	//0x0
    19a4:	b340      	st.w      	r2, (r3, 0x0)
    19a6:	0441      	br      	0x1a28	//1a28 <test_dma_lli_allchan+0x26c>
    19a8:	0000fc7c 	.long	0x0000fc7c
    19ac:	0000e950 	.long	0x0000e950
    19b0:	0000127c 	.long	0x0000127c
    19b4:	00013700 	.long	0x00013700
    19b8:	00002ee8 	.long	0x00002ee8
    19bc:	000134cc 	.long	0x000134cc
    19c0:	00013724 	.long	0x00013724
    19c4:	00001348 	.long	0x00001348
    19c8:	00002f68 	.long	0x00002f68
    19cc:	00001708 	.long	0x00001708
    19d0:	0000ef94 	.long	0x0000ef94
    19d4:	00001778 	.long	0x00001778
    19d8:	0000fc94 	.long	0x0000fc94
    19dc:	00006718 	.long	0x00006718
    19e0:	0000fcb8 	.long	0x0000fcb8
			if (*psrcaddr != *pdstaddr)
    19e4:	1b07      	addi      	r3, sp, 28
    19e6:	9360      	ld.w      	r3, (r3, 0x0)
    19e8:	9340      	ld.w      	r2, (r3, 0x0)
    19ea:	1b06      	addi      	r3, sp, 24
    19ec:	9360      	ld.w      	r3, (r3, 0x0)
    19ee:	9360      	ld.w      	r3, (r3, 0x0)
    19f0:	64ca      	cmpne      	r2, r3
    19f2:	0c08      	bf      	0x1a02	//1a02 <test_dma_lli_allchan+0x246>
				printf("DMA transfer %x data error!\n", psrcaddr);
    19f4:	1b07      	addi      	r3, sp, 28
    19f6:	101e      	lrw      	r0, 0xfce8	//fce8 <__etext+0x138>
    19f8:	9320      	ld.w      	r1, (r3, 0x0)
    19fa:	e00067ab 	bsr      	0xe950	//e950 <printf>
    19fe:	c4004820 	lsli      	r0, r0, 0
			*pdstaddr = 0;
    1a02:	1b06      	addi      	r3, sp, 24
    1a04:	9360      	ld.w      	r3, (r3, 0x0)
    1a06:	3200      	movi      	r2, 0      	//0x0
    1a08:	b340      	st.w      	r2, (r3, 0x0)
			psrcaddr++;
    1a0a:	1b07      	addi      	r3, sp, 28
    1a0c:	1a07      	addi      	r2, sp, 28
    1a0e:	9240      	ld.w      	r2, (r2, 0x0)
    1a10:	2203      	addi      	r2, 4      	//0x4
    1a12:	b340      	st.w      	r2, (r3, 0x0)
			pdstaddr++;
    1a14:	1b06      	addi      	r3, sp, 24
    1a16:	1a06      	addi      	r2, sp, 24
    1a18:	9240      	ld.w      	r2, (r2, 0x0)
    1a1a:	2203      	addi      	r2, 4      	//0x4
    1a1c:	b340      	st.w      	r2, (r3, 0x0)
		}
		psrcaddr = srcaddr;
		pdstaddr = dstaddr;
		printf("psrcaddr = %x, pdstaddr = %x, data_size = %x \n", psrcaddr, pdstaddr, config->data_size);

		for(j=0; j<config->data_size; j++){
    1a1e:	1b08      	addi      	r3, sp, 32
    1a20:	1a08      	addi      	r2, sp, 32
    1a22:	9240      	ld.w      	r2, (r2, 0x0)
    1a24:	2200      	addi      	r2, 1      	//0x1
    1a26:	b340      	st.w      	r2, (r3, 0x0)
    1a28:	1b0a      	addi      	r3, sp, 40
    1a2a:	9360      	ld.w      	r3, (r3, 0x0)
    1a2c:	9344      	ld.w      	r2, (r3, 0x10)
    1a2e:	1b08      	addi      	r3, sp, 32
    1a30:	9360      	ld.w      	r3, (r3, 0x0)
    1a32:	648c      	cmphs      	r3, r2
    1a34:	0fd8      	bf      	0x19e4	//19e4 <test_dma_lli_allchan+0x228>
		*psrcaddr++ = j;
		*pdstaddr++ = 0;
    }

	//for(i=1;i<=8;i++)
    for(i=1;i<(testnum+1);i++)
    1a36:	e46e0026 	addi      	r3, sp, 39      	//0x27
    1a3a:	e44e0026 	addi      	r2, sp, 39      	//0x27
    1a3e:	8240      	ld.b      	r2, (r2, 0x0)
    1a40:	2200      	addi      	r2, 1      	//0x1
    1a42:	a340      	st.b      	r2, (r3, 0x0)
    1a44:	e46e0026 	addi      	r3, sp, 39      	//0x27
    1a48:	8360      	ld.b      	r3, (r3, 0x0)
    1a4a:	748c      	zextb      	r2, r3
    1a4c:	6cfb      	mov      	r3, sp
    1a4e:	8360      	ld.b      	r3, (r3, 0x0)
    1a50:	74cc      	zextb      	r3, r3
    1a52:	2300      	addi      	r3, 1      	//0x1
    1a54:	64c9      	cmplt      	r2, r3
    1a56:	0afe      	bt      	0x1852	//1852 <test_dma_lli_allchan+0x96>
			*pdstaddr = 0;
			psrcaddr++;
			pdstaddr++;
		}
	}
	printf("dma lli test for all channels sucess.\n");
    1a58:	1007      	lrw      	r0, 0xfd08	//fd08 <__etext+0x158>
    1a5a:	e000677b 	bsr      	0xe950	//e950 <printf>
    1a5e:	c4004820 	lsli      	r0, r0, 0
	return 0;
    1a62:	3300      	movi      	r3, 0      	//0x0
}
    1a64:	6c0f      	mov      	r0, r3
    1a66:	140b      	addi      	sp, sp, 44
    1a68:	1491      	pop      	r4, r15
    1a6a:	0000      	.short	0x0000
    1a6c:	0000fce8 	.long	0x0000fce8
    1a70:	0000e950 	.long	0x0000e950
    1a74:	0000fd08 	.long	0x0000fd08

00001a78 <CK_DMAC_Handler>:

void CK_DMAC_Handler(CK_UINT32 irqid)
{
    1a78:	14d2      	push      	r4-r5, r15
    1a7a:	1423      	subi      	sp, sp, 12
    1a7c:	6cfb      	mov      	r3, sp
    1a7e:	b300      	st.w      	r0, (r3, 0x0)
	printf("dmac have interrupt, channelid = %d\n", channelid+1);
    1a80:	1373      	lrw      	r3, 0x134cc	//134cc <channelid>
    1a82:	8360      	ld.b      	r3, (r3, 0x0)
    1a84:	74cc      	zextb      	r3, r3
    1a86:	2300      	addi      	r3, 1      	//0x1
    1a88:	1312      	lrw      	r0, 0xfd30	//fd30 <__etext+0x180>
    1a8a:	6c4f      	mov      	r1, r3
    1a8c:	e0006762 	bsr      	0xe950	//e950 <printf>
    1a90:	c4004820 	lsli      	r0, r0, 0
    Bit32u temp,temp1;
    temp = dma_int_status_read(dma.common_reg)&0x1FFFF;
    1a94:	1371      	lrw      	r3, 0x13700	//13700 <dma>
    1a96:	9360      	ld.w      	r3, (r3, 0x0)
    1a98:	6c0f      	mov      	r0, r3
    1a9a:	e0000607 	bsr      	0x26a8	//26a8 <dma_int_status_read>
    1a9e:	c4004820 	lsli      	r0, r0, 0
    1aa2:	1902      	addi      	r1, sp, 8
    1aa4:	6c83      	mov      	r2, r0
    1aa6:	c6005024 	bmaski      	r4, 17      	//0x11
    1aaa:	3500      	movi      	r5, 0      	//0x0
    1aac:	c482202c 	and      	r12, r2, r4
    1ab0:	c4a3202d 	and      	r13, r3, r5
    1ab4:	6cf3      	mov      	r3, r12
    1ab6:	6d37      	mov      	r4, r13
    1ab8:	b160      	st.w      	r3, (r1, 0x0)
    printf("dmac int status:%x\n", temp);
    1aba:	1b02      	addi      	r3, sp, 8
    1abc:	1309      	lrw      	r0, 0xfd58	//fd58 <__etext+0x1a8>
    1abe:	9320      	ld.w      	r1, (r3, 0x0)
    1ac0:	e0006748 	bsr      	0xe950	//e950 <printf>
    1ac4:	c4004820 	lsli      	r0, r0, 0
    if(temp&DMA_COMREG_INT_STAT)   /*Common*/
    1ac8:	1b02      	addi      	r3, sp, 8
    1aca:	9340      	ld.w      	r2, (r3, 0x0)
    1acc:	3380      	movi      	r3, 128      	//0x80
    1ace:	4369      	lsli      	r3, r3, 9
    1ad0:	68c8      	and      	r3, r2
    1ad2:	e9030073 	bez      	r3, 0x1bb8	//1bb8 <CK_DMAC_Handler+0x140>
    {
    	 printf(" dmac CommonReg interrupt\n");
    1ad6:	1304      	lrw      	r0, 0xfd6c	//fd6c <__etext+0x1bc>
    1ad8:	e000673c 	bsr      	0xe950	//e950 <printf>
    1adc:	c4004820 	lsli      	r0, r0, 0
    	 temp1 = dma_com_int_status_read(dma.common_reg)&0x1FF;
    1ae0:	127e      	lrw      	r3, 0x13700	//13700 <dma>
    1ae2:	9360      	ld.w      	r3, (r3, 0x0)
    1ae4:	6c0f      	mov      	r0, r3
    1ae6:	e000066d 	bsr      	0x27c0	//27c0 <dma_com_int_status_read>
    1aea:	c4004820 	lsli      	r0, r0, 0
    1aee:	6c83      	mov      	r2, r0
    1af0:	1b01      	addi      	r3, sp, 4
    1af2:	e44221ff 	andi      	r2, r2, 511
    1af6:	b340      	st.w      	r2, (r3, 0x0)
    	 switch (temp1)
    1af8:	1b01      	addi      	r3, sp, 4
    1afa:	9360      	ld.w      	r3, (r3, 0x0)
    1afc:	3b44      	cmpnei      	r3, 4
    1afe:	0c2e      	bf      	0x1b5a	//1b5a <CK_DMAC_Handler+0xe2>
    1b00:	3b04      	cmphsi      	r3, 5      	//0x5
    1b02:	0807      	bt      	0x1b10	//1b10 <CK_DMAC_Handler+0x98>
    1b04:	3b41      	cmpnei      	r3, 1
    1b06:	0c0c      	bf      	0x1b1e	//1b1e <CK_DMAC_Handler+0xa6>
    1b08:	3b42      	cmpnei      	r3, 2
    1b0a:	0c19      	bf      	0x1b3c	//1b3c <CK_DMAC_Handler+0xc4>
				 break; /* clear DMA_COM_INT_WRONHOLD_ERR interrupt */
			 case DMA_COM_INT_UN_DEC_ERR:
				 printf("  Enable_SLVIF_UndefinedReg_DEC_ERR_IntStat\n");
				 dma_com_int_status_clear(dma.common_reg,DMA_COM_INT_UN_DEC_ERR);
				 break; /* clear DMA_COM_INT_UN_DEC_ERR interrupt */
			 default:break;
    1b0c:	e800036e 	br      	0x21e8	//21e8 <CK_DMAC_Handler+0x770>
    printf("dmac int status:%x\n", temp);
    if(temp&DMA_COMREG_INT_STAT)   /*Common*/
    {
    	 printf(" dmac CommonReg interrupt\n");
    	 temp1 = dma_com_int_status_read(dma.common_reg)&0x1FF;
    	 switch (temp1)
    1b10:	3b48      	cmpnei      	r3, 8
    1b12:	0c33      	bf      	0x1b78	//1b78 <CK_DMAC_Handler+0x100>
    1b14:	eb430100 	cmpnei      	r3, 256      	//0x100
    1b18:	0c3f      	bf      	0x1b96	//1b96 <CK_DMAC_Handler+0x11e>
				 break; /* clear DMA_COM_INT_WRONHOLD_ERR interrupt */
			 case DMA_COM_INT_UN_DEC_ERR:
				 printf("  Enable_SLVIF_UndefinedReg_DEC_ERR_IntStat\n");
				 dma_com_int_status_clear(dma.common_reg,DMA_COM_INT_UN_DEC_ERR);
				 break; /* clear DMA_COM_INT_UN_DEC_ERR interrupt */
			 default:break;
    1b1a:	e8000367 	br      	0x21e8	//21e8 <CK_DMAC_Handler+0x770>
    	 printf(" dmac CommonReg interrupt\n");
    	 temp1 = dma_com_int_status_read(dma.common_reg)&0x1FF;
    	 switch (temp1)
    	 {
			 case DMA_COM_INT_DEC_ERR:
				 printf("  Enable_SLVIF_CommonReg_DEC_ERR_IntStat\n");
    1b1e:	1214      	lrw      	r0, 0xfd88	//fd88 <__etext+0x1d8>
    1b20:	e0006718 	bsr      	0xe950	//e950 <printf>
    1b24:	c4004820 	lsli      	r0, r0, 0
				 dma_com_int_status_clear(dma.common_reg,DMA_COM_INT_DEC_ERR);
    1b28:	126c      	lrw      	r3, 0x13700	//13700 <dma>
    1b2a:	9360      	ld.w      	r3, (r3, 0x0)
    1b2c:	6c0f      	mov      	r0, r3
    1b2e:	3101      	movi      	r1, 1      	//0x1
    1b30:	e00005ee 	bsr      	0x270c	//270c <dma_com_int_status_clear>
    1b34:	c4004820 	lsli      	r0, r0, 0
				 break; /* clear DMA_COM_INT_DEC_ERR interrupt */
    1b38:	e8000358 	br      	0x21e8	//21e8 <CK_DMAC_Handler+0x770>
			 case DMA_COM_INT_WR2RO_ERR:
				 printf("  Enable_SLVIF_CommonReg_WR2RO_ERR_IntStat\n");
    1b3c:	120e      	lrw      	r0, 0xfdb4	//fdb4 <__etext+0x204>
    1b3e:	e0006709 	bsr      	0xe950	//e950 <printf>
    1b42:	c4004820 	lsli      	r0, r0, 0
				 dma_com_int_status_clear(dma.common_reg,DMA_COM_INT_WR2RO_ERR);
    1b46:	1265      	lrw      	r3, 0x13700	//13700 <dma>
    1b48:	9360      	ld.w      	r3, (r3, 0x0)
    1b4a:	6c0f      	mov      	r0, r3
    1b4c:	3102      	movi      	r1, 2      	//0x2
    1b4e:	e00005df 	bsr      	0x270c	//270c <dma_com_int_status_clear>
    1b52:	c4004820 	lsli      	r0, r0, 0
				break; /* clear DMA_COM_INT_WR2RO_ERR interrupt */
    1b56:	e8000349 	br      	0x21e8	//21e8 <CK_DMAC_Handler+0x770>
			 case DMA_COM_INT_RD2WO_ERR:
				 printf("  Enable_SLVIF_CommonReg_RD2WO_ERR_IntStat\n");
    1b5a:	1208      	lrw      	r0, 0xfde0	//fde0 <__etext+0x230>
    1b5c:	e00066fa 	bsr      	0xe950	//e950 <printf>
    1b60:	c4004820 	lsli      	r0, r0, 0
				 dma_com_int_status_clear(dma.common_reg,DMA_COM_INT_RD2WO_ERR);
    1b64:	117d      	lrw      	r3, 0x13700	//13700 <dma>
    1b66:	9360      	ld.w      	r3, (r3, 0x0)
    1b68:	6c0f      	mov      	r0, r3
    1b6a:	3104      	movi      	r1, 4      	//0x4
    1b6c:	e00005d0 	bsr      	0x270c	//270c <dma_com_int_status_clear>
    1b70:	c4004820 	lsli      	r0, r0, 0
				 break; /* clear DMA_COM_INT_RD2WO_ERR interrupt */
    1b74:	e800033a 	br      	0x21e8	//21e8 <CK_DMAC_Handler+0x770>
			 case DMA_COM_INT_WRONHOLD_ERR:
				 printf("  Enable_SLVIF_CommonReg_WrOnHold_ERR_IntStat\n");
    1b78:	1201      	lrw      	r0, 0xfe0c	//fe0c <__etext+0x25c>
    1b7a:	e00066eb 	bsr      	0xe950	//e950 <printf>
    1b7e:	c4004820 	lsli      	r0, r0, 0
				 dma_com_int_status_clear(dma.common_reg,DMA_COM_INT_WRONHOLD_ERR);
    1b82:	1176      	lrw      	r3, 0x13700	//13700 <dma>
    1b84:	9360      	ld.w      	r3, (r3, 0x0)
    1b86:	6c0f      	mov      	r0, r3
    1b88:	3108      	movi      	r1, 8      	//0x8
    1b8a:	e00005c1 	bsr      	0x270c	//270c <dma_com_int_status_clear>
    1b8e:	c4004820 	lsli      	r0, r0, 0
				 break; /* clear DMA_COM_INT_WRONHOLD_ERR interrupt */
    1b92:	e800032b 	br      	0x21e8	//21e8 <CK_DMAC_Handler+0x770>
			 case DMA_COM_INT_UN_DEC_ERR:
				 printf("  Enable_SLVIF_UndefinedReg_DEC_ERR_IntStat\n");
    1b96:	111b      	lrw      	r0, 0xfe3c	//fe3c <__etext+0x28c>
    1b98:	e00066dc 	bsr      	0xe950	//e950 <printf>
    1b9c:	c4004820 	lsli      	r0, r0, 0
				 dma_com_int_status_clear(dma.common_reg,DMA_COM_INT_UN_DEC_ERR);
    1ba0:	116e      	lrw      	r3, 0x13700	//13700 <dma>
    1ba2:	9360      	ld.w      	r3, (r3, 0x0)
    1ba4:	6c0f      	mov      	r0, r3
    1ba6:	3180      	movi      	r1, 128      	//0x80
    1ba8:	4121      	lsli      	r1, r1, 1
    1baa:	e00005b1 	bsr      	0x270c	//270c <dma_com_int_status_clear>
    1bae:	c4004820 	lsli      	r0, r0, 0
				 break; /* clear DMA_COM_INT_UN_DEC_ERR interrupt */
    1bb2:	6c00      	or      	r0, r0
    1bb4:	e800031a 	br      	0x21e8	//21e8 <CK_DMAC_Handler+0x770>
			 default:break;
    	 }
    }
    else if(temp&0xFF)        /*Chx IT*/
    1bb8:	1b02      	addi      	r3, sp, 8
    1bba:	9360      	ld.w      	r3, (r3, 0x0)
    1bbc:	e46320ff 	andi      	r3, r3, 255
    1bc0:	e9030314 	bez      	r3, 0x21e8	//21e8 <CK_DMAC_Handler+0x770>
    {
		if(temp&(1<<channelid))
    1bc4:	1162      	lrw      	r3, 0x134cc	//134cc <channelid>
    1bc6:	8360      	ld.b      	r3, (r3, 0x0)
    1bc8:	74cc      	zextb      	r3, r3
    1bca:	3201      	movi      	r2, 1      	//0x1
    1bcc:	c4624023 	lsl      	r3, r2, r3
    1bd0:	6c8f      	mov      	r2, r3
    1bd2:	1b02      	addi      	r3, sp, 8
    1bd4:	9360      	ld.w      	r3, (r3, 0x0)
    1bd6:	68c8      	and      	r3, r2
    1bd8:	e9030307 	bez      	r3, 0x21e6	//21e6 <CK_DMAC_Handler+0x76e>
		{
			printf(" dmac CH%d interrupt\n",channelid+1);
    1bdc:	107c      	lrw      	r3, 0x134cc	//134cc <channelid>
    1bde:	8360      	ld.b      	r3, (r3, 0x0)
    1be0:	74cc      	zextb      	r3, r3
    1be2:	2300      	addi      	r3, 1      	//0x1
    1be4:	1108      	lrw      	r0, 0xfe6c	//fe6c <__etext+0x2bc>
    1be6:	6c4f      	mov      	r1, r3
    1be8:	e00066b4 	bsr      	0xe950	//e950 <printf>
    1bec:	c4004820 	lsli      	r0, r0, 0
			temp1=dma_chx_spec_int_status_read(dma.chan_reg[channelid]);
    1bf0:	1077      	lrw      	r3, 0x134cc	//134cc <channelid>
    1bf2:	8360      	ld.b      	r3, (r3, 0x0)
    1bf4:	74cc      	zextb      	r3, r3
    1bf6:	6c8f      	mov      	r2, r3
    1bf8:	1078      	lrw      	r3, 0x13700	//13700 <dma>
    1bfa:	2200      	addi      	r2, 1      	//0x1
    1bfc:	d0430883 	ldr.w      	r3, (r3, r2<<2)
    1c00:	1c01      	addi      	r4, sp, 4
    1c02:	6c0f      	mov      	r0, r3
    1c04:	e00008be 	bsr      	0x2d80	//2d80 <dma_chx_spec_int_status_read>
    1c08:	c4004820 	lsli      	r0, r0, 0
    1c0c:	b400      	st.w      	r0, (r4, 0x0)
			printf(" dmac CHx interrupt status:%x\n",temp1);
    1c0e:	1b01      	addi      	r3, sp, 4
    1c10:	101f      	lrw      	r0, 0xfe84	//fe84 <__etext+0x2d4>
    1c12:	9320      	ld.w      	r1, (r3, 0x0)
    1c14:	e000669e 	bsr      	0xe950	//e950 <printf>
    1c18:	c4004820 	lsli      	r0, r0, 0
			switch (temp1)
    1c1c:	1b01      	addi      	r3, sp, 4
    1c1e:	9360      	ld.w      	r3, (r3, 0x0)
    1c20:	eb432000 	cmpnei      	r3, 8192      	//0x2000
    1c24:	0db3      	bf      	0x1f8a	//1f8a <CK_DMAC_Handler+0x512>
    1c26:	eb032000 	cmphsi      	r3, 8193      	//0x2001
    1c2a:	0853      	bt      	0x1cd0	//1cd0 <CK_DMAC_Handler+0x258>
    1c2c:	eb430040 	cmpnei      	r3, 64      	//0x40
    1c30:	0cfe      	bf      	0x1e2c	//1e2c <CK_DMAC_Handler+0x3b4>
    1c32:	eb030040 	cmphsi      	r3, 65      	//0x41
    1c36:	0834      	bt      	0x1c9e	//1c9e <CK_DMAC_Handler+0x226>
    1c38:	3b48      	cmpnei      	r3, 8
    1c3a:	0cbc      	bf      	0x1db2	//1db2 <CK_DMAC_Handler+0x33a>
    1c3c:	3b08      	cmphsi      	r3, 9      	//0x9
    1c3e:	0829      	bt      	0x1c90	//1c90 <CK_DMAC_Handler+0x218>
    1c40:	3b41      	cmpnei      	r3, 1
    1c42:	0c8e      	bf      	0x1d5e	//1d5e <CK_DMAC_Handler+0x2e6>
    1c44:	3b42      	cmpnei      	r3, 2
    1c46:	0ca1      	bf      	0x1d88	//1d88 <CK_DMAC_Handler+0x310>
					 break; /* clear DMA_CHX_CH_DISABLED_INT interrupt */
				case DMA_CHX_CH_ABORTERD_INT:
					 printf("  CH_ABORTED_IntStat\n");
					 dma_chx_int_status_clear(dma.chan_reg[channelid],DMA_CHX_CH_ABORTERD_INT);
					 break; /* clear DMA_CHX_CH_ABORTERD_INT interrupt */
				default:break;
    1c48:	e80002d0 	br      	0x21e8	//21e8 <CK_DMAC_Handler+0x770>
    1c4c:	000134cc 	.long	0x000134cc
    1c50:	0000fd30 	.long	0x0000fd30
    1c54:	0000e950 	.long	0x0000e950
    1c58:	00013700 	.long	0x00013700
    1c5c:	000026a8 	.long	0x000026a8
    1c60:	0000fd58 	.long	0x0000fd58
    1c64:	0000fd6c 	.long	0x0000fd6c
    1c68:	000027c0 	.long	0x000027c0
    1c6c:	0000fd88 	.long	0x0000fd88
    1c70:	0000270c 	.long	0x0000270c
    1c74:	0000fdb4 	.long	0x0000fdb4
    1c78:	0000fde0 	.long	0x0000fde0
    1c7c:	0000fe0c 	.long	0x0000fe0c
    1c80:	0000fe3c 	.long	0x0000fe3c
    1c84:	0000fe6c 	.long	0x0000fe6c
    1c88:	00002d80 	.long	0x00002d80
    1c8c:	0000fe84 	.long	0x0000fe84
		if(temp&(1<<channelid))
		{
			printf(" dmac CH%d interrupt\n",channelid+1);
			temp1=dma_chx_spec_int_status_read(dma.chan_reg[channelid]);
			printf(" dmac CHx interrupt status:%x\n",temp1);
			switch (temp1)
    1c90:	3b50      	cmpnei      	r3, 16
    1c92:	0ca5      	bf      	0x1ddc	//1ddc <CK_DMAC_Handler+0x364>
    1c94:	eb430020 	cmpnei      	r3, 32      	//0x20
    1c98:	0cb6      	bf      	0x1e04	//1e04 <CK_DMAC_Handler+0x38c>
					 break; /* clear DMA_CHX_CH_DISABLED_INT interrupt */
				case DMA_CHX_CH_ABORTERD_INT:
					 printf("  CH_ABORTED_IntStat\n");
					 dma_chx_int_status_clear(dma.chan_reg[channelid],DMA_CHX_CH_ABORTERD_INT);
					 break; /* clear DMA_CHX_CH_ABORTERD_INT interrupt */
				default:break;
    1c9a:	e80002a7 	br      	0x21e8	//21e8 <CK_DMAC_Handler+0x770>
		if(temp&(1<<channelid))
		{
			printf(" dmac CH%d interrupt\n",channelid+1);
			temp1=dma_chx_spec_int_status_read(dma.chan_reg[channelid]);
			printf(" dmac CHx interrupt status:%x\n",temp1);
			switch (temp1)
    1c9e:	eb430200 	cmpnei      	r3, 512      	//0x200
    1ca2:	0d02      	bf      	0x1ea6	//1ea6 <CK_DMAC_Handler+0x42e>
    1ca4:	eb030200 	cmphsi      	r3, 513      	//0x201
    1ca8:	0809      	bt      	0x1cba	//1cba <CK_DMAC_Handler+0x242>
    1caa:	eb430080 	cmpnei      	r3, 128      	//0x80
    1cae:	0cd3      	bf      	0x1e54	//1e54 <CK_DMAC_Handler+0x3dc>
    1cb0:	eb430100 	cmpnei      	r3, 256      	//0x100
    1cb4:	0ce4      	bf      	0x1e7c	//1e7c <CK_DMAC_Handler+0x404>
					 break; /* clear DMA_CHX_CH_DISABLED_INT interrupt */
				case DMA_CHX_CH_ABORTERD_INT:
					 printf("  CH_ABORTED_IntStat\n");
					 dma_chx_int_status_clear(dma.chan_reg[channelid],DMA_CHX_CH_ABORTERD_INT);
					 break; /* clear DMA_CHX_CH_ABORTERD_INT interrupt */
				default:break;
    1cb6:	e8000299 	br      	0x21e8	//21e8 <CK_DMAC_Handler+0x770>
		if(temp&(1<<channelid))
		{
			printf(" dmac CH%d interrupt\n",channelid+1);
			temp1=dma_chx_spec_int_status_read(dma.chan_reg[channelid]);
			printf(" dmac CHx interrupt status:%x\n",temp1);
			switch (temp1)
    1cba:	eb430800 	cmpnei      	r3, 2048      	//0x800
    1cbe:	0d1e      	bf      	0x1efa	//1efa <CK_DMAC_Handler+0x482>
    1cc0:	eb431000 	cmpnei      	r3, 4096      	//0x1000
    1cc4:	0d4e      	bf      	0x1f60	//1f60 <CK_DMAC_Handler+0x4e8>
    1cc6:	eb430400 	cmpnei      	r3, 1024      	//0x400
    1cca:	0d03      	bf      	0x1ed0	//1ed0 <CK_DMAC_Handler+0x458>
					 break; /* clear DMA_CHX_CH_DISABLED_INT interrupt */
				case DMA_CHX_CH_ABORTERD_INT:
					 printf("  CH_ABORTED_IntStat\n");
					 dma_chx_int_status_clear(dma.chan_reg[channelid],DMA_CHX_CH_ABORTERD_INT);
					 break; /* clear DMA_CHX_CH_ABORTERD_INT interrupt */
				default:break;
    1ccc:	e800028e 	br      	0x21e8	//21e8 <CK_DMAC_Handler+0x770>
		if(temp&(1<<channelid))
		{
			printf(" dmac CH%d interrupt\n",channelid+1);
			temp1=dma_chx_spec_int_status_read(dma.chan_reg[channelid]);
			printf(" dmac CHx interrupt status:%x\n",temp1);
			switch (temp1)
    1cd0:	3280      	movi      	r2, 128      	//0x80
    1cd2:	424d      	lsli      	r2, r2, 13
    1cd4:	648e      	cmpne      	r3, r2
    1cd6:	0dd8      	bf      	0x2086	//2086 <CK_DMAC_Handler+0x60e>
    1cd8:	3280      	movi      	r2, 128      	//0x80
    1cda:	424d      	lsli      	r2, r2, 13
    1cdc:	64c8      	cmphs      	r2, r3
    1cde:	0c1c      	bf      	0x1d16	//1d16 <CK_DMAC_Handler+0x29e>
    1ce0:	3280      	movi      	r2, 128      	//0x80
    1ce2:	424a      	lsli      	r2, r2, 10
    1ce4:	648e      	cmpne      	r3, r2
    1ce6:	0d91      	bf      	0x2008	//2008 <CK_DMAC_Handler+0x590>
    1ce8:	3280      	movi      	r2, 128      	//0x80
    1cea:	424a      	lsli      	r2, r2, 10
    1cec:	64c8      	cmphs      	r2, r3
    1cee:	0c0a      	bf      	0x1d02	//1d02 <CK_DMAC_Handler+0x28a>
    1cf0:	eb434000 	cmpnei      	r3, 16384      	//0x4000
    1cf4:	0d60      	bf      	0x1fb4	//1fb4 <CK_DMAC_Handler+0x53c>
    1cf6:	3280      	movi      	r2, 128      	//0x80
    1cf8:	4249      	lsli      	r2, r2, 9
    1cfa:	648e      	cmpne      	r3, r2
    1cfc:	0d71      	bf      	0x1fde	//1fde <CK_DMAC_Handler+0x566>
					 break; /* clear DMA_CHX_CH_DISABLED_INT interrupt */
				case DMA_CHX_CH_ABORTERD_INT:
					 printf("  CH_ABORTED_IntStat\n");
					 dma_chx_int_status_clear(dma.chan_reg[channelid],DMA_CHX_CH_ABORTERD_INT);
					 break; /* clear DMA_CHX_CH_ABORTERD_INT interrupt */
				default:break;
    1cfe:	e8000275 	br      	0x21e8	//21e8 <CK_DMAC_Handler+0x770>
		if(temp&(1<<channelid))
		{
			printf(" dmac CH%d interrupt\n",channelid+1);
			temp1=dma_chx_spec_int_status_read(dma.chan_reg[channelid]);
			printf(" dmac CHx interrupt status:%x\n",temp1);
			switch (temp1)
    1d02:	3280      	movi      	r2, 128      	//0x80
    1d04:	424b      	lsli      	r2, r2, 11
    1d06:	648e      	cmpne      	r3, r2
    1d08:	0d95      	bf      	0x2032	//2032 <CK_DMAC_Handler+0x5ba>
    1d0a:	3280      	movi      	r2, 128      	//0x80
    1d0c:	424c      	lsli      	r2, r2, 12
    1d0e:	648e      	cmpne      	r3, r2
    1d10:	0da6      	bf      	0x205c	//205c <CK_DMAC_Handler+0x5e4>
					 break; /* clear DMA_CHX_CH_DISABLED_INT interrupt */
				case DMA_CHX_CH_ABORTERD_INT:
					 printf("  CH_ABORTED_IntStat\n");
					 dma_chx_int_status_clear(dma.chan_reg[channelid],DMA_CHX_CH_ABORTERD_INT);
					 break; /* clear DMA_CHX_CH_ABORTERD_INT interrupt */
				default:break;
    1d12:	e800026b 	br      	0x21e8	//21e8 <CK_DMAC_Handler+0x770>
		if(temp&(1<<channelid))
		{
			printf(" dmac CH%d interrupt\n",channelid+1);
			temp1=dma_chx_spec_int_status_read(dma.chan_reg[channelid]);
			printf(" dmac CHx interrupt status:%x\n",temp1);
			switch (temp1)
    1d16:	3280      	movi      	r2, 128      	//0x80
    1d18:	4255      	lsli      	r2, r2, 21
    1d1a:	648e      	cmpne      	r3, r2
    1d1c:	e8400210 	bf      	0x213c	//213c <CK_DMAC_Handler+0x6c4>
    1d20:	3280      	movi      	r2, 128      	//0x80
    1d22:	4255      	lsli      	r2, r2, 21
    1d24:	64c8      	cmphs      	r2, r3
    1d26:	0c0b      	bf      	0x1d3c	//1d3c <CK_DMAC_Handler+0x2c4>
    1d28:	3280      	movi      	r2, 128      	//0x80
    1d2a:	424e      	lsli      	r2, r2, 14
    1d2c:	648e      	cmpne      	r3, r2
    1d2e:	0dc1      	bf      	0x20b0	//20b0 <CK_DMAC_Handler+0x638>
    1d30:	3280      	movi      	r2, 128      	//0x80
    1d32:	4254      	lsli      	r2, r2, 20
    1d34:	648e      	cmpne      	r3, r2
    1d36:	0dd2      	bf      	0x20da	//20da <CK_DMAC_Handler+0x662>
					 break; /* clear DMA_CHX_CH_DISABLED_INT interrupt */
				case DMA_CHX_CH_ABORTERD_INT:
					 printf("  CH_ABORTED_IntStat\n");
					 dma_chx_int_status_clear(dma.chan_reg[channelid],DMA_CHX_CH_ABORTERD_INT);
					 break; /* clear DMA_CHX_CH_ABORTERD_INT interrupt */
				default:break;
    1d38:	e8000258 	br      	0x21e8	//21e8 <CK_DMAC_Handler+0x770>
		if(temp&(1<<channelid))
		{
			printf(" dmac CH%d interrupt\n",channelid+1);
			temp1=dma_chx_spec_int_status_read(dma.chan_reg[channelid]);
			printf(" dmac CHx interrupt status:%x\n",temp1);
			switch (temp1)
    1d3c:	3280      	movi      	r2, 128      	//0x80
    1d3e:	4257      	lsli      	r2, r2, 23
    1d40:	648e      	cmpne      	r3, r2
    1d42:	e8400227 	bf      	0x2190	//2190 <CK_DMAC_Handler+0x718>
    1d46:	3280      	movi      	r2, 128      	//0x80
    1d48:	4258      	lsli      	r2, r2, 24
    1d4a:	648e      	cmpne      	r3, r2
    1d4c:	e8400237 	bf      	0x21ba	//21ba <CK_DMAC_Handler+0x742>
    1d50:	3280      	movi      	r2, 128      	//0x80
    1d52:	4256      	lsli      	r2, r2, 22
    1d54:	648e      	cmpne      	r3, r2
    1d56:	e8400208 	bf      	0x2166	//2166 <CK_DMAC_Handler+0x6ee>
					 break; /* clear DMA_CHX_CH_DISABLED_INT interrupt */
				case DMA_CHX_CH_ABORTERD_INT:
					 printf("  CH_ABORTED_IntStat\n");
					 dma_chx_int_status_clear(dma.chan_reg[channelid],DMA_CHX_CH_ABORTERD_INT);
					 break; /* clear DMA_CHX_CH_ABORTERD_INT interrupt */
				default:break;
    1d5a:	e8000247 	br      	0x21e8	//21e8 <CK_DMAC_Handler+0x770>
			temp1=dma_chx_spec_int_status_read(dma.chan_reg[channelid]);
			printf(" dmac CHx interrupt status:%x\n",temp1);
			switch (temp1)
			{
				case DMA_CHX_BLOCK_TFR_DONE_INT:
					 printf("  BLOCK_TFR_DONE_IntStat\n");
    1d5e:	1312      	lrw      	r0, 0xfea4	//fea4 <__etext+0x2f4>
    1d60:	e00065f8 	bsr      	0xe950	//e950 <printf>
    1d64:	c4004820 	lsli      	r0, r0, 0
					 dma_chx_int_status_clear(dma.chan_reg[channelid],DMA_CHX_BLOCK_TFR_DONE_INT);
    1d68:	1371      	lrw      	r3, 0x134cc	//134cc <channelid>
    1d6a:	8360      	ld.b      	r3, (r3, 0x0)
    1d6c:	74cc      	zextb      	r3, r3
    1d6e:	6c8f      	mov      	r2, r3
    1d70:	1370      	lrw      	r3, 0x13700	//13700 <dma>
    1d72:	2200      	addi      	r2, 1      	//0x1
    1d74:	d0430883 	ldr.w      	r3, (r3, r2<<2)
    1d78:	6c0f      	mov      	r0, r3
    1d7a:	3101      	movi      	r1, 1      	//0x1
    1d7c:	e0000836 	bsr      	0x2de8	//2de8 <dma_chx_int_status_clear>
    1d80:	c4004820 	lsli      	r0, r0, 0
					 break; /* clear DMA_CHX_BLOCK_TFR_DONE_INT interrupt */
    1d84:	e8000232 	br      	0x21e8	//21e8 <CK_DMAC_Handler+0x770>
				case DMA_CHX_DMA_TFR_DONE_INT:
					 printf("  DMA_TFR_DONE_IntStat\n");
    1d88:	130c      	lrw      	r0, 0xfec0	//fec0 <__etext+0x310>
    1d8a:	e00065e3 	bsr      	0xe950	//e950 <printf>
    1d8e:	c4004820 	lsli      	r0, r0, 0
					 dma_chx_int_status_clear(dma.chan_reg[channelid],DMA_CHX_DMA_TFR_DONE_INT);
    1d92:	1367      	lrw      	r3, 0x134cc	//134cc <channelid>
    1d94:	8360      	ld.b      	r3, (r3, 0x0)
    1d96:	74cc      	zextb      	r3, r3
    1d98:	6c8f      	mov      	r2, r3
    1d9a:	1366      	lrw      	r3, 0x13700	//13700 <dma>
    1d9c:	2200      	addi      	r2, 1      	//0x1
    1d9e:	d0430883 	ldr.w      	r3, (r3, r2<<2)
    1da2:	6c0f      	mov      	r0, r3
    1da4:	3102      	movi      	r1, 2      	//0x2
    1da6:	e0000821 	bsr      	0x2de8	//2de8 <dma_chx_int_status_clear>
    1daa:	c4004820 	lsli      	r0, r0, 0
					 break; /* clear DMA_CHX_DMA_TFR_DONE_INT interrupt */
    1dae:	e800021d 	br      	0x21e8	//21e8 <CK_DMAC_Handler+0x770>
				case DMA_CHX_SRC_TRC_INT:
					 printf("  DMA_CHX_SRC_TRC_INT\n");
    1db2:	1303      	lrw      	r0, 0xfed8	//fed8 <__etext+0x328>
    1db4:	e00065ce 	bsr      	0xe950	//e950 <printf>
    1db8:	c4004820 	lsli      	r0, r0, 0
					 dma_chx_int_status_clear(dma.chan_reg[channelid],DMA_CHX_SRC_TRC_INT);
    1dbc:	127c      	lrw      	r3, 0x134cc	//134cc <channelid>
    1dbe:	8360      	ld.b      	r3, (r3, 0x0)
    1dc0:	74cc      	zextb      	r3, r3
    1dc2:	6c8f      	mov      	r2, r3
    1dc4:	127b      	lrw      	r3, 0x13700	//13700 <dma>
    1dc6:	2200      	addi      	r2, 1      	//0x1
    1dc8:	d0430883 	ldr.w      	r3, (r3, r2<<2)
    1dcc:	6c0f      	mov      	r0, r3
    1dce:	3108      	movi      	r1, 8      	//0x8
    1dd0:	e000080c 	bsr      	0x2de8	//2de8 <dma_chx_int_status_clear>
    1dd4:	c4004820 	lsli      	r0, r0, 0
					 break; /* clear DMA_CHX_SRC_TRC_INT interrupt */
    1dd8:	e8000208 	br      	0x21e8	//21e8 <CK_DMAC_Handler+0x770>
				case DMA_CHX_DST_TRC_INT:
					 printf("  DST_TransComp_IntStat\n");
    1ddc:	1219      	lrw      	r0, 0xfef0	//fef0 <__etext+0x340>
    1dde:	e00065b9 	bsr      	0xe950	//e950 <printf>
    1de2:	c4004820 	lsli      	r0, r0, 0
					 dma_chx_int_status_clear(dma.chan_reg[channelid],DMA_CHX_DST_TRC_INT);
    1de6:	1272      	lrw      	r3, 0x134cc	//134cc <channelid>
    1de8:	8360      	ld.b      	r3, (r3, 0x0)
    1dea:	74cc      	zextb      	r3, r3
    1dec:	6c8f      	mov      	r2, r3
    1dee:	1271      	lrw      	r3, 0x13700	//13700 <dma>
    1df0:	2200      	addi      	r2, 1      	//0x1
    1df2:	d0430883 	ldr.w      	r3, (r3, r2<<2)
    1df6:	6c0f      	mov      	r0, r3
    1df8:	3110      	movi      	r1, 16      	//0x10
    1dfa:	e00007f7 	bsr      	0x2de8	//2de8 <dma_chx_int_status_clear>
    1dfe:	c4004820 	lsli      	r0, r0, 0
					 break; /* clear DMA_CHX_DST_TRC_INT interrupt */
    1e02:	05f3      	br      	0x21e8	//21e8 <CK_DMAC_Handler+0x770>
				case DMA_CHX_SRC_DEC_ERR_INT:
					 printf("  SRC_DEC_ERR_IntStat\n");
    1e04:	1210      	lrw      	r0, 0xff0c	//ff0c <__etext+0x35c>
    1e06:	e00065a5 	bsr      	0xe950	//e950 <printf>
    1e0a:	c4004820 	lsli      	r0, r0, 0
					 dma_chx_int_status_clear(dma.chan_reg[channelid],DMA_CHX_SRC_DEC_ERR_INT);
    1e0e:	1268      	lrw      	r3, 0x134cc	//134cc <channelid>
    1e10:	8360      	ld.b      	r3, (r3, 0x0)
    1e12:	74cc      	zextb      	r3, r3
    1e14:	6c8f      	mov      	r2, r3
    1e16:	1267      	lrw      	r3, 0x13700	//13700 <dma>
    1e18:	2200      	addi      	r2, 1      	//0x1
    1e1a:	d0430883 	ldr.w      	r3, (r3, r2<<2)
    1e1e:	6c0f      	mov      	r0, r3
    1e20:	3120      	movi      	r1, 32      	//0x20
    1e22:	e00007e3 	bsr      	0x2de8	//2de8 <dma_chx_int_status_clear>
    1e26:	c4004820 	lsli      	r0, r0, 0
					 break; /* clear DMA_CHX_SRC_DEC_ERR_INT interrupt */
    1e2a:	05df      	br      	0x21e8	//21e8 <CK_DMAC_Handler+0x770>
				case DMA_CHX_DST_DEC_ERR_INT:
					 printf("  DST_DEC_ERR_IntStat\n");
    1e2c:	1207      	lrw      	r0, 0xff24	//ff24 <__etext+0x374>
    1e2e:	e0006591 	bsr      	0xe950	//e950 <printf>
    1e32:	c4004820 	lsli      	r0, r0, 0
					 dma_chx_int_status_clear(dma.chan_reg[channelid],DMA_CHX_DST_DEC_ERR_INT);
    1e36:	117e      	lrw      	r3, 0x134cc	//134cc <channelid>
    1e38:	8360      	ld.b      	r3, (r3, 0x0)
    1e3a:	74cc      	zextb      	r3, r3
    1e3c:	6c8f      	mov      	r2, r3
    1e3e:	117d      	lrw      	r3, 0x13700	//13700 <dma>
    1e40:	2200      	addi      	r2, 1      	//0x1
    1e42:	d0430883 	ldr.w      	r3, (r3, r2<<2)
    1e46:	6c0f      	mov      	r0, r3
    1e48:	3140      	movi      	r1, 64      	//0x40
    1e4a:	e00007cf 	bsr      	0x2de8	//2de8 <dma_chx_int_status_clear>
    1e4e:	c4004820 	lsli      	r0, r0, 0
					 break; /* clear DMA_CHX_DST_DEC_ERR_INT interrupt */
    1e52:	05cb      	br      	0x21e8	//21e8 <CK_DMAC_Handler+0x770>
				case DMA_CHX_SRC_SLV_ERR_INT:
					 printf("  SRC_SLV_ERR_IntStat\n");
    1e54:	111e      	lrw      	r0, 0xff3c	//ff3c <__etext+0x38c>
    1e56:	e000657d 	bsr      	0xe950	//e950 <printf>
    1e5a:	c4004820 	lsli      	r0, r0, 0
					 dma_chx_int_status_clear(dma.chan_reg[channelid],DMA_CHX_SRC_SLV_ERR_INT);
    1e5e:	1174      	lrw      	r3, 0x134cc	//134cc <channelid>
    1e60:	8360      	ld.b      	r3, (r3, 0x0)
    1e62:	74cc      	zextb      	r3, r3
    1e64:	6c8f      	mov      	r2, r3
    1e66:	1173      	lrw      	r3, 0x13700	//13700 <dma>
    1e68:	2200      	addi      	r2, 1      	//0x1
    1e6a:	d0430883 	ldr.w      	r3, (r3, r2<<2)
    1e6e:	6c0f      	mov      	r0, r3
    1e70:	3180      	movi      	r1, 128      	//0x80
    1e72:	e00007bb 	bsr      	0x2de8	//2de8 <dma_chx_int_status_clear>
    1e76:	c4004820 	lsli      	r0, r0, 0
					 break; /* clear DMA_CHX_SRC_SLV_ERR_INT interrupt */
    1e7a:	05b7      	br      	0x21e8	//21e8 <CK_DMAC_Handler+0x770>
				case DMA_CHX_DST_SLV_ERR_INT:
					 printf("  DST_SLV_ERR_IntStat\n");
    1e7c:	1115      	lrw      	r0, 0xff54	//ff54 <__etext+0x3a4>
    1e7e:	e0006569 	bsr      	0xe950	//e950 <printf>
    1e82:	c4004820 	lsli      	r0, r0, 0
					 dma_chx_int_status_clear(dma.chan_reg[channelid],DMA_CHX_DST_SLV_ERR_INT);
    1e86:	116a      	lrw      	r3, 0x134cc	//134cc <channelid>
    1e88:	8360      	ld.b      	r3, (r3, 0x0)
    1e8a:	74cc      	zextb      	r3, r3
    1e8c:	6c8f      	mov      	r2, r3
    1e8e:	1169      	lrw      	r3, 0x13700	//13700 <dma>
    1e90:	2200      	addi      	r2, 1      	//0x1
    1e92:	d0430883 	ldr.w      	r3, (r3, r2<<2)
    1e96:	6c0f      	mov      	r0, r3
    1e98:	3180      	movi      	r1, 128      	//0x80
    1e9a:	4121      	lsli      	r1, r1, 1
    1e9c:	e00007a6 	bsr      	0x2de8	//2de8 <dma_chx_int_status_clear>
    1ea0:	c4004820 	lsli      	r0, r0, 0
					 break; /* clear DMA_CHX_DST_SLV_ERR_INT interrupt */
    1ea4:	05a2      	br      	0x21e8	//21e8 <CK_DMAC_Handler+0x770>
				case DMA_CHX_RD_DEC_ERR_INT:
					 printf("  LLI_RD_DEC_ERR_IntStat\n");
    1ea6:	110c      	lrw      	r0, 0xff6c	//ff6c <__etext+0x3bc>
    1ea8:	e0006554 	bsr      	0xe950	//e950 <printf>
    1eac:	c4004820 	lsli      	r0, r0, 0
					 dma_chx_int_status_clear(dma.chan_reg[channelid],DMA_CHX_RD_DEC_ERR_INT);
    1eb0:	107f      	lrw      	r3, 0x134cc	//134cc <channelid>
    1eb2:	8360      	ld.b      	r3, (r3, 0x0)
    1eb4:	74cc      	zextb      	r3, r3
    1eb6:	6c8f      	mov      	r2, r3
    1eb8:	107e      	lrw      	r3, 0x13700	//13700 <dma>
    1eba:	2200      	addi      	r2, 1      	//0x1
    1ebc:	d0430883 	ldr.w      	r3, (r3, r2<<2)
    1ec0:	6c0f      	mov      	r0, r3
    1ec2:	3180      	movi      	r1, 128      	//0x80
    1ec4:	4122      	lsli      	r1, r1, 2
    1ec6:	e0000791 	bsr      	0x2de8	//2de8 <dma_chx_int_status_clear>
    1eca:	c4004820 	lsli      	r0, r0, 0
					 break; /* clear DMA_CHX_RD_DEC_ERR_INT interrupt */
    1ece:	058d      	br      	0x21e8	//21e8 <CK_DMAC_Handler+0x770>
				case DMA_CHX_WR_DEC_ERR_INT:
					 printf("  LLI_WR_DEC_ERR_IntStat\n");
    1ed0:	1102      	lrw      	r0, 0xff88	//ff88 <__etext+0x3d8>
    1ed2:	e000653f 	bsr      	0xe950	//e950 <printf>
    1ed6:	c4004820 	lsli      	r0, r0, 0
					 dma_chx_int_status_clear(dma.chan_reg[channelid],DMA_CHX_WR_DEC_ERR_INT);
    1eda:	1075      	lrw      	r3, 0x134cc	//134cc <channelid>
    1edc:	8360      	ld.b      	r3, (r3, 0x0)
    1ede:	74cc      	zextb      	r3, r3
    1ee0:	6c8f      	mov      	r2, r3
    1ee2:	1074      	lrw      	r3, 0x13700	//13700 <dma>
    1ee4:	2200      	addi      	r2, 1      	//0x1
    1ee6:	d0430883 	ldr.w      	r3, (r3, r2<<2)
    1eea:	6c0f      	mov      	r0, r3
    1eec:	3180      	movi      	r1, 128      	//0x80
    1eee:	4123      	lsli      	r1, r1, 3
    1ef0:	e000077c 	bsr      	0x2de8	//2de8 <dma_chx_int_status_clear>
    1ef4:	c4004820 	lsli      	r0, r0, 0
					 break; /* clear DMA_CHX_WR_DEC_ERR_INT interrupt */
    1ef8:	0578      	br      	0x21e8	//21e8 <CK_DMAC_Handler+0x770>
				case DMA_CHX_RD_SLV_ERR_INT:
					 printf("  LLI_RD_SLV_ERR_IntStat\n");
    1efa:	1019      	lrw      	r0, 0xffa4	//ffa4 <__etext+0x3f4>
    1efc:	e000652a 	bsr      	0xe950	//e950 <printf>
    1f00:	c4004820 	lsli      	r0, r0, 0
					 dma_chx_int_status_clear(dma.chan_reg[channelid],DMA_CHX_RD_SLV_ERR_INT);
    1f04:	106a      	lrw      	r3, 0x134cc	//134cc <channelid>
    1f06:	8360      	ld.b      	r3, (r3, 0x0)
    1f08:	74cc      	zextb      	r3, r3
    1f0a:	6c8f      	mov      	r2, r3
    1f0c:	1069      	lrw      	r3, 0x13700	//13700 <dma>
    1f0e:	2200      	addi      	r2, 1      	//0x1
    1f10:	d0430883 	ldr.w      	r3, (r3, r2<<2)
    1f14:	6c0f      	mov      	r0, r3
    1f16:	3180      	movi      	r1, 128      	//0x80
    1f18:	4124      	lsli      	r1, r1, 4
    1f1a:	e0000767 	bsr      	0x2de8	//2de8 <dma_chx_int_status_clear>
    1f1e:	c4004820 	lsli      	r0, r0, 0
					 break; /* clear DMA_CHX_RD_SLV_ERR_INT interrupt */
    1f22:	0563      	br      	0x21e8	//21e8 <CK_DMAC_Handler+0x770>
    1f24:	0000fea4 	.long	0x0000fea4
    1f28:	0000e950 	.long	0x0000e950
    1f2c:	000134cc 	.long	0x000134cc
    1f30:	00013700 	.long	0x00013700
    1f34:	00002de8 	.long	0x00002de8
    1f38:	0000fec0 	.long	0x0000fec0
    1f3c:	0000fed8 	.long	0x0000fed8
    1f40:	0000fef0 	.long	0x0000fef0
    1f44:	0000ff0c 	.long	0x0000ff0c
    1f48:	0000ff24 	.long	0x0000ff24
    1f4c:	0000ff3c 	.long	0x0000ff3c
    1f50:	0000ff54 	.long	0x0000ff54
    1f54:	0000ff6c 	.long	0x0000ff6c
    1f58:	0000ff88 	.long	0x0000ff88
    1f5c:	0000ffa4 	.long	0x0000ffa4
				case DMA_CHX_WR_SLV_ERR_INT:
					 printf("  LLI_WR_SLV_ERR_IntStat\n");
    1f60:	1309      	lrw      	r0, 0xffc0	//ffc0 <__etext+0x410>
    1f62:	e00064f7 	bsr      	0xe950	//e950 <printf>
    1f66:	c4004820 	lsli      	r0, r0, 0
					 dma_chx_int_status_clear(dma.chan_reg[channelid],DMA_CHX_WR_SLV_ERR_INT);
    1f6a:	1369      	lrw      	r3, 0x134cc	//134cc <channelid>
    1f6c:	8360      	ld.b      	r3, (r3, 0x0)
    1f6e:	74cc      	zextb      	r3, r3
    1f70:	6c8f      	mov      	r2, r3
    1f72:	1368      	lrw      	r3, 0x13700	//13700 <dma>
    1f74:	2200      	addi      	r2, 1      	//0x1
    1f76:	d0430883 	ldr.w      	r3, (r3, r2<<2)
    1f7a:	6c0f      	mov      	r0, r3
    1f7c:	3180      	movi      	r1, 128      	//0x80
    1f7e:	4125      	lsli      	r1, r1, 5
    1f80:	e0000734 	bsr      	0x2de8	//2de8 <dma_chx_int_status_clear>
    1f84:	c4004820 	lsli      	r0, r0, 0
					 break; /* clear DMA_CHX_WR_SLV_ERR_INT interrupt */
    1f88:	0530      	br      	0x21e8	//21e8 <CK_DMAC_Handler+0x770>
				case DMA_CHX_SR_OR_LLI_INV_ERR_INT:
					 printf("  ShadowReg_Or_LLI_Invalid_ERR_IntStat\n");
    1f8a:	1304      	lrw      	r0, 0xffdc	//ffdc <__etext+0x42c>
    1f8c:	e00064e2 	bsr      	0xe950	//e950 <printf>
    1f90:	c4004820 	lsli      	r0, r0, 0
					 dma_chx_int_status_clear(dma.chan_reg[channelid],DMA_CHX_SR_OR_LLI_INV_ERR_INT);
    1f94:	127e      	lrw      	r3, 0x134cc	//134cc <channelid>
    1f96:	8360      	ld.b      	r3, (r3, 0x0)
    1f98:	74cc      	zextb      	r3, r3
    1f9a:	6c8f      	mov      	r2, r3
    1f9c:	127d      	lrw      	r3, 0x13700	//13700 <dma>
    1f9e:	2200      	addi      	r2, 1      	//0x1
    1fa0:	d0430883 	ldr.w      	r3, (r3, r2<<2)
    1fa4:	6c0f      	mov      	r0, r3
    1fa6:	3180      	movi      	r1, 128      	//0x80
    1fa8:	4126      	lsli      	r1, r1, 6
    1faa:	e000071f 	bsr      	0x2de8	//2de8 <dma_chx_int_status_clear>
    1fae:	c4004820 	lsli      	r0, r0, 0
					 break; /* clear DMA_CHX_SR_OR_LLI_INV_ERR_INT interrupt */
    1fb2:	051b      	br      	0x21e8	//21e8 <CK_DMAC_Handler+0x770>
				case DMA_CHX_SLVIF_MBT_ERR_INT:
					 printf("  SLVIF_MultiBlkType_ERR_IntStat\n");
    1fb4:	121a      	lrw      	r0, 0x10004	//10004 <__etext+0x454>
    1fb6:	e00064cd 	bsr      	0xe950	//e950 <printf>
    1fba:	c4004820 	lsli      	r0, r0, 0
					 dma_chx_int_status_clear(dma.chan_reg[channelid],DMA_CHX_SLVIF_MBT_ERR_INT);
    1fbe:	1274      	lrw      	r3, 0x134cc	//134cc <channelid>
    1fc0:	8360      	ld.b      	r3, (r3, 0x0)
    1fc2:	74cc      	zextb      	r3, r3
    1fc4:	6c8f      	mov      	r2, r3
    1fc6:	1273      	lrw      	r3, 0x13700	//13700 <dma>
    1fc8:	2200      	addi      	r2, 1      	//0x1
    1fca:	d0430883 	ldr.w      	r3, (r3, r2<<2)
    1fce:	6c0f      	mov      	r0, r3
    1fd0:	3180      	movi      	r1, 128      	//0x80
    1fd2:	4127      	lsli      	r1, r1, 7
    1fd4:	e000070a 	bsr      	0x2de8	//2de8 <dma_chx_int_status_clear>
    1fd8:	c4004820 	lsli      	r0, r0, 0
					 break; /* clear DMA_CHX_SLVIF_MBT_ERR_INT interrupt */
    1fdc:	0506      	br      	0x21e8	//21e8 <CK_DMAC_Handler+0x770>
				case DMA_CHX_SLVIF_DEC_ERR_INT:
					 printf("  SLVIF_DEC_ERR_IntStat\n");
    1fde:	1211      	lrw      	r0, 0x10028	//10028 <__etext+0x478>
    1fe0:	e00064b8 	bsr      	0xe950	//e950 <printf>
    1fe4:	c4004820 	lsli      	r0, r0, 0
					 dma_chx_int_status_clear(dma.chan_reg[channelid],DMA_CHX_SLVIF_DEC_ERR_INT);
    1fe8:	1269      	lrw      	r3, 0x134cc	//134cc <channelid>
    1fea:	8360      	ld.b      	r3, (r3, 0x0)
    1fec:	74cc      	zextb      	r3, r3
    1fee:	6c8f      	mov      	r2, r3
    1ff0:	1268      	lrw      	r3, 0x13700	//13700 <dma>
    1ff2:	2200      	addi      	r2, 1      	//0x1
    1ff4:	d0430883 	ldr.w      	r3, (r3, r2<<2)
    1ff8:	6c0f      	mov      	r0, r3
    1ffa:	3180      	movi      	r1, 128      	//0x80
    1ffc:	4129      	lsli      	r1, r1, 9
    1ffe:	e00006f5 	bsr      	0x2de8	//2de8 <dma_chx_int_status_clear>
    2002:	c4004820 	lsli      	r0, r0, 0
					 break; /* clear DMA_CHX_SLVIF_DEC_ERR_INT interrupt */
    2006:	04f1      	br      	0x21e8	//21e8 <CK_DMAC_Handler+0x770>
				case DMA_CHX_SLVIF_WR2RO_ERR_INT:
					 printf("  SLVIF_WR2RO_ERR_IntStat\n");
    2008:	1207      	lrw      	r0, 0x10044	//10044 <__etext+0x494>
    200a:	e00064a3 	bsr      	0xe950	//e950 <printf>
    200e:	c4004820 	lsli      	r0, r0, 0
					 dma_chx_int_status_clear(dma.chan_reg[channelid],DMA_CHX_SLVIF_WR2RO_ERR_INT);
    2012:	117f      	lrw      	r3, 0x134cc	//134cc <channelid>
    2014:	8360      	ld.b      	r3, (r3, 0x0)
    2016:	74cc      	zextb      	r3, r3
    2018:	6c8f      	mov      	r2, r3
    201a:	117e      	lrw      	r3, 0x13700	//13700 <dma>
    201c:	2200      	addi      	r2, 1      	//0x1
    201e:	d0430883 	ldr.w      	r3, (r3, r2<<2)
    2022:	6c0f      	mov      	r0, r3
    2024:	3180      	movi      	r1, 128      	//0x80
    2026:	412a      	lsli      	r1, r1, 10
    2028:	e00006e0 	bsr      	0x2de8	//2de8 <dma_chx_int_status_clear>
    202c:	c4004820 	lsli      	r0, r0, 0
					 break; /* clear DMA_CHX_SLVIF_WR2RO_ERR_INT interrupt */
    2030:	04dc      	br      	0x21e8	//21e8 <CK_DMAC_Handler+0x770>
				case DMA_CHX_SLVIF_RD2RWO_ERR_INT:
					 printf("  SLVIF_RD2WO_ERR_IntStat\n");
    2032:	111e      	lrw      	r0, 0x10060	//10060 <__etext+0x4b0>
    2034:	e000648e 	bsr      	0xe950	//e950 <printf>
    2038:	c4004820 	lsli      	r0, r0, 0
					 dma_chx_int_status_clear(dma.chan_reg[channelid],DMA_CHX_SLVIF_RD2RWO_ERR_INT);
    203c:	1174      	lrw      	r3, 0x134cc	//134cc <channelid>
    203e:	8360      	ld.b      	r3, (r3, 0x0)
    2040:	74cc      	zextb      	r3, r3
    2042:	6c8f      	mov      	r2, r3
    2044:	1173      	lrw      	r3, 0x13700	//13700 <dma>
    2046:	2200      	addi      	r2, 1      	//0x1
    2048:	d0430883 	ldr.w      	r3, (r3, r2<<2)
    204c:	6c0f      	mov      	r0, r3
    204e:	3180      	movi      	r1, 128      	//0x80
    2050:	412b      	lsli      	r1, r1, 11
    2052:	e00006cb 	bsr      	0x2de8	//2de8 <dma_chx_int_status_clear>
    2056:	c4004820 	lsli      	r0, r0, 0
					 break; /* clear DMA_CHX_SLVIF_RD2RWO_ERR_INT interrupt */
    205a:	04c7      	br      	0x21e8	//21e8 <CK_DMAC_Handler+0x770>
				case DMA_CHX_SLVIF_WRONCHEN_ERR_INT:
					 printf("  SLVIF_WrOnChEn_ERR_ntStat\n");
    205c:	1114      	lrw      	r0, 0x1007c	//1007c <__etext+0x4cc>
    205e:	e0006479 	bsr      	0xe950	//e950 <printf>
    2062:	c4004820 	lsli      	r0, r0, 0
					 dma_chx_int_status_clear(dma.chan_reg[channelid],DMA_CHX_SLVIF_WRONCHEN_ERR_INT);
    2066:	116a      	lrw      	r3, 0x134cc	//134cc <channelid>
    2068:	8360      	ld.b      	r3, (r3, 0x0)
    206a:	74cc      	zextb      	r3, r3
    206c:	6c8f      	mov      	r2, r3
    206e:	1169      	lrw      	r3, 0x13700	//13700 <dma>
    2070:	2200      	addi      	r2, 1      	//0x1
    2072:	d0430883 	ldr.w      	r3, (r3, r2<<2)
    2076:	6c0f      	mov      	r0, r3
    2078:	3180      	movi      	r1, 128      	//0x80
    207a:	412c      	lsli      	r1, r1, 12
    207c:	e00006b6 	bsr      	0x2de8	//2de8 <dma_chx_int_status_clear>
    2080:	c4004820 	lsli      	r0, r0, 0
					 break; /* clear DMA_CHX_SLVIF_WRONCHEN_ERR_INT interrupt */
    2084:	04b2      	br      	0x21e8	//21e8 <CK_DMAC_Handler+0x770>
				case DMA_CHX_SLVIF_SR_WRON_VALID_ERR_INT:
					 printf("  SLVIF_ShadowReg_WrOnValid_ERR_IntStat\n");
    2086:	110b      	lrw      	r0, 0x1009c	//1009c <__etext+0x4ec>
    2088:	e0006464 	bsr      	0xe950	//e950 <printf>
    208c:	c4004820 	lsli      	r0, r0, 0
					 dma_chx_int_status_clear(dma.chan_reg[channelid],DMA_CHX_SLVIF_SR_WRON_VALID_ERR_INT);
    2090:	107f      	lrw      	r3, 0x134cc	//134cc <channelid>
    2092:	8360      	ld.b      	r3, (r3, 0x0)
    2094:	74cc      	zextb      	r3, r3
    2096:	6c8f      	mov      	r2, r3
    2098:	107e      	lrw      	r3, 0x13700	//13700 <dma>
    209a:	2200      	addi      	r2, 1      	//0x1
    209c:	d0430883 	ldr.w      	r3, (r3, r2<<2)
    20a0:	6c0f      	mov      	r0, r3
    20a2:	3180      	movi      	r1, 128      	//0x80
    20a4:	412d      	lsli      	r1, r1, 13
    20a6:	e00006a1 	bsr      	0x2de8	//2de8 <dma_chx_int_status_clear>
    20aa:	c4004820 	lsli      	r0, r0, 0
					 break; /* clear DMA_CHX_SLVIF_SR_WRON_VALID_ERR_INT interrupt */
    20ae:	049d      	br      	0x21e8	//21e8 <CK_DMAC_Handler+0x770>
				case DMA_CHX_SLVIF_WRONHODL_ERR_INT:
					 printf("  SLVIF_WrOnHold_ERR_IntStat\n");
    20b0:	1101      	lrw      	r0, 0x100c8	//100c8 <__etext+0x518>
    20b2:	e000644f 	bsr      	0xe950	//e950 <printf>
    20b6:	c4004820 	lsli      	r0, r0, 0
					 dma_chx_int_status_clear(dma.chan_reg[channelid],DMA_CHX_SLVIF_WRONHODL_ERR_INT);
    20ba:	1075      	lrw      	r3, 0x134cc	//134cc <channelid>
    20bc:	8360      	ld.b      	r3, (r3, 0x0)
    20be:	74cc      	zextb      	r3, r3
    20c0:	6c8f      	mov      	r2, r3
    20c2:	1074      	lrw      	r3, 0x13700	//13700 <dma>
    20c4:	2200      	addi      	r2, 1      	//0x1
    20c6:	d0430883 	ldr.w      	r3, (r3, r2<<2)
    20ca:	6c0f      	mov      	r0, r3
    20cc:	3180      	movi      	r1, 128      	//0x80
    20ce:	412e      	lsli      	r1, r1, 14
    20d0:	e000068c 	bsr      	0x2de8	//2de8 <dma_chx_int_status_clear>
    20d4:	c4004820 	lsli      	r0, r0, 0
					 break; /* clear DMA_CHX_SLVIF_WRONHODL_ERR_INT interrupt */
    20d8:	0488      	br      	0x21e8	//21e8 <CK_DMAC_Handler+0x770>
				case DMA_CHX_CHLOCK_CLEARED_INT:
					 printf("  ChLock_Cleared_IntStat\n");
    20da:	1018      	lrw      	r0, 0x100e8	//100e8 <__etext+0x538>
    20dc:	e000643a 	bsr      	0xe950	//e950 <printf>
    20e0:	c4004820 	lsli      	r0, r0, 0
					 dma_chx_int_status_clear(dma.chan_reg[channelid],DMA_CHX_CHLOCK_CLEARED_INT);
    20e4:	106a      	lrw      	r3, 0x134cc	//134cc <channelid>
    20e6:	8360      	ld.b      	r3, (r3, 0x0)
    20e8:	74cc      	zextb      	r3, r3
    20ea:	6c8f      	mov      	r2, r3
    20ec:	1069      	lrw      	r3, 0x13700	//13700 <dma>
    20ee:	2200      	addi      	r2, 1      	//0x1
    20f0:	d0430883 	ldr.w      	r3, (r3, r2<<2)
    20f4:	6c0f      	mov      	r0, r3
    20f6:	3180      	movi      	r1, 128      	//0x80
    20f8:	4134      	lsli      	r1, r1, 20
    20fa:	e0000677 	bsr      	0x2de8	//2de8 <dma_chx_int_status_clear>
    20fe:	c4004820 	lsli      	r0, r0, 0
					 break; /* clear DMA_CHX_CHLOCK_CLEARED_INT interrupt */
    2102:	0473      	br      	0x21e8	//21e8 <CK_DMAC_Handler+0x770>
    2104:	0000ffc0 	.long	0x0000ffc0
    2108:	0000e950 	.long	0x0000e950
    210c:	000134cc 	.long	0x000134cc
    2110:	00013700 	.long	0x00013700
    2114:	00002de8 	.long	0x00002de8
    2118:	0000ffdc 	.long	0x0000ffdc
    211c:	00010004 	.long	0x00010004
    2120:	00010028 	.long	0x00010028
    2124:	00010044 	.long	0x00010044
    2128:	00010060 	.long	0x00010060
    212c:	0001007c 	.long	0x0001007c
    2130:	0001009c 	.long	0x0001009c
    2134:	000100c8 	.long	0x000100c8
    2138:	000100e8 	.long	0x000100e8
				case DMA_CHX_CH_SRC_SUSPENDED_INT:
					 printf("  CH_SRC_SUSPENDED_IntStat\n");
    213c:	110c      	lrw      	r0, 0x10104	//10104 <__etext+0x554>
    213e:	e0006409 	bsr      	0xe950	//e950 <printf>
    2142:	c4004820 	lsli      	r0, r0, 0
					 dma_chx_int_status_clear(dma.chan_reg[channelid],DMA_CHX_CH_SRC_SUSPENDED_INT);
    2146:	116c      	lrw      	r3, 0x134cc	//134cc <channelid>
    2148:	8360      	ld.b      	r3, (r3, 0x0)
    214a:	74cc      	zextb      	r3, r3
    214c:	6c8f      	mov      	r2, r3
    214e:	116b      	lrw      	r3, 0x13700	//13700 <dma>
    2150:	2200      	addi      	r2, 1      	//0x1
    2152:	d0430883 	ldr.w      	r3, (r3, r2<<2)
    2156:	6c0f      	mov      	r0, r3
    2158:	3180      	movi      	r1, 128      	//0x80
    215a:	4135      	lsli      	r1, r1, 21
    215c:	e0000646 	bsr      	0x2de8	//2de8 <dma_chx_int_status_clear>
    2160:	c4004820 	lsli      	r0, r0, 0
					 break; /* clear DMA_CHX_CH_SRC_SUSPENDED_INT interrupt */
    2164:	0442      	br      	0x21e8	//21e8 <CK_DMAC_Handler+0x770>
				case DMA_CHX_CH_SUSPENDED_INT:
					 printf("  CH_SUSPENDED_IntStat\n");
    2166:	1107      	lrw      	r0, 0x10120	//10120 <__etext+0x570>
    2168:	e00063f4 	bsr      	0xe950	//e950 <printf>
    216c:	c4004820 	lsli      	r0, r0, 0
					 dma_chx_int_status_clear(dma.chan_reg[channelid],DMA_CHX_CH_SUSPENDED_INT);
    2170:	1161      	lrw      	r3, 0x134cc	//134cc <channelid>
    2172:	8360      	ld.b      	r3, (r3, 0x0)
    2174:	74cc      	zextb      	r3, r3
    2176:	6c8f      	mov      	r2, r3
    2178:	1160      	lrw      	r3, 0x13700	//13700 <dma>
    217a:	2200      	addi      	r2, 1      	//0x1
    217c:	d0430883 	ldr.w      	r3, (r3, r2<<2)
    2180:	6c0f      	mov      	r0, r3
    2182:	3180      	movi      	r1, 128      	//0x80
    2184:	4136      	lsli      	r1, r1, 22
    2186:	e0000631 	bsr      	0x2de8	//2de8 <dma_chx_int_status_clear>
    218a:	c4004820 	lsli      	r0, r0, 0
					 break; /* clear DMA_CHX_CH_SUSPENDED_INT interrupt */
    218e:	042d      	br      	0x21e8	//21e8 <CK_DMAC_Handler+0x770>
				case DMA_CHX_CH_DISABLED_INT:
					 printf("  CH_DISABLED_IntStat\n");
    2190:	101d      	lrw      	r0, 0x10138	//10138 <__etext+0x588>
    2192:	e00063df 	bsr      	0xe950	//e950 <printf>
    2196:	c4004820 	lsli      	r0, r0, 0
					 dma_chx_int_status_clear(dma.chan_reg[channelid],DMA_CHX_CH_DISABLED_INT);
    219a:	1077      	lrw      	r3, 0x134cc	//134cc <channelid>
    219c:	8360      	ld.b      	r3, (r3, 0x0)
    219e:	74cc      	zextb      	r3, r3
    21a0:	6c8f      	mov      	r2, r3
    21a2:	1076      	lrw      	r3, 0x13700	//13700 <dma>
    21a4:	2200      	addi      	r2, 1      	//0x1
    21a6:	d0430883 	ldr.w      	r3, (r3, r2<<2)
    21aa:	6c0f      	mov      	r0, r3
    21ac:	3180      	movi      	r1, 128      	//0x80
    21ae:	4137      	lsli      	r1, r1, 23
    21b0:	e000061c 	bsr      	0x2de8	//2de8 <dma_chx_int_status_clear>
    21b4:	c4004820 	lsli      	r0, r0, 0
					 break; /* clear DMA_CHX_CH_DISABLED_INT interrupt */
    21b8:	0418      	br      	0x21e8	//21e8 <CK_DMAC_Handler+0x770>
				case DMA_CHX_CH_ABORTERD_INT:
					 printf("  CH_ABORTED_IntStat\n");
    21ba:	1014      	lrw      	r0, 0x10150	//10150 <__etext+0x5a0>
    21bc:	e00063ca 	bsr      	0xe950	//e950 <printf>
    21c0:	c4004820 	lsli      	r0, r0, 0
					 dma_chx_int_status_clear(dma.chan_reg[channelid],DMA_CHX_CH_ABORTERD_INT);
    21c4:	106c      	lrw      	r3, 0x134cc	//134cc <channelid>
    21c6:	8360      	ld.b      	r3, (r3, 0x0)
    21c8:	74cc      	zextb      	r3, r3
    21ca:	6c8f      	mov      	r2, r3
    21cc:	106b      	lrw      	r3, 0x13700	//13700 <dma>
    21ce:	2200      	addi      	r2, 1      	//0x1
    21d0:	d0430883 	ldr.w      	r3, (r3, r2<<2)
    21d4:	6c0f      	mov      	r0, r3
    21d6:	3180      	movi      	r1, 128      	//0x80
    21d8:	4138      	lsli      	r1, r1, 24
    21da:	e0000607 	bsr      	0x2de8	//2de8 <dma_chx_int_status_clear>
    21de:	c4004820 	lsli      	r0, r0, 0
					 break; /* clear DMA_CHX_CH_ABORTERD_INT interrupt */
    21e2:	6c00      	or      	r0, r0
    21e4:	0402      	br      	0x21e8	//21e8 <CK_DMAC_Handler+0x770>
				default:break;
			}
    	}
		else
			return;
    21e6:	6c00      	or      	r0, r0
    }

}
    21e8:	1403      	addi      	sp, sp, 12
    21ea:	1492      	pop      	r4-r5, r15
    21ec:	00010104 	.long	0x00010104
    21f0:	0000e950 	.long	0x0000e950
    21f4:	000134cc 	.long	0x000134cc
    21f8:	00013700 	.long	0x00013700
    21fc:	00002de8 	.long	0x00002de8
    2200:	00010120 	.long	0x00010120
    2204:	00010138 	.long	0x00010138
    2208:	00010150 	.long	0x00010150

0000220c <readl>:
{
    *(volatile Bit16u *)addr = value;
}

static inline Bit32u readl(const volatile void *addr)
{
    220c:	1421      	subi      	sp, sp, 4
    220e:	6cfb      	mov      	r3, sp
    2210:	b300      	st.w      	r0, (r3, 0x0)
    return *(const volatile Bit32u *)addr;
    2212:	6cfb      	mov      	r3, sp
    2214:	9360      	ld.w      	r3, (r3, 0x0)
    2216:	9360      	ld.w      	r3, (r3, 0x0)
}
    2218:	6c0f      	mov      	r0, r3
    221a:	1401      	addi      	sp, sp, 4
    221c:	783c      	rts
	...

00002220 <writel>:

static inline void writel(Bit32u value, volatile void *addr)
{
    2220:	1422      	subi      	sp, sp, 8
    2222:	1b01      	addi      	r3, sp, 4
    2224:	b300      	st.w      	r0, (r3, 0x0)
    2226:	6cfb      	mov      	r3, sp
    2228:	b320      	st.w      	r1, (r3, 0x0)
    *(volatile Bit32u *)addr = value;
    222a:	6cfb      	mov      	r3, sp
    222c:	9360      	ld.w      	r3, (r3, 0x0)
    222e:	1a01      	addi      	r2, sp, 4
    2230:	9240      	ld.w      	r2, (r2, 0x0)
    2232:	b340      	st.w      	r2, (r3, 0x0)
}
    2234:	1402      	addi      	sp, sp, 8
    2236:	783c      	rts

00002238 <dw_write>:

static inline void dw_write(Bit32u val, void* addr)
{
    2238:	14d1      	push      	r4, r15
    223a:	1423      	subi      	sp, sp, 12
    223c:	1b01      	addi      	r3, sp, 4
    223e:	b300      	st.w      	r0, (r3, 0x0)
    2240:	6cfb      	mov      	r3, sp
    2242:	b320      	st.w      	r1, (r3, 0x0)
	Bit32u value;
	value =readl(addr);
    2244:	1c02      	addi      	r4, sp, 8
    2246:	6cfb      	mov      	r3, sp
    2248:	9300      	ld.w      	r0, (r3, 0x0)
    224a:	e3ffffe1 	bsr      	0x220c	//220c <readl>
    224e:	c4004820 	lsli      	r0, r0, 0
    2252:	b400      	st.w      	r0, (r4, 0x0)
	value |= val;
    2254:	1b02      	addi      	r3, sp, 8
    2256:	1902      	addi      	r1, sp, 8
    2258:	1a01      	addi      	r2, sp, 4
    225a:	9120      	ld.w      	r1, (r1, 0x0)
    225c:	9240      	ld.w      	r2, (r2, 0x0)
    225e:	6c84      	or      	r2, r1
    2260:	b340      	st.w      	r2, (r3, 0x0)
	writel(value, addr);
    2262:	1a02      	addi      	r2, sp, 8
    2264:	6cfb      	mov      	r3, sp
    2266:	9200      	ld.w      	r0, (r2, 0x0)
    2268:	9320      	ld.w      	r1, (r3, 0x0)
    226a:	e3ffffdb 	bsr      	0x2220	//2220 <writel>
    226e:	c4004820 	lsli      	r0, r0, 0
}
    2272:	1403      	addi      	sp, sp, 12
    2274:	1491      	pop      	r4, r15
	...

00002278 <dw_clear>:

static inline void dw_clear(Bit32u val, void* addr)
{
    2278:	14d1      	push      	r4, r15
    227a:	1423      	subi      	sp, sp, 12
    227c:	1b01      	addi      	r3, sp, 4
    227e:	b300      	st.w      	r0, (r3, 0x0)
    2280:	6cfb      	mov      	r3, sp
    2282:	b320      	st.w      	r1, (r3, 0x0)
	Bit32u value;
	value =readl(addr);
    2284:	1c02      	addi      	r4, sp, 8
    2286:	6cfb      	mov      	r3, sp
    2288:	9300      	ld.w      	r0, (r3, 0x0)
    228a:	e3ffffc1 	bsr      	0x220c	//220c <readl>
    228e:	c4004820 	lsli      	r0, r0, 0
    2292:	b400      	st.w      	r0, (r4, 0x0)
	value &= ~val;
    2294:	1b01      	addi      	r3, sp, 4
    2296:	9360      	ld.w      	r3, (r3, 0x0)
    2298:	c4632481 	nor      	r1, r3, r3
    229c:	1b02      	addi      	r3, sp, 8
    229e:	1a02      	addi      	r2, sp, 8
    22a0:	9240      	ld.w      	r2, (r2, 0x0)
    22a2:	6884      	and      	r2, r1
    22a4:	b340      	st.w      	r2, (r3, 0x0)
	writel(value, addr);
    22a6:	1a02      	addi      	r2, sp, 8
    22a8:	6cfb      	mov      	r3, sp
    22aa:	9200      	ld.w      	r0, (r2, 0x0)
    22ac:	9320      	ld.w      	r1, (r3, 0x0)
    22ae:	e3ffffb9 	bsr      	0x2220	//2220 <writel>
    22b2:	c4004820 	lsli      	r0, r0, 0
}
    22b6:	1403      	addi      	sp, sp, 12
    22b8:	1491      	pop      	r4, r15
    22ba:	0000      	.short	0x0000
    22bc:	0000220c 	.long	0x0000220c
    22c0:	00002220 	.long	0x00002220

000022c4 <dma_get_id>:
#include <stdio.h>
#include <ctype.h>
#include "include/io.h"
#include "dma.h"

Bit32u dma_get_id(struct dw_dma_common_reg *reg){
    22c4:	14d0      	push      	r15
    22c6:	1423      	subi      	sp, sp, 12
    22c8:	6cfb      	mov      	r3, sp
    22ca:	b300      	st.w      	r0, (r3, 0x0)
	Bit64u id;
	id = reg_readl(reg, ID);
    22cc:	6cfb      	mov      	r3, sp
    22ce:	9360      	ld.w      	r3, (r3, 0x0)
    22d0:	6c0f      	mov      	r0, r3
    22d2:	e3ffff9d 	bsr      	0x220c	//220c <readl>
    22d6:	c4004820 	lsli      	r0, r0, 0
    22da:	6c83      	mov      	r2, r0
    22dc:	1b01      	addi      	r3, sp, 4
    22de:	b340      	st.w      	r2, (r3, 0x0)
    22e0:	3200      	movi      	r2, 0      	//0x0
    22e2:	b341      	st.w      	r2, (r3, 0x4)
	return id;
    22e4:	1b01      	addi      	r3, sp, 4
    22e6:	9360      	ld.w      	r3, (r3, 0x0)
}
    22e8:	6c0f      	mov      	r0, r3
    22ea:	1403      	addi      	sp, sp, 12
    22ec:	1490      	pop      	r15
	...

000022f0 <dma_get_comp_ver>:

Bit32u dma_get_comp_ver(struct dw_dma_common_reg *reg){
    22f0:	14d0      	push      	r15
    22f2:	1423      	subi      	sp, sp, 12
    22f4:	6cfb      	mov      	r3, sp
    22f6:	b300      	st.w      	r0, (r3, 0x0)
	Bit64u comp_rev;
	comp_rev = reg_readl(reg, CompVer);
    22f8:	6cfb      	mov      	r3, sp
    22fa:	9360      	ld.w      	r3, (r3, 0x0)
    22fc:	2307      	addi      	r3, 8      	//0x8
    22fe:	6c0f      	mov      	r0, r3
    2300:	e3ffff86 	bsr      	0x220c	//220c <readl>
    2304:	c4004820 	lsli      	r0, r0, 0
    2308:	6c83      	mov      	r2, r0
    230a:	1b01      	addi      	r3, sp, 4
    230c:	b340      	st.w      	r2, (r3, 0x0)
    230e:	3200      	movi      	r2, 0      	//0x0
    2310:	b341      	st.w      	r2, (r3, 0x4)
	return comp_rev;
    2312:	1b01      	addi      	r3, sp, 4
    2314:	9360      	ld.w      	r3, (r3, 0x0)
}
    2316:	6c0f      	mov      	r0, r3
    2318:	1403      	addi      	sp, sp, 12
    231a:	1490      	pop      	r15

0000231c <dma_gloabe_int_enable>:

void dma_gloabe_int_enable(struct dw_dma_common_reg *reg){
    231c:	14d0      	push      	r15
    231e:	1421      	subi      	sp, sp, 4
    2320:	6cfb      	mov      	r3, sp
    2322:	b300      	st.w      	r0, (r3, 0x0)
	reg_writel(DMA_CFG_INT_EN, reg, CFG);
    2324:	6cfb      	mov      	r3, sp
    2326:	9360      	ld.w      	r3, (r3, 0x0)
    2328:	230f      	addi      	r3, 16      	//0x10
    232a:	3002      	movi      	r0, 2      	//0x2
    232c:	6c4f      	mov      	r1, r3
    232e:	e3ffff85 	bsr      	0x2238	//2238 <dw_write>
    2332:	c4004820 	lsli      	r0, r0, 0
}
    2336:	1401      	addi      	sp, sp, 4
    2338:	1490      	pop      	r15
	...

0000233c <dma_gloabe_int_disable>:

void dma_gloabe_int_disable(struct dw_dma_common_reg *reg){
    233c:	14d0      	push      	r15
    233e:	1421      	subi      	sp, sp, 4
    2340:	6cfb      	mov      	r3, sp
    2342:	b300      	st.w      	r0, (r3, 0x0)
	reg_clearl(DMA_CFG_INT_EN, reg, CFG);
    2344:	6cfb      	mov      	r3, sp
    2346:	9360      	ld.w      	r3, (r3, 0x0)
    2348:	230f      	addi      	r3, 16      	//0x10
    234a:	3002      	movi      	r0, 2      	//0x2
    234c:	6c4f      	mov      	r1, r3
    234e:	e3ffff95 	bsr      	0x2278	//2278 <dw_clear>
    2352:	c4004820 	lsli      	r0, r0, 0
}
    2356:	1401      	addi      	sp, sp, 4
    2358:	1490      	pop      	r15
	...

0000235c <dma_dmac_enable>:

void dma_dmac_enable(struct dw_dma_common_reg *reg){
    235c:	14d0      	push      	r15
    235e:	1421      	subi      	sp, sp, 4
    2360:	6cfb      	mov      	r3, sp
    2362:	b300      	st.w      	r0, (r3, 0x0)
	reg_writel(DMA_CFG_DMAC_EN, reg, CFG);
    2364:	6cfb      	mov      	r3, sp
    2366:	9360      	ld.w      	r3, (r3, 0x0)
    2368:	230f      	addi      	r3, 16      	//0x10
    236a:	3001      	movi      	r0, 1      	//0x1
    236c:	6c4f      	mov      	r1, r3
    236e:	e3ffff65 	bsr      	0x2238	//2238 <dw_write>
    2372:	c4004820 	lsli      	r0, r0, 0
}
    2376:	1401      	addi      	sp, sp, 4
    2378:	1490      	pop      	r15
	...

0000237c <dma_dmac_disable>:
/* Disable dmac
 * return val:
 * 		0: dmac is disabled.
 *		1: dmac is still active, you should disable channel first.
 **/
Bit32u dma_dmac_disable(struct dw_dma_common_reg *reg){
    237c:	14d1      	push      	r4, r15
    237e:	1422      	subi      	sp, sp, 8
    2380:	6cfb      	mov      	r3, sp
    2382:	b300      	st.w      	r0, (r3, 0x0)
	Bit32u val;
	reg_clearl(DMA_CFG_DMAC_EN, reg, CFG);
    2384:	6cfb      	mov      	r3, sp
    2386:	9360      	ld.w      	r3, (r3, 0x0)
    2388:	230f      	addi      	r3, 16      	//0x10
    238a:	3001      	movi      	r0, 1      	//0x1
    238c:	6c4f      	mov      	r1, r3
    238e:	e3ffff75 	bsr      	0x2278	//2278 <dw_clear>
    2392:	c4004820 	lsli      	r0, r0, 0
	val = reg_readl(reg, CFG);
    2396:	6cfb      	mov      	r3, sp
    2398:	9360      	ld.w      	r3, (r3, 0x0)
    239a:	230f      	addi      	r3, 16      	//0x10
    239c:	1c01      	addi      	r4, sp, 4
    239e:	6c0f      	mov      	r0, r3
    23a0:	e3ffff36 	bsr      	0x220c	//220c <readl>
    23a4:	c4004820 	lsli      	r0, r0, 0
    23a8:	b400      	st.w      	r0, (r4, 0x0)
	if(val & DMA_CFG_DMAC_EN)
    23aa:	1b01      	addi      	r3, sp, 4
    23ac:	9360      	ld.w      	r3, (r3, 0x0)
    23ae:	e4632001 	andi      	r3, r3, 1
    23b2:	74cc      	zextb      	r3, r3
    23b4:	e9030004 	bez      	r3, 0x23bc	//23bc <dma_dmac_disable+0x40>
		return 1;
    23b8:	3301      	movi      	r3, 1      	//0x1
    23ba:	0402      	br      	0x23be	//23be <dma_dmac_disable+0x42>
	else
		return 0;
    23bc:	3300      	movi      	r3, 0      	//0x0
}
    23be:	6c0f      	mov      	r0, r3
    23c0:	1402      	addi      	sp, sp, 8
    23c2:	1491      	pop      	r4, r15

000023c4 <dma_dmac_is_enable>:
 * DMA is enable?
 * @return value 
 *		0: Disable
 *		1: Enable
 **/
Bit32u dma_dmac_is_enable(struct dw_dma_common_reg *reg){
    23c4:	14d0      	push      	r15
    23c6:	1421      	subi      	sp, sp, 4
    23c8:	6cfb      	mov      	r3, sp
    23ca:	b300      	st.w      	r0, (r3, 0x0)
	return reg_readl(reg, CFG) & 1;
    23cc:	6cfb      	mov      	r3, sp
    23ce:	9360      	ld.w      	r3, (r3, 0x0)
    23d0:	230f      	addi      	r3, 16      	//0x10
    23d2:	6c0f      	mov      	r0, r3
    23d4:	e3ffff1c 	bsr      	0x220c	//220c <readl>
    23d8:	c4004820 	lsli      	r0, r0, 0
    23dc:	6cc3      	mov      	r3, r0
    23de:	e4632001 	andi      	r3, r3, 1
}
    23e2:	6c0f      	mov      	r0, r3
    23e4:	1401      	addi      	sp, sp, 4
    23e6:	1490      	pop      	r15

000023e8 <dma_dmac_gloabe_int_is_enable>:

Bit32u dma_dmac_gloabe_int_is_enable(struct dw_dma_common_reg *reg){
    23e8:	14d0      	push      	r15
    23ea:	1421      	subi      	sp, sp, 4
    23ec:	6cfb      	mov      	r3, sp
    23ee:	b300      	st.w      	r0, (r3, 0x0)
	return reg_readl(reg, CFG) & 2;
    23f0:	6cfb      	mov      	r3, sp
    23f2:	9360      	ld.w      	r3, (r3, 0x0)
    23f4:	230f      	addi      	r3, 16      	//0x10
    23f6:	6c0f      	mov      	r0, r3
    23f8:	e3ffff0a 	bsr      	0x220c	//220c <readl>
    23fc:	c4004820 	lsli      	r0, r0, 0
    2400:	6cc3      	mov      	r3, r0
    2402:	e4632002 	andi      	r3, r3, 2
}
    2406:	6c0f      	mov      	r0, r3
    2408:	1401      	addi      	sp, sp, 4
    240a:	1490      	pop      	r15

0000240c <dma_ch_enable>:
/*
 * Enable special channel.
 * @ch: channel number, from 1 to DW_DMA_MAX_NR_CHANNELS
 **/
void dma_ch_enable(struct dw_dma_common_reg *reg, Bit8u ch){
    240c:	14d0      	push      	r15
    240e:	1423      	subi      	sp, sp, 12
    2410:	1b01      	addi      	r3, sp, 4
    2412:	b300      	st.w      	r0, (r3, 0x0)
    2414:	6c87      	mov      	r2, r1
    2416:	6cfb      	mov      	r3, sp
    2418:	a340      	st.b      	r2, (r3, 0x0)
	Bit32u channel = ch - 1;
    241a:	6cfb      	mov      	r3, sp
    241c:	8360      	ld.b      	r3, (r3, 0x0)
    241e:	74cc      	zextb      	r3, r3
    2420:	5b43      	subi      	r2, r3, 1      	//0x1
    2422:	1b02      	addi      	r3, sp, 8
    2424:	b340      	st.w      	r2, (r3, 0x0)
	reg_writel((DMA_CH_EN << channel)|(DMA_CH_EN_WE << channel), reg, ChEn_LO);
    2426:	1b02      	addi      	r3, sp, 8
    2428:	9360      	ld.w      	r3, (r3, 0x0)
    242a:	3201      	movi      	r2, 1      	//0x1
    242c:	708c      	lsl      	r2, r3
    242e:	1b02      	addi      	r3, sp, 8
    2430:	9320      	ld.w      	r1, (r3, 0x0)
    2432:	3380      	movi      	r3, 128      	//0x80
    2434:	4361      	lsli      	r3, r3, 1
    2436:	70c4      	lsl      	r3, r1
    2438:	6cc8      	or      	r3, r2
    243a:	6c8f      	mov      	r2, r3
    243c:	1b01      	addi      	r3, sp, 4
    243e:	9360      	ld.w      	r3, (r3, 0x0)
    2440:	2317      	addi      	r3, 24      	//0x18
    2442:	6c0b      	mov      	r0, r2
    2444:	6c4f      	mov      	r1, r3
    2446:	e3fffef9 	bsr      	0x2238	//2238 <dw_write>
    244a:	c4004820 	lsli      	r0, r0, 0
}
    244e:	1403      	addi      	sp, sp, 12
    2450:	1490      	pop      	r15
    2452:	0000      	.short	0x0000
    2454:	0000220c 	.long	0x0000220c
    2458:	00002238 	.long	0x00002238
    245c:	00002278 	.long	0x00002278

00002460 <dma_ch_disable>:

/*
 * Disable special channel.
 * @ch: channel number, from 1 to DW_DMA_MAX_NR_CHANNELS
 **/
void dma_ch_disable(struct dw_dma_common_reg *reg, Bit8u ch){
    2460:	14d1      	push      	r4, r15
    2462:	1425      	subi      	sp, sp, 20
    2464:	1b01      	addi      	r3, sp, 4
    2466:	b300      	st.w      	r0, (r3, 0x0)
    2468:	6c87      	mov      	r2, r1
    246a:	6cfb      	mov      	r3, sp
    246c:	a340      	st.b      	r2, (r3, 0x0)
	void* addr;
	Bit32u channel = ch - 1;
    246e:	6cfb      	mov      	r3, sp
    2470:	8360      	ld.b      	r3, (r3, 0x0)
    2472:	74cc      	zextb      	r3, r3
    2474:	5b43      	subi      	r2, r3, 1      	//0x1
    2476:	1b04      	addi      	r3, sp, 16
    2478:	b340      	st.w      	r2, (r3, 0x0)
	Bit32u value;
	addr =  (void *)&(reg->ChEn_LO);
    247a:	1b03      	addi      	r3, sp, 12
    247c:	1a01      	addi      	r2, sp, 4
    247e:	9240      	ld.w      	r2, (r2, 0x0)
    2480:	2217      	addi      	r2, 24      	//0x18
    2482:	b340      	st.w      	r2, (r3, 0x0)
	value =readl(addr);
    2484:	1c02      	addi      	r4, sp, 8
    2486:	1b03      	addi      	r3, sp, 12
    2488:	9300      	ld.w      	r0, (r3, 0x0)
    248a:	e3fffec1 	bsr      	0x220c	//220c <readl>
    248e:	c4004820 	lsli      	r0, r0, 0
    2492:	b400      	st.w      	r0, (r4, 0x0)
	value |= (DMA_CH_EN_WE << channel);
    2494:	1b04      	addi      	r3, sp, 16
    2496:	9340      	ld.w      	r2, (r3, 0x0)
    2498:	3380      	movi      	r3, 128      	//0x80
    249a:	4361      	lsli      	r3, r3, 1
    249c:	70c8      	lsl      	r3, r2
    249e:	6c4f      	mov      	r1, r3
    24a0:	1b02      	addi      	r3, sp, 8
    24a2:	1a02      	addi      	r2, sp, 8
    24a4:	9240      	ld.w      	r2, (r2, 0x0)
    24a6:	6c84      	or      	r2, r1
    24a8:	b340      	st.w      	r2, (r3, 0x0)
	value &= ~(DMA_CH_EN << channel);
    24aa:	1b04      	addi      	r3, sp, 16
    24ac:	9360      	ld.w      	r3, (r3, 0x0)
    24ae:	3201      	movi      	r2, 1      	//0x1
    24b0:	c4624023 	lsl      	r3, r2, r3
    24b4:	6cce      	nor      	r3, r3
    24b6:	6c4f      	mov      	r1, r3
    24b8:	1b02      	addi      	r3, sp, 8
    24ba:	1a02      	addi      	r2, sp, 8
    24bc:	9240      	ld.w      	r2, (r2, 0x0)
    24be:	6884      	and      	r2, r1
    24c0:	b340      	st.w      	r2, (r3, 0x0)
	writel(value, addr);
    24c2:	1a02      	addi      	r2, sp, 8
    24c4:	1b03      	addi      	r3, sp, 12
    24c6:	9200      	ld.w      	r0, (r2, 0x0)
    24c8:	9320      	ld.w      	r1, (r3, 0x0)
    24ca:	e3fffeab 	bsr      	0x2220	//2220 <writel>
    24ce:	c4004820 	lsli      	r0, r0, 0
}
    24d2:	1405      	addi      	sp, sp, 20
    24d4:	1491      	pop      	r4, r15
	...

000024d8 <dma_ch_is_free>:
 * @ch: channel number, from 1 to DW_DMA_MAX_NR_CHANNELS
 * @return value 
 *		0: 		free channel(this channel is not enable).
 *	  	other: 	busy channel.
 **/
Bit32u dma_ch_is_free(struct dw_dma_common_reg *reg, Bit8u ch){
    24d8:	14d0      	push      	r15
    24da:	1423      	subi      	sp, sp, 12
    24dc:	1b01      	addi      	r3, sp, 4
    24de:	b300      	st.w      	r0, (r3, 0x0)
    24e0:	6c87      	mov      	r2, r1
    24e2:	6cfb      	mov      	r3, sp
    24e4:	a340      	st.b      	r2, (r3, 0x0)
	Bit32u channel = ch-1;
    24e6:	6cfb      	mov      	r3, sp
    24e8:	8360      	ld.b      	r3, (r3, 0x0)
    24ea:	74cc      	zextb      	r3, r3
    24ec:	5b43      	subi      	r2, r3, 1      	//0x1
    24ee:	1b02      	addi      	r3, sp, 8
    24f0:	b340      	st.w      	r2, (r3, 0x0)
	return reg_readl(reg, ChEn_LO) & (1 << channel);
    24f2:	1b01      	addi      	r3, sp, 4
    24f4:	9360      	ld.w      	r3, (r3, 0x0)
    24f6:	2317      	addi      	r3, 24      	//0x18
    24f8:	6c0f      	mov      	r0, r3
    24fa:	e3fffe89 	bsr      	0x220c	//220c <readl>
    24fe:	c4004820 	lsli      	r0, r0, 0
    2502:	6c83      	mov      	r2, r0
    2504:	1b02      	addi      	r3, sp, 8
    2506:	9360      	ld.w      	r3, (r3, 0x0)
    2508:	3101      	movi      	r1, 1      	//0x1
    250a:	c4614023 	lsl      	r3, r1, r3
    250e:	68c8      	and      	r3, r2
}
    2510:	6c0f      	mov      	r0, r3
    2512:	1403      	addi      	sp, sp, 12
    2514:	1490      	pop      	r15
	...

00002518 <dma_ch_susp_enable>:
/*
 * Enable special channel suspend request.
 * @ch: channel number, from 1 to DW_DMA_MAX_NR_CHANNELS
 **/
void dma_ch_susp_enable(struct dw_dma_common_reg *reg, Bit8u ch){
    2518:	14d0      	push      	r15
    251a:	1423      	subi      	sp, sp, 12
    251c:	1b01      	addi      	r3, sp, 4
    251e:	b300      	st.w      	r0, (r3, 0x0)
    2520:	6c87      	mov      	r2, r1
    2522:	6cfb      	mov      	r3, sp
    2524:	a340      	st.b      	r2, (r3, 0x0)
	Bit32u channel = ch - 1;
    2526:	6cfb      	mov      	r3, sp
    2528:	8360      	ld.b      	r3, (r3, 0x0)
    252a:	74cc      	zextb      	r3, r3
    252c:	5b43      	subi      	r2, r3, 1      	//0x1
    252e:	1b02      	addi      	r3, sp, 8
    2530:	b340      	st.w      	r2, (r3, 0x0)
	reg_writel((DMA_CH_SUSP << channel)|(DMA_CH_SUSP_WE << channel), reg, ChEn_LO);
    2532:	1b02      	addi      	r3, sp, 8
    2534:	9340      	ld.w      	r2, (r3, 0x0)
    2536:	3380      	movi      	r3, 128      	//0x80
    2538:	4369      	lsli      	r3, r3, 9
    253a:	c4434022 	lsl      	r2, r3, r2
    253e:	1b02      	addi      	r3, sp, 8
    2540:	9320      	ld.w      	r1, (r3, 0x0)
    2542:	3380      	movi      	r3, 128      	//0x80
    2544:	4371      	lsli      	r3, r3, 17
    2546:	70c4      	lsl      	r3, r1
    2548:	6cc8      	or      	r3, r2
    254a:	6c8f      	mov      	r2, r3
    254c:	1b01      	addi      	r3, sp, 4
    254e:	9360      	ld.w      	r3, (r3, 0x0)
    2550:	2317      	addi      	r3, 24      	//0x18
    2552:	6c0b      	mov      	r0, r2
    2554:	6c4f      	mov      	r1, r3
    2556:	e3fffe71 	bsr      	0x2238	//2238 <dw_write>
    255a:	c4004820 	lsli      	r0, r0, 0
}
    255e:	1403      	addi      	sp, sp, 12
    2560:	1490      	pop      	r15
	...

00002564 <dma_ch_susp_disable>:

/*
 * Disable special channel suspend request.
 * @ch: channel number, from 1 to DW_DMA_MAX_NR_CHANNELS
 **/
void dma_ch_susp_disable(struct dw_dma_common_reg *reg, Bit8u ch){
    2564:	14d1      	push      	r4, r15
    2566:	1425      	subi      	sp, sp, 20
    2568:	1b01      	addi      	r3, sp, 4
    256a:	b300      	st.w      	r0, (r3, 0x0)
    256c:	6c87      	mov      	r2, r1
    256e:	6cfb      	mov      	r3, sp
    2570:	a340      	st.b      	r2, (r3, 0x0)
	void* addr;
	Bit32u channel = ch - 1;
    2572:	6cfb      	mov      	r3, sp
    2574:	8360      	ld.b      	r3, (r3, 0x0)
    2576:	74cc      	zextb      	r3, r3
    2578:	5b43      	subi      	r2, r3, 1      	//0x1
    257a:	1b04      	addi      	r3, sp, 16
    257c:	b340      	st.w      	r2, (r3, 0x0)
	Bit32u value;
	addr =  (void *)&(reg->ChEn_LO);
    257e:	1b03      	addi      	r3, sp, 12
    2580:	1a01      	addi      	r2, sp, 4
    2582:	9240      	ld.w      	r2, (r2, 0x0)
    2584:	2217      	addi      	r2, 24      	//0x18
    2586:	b340      	st.w      	r2, (r3, 0x0)
	value =readl(addr);
    2588:	1c02      	addi      	r4, sp, 8
    258a:	1b03      	addi      	r3, sp, 12
    258c:	9300      	ld.w      	r0, (r3, 0x0)
    258e:	e3fffe3f 	bsr      	0x220c	//220c <readl>
    2592:	c4004820 	lsli      	r0, r0, 0
    2596:	b400      	st.w      	r0, (r4, 0x0)
	value |= (DMA_CH_SUSP_WE << channel);
    2598:	1b04      	addi      	r3, sp, 16
    259a:	9340      	ld.w      	r2, (r3, 0x0)
    259c:	3380      	movi      	r3, 128      	//0x80
    259e:	4371      	lsli      	r3, r3, 17
    25a0:	70c8      	lsl      	r3, r2
    25a2:	6c4f      	mov      	r1, r3
    25a4:	1b02      	addi      	r3, sp, 8
    25a6:	1a02      	addi      	r2, sp, 8
    25a8:	9240      	ld.w      	r2, (r2, 0x0)
    25aa:	6c84      	or      	r2, r1
    25ac:	b340      	st.w      	r2, (r3, 0x0)
	value &= ~(DMA_CH_SUSP << channel);
    25ae:	1b04      	addi      	r3, sp, 16
    25b0:	9340      	ld.w      	r2, (r3, 0x0)
    25b2:	3380      	movi      	r3, 128      	//0x80
    25b4:	4369      	lsli      	r3, r3, 9
    25b6:	70c8      	lsl      	r3, r2
    25b8:	6cce      	nor      	r3, r3
    25ba:	6c4f      	mov      	r1, r3
    25bc:	1b02      	addi      	r3, sp, 8
    25be:	1a02      	addi      	r2, sp, 8
    25c0:	9240      	ld.w      	r2, (r2, 0x0)
    25c2:	6884      	and      	r2, r1
    25c4:	b340      	st.w      	r2, (r3, 0x0)
	writel(value, addr);
    25c6:	1a02      	addi      	r2, sp, 8
    25c8:	1b03      	addi      	r3, sp, 12
    25ca:	9200      	ld.w      	r0, (r2, 0x0)
    25cc:	9320      	ld.w      	r1, (r3, 0x0)
    25ce:	e3fffe29 	bsr      	0x2220	//2220 <writel>
    25d2:	c4004820 	lsli      	r0, r0, 0
}
    25d6:	1405      	addi      	sp, sp, 20
    25d8:	1491      	pop      	r4, r15
	...

000025dc <dma_ch_abort_enable>:

/*
 * Enable special channel abort request.
 * @ch: channel number, from 1 to DW_DMA_MAX_NR_CHANNELS
 **/
void dma_ch_abort_enable(struct dw_dma_common_reg *reg, Bit8u ch){
    25dc:	14d0      	push      	r15
    25de:	1423      	subi      	sp, sp, 12
    25e0:	1b01      	addi      	r3, sp, 4
    25e2:	b300      	st.w      	r0, (r3, 0x0)
    25e4:	6c87      	mov      	r2, r1
    25e6:	6cfb      	mov      	r3, sp
    25e8:	a340      	st.b      	r2, (r3, 0x0)
	Bit32u channel = ch - 1;
    25ea:	6cfb      	mov      	r3, sp
    25ec:	8360      	ld.b      	r3, (r3, 0x0)
    25ee:	74cc      	zextb      	r3, r3
    25f0:	5b43      	subi      	r2, r3, 1      	//0x1
    25f2:	1b02      	addi      	r3, sp, 8
    25f4:	b340      	st.w      	r2, (r3, 0x0)
	reg_writel((DMA_CH_ABORT << channel)|(DMA_CH_ABORT_WE << channel), reg, ChEn_HI);
    25f6:	1b02      	addi      	r3, sp, 8
    25f8:	9360      	ld.w      	r3, (r3, 0x0)
    25fa:	3201      	movi      	r2, 1      	//0x1
    25fc:	708c      	lsl      	r2, r3
    25fe:	1b02      	addi      	r3, sp, 8
    2600:	9320      	ld.w      	r1, (r3, 0x0)
    2602:	3380      	movi      	r3, 128      	//0x80
    2604:	4361      	lsli      	r3, r3, 1
    2606:	70c4      	lsl      	r3, r1
    2608:	6cc8      	or      	r3, r2
    260a:	6c8f      	mov      	r2, r3
    260c:	1b01      	addi      	r3, sp, 4
    260e:	9360      	ld.w      	r3, (r3, 0x0)
    2610:	231b      	addi      	r3, 28      	//0x1c
    2612:	6c0b      	mov      	r0, r2
    2614:	6c4f      	mov      	r1, r3
    2616:	e3fffe11 	bsr      	0x2238	//2238 <dw_write>
    261a:	c4004820 	lsli      	r0, r0, 0
}
    261e:	1403      	addi      	sp, sp, 12
    2620:	1490      	pop      	r15
    2622:	0000      	.short	0x0000
    2624:	0000220c 	.long	0x0000220c
    2628:	00002220 	.long	0x00002220
    262c:	00002238 	.long	0x00002238

00002630 <dma_ch_abort_disable>:

/*
 * Disable special channel abort request.
 * @ch: channel number, from 1 to DW_DMA_MAX_NR_CHANNELS
 **/
void dma_ch_abort_disable(struct dw_dma_common_reg *reg, Bit8u ch){
    2630:	14d1      	push      	r4, r15
    2632:	1425      	subi      	sp, sp, 20
    2634:	1b01      	addi      	r3, sp, 4
    2636:	b300      	st.w      	r0, (r3, 0x0)
    2638:	6c87      	mov      	r2, r1
    263a:	6cfb      	mov      	r3, sp
    263c:	a340      	st.b      	r2, (r3, 0x0)
	void* addr;
	Bit32u channel = ch - 1;
    263e:	6cfb      	mov      	r3, sp
    2640:	8360      	ld.b      	r3, (r3, 0x0)
    2642:	74cc      	zextb      	r3, r3
    2644:	5b43      	subi      	r2, r3, 1      	//0x1
    2646:	1b04      	addi      	r3, sp, 16
    2648:	b340      	st.w      	r2, (r3, 0x0)
	Bit32u value;

	addr =  (void *)&(reg->ChEn_HI);
    264a:	1b03      	addi      	r3, sp, 12
    264c:	1a01      	addi      	r2, sp, 4
    264e:	9240      	ld.w      	r2, (r2, 0x0)
    2650:	221b      	addi      	r2, 28      	//0x1c
    2652:	b340      	st.w      	r2, (r3, 0x0)
	value =readl(addr);
    2654:	1c02      	addi      	r4, sp, 8
    2656:	1b03      	addi      	r3, sp, 12
    2658:	9300      	ld.w      	r0, (r3, 0x0)
    265a:	e3fffdd9 	bsr      	0x220c	//220c <readl>
    265e:	c4004820 	lsli      	r0, r0, 0
    2662:	b400      	st.w      	r0, (r4, 0x0)
	value |= (DMA_CH_ABORT_WE << channel);
    2664:	1b04      	addi      	r3, sp, 16
    2666:	9340      	ld.w      	r2, (r3, 0x0)
    2668:	3380      	movi      	r3, 128      	//0x80
    266a:	4361      	lsli      	r3, r3, 1
    266c:	70c8      	lsl      	r3, r2
    266e:	6c4f      	mov      	r1, r3
    2670:	1b02      	addi      	r3, sp, 8
    2672:	1a02      	addi      	r2, sp, 8
    2674:	9240      	ld.w      	r2, (r2, 0x0)
    2676:	6c84      	or      	r2, r1
    2678:	b340      	st.w      	r2, (r3, 0x0)
	value &= ~(DMA_CH_ABORT << channel);
    267a:	1b04      	addi      	r3, sp, 16
    267c:	9360      	ld.w      	r3, (r3, 0x0)
    267e:	3201      	movi      	r2, 1      	//0x1
    2680:	c4624023 	lsl      	r3, r2, r3
    2684:	6cce      	nor      	r3, r3
    2686:	6c4f      	mov      	r1, r3
    2688:	1b02      	addi      	r3, sp, 8
    268a:	1a02      	addi      	r2, sp, 8
    268c:	9240      	ld.w      	r2, (r2, 0x0)
    268e:	6884      	and      	r2, r1
    2690:	b340      	st.w      	r2, (r3, 0x0)
	writel(value, addr);
    2692:	1a02      	addi      	r2, sp, 8
    2694:	1b03      	addi      	r3, sp, 12
    2696:	9200      	ld.w      	r0, (r2, 0x0)
    2698:	9320      	ld.w      	r1, (r3, 0x0)
    269a:	e3fffdc3 	bsr      	0x2220	//2220 <writel>
    269e:	c4004820 	lsli      	r0, r0, 0
}
    26a2:	1405      	addi      	sp, sp, 20
    26a4:	1491      	pop      	r4, r15
	...

000026a8 <dma_int_status_read>:

/*
 * Read Channel Intterupt status.
 **/
Bit32u dma_int_status_read(struct dw_dma_common_reg *reg){
    26a8:	14d0      	push      	r15
    26aa:	1421      	subi      	sp, sp, 4
    26ac:	6cfb      	mov      	r3, sp
    26ae:	b300      	st.w      	r0, (r3, 0x0)
	return reg_readl(reg, IntStat);
    26b0:	6cfb      	mov      	r3, sp
    26b2:	9360      	ld.w      	r3, (r3, 0x0)
    26b4:	232f      	addi      	r3, 48      	//0x30
    26b6:	6c0f      	mov      	r0, r3
    26b8:	e3fffdaa 	bsr      	0x220c	//220c <readl>
    26bc:	c4004820 	lsli      	r0, r0, 0
    26c0:	6cc3      	mov      	r3, r0
}
    26c2:	6c0f      	mov      	r0, r3
    26c4:	1401      	addi      	sp, sp, 4
    26c6:	1490      	pop      	r15

000026c8 <dma_chx_int_status_read>:
 * Read special Channel Intterupt status.
 * @ch: channel number, from 1 to DW_DMA_MAX_NR_CHANNELS
 * return 0: no interrupt
 * return other value,  @channel has interrupt
 **/
Bit8u dma_chx_int_status_read(struct dw_dma_common_reg *reg, Bit8u ch){
    26c8:	14d0      	push      	r15
    26ca:	1423      	subi      	sp, sp, 12
    26cc:	1b01      	addi      	r3, sp, 4
    26ce:	b300      	st.w      	r0, (r3, 0x0)
    26d0:	6c87      	mov      	r2, r1
    26d2:	6cfb      	mov      	r3, sp
    26d4:	a340      	st.b      	r2, (r3, 0x0)
	Bit32u channel = ch - 1;
    26d6:	6cfb      	mov      	r3, sp
    26d8:	8360      	ld.b      	r3, (r3, 0x0)
    26da:	74cc      	zextb      	r3, r3
    26dc:	5b43      	subi      	r2, r3, 1      	//0x1
    26de:	1b02      	addi      	r3, sp, 8
    26e0:	b340      	st.w      	r2, (r3, 0x0)
	return reg_readl(reg, IntStat) & (DMA_CH1_INT_STAT << channel);
    26e2:	1b01      	addi      	r3, sp, 4
    26e4:	9360      	ld.w      	r3, (r3, 0x0)
    26e6:	232f      	addi      	r3, 48      	//0x30
    26e8:	6c0f      	mov      	r0, r3
    26ea:	e3fffd91 	bsr      	0x220c	//220c <readl>
    26ee:	c4004820 	lsli      	r0, r0, 0
    26f2:	6cc3      	mov      	r3, r0
    26f4:	748c      	zextb      	r2, r3
    26f6:	1b02      	addi      	r3, sp, 8
    26f8:	9360      	ld.w      	r3, (r3, 0x0)
    26fa:	3101      	movi      	r1, 1      	//0x1
    26fc:	c4614023 	lsl      	r3, r1, r3
    2700:	74cc      	zextb      	r3, r3
    2702:	68c8      	and      	r3, r2
    2704:	74cc      	zextb      	r3, r3
}
    2706:	6c0f      	mov      	r0, r3
    2708:	1403      	addi      	sp, sp, 12
    270a:	1490      	pop      	r15

0000270c <dma_com_int_status_clear>:

/*
 * Clear Common Register Interrupt status. 
 **/
void dma_com_int_status_clear(struct dw_dma_common_reg *reg, Bit32u val){
    270c:	14d0      	push      	r15
    270e:	1422      	subi      	sp, sp, 8
    2710:	1b01      	addi      	r3, sp, 4
    2712:	b300      	st.w      	r0, (r3, 0x0)
    2714:	6cfb      	mov      	r3, sp
    2716:	b320      	st.w      	r1, (r3, 0x0)
	//reg->ComIntClr=val;
	reg_direct_writel(val, reg, ComIntClr);
    2718:	1b01      	addi      	r3, sp, 4
    271a:	9360      	ld.w      	r3, (r3, 0x0)
    271c:	2337      	addi      	r3, 56      	//0x38
    271e:	6cbb      	mov      	r2, sp
    2720:	9200      	ld.w      	r0, (r2, 0x0)
    2722:	6c4f      	mov      	r1, r3
    2724:	e3fffd7e 	bsr      	0x2220	//2220 <writel>
    2728:	c4004820 	lsli      	r0, r0, 0
	//reg_writel(val, reg, ComIntClr);
}
    272c:	1402      	addi      	sp, sp, 8
    272e:	1490      	pop      	r15

00002730 <dma_com_int_status_enable>:

/*
 * Enable Common Register Interrupt Status. 
 **/
void dma_com_int_status_enable(struct dw_dma_common_reg *reg, Bit32u val){
    2730:	14d0      	push      	r15
    2732:	1422      	subi      	sp, sp, 8
    2734:	1b01      	addi      	r3, sp, 4
    2736:	b300      	st.w      	r0, (r3, 0x0)
    2738:	6cfb      	mov      	r3, sp
    273a:	b320      	st.w      	r1, (r3, 0x0)
	reg_writel(val, reg, ComIntStatEn);
    273c:	1b01      	addi      	r3, sp, 4
    273e:	9360      	ld.w      	r3, (r3, 0x0)
    2740:	233f      	addi      	r3, 64      	//0x40
    2742:	6cbb      	mov      	r2, sp
    2744:	9200      	ld.w      	r0, (r2, 0x0)
    2746:	6c4f      	mov      	r1, r3
    2748:	e3fffd78 	bsr      	0x2238	//2238 <dw_write>
    274c:	c4004820 	lsli      	r0, r0, 0
}
    2750:	1402      	addi      	sp, sp, 8
    2752:	1490      	pop      	r15

00002754 <dma_com_int_status_diaable>:

/*
 * Disable Common Register Interrupt Status. 
 **/
void dma_com_int_status_diaable(struct dw_dma_common_reg *reg, Bit32u val){
    2754:	14d0      	push      	r15
    2756:	1422      	subi      	sp, sp, 8
    2758:	1b01      	addi      	r3, sp, 4
    275a:	b300      	st.w      	r0, (r3, 0x0)
    275c:	6cfb      	mov      	r3, sp
    275e:	b320      	st.w      	r1, (r3, 0x0)
	reg_clearl(val, reg, ComIntStatEn);
    2760:	1b01      	addi      	r3, sp, 4
    2762:	9360      	ld.w      	r3, (r3, 0x0)
    2764:	233f      	addi      	r3, 64      	//0x40
    2766:	6cbb      	mov      	r2, sp
    2768:	9200      	ld.w      	r0, (r2, 0x0)
    276a:	6c4f      	mov      	r1, r3
    276c:	e3fffd86 	bsr      	0x2278	//2278 <dw_clear>
    2770:	c4004820 	lsli      	r0, r0, 0
}
    2774:	1402      	addi      	sp, sp, 8
    2776:	1490      	pop      	r15

00002778 <dma_com_int_signal_enable>:

/*
 * Enable Common Register Interrupt Signal. 
 **/
void dma_com_int_signal_enable(struct dw_dma_common_reg *reg, Bit32u val){
    2778:	14d0      	push      	r15
    277a:	1422      	subi      	sp, sp, 8
    277c:	1b01      	addi      	r3, sp, 4
    277e:	b300      	st.w      	r0, (r3, 0x0)
    2780:	6cfb      	mov      	r3, sp
    2782:	b320      	st.w      	r1, (r3, 0x0)
	reg_writel(val, reg, ComIntSigEn);
    2784:	1b01      	addi      	r3, sp, 4
    2786:	9360      	ld.w      	r3, (r3, 0x0)
    2788:	2347      	addi      	r3, 72      	//0x48
    278a:	6cbb      	mov      	r2, sp
    278c:	9200      	ld.w      	r0, (r2, 0x0)
    278e:	6c4f      	mov      	r1, r3
    2790:	e3fffd54 	bsr      	0x2238	//2238 <dw_write>
    2794:	c4004820 	lsli      	r0, r0, 0
}
    2798:	1402      	addi      	sp, sp, 8
    279a:	1490      	pop      	r15

0000279c <dma_com_int_signal_disable>:

/*
 * Disable Common Register Interrupt Signal. 
 **/
void dma_com_int_signal_disable(struct dw_dma_common_reg *reg, Bit32u val){
    279c:	14d0      	push      	r15
    279e:	1422      	subi      	sp, sp, 8
    27a0:	1b01      	addi      	r3, sp, 4
    27a2:	b300      	st.w      	r0, (r3, 0x0)
    27a4:	6cfb      	mov      	r3, sp
    27a6:	b320      	st.w      	r1, (r3, 0x0)
	reg_clearl(val, reg, ComIntSigEn);
    27a8:	1b01      	addi      	r3, sp, 4
    27aa:	9360      	ld.w      	r3, (r3, 0x0)
    27ac:	2347      	addi      	r3, 72      	//0x48
    27ae:	6cbb      	mov      	r2, sp
    27b0:	9200      	ld.w      	r0, (r2, 0x0)
    27b2:	6c4f      	mov      	r1, r3
    27b4:	e3fffd62 	bsr      	0x2278	//2278 <dw_clear>
    27b8:	c4004820 	lsli      	r0, r0, 0
}
    27bc:	1402      	addi      	sp, sp, 8
    27be:	1490      	pop      	r15

000027c0 <dma_com_int_status_read>:

/*
 * Read common register Interrupt status.
 **/
Bit32u dma_com_int_status_read(struct dw_dma_common_reg *reg){
    27c0:	14d0      	push      	r15
    27c2:	1421      	subi      	sp, sp, 4
    27c4:	6cfb      	mov      	r3, sp
    27c6:	b300      	st.w      	r0, (r3, 0x0)
	return reg_readl(reg, ComIntStat);
    27c8:	6cfb      	mov      	r3, sp
    27ca:	9360      	ld.w      	r3, (r3, 0x0)
    27cc:	234f      	addi      	r3, 80      	//0x50
    27ce:	6c0f      	mov      	r0, r3
    27d0:	e3fffd1e 	bsr      	0x220c	//220c <readl>
    27d4:	c4004820 	lsli      	r0, r0, 0
    27d8:	6cc3      	mov      	r3, r0
}
    27da:	6c0f      	mov      	r0, r3
    27dc:	1401      	addi      	sp, sp, 4
    27de:	1490      	pop      	r15
    27e0:	0000220c 	.long	0x0000220c
    27e4:	00002220 	.long	0x00002220
    27e8:	00002238 	.long	0x00002238
    27ec:	00002278 	.long	0x00002278

000027f0 <dma_reset>:

/*
 * Reset dma.
 **/
void dma_reset(struct dw_dma_common_reg *reg){
    27f0:	14d0      	push      	r15
    27f2:	1421      	subi      	sp, sp, 4
    27f4:	6cfb      	mov      	r3, sp
    27f6:	b300      	st.w      	r0, (r3, 0x0)
	reg_writel(1, reg, Reset);
    27f8:	6cfb      	mov      	r3, sp
    27fa:	9360      	ld.w      	r3, (r3, 0x0)
    27fc:	2357      	addi      	r3, 88      	//0x58
    27fe:	3001      	movi      	r0, 1      	//0x1
    2800:	6c4f      	mov      	r1, r3
    2802:	e3fffd1b 	bsr      	0x2238	//2238 <dw_write>
    2806:	c4004820 	lsli      	r0, r0, 0
}
    280a:	1401      	addi      	sp, sp, 4
    280c:	1490      	pop      	r15
	...

00002810 <dma_reset_read>:

/*
 * Read Reset dma.
 **/
Bit32u dma_reset_read(struct dw_dma_common_reg *reg){
    2810:	14d0      	push      	r15
    2812:	1421      	subi      	sp, sp, 4
    2814:	6cfb      	mov      	r3, sp
    2816:	b300      	st.w      	r0, (r3, 0x0)
	return reg_readl(reg, Reset);
    2818:	6cfb      	mov      	r3, sp
    281a:	9360      	ld.w      	r3, (r3, 0x0)
    281c:	2357      	addi      	r3, 88      	//0x58
    281e:	6c0f      	mov      	r0, r3
    2820:	e3fffcf6 	bsr      	0x220c	//220c <readl>
    2824:	c4004820 	lsli      	r0, r0, 0
    2828:	6cc3      	mov      	r3, r0
}
    282a:	6c0f      	mov      	r0, r3
    282c:	1401      	addi      	sp, sp, 4
    282e:	1490      	pop      	r15

00002830 <dma_chx_sar_read>:

/*
 * Read Source Address for Channelx.
 **/
Bit32u dma_chx_sar_read(struct dw_dma_chan_reg *reg){
    2830:	14d0      	push      	r15
    2832:	1421      	subi      	sp, sp, 4
    2834:	6cfb      	mov      	r3, sp
    2836:	b300      	st.w      	r0, (r3, 0x0)
	return reg_readl(reg, SAR);
    2838:	6cfb      	mov      	r3, sp
    283a:	9360      	ld.w      	r3, (r3, 0x0)
    283c:	6c0f      	mov      	r0, r3
    283e:	e3fffce7 	bsr      	0x220c	//220c <readl>
    2842:	c4004820 	lsli      	r0, r0, 0
    2846:	6cc3      	mov      	r3, r0
}
    2848:	6c0f      	mov      	r0, r3
    284a:	1401      	addi      	sp, sp, 4
    284c:	1490      	pop      	r15
	...

00002850 <dma_chx_sar_write>:

/*
 * Write Source Address for Channelx.
 **/
void dma_chx_sar_write(struct dw_dma_chan_reg *reg, Bit32u val){
    2850:	14d0      	push      	r15
    2852:	1422      	subi      	sp, sp, 8
    2854:	1b01      	addi      	r3, sp, 4
    2856:	b300      	st.w      	r0, (r3, 0x0)
    2858:	6cfb      	mov      	r3, sp
    285a:	b320      	st.w      	r1, (r3, 0x0)
	reg_direct_writel(val, reg, SAR);
    285c:	1b01      	addi      	r3, sp, 4
    285e:	9360      	ld.w      	r3, (r3, 0x0)
    2860:	6cbb      	mov      	r2, sp
    2862:	9200      	ld.w      	r0, (r2, 0x0)
    2864:	6c4f      	mov      	r1, r3
    2866:	e3fffcdd 	bsr      	0x2220	//2220 <writel>
    286a:	c4004820 	lsli      	r0, r0, 0
}
    286e:	1402      	addi      	sp, sp, 8
    2870:	1490      	pop      	r15
	...

00002874 <dma_chx_dar_read>:

/*
 * Read Distination Address for Channelx.
 **/
Bit32u dma_chx_dar_read(struct dw_dma_chan_reg *reg){
    2874:	14d0      	push      	r15
    2876:	1421      	subi      	sp, sp, 4
    2878:	6cfb      	mov      	r3, sp
    287a:	b300      	st.w      	r0, (r3, 0x0)
	return reg_readl(reg, DAR);
    287c:	6cfb      	mov      	r3, sp
    287e:	9360      	ld.w      	r3, (r3, 0x0)
    2880:	2307      	addi      	r3, 8      	//0x8
    2882:	6c0f      	mov      	r0, r3
    2884:	e3fffcc4 	bsr      	0x220c	//220c <readl>
    2888:	c4004820 	lsli      	r0, r0, 0
    288c:	6cc3      	mov      	r3, r0
}
    288e:	6c0f      	mov      	r0, r3
    2890:	1401      	addi      	sp, sp, 4
    2892:	1490      	pop      	r15

00002894 <dma_chx_dar_write>:

/*
 * Write Distination Address for Channelx.
 **/
void dma_chx_dar_write(struct dw_dma_chan_reg *reg, Bit32u val){
    2894:	14d0      	push      	r15
    2896:	1422      	subi      	sp, sp, 8
    2898:	1b01      	addi      	r3, sp, 4
    289a:	b300      	st.w      	r0, (r3, 0x0)
    289c:	6cfb      	mov      	r3, sp
    289e:	b320      	st.w      	r1, (r3, 0x0)
	reg_direct_writel(val, reg, DAR);
    28a0:	1b01      	addi      	r3, sp, 4
    28a2:	9360      	ld.w      	r3, (r3, 0x0)
    28a4:	2307      	addi      	r3, 8      	//0x8
    28a6:	6cbb      	mov      	r2, sp
    28a8:	9200      	ld.w      	r0, (r2, 0x0)
    28aa:	6c4f      	mov      	r1, r3
    28ac:	e3fffcba 	bsr      	0x2220	//2220 <writel>
    28b0:	c4004820 	lsli      	r0, r0, 0
}
    28b4:	1402      	addi      	sp, sp, 8
    28b6:	1490      	pop      	r15

000028b8 <dma_chx_block_ts_read>:

/*
 * Read Block Transfer Size Register for Channelx.
 **/
Bit32u dma_chx_block_ts_read(struct dw_dma_chan_reg *reg){
    28b8:	14d0      	push      	r15
    28ba:	1421      	subi      	sp, sp, 4
    28bc:	6cfb      	mov      	r3, sp
    28be:	b300      	st.w      	r0, (r3, 0x0)
	return reg_readl(reg, BLOCK_TS);
    28c0:	6cfb      	mov      	r3, sp
    28c2:	9360      	ld.w      	r3, (r3, 0x0)
    28c4:	230f      	addi      	r3, 16      	//0x10
    28c6:	6c0f      	mov      	r0, r3
    28c8:	e3fffca2 	bsr      	0x220c	//220c <readl>
    28cc:	c4004820 	lsli      	r0, r0, 0
    28d0:	6cc3      	mov      	r3, r0
}
    28d2:	6c0f      	mov      	r0, r3
    28d4:	1401      	addi      	sp, sp, 4
    28d6:	1490      	pop      	r15

000028d8 <dma_chx_block_ts_write>:

/*
 * Write Block Transfer Size Register for Channelx.
 **/
void dma_chx_block_ts_write(struct dw_dma_chan_reg *reg, Bit32u val){
    28d8:	14d0      	push      	r15
    28da:	1422      	subi      	sp, sp, 8
    28dc:	1b01      	addi      	r3, sp, 4
    28de:	b300      	st.w      	r0, (r3, 0x0)
    28e0:	6cfb      	mov      	r3, sp
    28e2:	b320      	st.w      	r1, (r3, 0x0)
	reg_direct_writel(val, reg, BLOCK_TS);
    28e4:	1b01      	addi      	r3, sp, 4
    28e6:	9360      	ld.w      	r3, (r3, 0x0)
    28e8:	230f      	addi      	r3, 16      	//0x10
    28ea:	6cbb      	mov      	r2, sp
    28ec:	9200      	ld.w      	r0, (r2, 0x0)
    28ee:	6c4f      	mov      	r1, r3
    28f0:	e3fffc98 	bsr      	0x2220	//2220 <writel>
    28f4:	c4004820 	lsli      	r0, r0, 0
}
    28f8:	1402      	addi      	sp, sp, 8
    28fa:	1490      	pop      	r15

000028fc <dma_chx_ctl_lo_read>:

/*
 * Read Control Register Low for Channelx.
 **/
Bit32u dma_chx_ctl_lo_read(struct dw_dma_chan_reg *reg){
    28fc:	14d0      	push      	r15
    28fe:	1421      	subi      	sp, sp, 4
    2900:	6cfb      	mov      	r3, sp
    2902:	b300      	st.w      	r0, (r3, 0x0)
	return reg_readl(reg, CTL_LO);
    2904:	6cfb      	mov      	r3, sp
    2906:	9360      	ld.w      	r3, (r3, 0x0)
    2908:	2317      	addi      	r3, 24      	//0x18
    290a:	6c0f      	mov      	r0, r3
    290c:	e3fffc80 	bsr      	0x220c	//220c <readl>
    2910:	c4004820 	lsli      	r0, r0, 0
    2914:	6cc3      	mov      	r3, r0
}
    2916:	6c0f      	mov      	r0, r3
    2918:	1401      	addi      	sp, sp, 4
    291a:	1490      	pop      	r15

0000291c <dma_chx_ctl_lo_write>:

/*
 * Write Control Register Low for Channelx.
 **/
void dma_chx_ctl_lo_write(struct dw_dma_chan_reg *reg, Bit32u val){
    291c:	14d0      	push      	r15
    291e:	1422      	subi      	sp, sp, 8
    2920:	1b01      	addi      	r3, sp, 4
    2922:	b300      	st.w      	r0, (r3, 0x0)
    2924:	6cfb      	mov      	r3, sp
    2926:	b320      	st.w      	r1, (r3, 0x0)
	reg_writel(val, reg, CTL_LO);
    2928:	1b01      	addi      	r3, sp, 4
    292a:	9360      	ld.w      	r3, (r3, 0x0)
    292c:	2317      	addi      	r3, 24      	//0x18
    292e:	6cbb      	mov      	r2, sp
    2930:	9200      	ld.w      	r0, (r2, 0x0)
    2932:	6c4f      	mov      	r1, r3
    2934:	e3fffc82 	bsr      	0x2238	//2238 <dw_write>
    2938:	c4004820 	lsli      	r0, r0, 0
}
    293c:	1402      	addi      	sp, sp, 8
    293e:	1490      	pop      	r15

00002940 <dma_chx_ctl_lo_direct_write>:

/*
 *  Direct Write Control Register Low for Channelx.
 **/
void dma_chx_ctl_lo_direct_write(struct dw_dma_chan_reg *reg, Bit32u val){
    2940:	14d0      	push      	r15
    2942:	1422      	subi      	sp, sp, 8
    2944:	1b01      	addi      	r3, sp, 4
    2946:	b300      	st.w      	r0, (r3, 0x0)
    2948:	6cfb      	mov      	r3, sp
    294a:	b320      	st.w      	r1, (r3, 0x0)
	reg_direct_writel(val, reg, CTL_LO);
    294c:	1b01      	addi      	r3, sp, 4
    294e:	9360      	ld.w      	r3, (r3, 0x0)
    2950:	2317      	addi      	r3, 24      	//0x18
    2952:	6cbb      	mov      	r2, sp
    2954:	9200      	ld.w      	r0, (r2, 0x0)
    2956:	6c4f      	mov      	r1, r3
    2958:	e3fffc64 	bsr      	0x2220	//2220 <writel>
    295c:	c4004820 	lsli      	r0, r0, 0
}
    2960:	1402      	addi      	sp, sp, 8
    2962:	1490      	pop      	r15

00002964 <dma_chx_ctl_hi_read>:

/*
 * Read Control Register High for Channelx.
 **/
Bit32u dma_chx_ctl_hi_read(struct dw_dma_chan_reg *reg){
    2964:	14d0      	push      	r15
    2966:	1421      	subi      	sp, sp, 4
    2968:	6cfb      	mov      	r3, sp
    296a:	b300      	st.w      	r0, (r3, 0x0)
	return reg_readl(reg, CTL_HI);
    296c:	6cfb      	mov      	r3, sp
    296e:	9360      	ld.w      	r3, (r3, 0x0)
    2970:	231b      	addi      	r3, 28      	//0x1c
    2972:	6c0f      	mov      	r0, r3
    2974:	e3fffc4c 	bsr      	0x220c	//220c <readl>
    2978:	c4004820 	lsli      	r0, r0, 0
    297c:	6cc3      	mov      	r3, r0
}
    297e:	6c0f      	mov      	r0, r3
    2980:	1401      	addi      	sp, sp, 4
    2982:	1490      	pop      	r15
    2984:	00002238 	.long	0x00002238
    2988:	0000220c 	.long	0x0000220c
    298c:	00002220 	.long	0x00002220

00002990 <dma_chx_ctl_hi_write>:

/*
 * Write Control Register High for Channelx.
 **/
void dma_chx_ctl_hi_write(struct dw_dma_chan_reg *reg, Bit32u val){
    2990:	14d0      	push      	r15
    2992:	1422      	subi      	sp, sp, 8
    2994:	1b01      	addi      	r3, sp, 4
    2996:	b300      	st.w      	r0, (r3, 0x0)
    2998:	6cfb      	mov      	r3, sp
    299a:	b320      	st.w      	r1, (r3, 0x0)
	reg_writel(val, reg, CTL_HI);
    299c:	1b01      	addi      	r3, sp, 4
    299e:	9360      	ld.w      	r3, (r3, 0x0)
    29a0:	231b      	addi      	r3, 28      	//0x1c
    29a2:	6cbb      	mov      	r2, sp
    29a4:	9200      	ld.w      	r0, (r2, 0x0)
    29a6:	6c4f      	mov      	r1, r3
    29a8:	e3fffc48 	bsr      	0x2238	//2238 <dw_write>
    29ac:	c4004820 	lsli      	r0, r0, 0
}
    29b0:	1402      	addi      	sp, sp, 8
    29b2:	1490      	pop      	r15

000029b4 <dma_chx_ctl_hi_direct_write>:

/*
 * Direct Write Control Register High for Channelx.
 **/
void dma_chx_ctl_hi_direct_write(struct dw_dma_chan_reg *reg, Bit32u val){
    29b4:	14d0      	push      	r15
    29b6:	1422      	subi      	sp, sp, 8
    29b8:	1b01      	addi      	r3, sp, 4
    29ba:	b300      	st.w      	r0, (r3, 0x0)
    29bc:	6cfb      	mov      	r3, sp
    29be:	b320      	st.w      	r1, (r3, 0x0)
	reg_direct_writel(val, reg, CTL_HI);
    29c0:	1b01      	addi      	r3, sp, 4
    29c2:	9360      	ld.w      	r3, (r3, 0x0)
    29c4:	231b      	addi      	r3, 28      	//0x1c
    29c6:	6cbb      	mov      	r2, sp
    29c8:	9200      	ld.w      	r0, (r2, 0x0)
    29ca:	6c4f      	mov      	r1, r3
    29cc:	e3fffc2a 	bsr      	0x2220	//2220 <writel>
    29d0:	c4004820 	lsli      	r0, r0, 0
}
    29d4:	1402      	addi      	sp, sp, 8
    29d6:	1490      	pop      	r15

000029d8 <dma_chx_cfg_lo_read>:

/*
 * Read Config Register Low for Channelx.
 **/
Bit32u dma_chx_cfg_lo_read(struct dw_dma_chan_reg *reg){
    29d8:	14d0      	push      	r15
    29da:	1421      	subi      	sp, sp, 4
    29dc:	6cfb      	mov      	r3, sp
    29de:	b300      	st.w      	r0, (r3, 0x0)
	return reg_readl(reg, CFG_LO);
    29e0:	6cfb      	mov      	r3, sp
    29e2:	9360      	ld.w      	r3, (r3, 0x0)
    29e4:	231f      	addi      	r3, 32      	//0x20
    29e6:	6c0f      	mov      	r0, r3
    29e8:	e3fffc12 	bsr      	0x220c	//220c <readl>
    29ec:	c4004820 	lsli      	r0, r0, 0
    29f0:	6cc3      	mov      	r3, r0
}
    29f2:	6c0f      	mov      	r0, r3
    29f4:	1401      	addi      	sp, sp, 4
    29f6:	1490      	pop      	r15

000029f8 <dma_chx_cfg_lo_write>:

/*
 * Write Config Register Low for Channelx.
 **/
void dma_chx_cfg_lo_write(struct dw_dma_chan_reg *reg, Bit32u val){
    29f8:	14d0      	push      	r15
    29fa:	1422      	subi      	sp, sp, 8
    29fc:	1b01      	addi      	r3, sp, 4
    29fe:	b300      	st.w      	r0, (r3, 0x0)
    2a00:	6cfb      	mov      	r3, sp
    2a02:	b320      	st.w      	r1, (r3, 0x0)
	reg_writel(val, reg, CFG_LO);
    2a04:	1b01      	addi      	r3, sp, 4
    2a06:	9360      	ld.w      	r3, (r3, 0x0)
    2a08:	231f      	addi      	r3, 32      	//0x20
    2a0a:	6cbb      	mov      	r2, sp
    2a0c:	9200      	ld.w      	r0, (r2, 0x0)
    2a0e:	6c4f      	mov      	r1, r3
    2a10:	e3fffc14 	bsr      	0x2238	//2238 <dw_write>
    2a14:	c4004820 	lsli      	r0, r0, 0
}
    2a18:	1402      	addi      	sp, sp, 8
    2a1a:	1490      	pop      	r15

00002a1c <dma_chx_cfg_lo_direct_write>:

/*
 * Direct Write Config Register Low for Channelx.
 **/
void dma_chx_cfg_lo_direct_write(struct dw_dma_chan_reg *reg, Bit32u val){
    2a1c:	14d0      	push      	r15
    2a1e:	1422      	subi      	sp, sp, 8
    2a20:	1b01      	addi      	r3, sp, 4
    2a22:	b300      	st.w      	r0, (r3, 0x0)
    2a24:	6cfb      	mov      	r3, sp
    2a26:	b320      	st.w      	r1, (r3, 0x0)
	reg_direct_writel(val, reg, CFG_LO);
    2a28:	1b01      	addi      	r3, sp, 4
    2a2a:	9360      	ld.w      	r3, (r3, 0x0)
    2a2c:	231f      	addi      	r3, 32      	//0x20
    2a2e:	6cbb      	mov      	r2, sp
    2a30:	9200      	ld.w      	r0, (r2, 0x0)
    2a32:	6c4f      	mov      	r1, r3
    2a34:	e3fffbf6 	bsr      	0x2220	//2220 <writel>
    2a38:	c4004820 	lsli      	r0, r0, 0
}
    2a3c:	1402      	addi      	sp, sp, 8
    2a3e:	1490      	pop      	r15

00002a40 <dma_chx_cfg_hi_read>:

/*
 * Read Config Register High for Channelx.
 **/
Bit32u dma_chx_cfg_hi_read(struct dw_dma_chan_reg *reg){
    2a40:	14d0      	push      	r15
    2a42:	1421      	subi      	sp, sp, 4
    2a44:	6cfb      	mov      	r3, sp
    2a46:	b300      	st.w      	r0, (r3, 0x0)
	return reg_readl(reg, CFG_HI);
    2a48:	6cfb      	mov      	r3, sp
    2a4a:	9360      	ld.w      	r3, (r3, 0x0)
    2a4c:	2323      	addi      	r3, 36      	//0x24
    2a4e:	6c0f      	mov      	r0, r3
    2a50:	e3fffbde 	bsr      	0x220c	//220c <readl>
    2a54:	c4004820 	lsli      	r0, r0, 0
    2a58:	6cc3      	mov      	r3, r0
}
    2a5a:	6c0f      	mov      	r0, r3
    2a5c:	1401      	addi      	sp, sp, 4
    2a5e:	1490      	pop      	r15

00002a60 <dma_chx_cfg_hi_write>:

/*
 * Write Config Register High for Channelx.
 **/
void dma_chx_cfg_hi_write(struct dw_dma_chan_reg *reg, Bit32u val){
    2a60:	14d0      	push      	r15
    2a62:	1422      	subi      	sp, sp, 8
    2a64:	1b01      	addi      	r3, sp, 4
    2a66:	b300      	st.w      	r0, (r3, 0x0)
    2a68:	6cfb      	mov      	r3, sp
    2a6a:	b320      	st.w      	r1, (r3, 0x0)
	reg_writel(val, reg, CFG_HI);
    2a6c:	1b01      	addi      	r3, sp, 4
    2a6e:	9360      	ld.w      	r3, (r3, 0x0)
    2a70:	2323      	addi      	r3, 36      	//0x24
    2a72:	6cbb      	mov      	r2, sp
    2a74:	9200      	ld.w      	r0, (r2, 0x0)
    2a76:	6c4f      	mov      	r1, r3
    2a78:	e3fffbe0 	bsr      	0x2238	//2238 <dw_write>
    2a7c:	c4004820 	lsli      	r0, r0, 0
}
    2a80:	1402      	addi      	sp, sp, 8
    2a82:	1490      	pop      	r15

00002a84 <dma_chx_cfg_hi_direct_write>:

/*
 * direct Write Config Register High for Channelx.
 **/
void dma_chx_cfg_hi_direct_write(struct dw_dma_chan_reg *reg, Bit32u val){
    2a84:	14d0      	push      	r15
    2a86:	1422      	subi      	sp, sp, 8
    2a88:	1b01      	addi      	r3, sp, 4
    2a8a:	b300      	st.w      	r0, (r3, 0x0)
    2a8c:	6cfb      	mov      	r3, sp
    2a8e:	b320      	st.w      	r1, (r3, 0x0)
	reg_direct_writel(val, reg, CFG_HI);
    2a90:	1b01      	addi      	r3, sp, 4
    2a92:	9360      	ld.w      	r3, (r3, 0x0)
    2a94:	2323      	addi      	r3, 36      	//0x24
    2a96:	6cbb      	mov      	r2, sp
    2a98:	9200      	ld.w      	r0, (r2, 0x0)
    2a9a:	6c4f      	mov      	r1, r3
    2a9c:	e3fffbc2 	bsr      	0x2220	//2220 <writel>
    2aa0:	c4004820 	lsli      	r0, r0, 0
}
    2aa4:	1402      	addi      	sp, sp, 8
    2aa6:	1490      	pop      	r15

00002aa8 <dma_chx_llp_read>:

/*
 * Read LLP register.
 **/
Bit32u dma_chx_llp_read(struct dw_dma_chan_reg *reg){
    2aa8:	14d0      	push      	r15
    2aaa:	1421      	subi      	sp, sp, 4
    2aac:	6cfb      	mov      	r3, sp
    2aae:	b300      	st.w      	r0, (r3, 0x0)
	return reg_readl(reg, LLP);
    2ab0:	6cfb      	mov      	r3, sp
    2ab2:	9360      	ld.w      	r3, (r3, 0x0)
    2ab4:	2327      	addi      	r3, 40      	//0x28
    2ab6:	6c0f      	mov      	r0, r3
    2ab8:	e3fffbaa 	bsr      	0x220c	//220c <readl>
    2abc:	c4004820 	lsli      	r0, r0, 0
    2ac0:	6cc3      	mov      	r3, r0
}
    2ac2:	6c0f      	mov      	r0, r3
    2ac4:	1401      	addi      	sp, sp, 4
    2ac6:	1490      	pop      	r15

00002ac8 <dma_chx_llp_write>:

/*
 * Write LLP register.
 **/
void dma_chx_llp_write(struct dw_dma_chan_reg *reg, Bit32u val){
    2ac8:	14d0      	push      	r15
    2aca:	1422      	subi      	sp, sp, 8
    2acc:	1b01      	addi      	r3, sp, 4
    2ace:	b300      	st.w      	r0, (r3, 0x0)
    2ad0:	6cfb      	mov      	r3, sp
    2ad2:	b320      	st.w      	r1, (r3, 0x0)
	reg_writel(val, reg, LLP);
    2ad4:	1b01      	addi      	r3, sp, 4
    2ad6:	9360      	ld.w      	r3, (r3, 0x0)
    2ad8:	2327      	addi      	r3, 40      	//0x28
    2ada:	6cbb      	mov      	r2, sp
    2adc:	9200      	ld.w      	r0, (r2, 0x0)
    2ade:	6c4f      	mov      	r1, r3
    2ae0:	e3fffbac 	bsr      	0x2238	//2238 <dw_write>
    2ae4:	c4004820 	lsli      	r0, r0, 0
}
    2ae8:	1402      	addi      	sp, sp, 8
    2aea:	1490      	pop      	r15

00002aec <dma_chx_compled_blk_transfer_size_read>:
/*
 * Read completed Block Transfer size.
 * Return val: no any errors, the value will be equal to BLOCK_TS 
 * of BLOCK_TS register.
 **/
Bit32u dma_chx_compled_blk_transfer_size_read(struct dw_dma_chan_reg *reg){
    2aec:	14d0      	push      	r15
    2aee:	1421      	subi      	sp, sp, 4
    2af0:	6cfb      	mov      	r3, sp
    2af2:	b300      	st.w      	r0, (r3, 0x0)
	return reg_readl(reg, STATUSREG_LO);
    2af4:	6cfb      	mov      	r3, sp
    2af6:	9360      	ld.w      	r3, (r3, 0x0)
    2af8:	232f      	addi      	r3, 48      	//0x30
    2afa:	6c0f      	mov      	r0, r3
    2afc:	e3fffb88 	bsr      	0x220c	//220c <readl>
    2b00:	c4004820 	lsli      	r0, r0, 0
    2b04:	6cc3      	mov      	r3, r0
}
    2b06:	6c0f      	mov      	r0, r3
    2b08:	1401      	addi      	sp, sp, 4
    2b0a:	1490      	pop      	r15

00002b0c <dma_chx_data_left_in_fifo_read>:
/*
 * Read Date Left in FIFO.
 * Return val: no any errors, this value should be 0.
 * of BLOCK_TS register.
 **/
Bit32u dma_chx_data_left_in_fifo_read(struct dw_dma_chan_reg *reg){
    2b0c:	14d0      	push      	r15
    2b0e:	1421      	subi      	sp, sp, 4
    2b10:	6cfb      	mov      	r3, sp
    2b12:	b300      	st.w      	r0, (r3, 0x0)
	return reg_readl(reg, STATUSREG_HI);
    2b14:	6cfb      	mov      	r3, sp
    2b16:	9360      	ld.w      	r3, (r3, 0x0)
    2b18:	2333      	addi      	r3, 52      	//0x34
    2b1a:	6c0f      	mov      	r0, r3
    2b1c:	e3fffb78 	bsr      	0x220c	//220c <readl>
    2b20:	c4004820 	lsli      	r0, r0, 0
    2b24:	6cc3      	mov      	r3, r0
}
    2b26:	6c0f      	mov      	r0, r3
    2b28:	1401      	addi      	sp, sp, 4
    2b2a:	1490      	pop      	r15
    2b2c:	00002238 	.long	0x00002238
    2b30:	00002220 	.long	0x00002220
    2b34:	0000220c 	.long	0x0000220c

00002b38 <dma_chx_swhs_read>:

/*
 * Read Software Handshake Source Register
 **/
Bit32u dma_chx_swhs_read(struct dw_dma_chan_reg *reg){
    2b38:	14d0      	push      	r15
    2b3a:	1421      	subi      	sp, sp, 4
    2b3c:	6cfb      	mov      	r3, sp
    2b3e:	b300      	st.w      	r0, (r3, 0x0)
	return reg_readl(reg, SWHSSRCREG);
    2b40:	6cfb      	mov      	r3, sp
    2b42:	9360      	ld.w      	r3, (r3, 0x0)
    2b44:	2337      	addi      	r3, 56      	//0x38
    2b46:	6c0f      	mov      	r0, r3
    2b48:	e3fffb62 	bsr      	0x220c	//220c <readl>
    2b4c:	c4004820 	lsli      	r0, r0, 0
    2b50:	6cc3      	mov      	r3, r0
}
    2b52:	6c0f      	mov      	r0, r3
    2b54:	1401      	addi      	sp, sp, 4
    2b56:	1490      	pop      	r15

00002b58 <dma_chx_swhs_write>:

/*
 * Write Software Handshake Source Register
 **/
void dma_chx_swhs_write(struct dw_dma_chan_reg *reg, Bit32u val){
    2b58:	14d0      	push      	r15
    2b5a:	1422      	subi      	sp, sp, 8
    2b5c:	1b01      	addi      	r3, sp, 4
    2b5e:	b300      	st.w      	r0, (r3, 0x0)
    2b60:	6cfb      	mov      	r3, sp
    2b62:	b320      	st.w      	r1, (r3, 0x0)
	reg_writel(val, reg, SWHSSRCREG);
    2b64:	1b01      	addi      	r3, sp, 4
    2b66:	9360      	ld.w      	r3, (r3, 0x0)
    2b68:	2337      	addi      	r3, 56      	//0x38
    2b6a:	6cbb      	mov      	r2, sp
    2b6c:	9200      	ld.w      	r0, (r2, 0x0)
    2b6e:	6c4f      	mov      	r1, r3
    2b70:	e3fffb64 	bsr      	0x2238	//2238 <dw_write>
    2b74:	c4004820 	lsli      	r0, r0, 0
}
    2b78:	1402      	addi      	sp, sp, 8
    2b7a:	1490      	pop      	r15

00002b7c <dma_chx_swhd_read>:

/*
 * Read Software Handshake Destination Register
 **/
Bit32u dma_chx_swhd_read(struct dw_dma_chan_reg *reg){
    2b7c:	14d0      	push      	r15
    2b7e:	1421      	subi      	sp, sp, 4
    2b80:	6cfb      	mov      	r3, sp
    2b82:	b300      	st.w      	r0, (r3, 0x0)
	return reg_readl(reg, SWHSDSTREG);
    2b84:	6cfb      	mov      	r3, sp
    2b86:	9360      	ld.w      	r3, (r3, 0x0)
    2b88:	233f      	addi      	r3, 64      	//0x40
    2b8a:	6c0f      	mov      	r0, r3
    2b8c:	e3fffb40 	bsr      	0x220c	//220c <readl>
    2b90:	c4004820 	lsli      	r0, r0, 0
    2b94:	6cc3      	mov      	r3, r0
}
    2b96:	6c0f      	mov      	r0, r3
    2b98:	1401      	addi      	sp, sp, 4
    2b9a:	1490      	pop      	r15

00002b9c <dma_chx_swhd_write>:

/*
 * Write Software Handshake Destination Register
 **/
void dma_chx_swhd_write(struct dw_dma_chan_reg *reg, Bit32u val){
    2b9c:	14d0      	push      	r15
    2b9e:	1422      	subi      	sp, sp, 8
    2ba0:	1b01      	addi      	r3, sp, 4
    2ba2:	b300      	st.w      	r0, (r3, 0x0)
    2ba4:	6cfb      	mov      	r3, sp
    2ba6:	b320      	st.w      	r1, (r3, 0x0)
	reg_writel(val, reg, SWHSDSTREG);
    2ba8:	1b01      	addi      	r3, sp, 4
    2baa:	9360      	ld.w      	r3, (r3, 0x0)
    2bac:	233f      	addi      	r3, 64      	//0x40
    2bae:	6cbb      	mov      	r2, sp
    2bb0:	9200      	ld.w      	r0, (r2, 0x0)
    2bb2:	6c4f      	mov      	r1, r3
    2bb4:	e3fffb42 	bsr      	0x2238	//2238 <dw_write>
    2bb8:	c4004820 	lsli      	r0, r0, 0
}
    2bbc:	1402      	addi      	sp, sp, 8
    2bbe:	1490      	pop      	r15

00002bc0 <dma_blk_tfr_resume_req>:
/*
 * Block Tranfer Reseum Request Tranfer.
 * This used for ShadowReg_Or_LLI_Invalid_ERR is generate, and
 * we want to resume transfer is as follows:
 **/
void dma_blk_tfr_resume_req(struct dw_dma_chan_reg *reg){
    2bc0:	14d0      	push      	r15
    2bc2:	1421      	subi      	sp, sp, 4
    2bc4:	6cfb      	mov      	r3, sp
    2bc6:	b300      	st.w      	r0, (r3, 0x0)
	reg_writel(1, reg, BLK_TFR_RESUME_REQ);
    2bc8:	6cfb      	mov      	r3, sp
    2bca:	9360      	ld.w      	r3, (r3, 0x0)
    2bcc:	2347      	addi      	r3, 72      	//0x48
    2bce:	3001      	movi      	r0, 1      	//0x1
    2bd0:	6c4f      	mov      	r1, r3
    2bd2:	e3fffb33 	bsr      	0x2238	//2238 <dw_write>
    2bd6:	c4004820 	lsli      	r0, r0, 0
}
    2bda:	1401      	addi      	sp, sp, 4
    2bdc:	1490      	pop      	r15
	...

00002be0 <dma_chx_axi_id_read>:

/*
 * Read AXI ID(ReadID/WriteID) Register
 **/
Bit32u dma_chx_axi_id_read(struct dw_dma_chan_reg *reg){
    2be0:	14d0      	push      	r15
    2be2:	1421      	subi      	sp, sp, 4
    2be4:	6cfb      	mov      	r3, sp
    2be6:	b300      	st.w      	r0, (r3, 0x0)
	return reg_readl(reg, AXI_IDREG);
    2be8:	6cfb      	mov      	r3, sp
    2bea:	9360      	ld.w      	r3, (r3, 0x0)
    2bec:	234f      	addi      	r3, 80      	//0x50
    2bee:	6c0f      	mov      	r0, r3
    2bf0:	e3fffb0e 	bsr      	0x220c	//220c <readl>
    2bf4:	c4004820 	lsli      	r0, r0, 0
    2bf8:	6cc3      	mov      	r3, r0
}
    2bfa:	6c0f      	mov      	r0, r3
    2bfc:	1401      	addi      	sp, sp, 4
    2bfe:	1490      	pop      	r15

00002c00 <dma_chx_axi_id_write>:

/*
 * Write AXI ID(ReadID/WriteID) Register
 **/
void dma_chx_axi_id_write(struct dw_dma_chan_reg *reg, Bit32u val){
    2c00:	14d0      	push      	r15
    2c02:	1422      	subi      	sp, sp, 8
    2c04:	1b01      	addi      	r3, sp, 4
    2c06:	b300      	st.w      	r0, (r3, 0x0)
    2c08:	6cfb      	mov      	r3, sp
    2c0a:	b320      	st.w      	r1, (r3, 0x0)
	reg_writel(val, reg, AXI_IDREG);
    2c0c:	1b01      	addi      	r3, sp, 4
    2c0e:	9360      	ld.w      	r3, (r3, 0x0)
    2c10:	234f      	addi      	r3, 80      	//0x50
    2c12:	6cbb      	mov      	r2, sp
    2c14:	9200      	ld.w      	r0, (r2, 0x0)
    2c16:	6c4f      	mov      	r1, r3
    2c18:	e3fffb10 	bsr      	0x2238	//2238 <dw_write>
    2c1c:	c4004820 	lsli      	r0, r0, 0
}
    2c20:	1402      	addi      	sp, sp, 8
    2c22:	1490      	pop      	r15

00002c24 <dma_chx_axi_qos_read>:

/*
 * Read AXI QOS Register
 **/
Bit32u dma_chx_axi_qos_read(struct dw_dma_chan_reg *reg){
    2c24:	14d0      	push      	r15
    2c26:	1421      	subi      	sp, sp, 4
    2c28:	6cfb      	mov      	r3, sp
    2c2a:	b300      	st.w      	r0, (r3, 0x0)
	return reg_readl(reg, AXI_QOSREG);
    2c2c:	6cfb      	mov      	r3, sp
    2c2e:	9360      	ld.w      	r3, (r3, 0x0)
    2c30:	2357      	addi      	r3, 88      	//0x58
    2c32:	6c0f      	mov      	r0, r3
    2c34:	e3fffaec 	bsr      	0x220c	//220c <readl>
    2c38:	c4004820 	lsli      	r0, r0, 0
    2c3c:	6cc3      	mov      	r3, r0
}
    2c3e:	6c0f      	mov      	r0, r3
    2c40:	1401      	addi      	sp, sp, 4
    2c42:	1490      	pop      	r15

00002c44 <dma_chx_axi_qos_write>:

/*
 * Write AXI QOS Register
 **/
void dma_chx_axi_qos_write(struct dw_dma_chan_reg *reg, Bit32u val){
    2c44:	14d0      	push      	r15
    2c46:	1422      	subi      	sp, sp, 8
    2c48:	1b01      	addi      	r3, sp, 4
    2c4a:	b300      	st.w      	r0, (r3, 0x0)
    2c4c:	6cfb      	mov      	r3, sp
    2c4e:	b320      	st.w      	r1, (r3, 0x0)
	reg_writel(val, reg, AXI_QOSREG);
    2c50:	1b01      	addi      	r3, sp, 4
    2c52:	9360      	ld.w      	r3, (r3, 0x0)
    2c54:	2357      	addi      	r3, 88      	//0x58
    2c56:	6cbb      	mov      	r2, sp
    2c58:	9200      	ld.w      	r0, (r2, 0x0)
    2c5a:	6c4f      	mov      	r1, r3
    2c5c:	e3fffaee 	bsr      	0x2238	//2238 <dw_write>
    2c60:	c4004820 	lsli      	r0, r0, 0
}
    2c64:	1402      	addi      	sp, sp, 8
    2c66:	1490      	pop      	r15

00002c68 <dma_chx_sstat_read>:

/*
 * Read Source Status Register
 **/
Bit32u dma_chx_sstat_read(struct dw_dma_chan_reg *reg){
    2c68:	14d0      	push      	r15
    2c6a:	1421      	subi      	sp, sp, 4
    2c6c:	6cfb      	mov      	r3, sp
    2c6e:	b300      	st.w      	r0, (r3, 0x0)
	return reg_readl(reg, SSTAT);
    2c70:	6cfb      	mov      	r3, sp
    2c72:	9360      	ld.w      	r3, (r3, 0x0)
    2c74:	235f      	addi      	r3, 96      	//0x60
    2c76:	6c0f      	mov      	r0, r3
    2c78:	e3fffaca 	bsr      	0x220c	//220c <readl>
    2c7c:	c4004820 	lsli      	r0, r0, 0
    2c80:	6cc3      	mov      	r3, r0
}
    2c82:	6c0f      	mov      	r0, r3
    2c84:	1401      	addi      	sp, sp, 4
    2c86:	1490      	pop      	r15

00002c88 <dma_chx_dstat_read>:

/*
 * Read Destination Status Register
 **/
Bit32u dma_chx_dstat_read(struct dw_dma_chan_reg *reg){
    2c88:	14d0      	push      	r15
    2c8a:	1421      	subi      	sp, sp, 4
    2c8c:	6cfb      	mov      	r3, sp
    2c8e:	b300      	st.w      	r0, (r3, 0x0)
	return reg_readl(reg, DSTAT);
    2c90:	6cfb      	mov      	r3, sp
    2c92:	9360      	ld.w      	r3, (r3, 0x0)
    2c94:	2367      	addi      	r3, 104      	//0x68
    2c96:	6c0f      	mov      	r0, r3
    2c98:	e3fffaba 	bsr      	0x220c	//220c <readl>
    2c9c:	c4004820 	lsli      	r0, r0, 0
    2ca0:	6cc3      	mov      	r3, r0
}
    2ca2:	6c0f      	mov      	r0, r3
    2ca4:	1401      	addi      	sp, sp, 4
    2ca6:	1490      	pop      	r15

00002ca8 <dma_chx_sstatar_read>:

/*
 * Read Source Status Fetch Address Register
 **/
Bit32u dma_chx_sstatar_read(struct dw_dma_chan_reg *reg){
    2ca8:	14d0      	push      	r15
    2caa:	1421      	subi      	sp, sp, 4
    2cac:	6cfb      	mov      	r3, sp
    2cae:	b300      	st.w      	r0, (r3, 0x0)
	return reg_readl(reg, SSTATAR);
    2cb0:	6cfb      	mov      	r3, sp
    2cb2:	9360      	ld.w      	r3, (r3, 0x0)
    2cb4:	236f      	addi      	r3, 112      	//0x70
    2cb6:	6c0f      	mov      	r0, r3
    2cb8:	e3fffaaa 	bsr      	0x220c	//220c <readl>
    2cbc:	c4004820 	lsli      	r0, r0, 0
    2cc0:	6cc3      	mov      	r3, r0
}
    2cc2:	6c0f      	mov      	r0, r3
    2cc4:	1401      	addi      	sp, sp, 4
    2cc6:	1490      	pop      	r15
    2cc8:	0000220c 	.long	0x0000220c
    2ccc:	00002238 	.long	0x00002238

00002cd0 <dma_chx_sstatar_write>:

/*
 * Write Source Status Fetch Address Register
 **/
void dma_chx_sstatar_write(struct dw_dma_chan_reg *reg, Bit32u val){
    2cd0:	14d0      	push      	r15
    2cd2:	1422      	subi      	sp, sp, 8
    2cd4:	1b01      	addi      	r3, sp, 4
    2cd6:	b300      	st.w      	r0, (r3, 0x0)
    2cd8:	6cfb      	mov      	r3, sp
    2cda:	b320      	st.w      	r1, (r3, 0x0)
	reg_writel(val, reg, SSTATAR);
    2cdc:	1b01      	addi      	r3, sp, 4
    2cde:	9360      	ld.w      	r3, (r3, 0x0)
    2ce0:	236f      	addi      	r3, 112      	//0x70
    2ce2:	6cbb      	mov      	r2, sp
    2ce4:	9200      	ld.w      	r0, (r2, 0x0)
    2ce6:	6c4f      	mov      	r1, r3
    2ce8:	e3fffaa8 	bsr      	0x2238	//2238 <dw_write>
    2cec:	c4004820 	lsli      	r0, r0, 0
}
    2cf0:	1402      	addi      	sp, sp, 8
    2cf2:	1490      	pop      	r15

00002cf4 <dma_chx_dstatar_read>:

/*
 * Read Destination Status Fetch Address Register
 **/
Bit32u dma_chx_dstatar_read(struct dw_dma_chan_reg *reg){
    2cf4:	14d0      	push      	r15
    2cf6:	1421      	subi      	sp, sp, 4
    2cf8:	6cfb      	mov      	r3, sp
    2cfa:	b300      	st.w      	r0, (r3, 0x0)
	return reg_readl(reg, DSTATAR);
    2cfc:	6cfb      	mov      	r3, sp
    2cfe:	9360      	ld.w      	r3, (r3, 0x0)
    2d00:	2377      	addi      	r3, 120      	//0x78
    2d02:	6c0f      	mov      	r0, r3
    2d04:	e3fffa84 	bsr      	0x220c	//220c <readl>
    2d08:	c4004820 	lsli      	r0, r0, 0
    2d0c:	6cc3      	mov      	r3, r0
}
    2d0e:	6c0f      	mov      	r0, r3
    2d10:	1401      	addi      	sp, sp, 4
    2d12:	1490      	pop      	r15

00002d14 <dma_chx_dstatar_write>:

/*
 * Write Destination Status Fetch Address Register
 **/
void dma_chx_dstatar_write(struct dw_dma_chan_reg *reg, Bit32u val){
    2d14:	14d0      	push      	r15
    2d16:	1422      	subi      	sp, sp, 8
    2d18:	1b01      	addi      	r3, sp, 4
    2d1a:	b300      	st.w      	r0, (r3, 0x0)
    2d1c:	6cfb      	mov      	r3, sp
    2d1e:	b320      	st.w      	r1, (r3, 0x0)
	reg_writel(val, reg, DSTATAR);
    2d20:	1b01      	addi      	r3, sp, 4
    2d22:	9360      	ld.w      	r3, (r3, 0x0)
    2d24:	2377      	addi      	r3, 120      	//0x78
    2d26:	6cbb      	mov      	r2, sp
    2d28:	9200      	ld.w      	r0, (r2, 0x0)
    2d2a:	6c4f      	mov      	r1, r3
    2d2c:	e3fffa86 	bsr      	0x2238	//2238 <dw_write>
    2d30:	c4004820 	lsli      	r0, r0, 0
}
    2d34:	1402      	addi      	sp, sp, 8
    2d36:	1490      	pop      	r15

00002d38 <dma_chx_int_status_eanble>:

/*
 * Enable CHx Interrupt Status Register
 **/
void dma_chx_int_status_eanble(struct dw_dma_chan_reg *reg, Bit32u val){
    2d38:	14d0      	push      	r15
    2d3a:	1422      	subi      	sp, sp, 8
    2d3c:	1b01      	addi      	r3, sp, 4
    2d3e:	b300      	st.w      	r0, (r3, 0x0)
    2d40:	6cfb      	mov      	r3, sp
    2d42:	b320      	st.w      	r1, (r3, 0x0)
	reg_writel(val, reg, INT_STAT_EN);
    2d44:	1b01      	addi      	r3, sp, 4
    2d46:	9360      	ld.w      	r3, (r3, 0x0)
    2d48:	237f      	addi      	r3, 128      	//0x80
    2d4a:	6cbb      	mov      	r2, sp
    2d4c:	9200      	ld.w      	r0, (r2, 0x0)
    2d4e:	6c4f      	mov      	r1, r3
    2d50:	e3fffa74 	bsr      	0x2238	//2238 <dw_write>
    2d54:	c4004820 	lsli      	r0, r0, 0
}
    2d58:	1402      	addi      	sp, sp, 8
    2d5a:	1490      	pop      	r15

00002d5c <dma_chx_int_status_diable>:

/*
 * Disable CHx Interrupt Status Register
 **/
void dma_chx_int_status_diable(struct dw_dma_chan_reg *reg, Bit32u val){
    2d5c:	14d0      	push      	r15
    2d5e:	1422      	subi      	sp, sp, 8
    2d60:	1b01      	addi      	r3, sp, 4
    2d62:	b300      	st.w      	r0, (r3, 0x0)
    2d64:	6cfb      	mov      	r3, sp
    2d66:	b320      	st.w      	r1, (r3, 0x0)
	reg_clearl(val, reg, INT_STAT_EN);
    2d68:	1b01      	addi      	r3, sp, 4
    2d6a:	9360      	ld.w      	r3, (r3, 0x0)
    2d6c:	237f      	addi      	r3, 128      	//0x80
    2d6e:	6cbb      	mov      	r2, sp
    2d70:	9200      	ld.w      	r0, (r2, 0x0)
    2d72:	6c4f      	mov      	r1, r3
    2d74:	e3fffa82 	bsr      	0x2278	//2278 <dw_clear>
    2d78:	c4004820 	lsli      	r0, r0, 0
}
    2d7c:	1402      	addi      	sp, sp, 8
    2d7e:	1490      	pop      	r15

00002d80 <dma_chx_spec_int_status_read>:

/*
 * Read CHx Interrupt Status Register
 **/
Bit32u dma_chx_spec_int_status_read(struct dw_dma_chan_reg *reg){
    2d80:	14d0      	push      	r15
    2d82:	1421      	subi      	sp, sp, 4
    2d84:	6cfb      	mov      	r3, sp
    2d86:	b300      	st.w      	r0, (r3, 0x0)
	return reg_readl(reg, INT_STAT);
    2d88:	6cfb      	mov      	r3, sp
    2d8a:	9360      	ld.w      	r3, (r3, 0x0)
    2d8c:	2387      	addi      	r3, 136      	//0x88
    2d8e:	6c0f      	mov      	r0, r3
    2d90:	e3fffa3e 	bsr      	0x220c	//220c <readl>
    2d94:	c4004820 	lsli      	r0, r0, 0
    2d98:	6cc3      	mov      	r3, r0
}
    2d9a:	6c0f      	mov      	r0, r3
    2d9c:	1401      	addi      	sp, sp, 4
    2d9e:	1490      	pop      	r15

00002da0 <dma_chx_int_signal_eanble>:


/*
 * Enable CHx Interrupt Signal Register
 **/
void dma_chx_int_signal_eanble(struct dw_dma_chan_reg *reg, Bit32u val){
    2da0:	14d0      	push      	r15
    2da2:	1422      	subi      	sp, sp, 8
    2da4:	1b01      	addi      	r3, sp, 4
    2da6:	b300      	st.w      	r0, (r3, 0x0)
    2da8:	6cfb      	mov      	r3, sp
    2daa:	b320      	st.w      	r1, (r3, 0x0)
	reg_writel(val, reg, INTSIG_EN);
    2dac:	1b01      	addi      	r3, sp, 4
    2dae:	9360      	ld.w      	r3, (r3, 0x0)
    2db0:	238f      	addi      	r3, 144      	//0x90
    2db2:	6cbb      	mov      	r2, sp
    2db4:	9200      	ld.w      	r0, (r2, 0x0)
    2db6:	6c4f      	mov      	r1, r3
    2db8:	e3fffa40 	bsr      	0x2238	//2238 <dw_write>
    2dbc:	c4004820 	lsli      	r0, r0, 0
}
    2dc0:	1402      	addi      	sp, sp, 8
    2dc2:	1490      	pop      	r15

00002dc4 <dma_chx_int_signal_diable>:

/*
 * Disable CHx Interrupt Status Register
 **/
void dma_chx_int_signal_diable(struct dw_dma_chan_reg *reg, Bit32u val){
    2dc4:	14d0      	push      	r15
    2dc6:	1422      	subi      	sp, sp, 8
    2dc8:	1b01      	addi      	r3, sp, 4
    2dca:	b300      	st.w      	r0, (r3, 0x0)
    2dcc:	6cfb      	mov      	r3, sp
    2dce:	b320      	st.w      	r1, (r3, 0x0)
	reg_clearl(val, reg, INTSIG_EN);
    2dd0:	1b01      	addi      	r3, sp, 4
    2dd2:	9360      	ld.w      	r3, (r3, 0x0)
    2dd4:	238f      	addi      	r3, 144      	//0x90
    2dd6:	6cbb      	mov      	r2, sp
    2dd8:	9200      	ld.w      	r0, (r2, 0x0)
    2dda:	6c4f      	mov      	r1, r3
    2ddc:	e3fffa4e 	bsr      	0x2278	//2278 <dw_clear>
    2de0:	c4004820 	lsli      	r0, r0, 0
}
    2de4:	1402      	addi      	sp, sp, 8
    2de6:	1490      	pop      	r15

00002de8 <dma_chx_int_status_clear>:

/*
 * Clear CHx Interrupt status Register
 **/
void dma_chx_int_status_clear(struct dw_dma_chan_reg *reg, Bit32u val){
    2de8:	14d0      	push      	r15
    2dea:	1422      	subi      	sp, sp, 8
    2dec:	1b01      	addi      	r3, sp, 4
    2dee:	b300      	st.w      	r0, (r3, 0x0)
    2df0:	6cfb      	mov      	r3, sp
    2df2:	b320      	st.w      	r1, (r3, 0x0)
	//reg->INTCLR=val;
	reg_direct_writel(val, reg, INTCLR);
    2df4:	1b01      	addi      	r3, sp, 4
    2df6:	9360      	ld.w      	r3, (r3, 0x0)
    2df8:	2397      	addi      	r3, 152      	//0x98
    2dfa:	6cbb      	mov      	r2, sp
    2dfc:	9200      	ld.w      	r0, (r2, 0x0)
    2dfe:	6c4f      	mov      	r1, r3
    2e00:	e3fffa10 	bsr      	0x2220	//2220 <writel>
    2e04:	c4004820 	lsli      	r0, r0, 0
	//return reg_writel(val, reg, INTCLR);
}
    2e08:	1402      	addi      	sp, sp, 8
    2e0a:	1490      	pop      	r15
    2e0c:	00002238 	.long	0x00002238
    2e10:	0000220c 	.long	0x0000220c
    2e14:	00002278 	.long	0x00002278
    2e18:	00002220 	.long	0x00002220

00002e1c <dma_singal_init>:
#include "misc.h"
#include "intc.h"

extern Bit8u channelid;

Bit32u dma_singal_init(){
    2e1c:	14d1      	push      	r4, r15
    2e1e:	1422      	subi      	sp, sp, 8
	Bit32u val;
	struct dw_dma_common_reg* common_reg;

	common_reg = (struct dw_dma_common_reg*)APB_DMA_BASEADDR;
    2e20:	1a01      	addi      	r2, sp, 4
    2e22:	33cc      	movi      	r3, 204      	//0xcc
    2e24:	4375      	lsli      	r3, r3, 21
    2e26:	b260      	st.w      	r3, (r2, 0x0)
	dma.common_reg = common_reg;
    2e28:	1165      	lrw      	r3, 0x13700	//13700 <dma>
    2e2a:	1a01      	addi      	r2, sp, 4
    2e2c:	9240      	ld.w      	r2, (r2, 0x0)
    2e2e:	b340      	st.w      	r2, (r3, 0x0)
		return DMA_ERROR;
	}
#endif

	/* Verify DMA version number */
	val = dma_get_comp_ver(common_reg);
    2e30:	6d3b      	mov      	r4, sp
    2e32:	1b01      	addi      	r3, sp, 4
    2e34:	9300      	ld.w      	r0, (r3, 0x0)
    2e36:	e3fffa5d 	bsr      	0x22f0	//22f0 <dma_get_comp_ver>
    2e3a:	c4004820 	lsli      	r0, r0, 0
    2e3e:	b400      	st.w      	r0, (r4, 0x0)
	printf("DMA VERSION:0x%x\n", val);
    2e40:	6cfb      	mov      	r3, sp
    2e42:	1101      	lrw      	r0, 0x10168	//10168 <__etext+0x5b8>
    2e44:	9320      	ld.w      	r1, (r3, 0x0)
    2e46:	e0005d85 	bsr      	0xe950	//e950 <printf>
    2e4a:	c4004820 	lsli      	r0, r0, 0
	if(val != DMA_VERSION){
    2e4e:	6cfb      	mov      	r3, sp
    2e50:	9340      	ld.w      	r2, (r3, 0x0)
    2e52:	107f      	lrw      	r3, 0x3130302a	//3130302a <__stack+0x30f03032>
    2e54:	64ca      	cmpne      	r2, r3
    2e56:	0c09      	bf      	0x2e68	//2e68 <dma_singal_init+0x4c>
		printf("Wrong DMA VERSION, exit\n");
    2e58:	101e      	lrw      	r0, 0x1017c	//1017c <__etext+0x5cc>
    2e5a:	e0005d7b 	bsr      	0xe950	//e950 <printf>
    2e5e:	c4004820 	lsli      	r0, r0, 0
		return DMA_ERROR;
    2e62:	3300      	movi      	r3, 0      	//0x0
    2e64:	2b00      	subi      	r3, 1      	//0x1
    2e66:	0427      	br      	0x2eb4	//2eb4 <dma_singal_init+0x98>
	}

	dma_reset(common_reg);
    2e68:	1b01      	addi      	r3, sp, 4
    2e6a:	9300      	ld.w      	r0, (r3, 0x0)
    2e6c:	e3fffcc2 	bsr      	0x27f0	//27f0 <dma_reset>
    2e70:	c4004820 	lsli      	r0, r0, 0
	while(dma_reset_read(common_reg));
    2e74:	6c00      	or      	r0, r0
    2e76:	1b01      	addi      	r3, sp, 4
    2e78:	9300      	ld.w      	r0, (r3, 0x0)
    2e7a:	e3fffccb 	bsr      	0x2810	//2810 <dma_reset_read>
    2e7e:	c4004820 	lsli      	r0, r0, 0
    2e82:	6cc3      	mov      	r3, r0
    2e84:	e923fff9 	bnez      	r3, 0x2e76	//2e76 <dma_singal_init+0x5a>

	/* Disable DMA IRQ */

	/* Disable DMA IRQ */
	dma_gloabe_int_disable(common_reg);
    2e88:	1b01      	addi      	r3, sp, 4
    2e8a:	9300      	ld.w      	r0, (r3, 0x0)
    2e8c:	e3fffa58 	bsr      	0x233c	//233c <dma_gloabe_int_disable>
    2e90:	c4004820 	lsli      	r0, r0, 0


	/* Enable DMA */
	if(!dma_dmac_is_enable(common_reg))
    2e94:	1b01      	addi      	r3, sp, 4
    2e96:	9300      	ld.w      	r0, (r3, 0x0)
    2e98:	e3fffa96 	bsr      	0x23c4	//23c4 <dma_dmac_is_enable>
    2e9c:	c4004820 	lsli      	r0, r0, 0
    2ea0:	6cc3      	mov      	r3, r0
    2ea2:	e9230008 	bnez      	r3, 0x2eb2	//2eb2 <dma_singal_init+0x96>
		dma_dmac_enable(common_reg);
    2ea6:	1b01      	addi      	r3, sp, 4
    2ea8:	9300      	ld.w      	r0, (r3, 0x0)
    2eaa:	e3fffa59 	bsr      	0x235c	//235c <dma_dmac_enable>
    2eae:	c4004820 	lsli      	r0, r0, 0

	return 0;
    2eb2:	3300      	movi      	r3, 0      	//0x0
}
    2eb4:	6c0f      	mov      	r0, r3
    2eb6:	1402      	addi      	sp, sp, 8
    2eb8:	1491      	pop      	r4, r15
    2eba:	0000      	.short	0x0000
    2ebc:	00013700 	.long	0x00013700
    2ec0:	000022f0 	.long	0x000022f0
    2ec4:	00010168 	.long	0x00010168
    2ec8:	0000e950 	.long	0x0000e950
    2ecc:	3130302a 	.long	0x3130302a
    2ed0:	0001017c 	.long	0x0001017c
    2ed4:	000027f0 	.long	0x000027f0
    2ed8:	00002810 	.long	0x00002810
    2edc:	0000233c 	.long	0x0000233c
    2ee0:	000023c4 	.long	0x000023c4
    2ee4:	0000235c 	.long	0x0000235c

00002ee8 <dma_channel_free_query>:
/* judge the channel is free or not,
 * free,prepare
 * busy,do nothing
 * */
Bit8u dma_channel_free_query(struct dw_dma* dma,Bit8u chanid)
{
    2ee8:	14d1      	push      	r4, r15
    2eea:	1423      	subi      	sp, sp, 12
    2eec:	1b01      	addi      	r3, sp, 4
    2eee:	b300      	st.w      	r0, (r3, 0x0)
    2ef0:	6c87      	mov      	r2, r1
    2ef2:	6cfb      	mov      	r3, sp
    2ef4:	a340      	st.b      	r2, (r3, 0x0)
	Bit32u val;
	val = dma_ch_is_free(dma->common_reg, chanid);
    2ef6:	1b01      	addi      	r3, sp, 4
    2ef8:	9360      	ld.w      	r3, (r3, 0x0)
    2efa:	9340      	ld.w      	r2, (r3, 0x0)
    2efc:	6cfb      	mov      	r3, sp
    2efe:	8360      	ld.b      	r3, (r3, 0x0)
    2f00:	74cc      	zextb      	r3, r3
    2f02:	1c02      	addi      	r4, sp, 8
    2f04:	6c0b      	mov      	r0, r2
    2f06:	6c4f      	mov      	r1, r3
    2f08:	e3fffae8 	bsr      	0x24d8	//24d8 <dma_ch_is_free>
    2f0c:	c4004820 	lsli      	r0, r0, 0
    2f10:	b400      	st.w      	r0, (r4, 0x0)
	printf("channel:%d val:%d\n", chanid, val);
    2f12:	6cfb      	mov      	r3, sp
    2f14:	8360      	ld.b      	r3, (r3, 0x0)
    2f16:	748c      	zextb      	r2, r3
    2f18:	1b02      	addi      	r3, sp, 8
    2f1a:	ea8000a8 	lrw      	r0, 0x10198	//10198 <__etext+0x5e8>
    2f1e:	6c4b      	mov      	r1, r2
    2f20:	9340      	ld.w      	r2, (r3, 0x0)
    2f22:	e0005d17 	bsr      	0xe950	//e950 <printf>
    2f26:	c4004820 	lsli      	r0, r0, 0
	if(val == 0)
    2f2a:	1b02      	addi      	r3, sp, 8
    2f2c:	9360      	ld.w      	r3, (r3, 0x0)
    2f2e:	e923000d 	bnez      	r3, 0x2f48	//2f48 <dma_channel_free_query+0x60>
		printf("channel%d is free\n", chanid);
    2f32:	6cfb      	mov      	r3, sp
    2f34:	8360      	ld.b      	r3, (r3, 0x0)
    2f36:	74cc      	zextb      	r3, r3
    2f38:	ea8000a2 	lrw      	r0, 0x101ac	//101ac <__etext+0x5fc>
    2f3c:	6c4f      	mov      	r1, r3
    2f3e:	e0005d09 	bsr      	0xe950	//e950 <printf>
    2f42:	c4004820 	lsli      	r0, r0, 0
    2f46:	040b      	br      	0x2f5c	//2f5c <dma_channel_free_query+0x74>
	else
		printf("channel%d is not free\n", chanid);
    2f48:	6cfb      	mov      	r3, sp
    2f4a:	8360      	ld.b      	r3, (r3, 0x0)
    2f4c:	74cc      	zextb      	r3, r3
    2f4e:	ea80009e 	lrw      	r0, 0x101c0	//101c0 <__etext+0x610>
    2f52:	6c4f      	mov      	r1, r3
    2f54:	e0005cfe 	bsr      	0xe950	//e950 <printf>
    2f58:	c4004820 	lsli      	r0, r0, 0
	return val;
    2f5c:	1b02      	addi      	r3, sp, 8
    2f5e:	9360      	ld.w      	r3, (r3, 0x0)
    2f60:	74cc      	zextb      	r3, r3
}
    2f62:	6c0f      	mov      	r0, r3
    2f64:	1403      	addi      	sp, sp, 12
    2f66:	1491      	pop      	r4, r15

00002f68 <dma_intc_init_1>:

Bit32u dma_intc_init_1(struct dw_dma* dma,Bit8u chanid)
{
    2f68:	14d0      	push      	r15
    2f6a:	1422      	subi      	sp, sp, 8
    2f6c:	1b01      	addi      	r3, sp, 4
    2f6e:	b300      	st.w      	r0, (r3, 0x0)
    2f70:	6c87      	mov      	r2, r1
    2f72:	6cfb      	mov      	r3, sp
    2f74:	a340      	st.b      	r2, (r3, 0x0)
	/*enable CommonReg irq*/
	dma_com_int_signal_enable(dma->common_reg, DMA_COM_INT_ALL);
    2f76:	1b01      	addi      	r3, sp, 4
    2f78:	9360      	ld.w      	r3, (r3, 0x0)
    2f7a:	9360      	ld.w      	r3, (r3, 0x0)
    2f7c:	6c0f      	mov      	r0, r3
    2f7e:	31ff      	movi      	r1, 255      	//0xff
    2f80:	e3fffbfc 	bsr      	0x2778	//2778 <dma_com_int_signal_enable>
    2f84:	c4004820 	lsli      	r0, r0, 0
	dma_com_int_status_enable(dma->common_reg, DMA_COM_INT_ALL);
    2f88:	1b01      	addi      	r3, sp, 4
    2f8a:	9360      	ld.w      	r3, (r3, 0x0)
    2f8c:	9360      	ld.w      	r3, (r3, 0x0)
    2f8e:	6c0f      	mov      	r0, r3
    2f90:	31ff      	movi      	r1, 255      	//0xff
    2f92:	e3fffbcf 	bsr      	0x2730	//2730 <dma_com_int_status_enable>
    2f96:	c4004820 	lsli      	r0, r0, 0
	/*enable channel irq*/
	dma_chx_int_signal_eanble(dma->chan_reg[chanid],DMA_CHX_CH_ALL_INT);
    2f9a:	6cfb      	mov      	r3, sp
    2f9c:	8360      	ld.b      	r3, (r3, 0x0)
    2f9e:	748c      	zextb      	r2, r3
    2fa0:	1b01      	addi      	r3, sp, 4
    2fa2:	9360      	ld.w      	r3, (r3, 0x0)
    2fa4:	2200      	addi      	r2, 1      	//0x1
    2fa6:	d0430883 	ldr.w      	r3, (r3, r2<<2)
    2faa:	6c0f      	mov      	r0, r3
    2fac:	3100      	movi      	r1, 0      	//0x0
    2fae:	2900      	subi      	r1, 1      	//0x1
    2fb0:	e3fffef8 	bsr      	0x2da0	//2da0 <dma_chx_int_signal_eanble>
    2fb4:	c4004820 	lsli      	r0, r0, 0
	dma_chx_int_status_eanble(dma->chan_reg[chanid],DMA_CHX_CH_ALL_INT);
    2fb8:	6cfb      	mov      	r3, sp
    2fba:	8360      	ld.b      	r3, (r3, 0x0)
    2fbc:	748c      	zextb      	r2, r3
    2fbe:	1b01      	addi      	r3, sp, 4
    2fc0:	9360      	ld.w      	r3, (r3, 0x0)
    2fc2:	2200      	addi      	r2, 1      	//0x1
    2fc4:	d0430883 	ldr.w      	r3, (r3, r2<<2)
    2fc8:	6c0f      	mov      	r0, r3
    2fca:	3100      	movi      	r1, 0      	//0x0
    2fcc:	2900      	subi      	r1, 1      	//0x1
    2fce:	e3fffeb5 	bsr      	0x2d38	//2d38 <dma_chx_int_status_eanble>
    2fd2:	c4004820 	lsli      	r0, r0, 0

	/* enable dmac interrupt */
	if(!dma_dmac_gloabe_int_is_enable(dma->common_reg))
    2fd6:	1b01      	addi      	r3, sp, 4
    2fd8:	9360      	ld.w      	r3, (r3, 0x0)
    2fda:	9360      	ld.w      	r3, (r3, 0x0)
    2fdc:	6c0f      	mov      	r0, r3
    2fde:	e3fffa05 	bsr      	0x23e8	//23e8 <dma_dmac_gloabe_int_is_enable>
    2fe2:	c4004820 	lsli      	r0, r0, 0
    2fe6:	6cc3      	mov      	r3, r0
    2fe8:	e923000a 	bnez      	r3, 0x2ffc	//2ffc <dma_intc_init_1+0x94>
		dma_gloabe_int_enable(dma->common_reg);
    2fec:	1b01      	addi      	r3, sp, 4
    2fee:	9360      	ld.w      	r3, (r3, 0x0)
    2ff0:	9360      	ld.w      	r3, (r3, 0x0)
    2ff2:	6c0f      	mov      	r0, r3
    2ff4:	e3fff994 	bsr      	0x231c	//231c <dma_gloabe_int_enable>
    2ff8:	c4004820 	lsli      	r0, r0, 0

	/* register dma isr */
    CK_INTC_RequestIrq(CK_INTC_DMAC, CK_DMAC_Handler);
    2ffc:	3006      	movi      	r0, 6      	//0x6
    2ffe:	1339      	lrw      	r1, 0x1a78	//1a78 <CK_DMAC_Handler>
    3000:	e0001afc 	bsr      	0x65f8	//65f8 <CK_INTC_RequestIrq>
    3004:	c4004820 	lsli      	r0, r0, 0
	return 0;
    3008:	3300      	movi      	r3, 0      	//0x0
}
    300a:	6c0f      	mov      	r0, r3
    300c:	1402      	addi      	sp, sp, 8
    300e:	1490      	pop      	r15

00003010 <dma_singal_prepare_lli_1>:

Bit32u dma_singal_prepare_lli_1(struct dw_dma* dma,Bit8u chanid)
{
    3010:	14d0      	push      	r15
    3012:	142a      	subi      	sp, sp, 40
    3014:	1b01      	addi      	r3, sp, 4
    3016:	b300      	st.w      	r0, (r3, 0x0)
    3018:	6c87      	mov      	r2, r1
    301a:	6cfb      	mov      	r3, sp
    301c:	a340      	st.b      	r2, (r3, 0x0)
	Bit32u period;
	Bit32u i;
	Bit32u cfg_lo=0, cfg_hi=0, ctl_lo=0, ctl_hi=0;
    301e:	1b08      	addi      	r3, sp, 32
    3020:	3200      	movi      	r2, 0      	//0x0
    3022:	b340      	st.w      	r2, (r3, 0x0)
    3024:	1b07      	addi      	r3, sp, 28
    3026:	3200      	movi      	r2, 0      	//0x0
    3028:	b340      	st.w      	r2, (r3, 0x0)
    302a:	1b06      	addi      	r3, sp, 24
    302c:	3200      	movi      	r2, 0      	//0x0
    302e:	b340      	st.w      	r2, (r3, 0x0)
    3030:	1b05      	addi      	r3, sp, 20
    3032:	3200      	movi      	r2, 0      	//0x0
    3034:	b340      	st.w      	r2, (r3, 0x0)
	struct dw_dma_chan_reg * chan_reg;
	struct dma_chx_config_t* config = &dma->config[chanid];
    3036:	1b01      	addi      	r3, sp, 4
    3038:	9360      	ld.w      	r3, (r3, 0x0)
    303a:	e4230023 	addi      	r1, r3, 36      	//0x24
    303e:	6cfb      	mov      	r3, sp
    3040:	8360      	ld.b      	r3, (r3, 0x0)
    3042:	748c      	zextb      	r2, r3
    3044:	3334      	movi      	r3, 52      	//0x34
    3046:	7c8c      	mult      	r2, r3
    3048:	1b04      	addi      	r3, sp, 16
    304a:	5948      	addu      	r2, r1, r2
    304c:	b340      	st.w      	r2, (r3, 0x0)
	chan_reg = (struct dw_dma_chan_reg*)(APB_DMA_CH(chanid+1));
    304e:	6cfb      	mov      	r3, sp
    3050:	8360      	ld.b      	r3, (r3, 0x0)
    3052:	74cc      	zextb      	r3, r3
    3054:	2300      	addi      	r3, 1      	//0x1
    3056:	4368      	lsli      	r3, r3, 8
    3058:	31cc      	movi      	r1, 204      	//0xcc
    305a:	4135      	lsli      	r1, r1, 21
    305c:	5b44      	addu      	r2, r3, r1
    305e:	1b03      	addi      	r3, sp, 12
    3060:	b340      	st.w      	r2, (r3, 0x0)
	dma->chan_reg[chanid] = chan_reg;
    3062:	6cfb      	mov      	r3, sp
    3064:	8360      	ld.b      	r3, (r3, 0x0)
    3066:	748c      	zextb      	r2, r3
    3068:	1b01      	addi      	r3, sp, 4
    306a:	9360      	ld.w      	r3, (r3, 0x0)
    306c:	2200      	addi      	r2, 1      	//0x1
    306e:	1903      	addi      	r1, sp, 12
    3070:	9120      	ld.w      	r1, (r1, 0x0)
    3072:	d4430881 	str.w      	r1, (r3, r2<<2)
	config->channel = chanid+1;
    3076:	6cfb      	mov      	r3, sp
    3078:	8360      	ld.b      	r3, (r3, 0x0)
    307a:	74cc      	zextb      	r3, r3
    307c:	2300      	addi      	r3, 1      	//0x1
    307e:	6c8f      	mov      	r2, r3
    3080:	1b04      	addi      	r3, sp, 16
    3082:	9360      	ld.w      	r3, (r3, 0x0)
    3084:	b340      	st.w      	r2, (r3, 0x0)

	/* Clear chx CFG to 0 */
	dma_chx_cfg_lo_direct_write(chan_reg, 0);
    3086:	1b03      	addi      	r3, sp, 12
    3088:	9300      	ld.w      	r0, (r3, 0x0)
    308a:	3100      	movi      	r1, 0      	//0x0
    308c:	e3fffcc8 	bsr      	0x2a1c	//2a1c <dma_chx_cfg_lo_direct_write>
    3090:	c4004820 	lsli      	r0, r0, 0
	dma_chx_cfg_hi_direct_write(chan_reg, 0);
    3094:	1b03      	addi      	r3, sp, 12
    3096:	9300      	ld.w      	r0, (r3, 0x0)
    3098:	3100      	movi      	r1, 0      	//0x0
    309a:	e3fffcf5 	bsr      	0x2a84	//2a84 <dma_chx_cfg_hi_direct_write>
    309e:	c4004820 	lsli      	r0, r0, 0

	/* set chx cfg Low */
	cfg_lo |= DMA_CHX_CFG_SRC_MULTBLK_TYPE(config->src_trf_mode);
    30a2:	1b04      	addi      	r3, sp, 16
    30a4:	9360      	ld.w      	r3, (r3, 0x0)
    30a6:	932a      	ld.w      	r1, (r3, 0x28)
    30a8:	1b08      	addi      	r3, sp, 32
    30aa:	1a08      	addi      	r2, sp, 32
    30ac:	9240      	ld.w      	r2, (r2, 0x0)
    30ae:	6c84      	or      	r2, r1
    30b0:	b340      	st.w      	r2, (r3, 0x0)
	cfg_lo |= DMA_CHX_CFG_DST_MULTBLK_TYPE(config->dst_trf_mode);
    30b2:	1b04      	addi      	r3, sp, 16
    30b4:	9360      	ld.w      	r3, (r3, 0x0)
    30b6:	936b      	ld.w      	r3, (r3, 0x2c)
    30b8:	4322      	lsli      	r1, r3, 2
    30ba:	1b08      	addi      	r3, sp, 32
    30bc:	1a08      	addi      	r2, sp, 32
    30be:	9240      	ld.w      	r2, (r2, 0x0)
    30c0:	6c84      	or      	r2, r1
    30c2:	b340      	st.w      	r2, (r3, 0x0)
	/* set chx cfg High */
	cfg_hi |= DMA_CHX_CFG_TT_FC(config->trf_type);
    30c4:	1b04      	addi      	r3, sp, 16
    30c6:	9360      	ld.w      	r3, (r3, 0x0)
    30c8:	9329      	ld.w      	r1, (r3, 0x24)
    30ca:	1b07      	addi      	r3, sp, 28
    30cc:	1a07      	addi      	r2, sp, 28
    30ce:	9240      	ld.w      	r2, (r2, 0x0)
    30d0:	6c84      	or      	r2, r1
    30d2:	b340      	st.w      	r2, (r3, 0x0)

	dma_chx_cfg_lo_direct_write(chan_reg, cfg_lo);
    30d4:	1a03      	addi      	r2, sp, 12
    30d6:	1b08      	addi      	r3, sp, 32
    30d8:	9200      	ld.w      	r0, (r2, 0x0)
    30da:	9320      	ld.w      	r1, (r3, 0x0)
    30dc:	e3fffca0 	bsr      	0x2a1c	//2a1c <dma_chx_cfg_lo_direct_write>
    30e0:	c4004820 	lsli      	r0, r0, 0
	dma_chx_cfg_hi_direct_write(chan_reg, cfg_hi);
    30e4:	1a03      	addi      	r2, sp, 12
    30e6:	1b07      	addi      	r3, sp, 28
    30e8:	9200      	ld.w      	r0, (r2, 0x0)
    30ea:	9320      	ld.w      	r1, (r3, 0x0)
    30ec:	e3fffccc 	bsr      	0x2a84	//2a84 <dma_chx_cfg_hi_direct_write>
    30f0:	c4004820 	lsli      	r0, r0, 0

	/* set chx CTL Low */
	ctl_lo |= DMA_CHX_CTL_SMS(config->sms);
    30f4:	1b04      	addi      	r3, sp, 16
    30f6:	9360      	ld.w      	r3, (r3, 0x0)
    30f8:	9322      	ld.w      	r1, (r3, 0x8)
    30fa:	1b06      	addi      	r3, sp, 24
    30fc:	1a06      	addi      	r2, sp, 24
    30fe:	9240      	ld.w      	r2, (r2, 0x0)
    3100:	6c84      	or      	r2, r1
    3102:	b340      	st.w      	r2, (r3, 0x0)
	ctl_lo |= DMA_CHX_CTL_DMS(config->dms);
    3104:	1b04      	addi      	r3, sp, 16
    3106:	9360      	ld.w      	r3, (r3, 0x0)
    3108:	9363      	ld.w      	r3, (r3, 0xc)
    310a:	4322      	lsli      	r1, r3, 2
    310c:	1b06      	addi      	r3, sp, 24
    310e:	1a06      	addi      	r2, sp, 24
    3110:	9240      	ld.w      	r2, (r2, 0x0)
    3112:	6c84      	or      	r2, r1
    3114:	b340      	st.w      	r2, (r3, 0x0)
	ctl_lo |= DMA_CHX_CTL_SING(config->src_addr_mode);
    3116:	1b04      	addi      	r3, sp, 16
    3118:	9360      	ld.w      	r3, (r3, 0x0)
    311a:	9367      	ld.w      	r3, (r3, 0x1c)
    311c:	4324      	lsli      	r1, r3, 4
    311e:	1b06      	addi      	r3, sp, 24
    3120:	1a06      	addi      	r2, sp, 24
    3122:	9240      	ld.w      	r2, (r2, 0x0)
    3124:	6c84      	or      	r2, r1
    3126:	b340      	st.w      	r2, (r3, 0x0)
	ctl_lo |= DMA_CHX_CTL_DING(config->dst_addr_mode);
    3128:	1b04      	addi      	r3, sp, 16
    312a:	9360      	ld.w      	r3, (r3, 0x0)
    312c:	9368      	ld.w      	r3, (r3, 0x20)
    312e:	4326      	lsli      	r1, r3, 6
    3130:	1b06      	addi      	r3, sp, 24
    3132:	1a06      	addi      	r2, sp, 24
    3134:	9240      	ld.w      	r2, (r2, 0x0)
    3136:	6c84      	or      	r2, r1
    3138:	b340      	st.w      	r2, (r3, 0x0)

	/* Already hardcoded 128bit, ignored */
	ctl_lo |= DMA_CHX_CTL_SRC_TR_WIDTH(DMA_CTL_TR_WIDTH_128);	/* src transfer width */
    313a:	1b06      	addi      	r3, sp, 24
    313c:	1a06      	addi      	r2, sp, 24
    313e:	9240      	ld.w      	r2, (r2, 0x0)
    3140:	3aaa      	bseti      	r2, 10
    3142:	b340      	st.w      	r2, (r3, 0x0)
	ctl_lo |= DMA_CHX_CTL_DST_TR_WIDTH(DMA_CTL_TR_WIDTH_128);	/* dst transfer width */
    3144:	1b06      	addi      	r3, sp, 24
    3146:	1a06      	addi      	r2, sp, 24
    3148:	9240      	ld.w      	r2, (r2, 0x0)
    314a:	3aad      	bseti      	r2, 13
    314c:	b340      	st.w      	r2, (r3, 0x0)
	 * the total size is 0x200 2048bit
	 * so 2048 = 128 * 16
	 * SRC_TR_WIDTH = 128
	 * MSIZE = 16
	 *  */
	ctl_lo |= DMA_CHX_CTL_SRC_MSIZE(DMA_CTL_BURST_LENGTH_16);	/* src burst transaction length */
    314e:	1b06      	addi      	r3, sp, 24
    3150:	1a06      	addi      	r2, sp, 24
    3152:	9240      	ld.w      	r2, (r2, 0x0)
    3154:	ec42c000 	ori      	r2, r2, 49152
    3158:	b340      	st.w      	r2, (r3, 0x0)
	ctl_lo |= DMA_CHX_CTL_DST_MSIZE(DMA_CTL_BURST_LENGTH_16);	/* dst burst transaction length */
    315a:	1b06      	addi      	r3, sp, 24
    315c:	1a06      	addi      	r2, sp, 24
    315e:	9240      	ld.w      	r2, (r2, 0x0)
    3160:	3ab2      	bseti      	r2, 18
    3162:	3ab3      	bseti      	r2, 19
    3164:	b340      	st.w      	r2, (r3, 0x0)

	/* set chx CTL High */
	ctl_hi |= DMA_CHX_CTL_ARLEN_EN;								/* Src Burst Lenght Enable */
    3166:	1b05      	addi      	r3, sp, 20
    3168:	1a05      	addi      	r2, sp, 20
    316a:	9240      	ld.w      	r2, (r2, 0x0)
    316c:	3aa6      	bseti      	r2, 6
    316e:	b340      	st.w      	r2, (r3, 0x0)
	ctl_hi |= DMA_CHX_CTL_AWLEN_EN;								/* Dst Burst Lenght Enable */
    3170:	1b05      	addi      	r3, sp, 20
    3172:	1a05      	addi      	r2, sp, 20
    3174:	9240      	ld.w      	r2, (r2, 0x0)
    3176:	3aaf      	bseti      	r2, 15
    3178:	b340      	st.w      	r2, (r3, 0x0)

	/* Burst Length 1 for Single transaction
	 * Max Burst Length is 8
	 * */
	ctl_hi |= DMA_CHX_CTL_ARLEN(DMA_CTL_BURST_LENGTH_1);		/* Src Burst Lenght Size */
    317a:	1b05      	addi      	r3, sp, 20
    317c:	1a05      	addi      	r2, sp, 20
    317e:	9240      	ld.w      	r2, (r2, 0x0)
    3180:	b340      	st.w      	r2, (r3, 0x0)
	ctl_hi |= DMA_CHX_CTL_AWLEN(DMA_CTL_BURST_LENGTH_1);		/* Dst Burst Lenght Size */
    3182:	1b05      	addi      	r3, sp, 20
    3184:	1a05      	addi      	r2, sp, 20
    3186:	9240      	ld.w      	r2, (r2, 0x0)
    3188:	b340      	st.w      	r2, (r3, 0x0)
	ctl_hi |= DMA_CHX_CTL_SRC_STAT_EN;
    318a:	1b05      	addi      	r3, sp, 20
    318c:	1a05      	addi      	r2, sp, 20
    318e:	9240      	ld.w      	r2, (r2, 0x0)
    3190:	3ab8      	bseti      	r2, 24
    3192:	b340      	st.w      	r2, (r3, 0x0)
	ctl_hi |= DMA_CHX_CTL_DST_STAT_EN;
    3194:	1b05      	addi      	r3, sp, 20
    3196:	1a05      	addi      	r2, sp, 20
    3198:	9240      	ld.w      	r2, (r2, 0x0)
    319a:	3ab9      	bseti      	r2, 25
    319c:	b340      	st.w      	r2, (r3, 0x0)

    period = 1;
    319e:	1b02      	addi      	r3, sp, 8
    31a0:	3201      	movi      	r2, 1      	//0x1
    31a2:	b340      	st.w      	r2, (r3, 0x0)
    config->lli = lli;
    31a4:	1b04      	addi      	r3, sp, 16
    31a6:	9360      	ld.w      	r3, (r3, 0x0)
    31a8:	1052      	lrw      	r2, 0x13900	//13900 <lli>
    31aa:	b34c      	st.w      	r2, (r3, 0x30)

    for(i=0; i<period; i++){
    31ac:	1b09      	addi      	r3, sp, 36
    31ae:	3200      	movi      	r2, 0      	//0x0
    31b0:	b340      	st.w      	r2, (r3, 0x0)
    31b2:	0460      	br      	0x3272	//3272 <dma_singal_prepare_lli_1+0x262>
    31b4:	000024d8 	.long	0x000024d8
    31b8:	00010198 	.long	0x00010198
    31bc:	0000e950 	.long	0x0000e950
    31c0:	000101ac 	.long	0x000101ac
    31c4:	000101c0 	.long	0x000101c0
    31c8:	00002778 	.long	0x00002778
    31cc:	00002730 	.long	0x00002730
    31d0:	00002da0 	.long	0x00002da0
    31d4:	00002d38 	.long	0x00002d38
    31d8:	000023e8 	.long	0x000023e8
    31dc:	0000231c 	.long	0x0000231c
    31e0:	00001a78 	.long	0x00001a78
    31e4:	000065f8 	.long	0x000065f8
    31e8:	00002a1c 	.long	0x00002a1c
    31ec:	00002a84 	.long	0x00002a84
    31f0:	00013900 	.long	0x00013900
        lli[i].block_ts = config->data_size;
    31f4:	1b04      	addi      	r3, sp, 16
    31f6:	9360      	ld.w      	r3, (r3, 0x0)
    31f8:	9344      	ld.w      	r2, (r3, 0x10)
    31fa:	130d      	lrw      	r0, 0x13900	//13900 <lli>
    31fc:	1b09      	addi      	r3, sp, 36
    31fe:	9320      	ld.w      	r1, (r3, 0x0)
    3200:	3310      	movi      	r3, 16      	//0x10
    3202:	4126      	lsli      	r1, r1, 6
    3204:	5824      	addu      	r1, r0, r1
    3206:	596c      	addu      	r3, r1, r3
    3208:	b340      	st.w      	r2, (r3, 0x0)

        switch (config->dir) {
    320a:	1b04      	addi      	r3, sp, 16
    320c:	9360      	ld.w      	r3, (r3, 0x0)
    320e:	9361      	ld.w      	r3, (r3, 0x4)
    3210:	e923002b 	bnez      	r3, 0x3266	//3266 <dma_singal_prepare_lli_1+0x256>
            case DMA_MEM_TO_MEM:
                            lli[i].sar = config->src_addr;
    3214:	1b04      	addi      	r3, sp, 16
    3216:	9360      	ld.w      	r3, (r3, 0x0)
    3218:	9325      	ld.w      	r1, (r3, 0x14)
    321a:	1365      	lrw      	r3, 0x13900	//13900 <lli>
    321c:	1a09      	addi      	r2, sp, 36
    321e:	9240      	ld.w      	r2, (r2, 0x0)
    3220:	4246      	lsli      	r2, r2, 6
    3222:	d4620821 	str.w      	r1, (r2, r3<<0)
                            lli[i].dar = config->dst_addr;
    3226:	1b04      	addi      	r3, sp, 16
    3228:	9360      	ld.w      	r3, (r3, 0x0)
    322a:	9346      	ld.w      	r2, (r3, 0x18)
    322c:	1300      	lrw      	r0, 0x13900	//13900 <lli>
    322e:	1b09      	addi      	r3, sp, 36
    3230:	9320      	ld.w      	r1, (r3, 0x0)
    3232:	3308      	movi      	r3, 8      	//0x8
    3234:	4126      	lsli      	r1, r1, 6
    3236:	5824      	addu      	r1, r0, r1
    3238:	596c      	addu      	r3, r1, r3
    323a:	b340      	st.w      	r2, (r3, 0x0)
                            lli[i].ctl_lo = ctl_lo;
    323c:	123c      	lrw      	r1, 0x13900	//13900 <lli>
    323e:	1b09      	addi      	r3, sp, 36
    3240:	9340      	ld.w      	r2, (r3, 0x0)
    3242:	3320      	movi      	r3, 32      	//0x20
    3244:	4246      	lsli      	r2, r2, 6
    3246:	5948      	addu      	r2, r1, r2
    3248:	5a6c      	addu      	r3, r2, r3
    324a:	1a06      	addi      	r2, sp, 24
    324c:	9240      	ld.w      	r2, (r2, 0x0)
    324e:	b340      	st.w      	r2, (r3, 0x0)
                            lli[i].ctl_hi = ctl_hi;
    3250:	1237      	lrw      	r1, 0x13900	//13900 <lli>
    3252:	1b09      	addi      	r3, sp, 36
    3254:	9340      	ld.w      	r2, (r3, 0x0)
    3256:	3324      	movi      	r3, 36      	//0x24
    3258:	4246      	lsli      	r2, r2, 6
    325a:	5948      	addu      	r2, r1, r2
    325c:	5a6c      	addu      	r3, r2, r3
    325e:	1a05      	addi      	r2, sp, 20
    3260:	9240      	ld.w      	r2, (r2, 0x0)
    3262:	b340      	st.w      	r2, (r3, 0x0)
                            break;
    3264:	0402      	br      	0x3268	//3268 <dma_singal_prepare_lli_1+0x258>
            default:
                break;
    3266:	6c00      	or      	r0, r0
	ctl_hi |= DMA_CHX_CTL_DST_STAT_EN;

    period = 1;
    config->lli = lli;

    for(i=0; i<period; i++){
    3268:	1b09      	addi      	r3, sp, 36
    326a:	1a09      	addi      	r2, sp, 36
    326c:	9240      	ld.w      	r2, (r2, 0x0)
    326e:	2200      	addi      	r2, 1      	//0x1
    3270:	b340      	st.w      	r2, (r3, 0x0)
    3272:	1a09      	addi      	r2, sp, 36
    3274:	1b02      	addi      	r3, sp, 8
    3276:	9240      	ld.w      	r2, (r2, 0x0)
    3278:	9360      	ld.w      	r3, (r3, 0x0)
    327a:	64c8      	cmphs      	r2, r3
    327c:	0fbc      	bf      	0x31f4	//31f4 <dma_singal_prepare_lli_1+0x1e4>
                            break;
            default:
                break;
        }
    }
	return 0;
    327e:	3300      	movi      	r3, 0      	//0x0
}
    3280:	6c0f      	mov      	r0, r3
    3282:	140a      	addi      	sp, sp, 40
    3284:	1490      	pop      	r15
	...

00003288 <dma_singal_start_1>:

Bit32u dma_singal_start_1(struct dw_dma* dma,Bit8u chanid)
{
    3288:	14d0      	push      	r15
    328a:	1422      	subi      	sp, sp, 8
    328c:	1b01      	addi      	r3, sp, 4
    328e:	b300      	st.w      	r0, (r3, 0x0)
    3290:	6c87      	mov      	r2, r1
    3292:	6cfb      	mov      	r3, sp
    3294:	a340      	st.b      	r2, (r3, 0x0)
	//Bit32u temp;
	/*First Block */
	dma_chx_sar_write(dma->chan_reg[chanid], dma->config[chanid].lli->sar);
    3296:	6cfb      	mov      	r3, sp
    3298:	8360      	ld.b      	r3, (r3, 0x0)
    329a:	748c      	zextb      	r2, r3
    329c:	1b01      	addi      	r3, sp, 4
    329e:	9360      	ld.w      	r3, (r3, 0x0)
    32a0:	2200      	addi      	r2, 1      	//0x1
    32a2:	d0430882 	ldr.w      	r2, (r3, r2<<2)
    32a6:	6cfb      	mov      	r3, sp
    32a8:	8360      	ld.b      	r3, (r3, 0x0)
    32aa:	740c      	zextb      	r0, r3
    32ac:	1b01      	addi      	r3, sp, 4
    32ae:	9320      	ld.w      	r1, (r3, 0x0)
    32b0:	3334      	movi      	r3, 52      	//0x34
    32b2:	7cc0      	mult      	r3, r0
    32b4:	596c      	addu      	r3, r1, r3
    32b6:	2353      	addi      	r3, 84      	//0x54
    32b8:	9360      	ld.w      	r3, (r3, 0x0)
    32ba:	9360      	ld.w      	r3, (r3, 0x0)
    32bc:	6c0b      	mov      	r0, r2
    32be:	6c4f      	mov      	r1, r3
    32c0:	e3fffac8 	bsr      	0x2850	//2850 <dma_chx_sar_write>
    32c4:	c4004820 	lsli      	r0, r0, 0
	dma_chx_dar_write(dma->chan_reg[chanid], dma->config[chanid].lli->dar);
    32c8:	6cfb      	mov      	r3, sp
    32ca:	8360      	ld.b      	r3, (r3, 0x0)
    32cc:	748c      	zextb      	r2, r3
    32ce:	1b01      	addi      	r3, sp, 4
    32d0:	9360      	ld.w      	r3, (r3, 0x0)
    32d2:	2200      	addi      	r2, 1      	//0x1
    32d4:	d0430882 	ldr.w      	r2, (r3, r2<<2)
    32d8:	6cfb      	mov      	r3, sp
    32da:	8360      	ld.b      	r3, (r3, 0x0)
    32dc:	740c      	zextb      	r0, r3
    32de:	1b01      	addi      	r3, sp, 4
    32e0:	9320      	ld.w      	r1, (r3, 0x0)
    32e2:	3334      	movi      	r3, 52      	//0x34
    32e4:	7cc0      	mult      	r3, r0
    32e6:	596c      	addu      	r3, r1, r3
    32e8:	2353      	addi      	r3, 84      	//0x54
    32ea:	9360      	ld.w      	r3, (r3, 0x0)
    32ec:	9362      	ld.w      	r3, (r3, 0x8)
    32ee:	6c0b      	mov      	r0, r2
    32f0:	6c4f      	mov      	r1, r3
    32f2:	e3fffad1 	bsr      	0x2894	//2894 <dma_chx_dar_write>
    32f6:	c4004820 	lsli      	r0, r0, 0
	dma_chx_ctl_lo_direct_write(dma->chan_reg[chanid], dma->config[chanid].lli->ctl_lo);
    32fa:	6cfb      	mov      	r3, sp
    32fc:	8360      	ld.b      	r3, (r3, 0x0)
    32fe:	748c      	zextb      	r2, r3
    3300:	1b01      	addi      	r3, sp, 4
    3302:	9360      	ld.w      	r3, (r3, 0x0)
    3304:	2200      	addi      	r2, 1      	//0x1
    3306:	d0430882 	ldr.w      	r2, (r3, r2<<2)
    330a:	6cfb      	mov      	r3, sp
    330c:	8360      	ld.b      	r3, (r3, 0x0)
    330e:	740c      	zextb      	r0, r3
    3310:	1b01      	addi      	r3, sp, 4
    3312:	9320      	ld.w      	r1, (r3, 0x0)
    3314:	3334      	movi      	r3, 52      	//0x34
    3316:	7cc0      	mult      	r3, r0
    3318:	596c      	addu      	r3, r1, r3
    331a:	2353      	addi      	r3, 84      	//0x54
    331c:	9360      	ld.w      	r3, (r3, 0x0)
    331e:	9368      	ld.w      	r3, (r3, 0x20)
    3320:	6c0b      	mov      	r0, r2
    3322:	6c4f      	mov      	r1, r3
    3324:	e3fffb0e 	bsr      	0x2940	//2940 <dma_chx_ctl_lo_direct_write>
    3328:	c4004820 	lsli      	r0, r0, 0
	dma_chx_ctl_hi_direct_write(dma->chan_reg[chanid], dma->config[chanid].lli->ctl_hi);
    332c:	6cfb      	mov      	r3, sp
    332e:	8360      	ld.b      	r3, (r3, 0x0)
    3330:	748c      	zextb      	r2, r3
    3332:	1b01      	addi      	r3, sp, 4
    3334:	9360      	ld.w      	r3, (r3, 0x0)
    3336:	2200      	addi      	r2, 1      	//0x1
    3338:	d0430882 	ldr.w      	r2, (r3, r2<<2)
    333c:	6cfb      	mov      	r3, sp
    333e:	8360      	ld.b      	r3, (r3, 0x0)
    3340:	740c      	zextb      	r0, r3
    3342:	1b01      	addi      	r3, sp, 4
    3344:	9320      	ld.w      	r1, (r3, 0x0)
    3346:	3334      	movi      	r3, 52      	//0x34
    3348:	7cc0      	mult      	r3, r0
    334a:	596c      	addu      	r3, r1, r3
    334c:	2353      	addi      	r3, 84      	//0x54
    334e:	9360      	ld.w      	r3, (r3, 0x0)
    3350:	9369      	ld.w      	r3, (r3, 0x24)
    3352:	6c0b      	mov      	r0, r2
    3354:	6c4f      	mov      	r1, r3
    3356:	e3fffb2f 	bsr      	0x29b4	//29b4 <dma_chx_ctl_hi_direct_write>
    335a:	c4004820 	lsli      	r0, r0, 0

	//dma_chx_block_ts_write(dma->chan_reg, dma->config.lli->block_ts/128);
	dma_chx_block_ts_write(dma->chan_reg[chanid], 0x40);
    335e:	6cfb      	mov      	r3, sp
    3360:	8360      	ld.b      	r3, (r3, 0x0)
    3362:	748c      	zextb      	r2, r3
    3364:	1b01      	addi      	r3, sp, 4
    3366:	9360      	ld.w      	r3, (r3, 0x0)
    3368:	2200      	addi      	r2, 1      	//0x1
    336a:	d0430883 	ldr.w      	r3, (r3, r2<<2)
    336e:	6c0f      	mov      	r0, r3
    3370:	3140      	movi      	r1, 64      	//0x40
    3372:	e3fffab3 	bsr      	0x28d8	//28d8 <dma_chx_block_ts_write>
    3376:	c4004820 	lsli      	r0, r0, 0

	/* enable channel*/
	dma_ch_enable(dma->common_reg, dma->config[chanid].channel);
    337a:	1b01      	addi      	r3, sp, 4
    337c:	9360      	ld.w      	r3, (r3, 0x0)
    337e:	9340      	ld.w      	r2, (r3, 0x0)
    3380:	6cfb      	mov      	r3, sp
    3382:	8360      	ld.b      	r3, (r3, 0x0)
    3384:	740c      	zextb      	r0, r3
    3386:	1b01      	addi      	r3, sp, 4
    3388:	9320      	ld.w      	r1, (r3, 0x0)
    338a:	3334      	movi      	r3, 52      	//0x34
    338c:	7cc0      	mult      	r3, r0
    338e:	596c      	addu      	r3, r1, r3
    3390:	2323      	addi      	r3, 36      	//0x24
    3392:	9360      	ld.w      	r3, (r3, 0x0)
    3394:	74cc      	zextb      	r3, r3
    3396:	6c0b      	mov      	r0, r2
    3398:	6c4f      	mov      	r1, r3
    339a:	e3fff839 	bsr      	0x240c	//240c <dma_ch_enable>
    339e:	c4004820 	lsli      	r0, r0, 0
	//temp=dma->common_reg->ChEn_LO;
	//printf("channel enable status:%x\n",temp);

	return 0;
    33a2:	3300      	movi      	r3, 0      	//0x0
}
    33a4:	6c0f      	mov      	r0, r3
    33a6:	1402      	addi      	sp, sp, 8
    33a8:	1490      	pop      	r15
    33aa:	0000      	.short	0x0000
    33ac:	00013900 	.long	0x00013900
    33b0:	00002850 	.long	0x00002850
    33b4:	00002894 	.long	0x00002894
    33b8:	00002940 	.long	0x00002940
    33bc:	000029b4 	.long	0x000029b4
    33c0:	000028d8 	.long	0x000028d8
    33c4:	0000240c 	.long	0x0000240c

000033c8 <dma_singal_stop_1>:

Bit32u dma_singal_stop_1(struct dw_dma* dma,Bit8u chanid){
    33c8:	14d0      	push      	r15
    33ca:	1422      	subi      	sp, sp, 8
    33cc:	1b01      	addi      	r3, sp, 4
    33ce:	b300      	st.w      	r0, (r3, 0x0)
    33d0:	6c87      	mov      	r2, r1
    33d2:	6cfb      	mov      	r3, sp
    33d4:	a340      	st.b      	r2, (r3, 0x0)
	dma_ch_disable(dma->common_reg, dma->config[chanid].channel);
    33d6:	1b01      	addi      	r3, sp, 4
    33d8:	9360      	ld.w      	r3, (r3, 0x0)
    33da:	9340      	ld.w      	r2, (r3, 0x0)
    33dc:	6cfb      	mov      	r3, sp
    33de:	8360      	ld.b      	r3, (r3, 0x0)
    33e0:	740c      	zextb      	r0, r3
    33e2:	1b01      	addi      	r3, sp, 4
    33e4:	9320      	ld.w      	r1, (r3, 0x0)
    33e6:	3334      	movi      	r3, 52      	//0x34
    33e8:	7cc0      	mult      	r3, r0
    33ea:	596c      	addu      	r3, r1, r3
    33ec:	2323      	addi      	r3, 36      	//0x24
    33ee:	9360      	ld.w      	r3, (r3, 0x0)
    33f0:	74cc      	zextb      	r3, r3
    33f2:	6c0b      	mov      	r0, r2
    33f4:	6c4f      	mov      	r1, r3
    33f6:	e3fff835 	bsr      	0x2460	//2460 <dma_ch_disable>
    33fa:	c4004820 	lsli      	r0, r0, 0
	return 0;
    33fe:	3300      	movi      	r3, 0      	//0x0
}
    3400:	6c0f      	mov      	r0, r3
    3402:	1402      	addi      	sp, sp, 8
    3404:	1490      	pop      	r15
    3406:	0000      	.short	0x0000
    3408:	00002460 	.long	0x00002460

0000340c <test_dma_singal_allchan>:

int test_dma_singal_allchan(Bit8u testnum)
{
    340c:	14d1      	push      	r4, r15
    340e:	142b      	subi      	sp, sp, 44
    3410:	6c83      	mov      	r2, r0
    3412:	6cfb      	mov      	r3, sp
    3414:	a340      	st.b      	r2, (r3, 0x0)
	struct dma_chx_config_t* config;
	Bit32u val;
	Bit32u* srcaddr = (Bit32u*)0x200000;
    3416:	1a05      	addi      	r2, sp, 20
    3418:	3380      	movi      	r3, 128      	//0x80
    341a:	436e      	lsli      	r3, r3, 14
    341c:	b260      	st.w      	r3, (r2, 0x0)
	Bit32u* dstaddr = (Bit32u*)0x210000;
    341e:	1a04      	addi      	r2, sp, 16
    3420:	3384      	movi      	r3, 132      	//0x84
    3422:	436e      	lsli      	r3, r3, 14
    3424:	b260      	st.w      	r3, (r2, 0x0)
	Bit8u i,temp;
	Bit32u j;
	Bit32u* psrcaddr, *pdstaddr;
	Bit32u transfernum=0x200;
    3426:	1a03      	addi      	r2, sp, 12
    3428:	3380      	movi      	r3, 128      	//0x80
    342a:	4362      	lsli      	r3, r3, 2
    342c:	b260      	st.w      	r3, (r2, 0x0)

	printf("dma signal test begins.\n");
    342e:	ea80009b 	lrw      	r0, 0x101d8	//101d8 <__etext+0x628>
    3432:	e0005a8f 	bsr      	0xe950	//e950 <printf>
    3436:	c4004820 	lsli      	r0, r0, 0
	val = dma_singal_init();
    343a:	1c02      	addi      	r4, sp, 8
    343c:	e3fffcf0 	bsr      	0x2e1c	//2e1c <dma_singal_init>
    3440:	c4004820 	lsli      	r0, r0, 0
    3444:	b400      	st.w      	r0, (r4, 0x0)
		printf("dma init error.\n");
		return -1;
	}

	//for(i=1;i<=8;i++)
	for(i=1;i<(testnum+1);i++)
    3446:	e46e0026 	addi      	r3, sp, 39      	//0x27
    344a:	3201      	movi      	r2, 1      	//0x1
    344c:	a340      	st.b      	r2, (r3, 0x0)
    344e:	0573      	br      	0x3734	//3734 <test_dma_singal_allchan+0x328>
	{
	    psrcaddr = srcaddr;
    3450:	1b07      	addi      	r3, sp, 28
    3452:	1a05      	addi      	r2, sp, 20
    3454:	9240      	ld.w      	r2, (r2, 0x0)
    3456:	b340      	st.w      	r2, (r3, 0x0)
	    pdstaddr = dstaddr;
    3458:	1b06      	addi      	r3, sp, 24
    345a:	1a04      	addi      	r2, sp, 16
    345c:	9240      	ld.w      	r2, (r2, 0x0)
    345e:	b340      	st.w      	r2, (r3, 0x0)
	    for(j=0; j<transfernum; j+=4)
    3460:	1b08      	addi      	r3, sp, 32
    3462:	3200      	movi      	r2, 0      	//0x0
    3464:	b340      	st.w      	r2, (r3, 0x0)
    3466:	0419      	br      	0x3498	//3498 <test_dma_singal_allchan+0x8c>
	    {
			*psrcaddr++ = j;
    3468:	1b07      	addi      	r3, sp, 28
    346a:	9360      	ld.w      	r3, (r3, 0x0)
    346c:	1a08      	addi      	r2, sp, 32
    346e:	9240      	ld.w      	r2, (r2, 0x0)
    3470:	b340      	st.w      	r2, (r3, 0x0)
    3472:	1b07      	addi      	r3, sp, 28
    3474:	1a07      	addi      	r2, sp, 28
    3476:	9240      	ld.w      	r2, (r2, 0x0)
    3478:	2203      	addi      	r2, 4      	//0x4
    347a:	b340      	st.w      	r2, (r3, 0x0)
			*pdstaddr++ = 0;
    347c:	1b06      	addi      	r3, sp, 24
    347e:	9360      	ld.w      	r3, (r3, 0x0)
    3480:	3200      	movi      	r2, 0      	//0x0
    3482:	b340      	st.w      	r2, (r3, 0x0)
    3484:	1b06      	addi      	r3, sp, 24
    3486:	1a06      	addi      	r2, sp, 24
    3488:	9240      	ld.w      	r2, (r2, 0x0)
    348a:	2203      	addi      	r2, 4      	//0x4
    348c:	b340      	st.w      	r2, (r3, 0x0)
	//for(i=1;i<=8;i++)
	for(i=1;i<(testnum+1);i++)
	{
	    psrcaddr = srcaddr;
	    pdstaddr = dstaddr;
	    for(j=0; j<transfernum; j+=4)
    348e:	1b08      	addi      	r3, sp, 32
    3490:	1a08      	addi      	r2, sp, 32
    3492:	9240      	ld.w      	r2, (r2, 0x0)
    3494:	2203      	addi      	r2, 4      	//0x4
    3496:	b340      	st.w      	r2, (r3, 0x0)
    3498:	1a08      	addi      	r2, sp, 32
    349a:	1b03      	addi      	r3, sp, 12
    349c:	9240      	ld.w      	r2, (r2, 0x0)
    349e:	9360      	ld.w      	r3, (r3, 0x0)
    34a0:	64c8      	cmphs      	r2, r3
    34a2:	0fe3      	bf      	0x3468	//3468 <test_dma_singal_allchan+0x5c>
			*psrcaddr++ = j;
			*pdstaddr++ = 0;
		}

		/*channel1~8 is free?*/
		temp=dma_channel_free_query(&dma,i);
    34a4:	e46e0026 	addi      	r3, sp, 39      	//0x27
    34a8:	8360      	ld.b      	r3, (r3, 0x0)
    34aa:	74cc      	zextb      	r3, r3
    34ac:	e48e0006 	addi      	r4, sp, 7      	//0x7
    34b0:	131d      	lrw      	r0, 0x13700	//13700 <dma>
    34b2:	6c4f      	mov      	r1, r3
    34b4:	e3fffd1a 	bsr      	0x2ee8	//2ee8 <dma_channel_free_query>
    34b8:	c4004820 	lsli      	r0, r0, 0
    34bc:	6cc3      	mov      	r3, r0
    34be:	a460      	st.b      	r3, (r4, 0x0)
		if(!temp)
    34c0:	e46e0006 	addi      	r3, sp, 7      	//0x7
    34c4:	8360      	ld.b      	r3, (r3, 0x0)
    34c6:	74cc      	zextb      	r3, r3
    34c8:	e92300cf 	bnez      	r3, 0x3666	//3666 <test_dma_singal_allchan+0x25a>
		{
			channelid=i-1;
    34cc:	e46e0026 	addi      	r3, sp, 39      	//0x27
    34d0:	8360      	ld.b      	r3, (r3, 0x0)
    34d2:	2b00      	subi      	r3, 1      	//0x1
    34d4:	748c      	zextb      	r2, r3
    34d6:	1376      	lrw      	r3, 0x134cc	//134cc <channelid>
    34d8:	a340      	st.b      	r2, (r3, 0x0)
			config = &dma.config[channelid];
    34da:	1375      	lrw      	r3, 0x134cc	//134cc <channelid>
    34dc:	8360      	ld.b      	r3, (r3, 0x0)
    34de:	74cc      	zextb      	r3, r3
    34e0:	6c8f      	mov      	r2, r3
    34e2:	3334      	movi      	r3, 52      	//0x34
    34e4:	c4628421 	mult      	r1, r2, r3
    34e8:	1b0a      	addi      	r3, sp, 40
    34ea:	1352      	lrw      	r2, 0x13724	//13724 <dma+0x24>
    34ec:	5948      	addu      	r2, r1, r2
    34ee:	b340      	st.w      	r2, (r3, 0x0)
			config->dir = DMA_MEM_TO_MEM;
    34f0:	1b0a      	addi      	r3, sp, 40
    34f2:	9360      	ld.w      	r3, (r3, 0x0)
    34f4:	3200      	movi      	r2, 0      	//0x0
    34f6:	b341      	st.w      	r2, (r3, 0x4)
			config->data_size = transfernum;			/* total size to be transfer */
    34f8:	1b0a      	addi      	r3, sp, 40
    34fa:	9360      	ld.w      	r3, (r3, 0x0)
    34fc:	1a03      	addi      	r2, sp, 12
    34fe:	9240      	ld.w      	r2, (r2, 0x0)
    3500:	b344      	st.w      	r2, (r3, 0x10)
			config->sms = DMX_AXI_MASTER_1;
    3502:	1b0a      	addi      	r3, sp, 40
    3504:	9360      	ld.w      	r3, (r3, 0x0)
    3506:	3200      	movi      	r2, 0      	//0x0
    3508:	b342      	st.w      	r2, (r3, 0x8)
			config->dms = DMX_AXI_MASTER_2;
    350a:	1b0a      	addi      	r3, sp, 40
    350c:	9360      	ld.w      	r3, (r3, 0x0)
    350e:	3201      	movi      	r2, 1      	//0x1
    3510:	b343      	st.w      	r2, (r3, 0xc)
			config->src_addr = (Bit32u)(srcaddr)+0x600000;
    3512:	1b05      	addi      	r3, sp, 20
    3514:	9360      	ld.w      	r3, (r3, 0x0)
    3516:	31c0      	movi      	r1, 192      	//0xc0
    3518:	412f      	lsli      	r1, r1, 15
    351a:	5b44      	addu      	r2, r3, r1
    351c:	1b0a      	addi      	r3, sp, 40
    351e:	9360      	ld.w      	r3, (r3, 0x0)
    3520:	b345      	st.w      	r2, (r3, 0x14)
			config->dst_addr = (Bit32u)(dstaddr)+0x600000;
    3522:	1b04      	addi      	r3, sp, 16
    3524:	9360      	ld.w      	r3, (r3, 0x0)
    3526:	31c0      	movi      	r1, 192      	//0xc0
    3528:	412f      	lsli      	r1, r1, 15
    352a:	5b44      	addu      	r2, r3, r1
    352c:	1b0a      	addi      	r3, sp, 40
    352e:	9360      	ld.w      	r3, (r3, 0x0)
    3530:	b346      	st.w      	r2, (r3, 0x18)
			config->src_addr_mode = DMA_ADDR_INC;
    3532:	1b0a      	addi      	r3, sp, 40
    3534:	9360      	ld.w      	r3, (r3, 0x0)
    3536:	3200      	movi      	r2, 0      	//0x0
    3538:	b347      	st.w      	r2, (r3, 0x1c)
			config->dst_addr_mode = DMA_ADDR_INC;
    353a:	1b0a      	addi      	r3, sp, 40
    353c:	9360      	ld.w      	r3, (r3, 0x0)
    353e:	3200      	movi      	r2, 0      	//0x0
    3540:	b348      	st.w      	r2, (r3, 0x20)
			config->trf_type = DMA_CFG_MEM2MEM_WITH_DMA_CTRL;
    3542:	1b0a      	addi      	r3, sp, 40
    3544:	9360      	ld.w      	r3, (r3, 0x0)
    3546:	3200      	movi      	r2, 0      	//0x0
    3548:	b349      	st.w      	r2, (r3, 0x24)
			config->src_trf_mode = DMA_SINGLE_BLOCK;
    354a:	1b0a      	addi      	r3, sp, 40
    354c:	9360      	ld.w      	r3, (r3, 0x0)
    354e:	3200      	movi      	r2, 0      	//0x0
    3550:	b34a      	st.w      	r2, (r3, 0x28)
			config->dst_trf_mode = DMA_SINGLE_BLOCK;
    3552:	1b0a      	addi      	r3, sp, 40
    3554:	9360      	ld.w      	r3, (r3, 0x0)
    3556:	3200      	movi      	r2, 0      	//0x0
    3558:	b34b      	st.w      	r2, (r3, 0x2c)

			dma_singal_prepare_lli_1(&dma,channelid);
    355a:	1275      	lrw      	r3, 0x134cc	//134cc <channelid>
    355c:	8360      	ld.b      	r3, (r3, 0x0)
    355e:	74cc      	zextb      	r3, r3
    3560:	1211      	lrw      	r0, 0x13700	//13700 <dma>
    3562:	6c4f      	mov      	r1, r3
    3564:	e3fffd56 	bsr      	0x3010	//3010 <dma_singal_prepare_lli_1>
    3568:	c4004820 	lsli      	r0, r0, 0
			dma_intc_init_1(&dma,channelid);
    356c:	1270      	lrw      	r3, 0x134cc	//134cc <channelid>
    356e:	8360      	ld.b      	r3, (r3, 0x0)
    3570:	74cc      	zextb      	r3, r3
    3572:	120d      	lrw      	r0, 0x13700	//13700 <dma>
    3574:	6c4f      	mov      	r1, r3
    3576:	e3fffcf9 	bsr      	0x2f68	//2f68 <dma_intc_init_1>
    357a:	c4004820 	lsli      	r0, r0, 0
			dma_singal_start_1(&dma,channelid);
    357e:	126c      	lrw      	r3, 0x134cc	//134cc <channelid>
    3580:	8360      	ld.b      	r3, (r3, 0x0)
    3582:	74cc      	zextb      	r3, r3
    3584:	1208      	lrw      	r0, 0x13700	//13700 <dma>
    3586:	6c4f      	mov      	r1, r3
    3588:	e3fffe80 	bsr      	0x3288	//3288 <dma_singal_start_1>
    358c:	c4004820 	lsli      	r0, r0, 0
			while(!dma_chx_compled_blk_transfer_size_read(dma.chan_reg[channelid]));
    3590:	6c00      	or      	r0, r0
    3592:	1267      	lrw      	r3, 0x134cc	//134cc <channelid>
    3594:	8360      	ld.b      	r3, (r3, 0x0)
    3596:	74cc      	zextb      	r3, r3
    3598:	6c8f      	mov      	r2, r3
    359a:	1263      	lrw      	r3, 0x13700	//13700 <dma>
    359c:	2200      	addi      	r2, 1      	//0x1
    359e:	d0430883 	ldr.w      	r3, (r3, r2<<2)
    35a2:	6c0f      	mov      	r0, r3
    35a4:	e3fffaa4 	bsr      	0x2aec	//2aec <dma_chx_compled_blk_transfer_size_read>
    35a8:	c4004820 	lsli      	r0, r0, 0
    35ac:	6cc3      	mov      	r3, r0
    35ae:	e903fff2 	bez      	r3, 0x3592	//3592 <test_dma_singal_allchan+0x186>
			while(dma_chx_compled_blk_transfer_size_read(dma.chan_reg[channelid]) < dma_chx_block_ts_read(dma.chan_reg[channelid]))
    35b2:	0424      	br      	0x35fa	//35fa <test_dma_singal_allchan+0x1ee>
				printf("transfer size:%x completed size:%x\n", dma_chx_block_ts_read(dma.chan_reg[channelid]),
    35b4:	117e      	lrw      	r3, 0x134cc	//134cc <channelid>
    35b6:	8360      	ld.b      	r3, (r3, 0x0)
    35b8:	74cc      	zextb      	r3, r3
    35ba:	6c8f      	mov      	r2, r3
    35bc:	117a      	lrw      	r3, 0x13700	//13700 <dma>
    35be:	2200      	addi      	r2, 1      	//0x1
    35c0:	d0430883 	ldr.w      	r3, (r3, r2<<2)
    35c4:	6c0f      	mov      	r0, r3
    35c6:	e3fff979 	bsr      	0x28b8	//28b8 <dma_chx_block_ts_read>
    35ca:	c4004820 	lsli      	r0, r0, 0
    35ce:	6d03      	mov      	r4, r0
    35d0:	1177      	lrw      	r3, 0x134cc	//134cc <channelid>
    35d2:	8360      	ld.b      	r3, (r3, 0x0)
    35d4:	74cc      	zextb      	r3, r3
    35d6:	6c8f      	mov      	r2, r3
    35d8:	1173      	lrw      	r3, 0x13700	//13700 <dma>
    35da:	2200      	addi      	r2, 1      	//0x1
    35dc:	d0430883 	ldr.w      	r3, (r3, r2<<2)
    35e0:	6c0f      	mov      	r0, r3
    35e2:	e3fffa85 	bsr      	0x2aec	//2aec <dma_chx_compled_blk_transfer_size_read>
    35e6:	c4004820 	lsli      	r0, r0, 0
    35ea:	6cc3      	mov      	r3, r0
    35ec:	1117      	lrw      	r0, 0x101f4	//101f4 <__etext+0x644>
    35ee:	6c53      	mov      	r1, r4
    35f0:	6c8f      	mov      	r2, r3
    35f2:	e00059af 	bsr      	0xe950	//e950 <printf>
    35f6:	c4004820 	lsli      	r0, r0, 0

			dma_singal_prepare_lli_1(&dma,channelid);
			dma_intc_init_1(&dma,channelid);
			dma_singal_start_1(&dma,channelid);
			while(!dma_chx_compled_blk_transfer_size_read(dma.chan_reg[channelid]));
			while(dma_chx_compled_blk_transfer_size_read(dma.chan_reg[channelid]) < dma_chx_block_ts_read(dma.chan_reg[channelid]))
    35fa:	116d      	lrw      	r3, 0x134cc	//134cc <channelid>
    35fc:	8360      	ld.b      	r3, (r3, 0x0)
    35fe:	74cc      	zextb      	r3, r3
    3600:	6c8f      	mov      	r2, r3
    3602:	1169      	lrw      	r3, 0x13700	//13700 <dma>
    3604:	2200      	addi      	r2, 1      	//0x1
    3606:	d0430883 	ldr.w      	r3, (r3, r2<<2)
    360a:	6c0f      	mov      	r0, r3
    360c:	e3fffa70 	bsr      	0x2aec	//2aec <dma_chx_compled_blk_transfer_size_read>
    3610:	c4004820 	lsli      	r0, r0, 0
    3614:	6d03      	mov      	r4, r0
    3616:	1166      	lrw      	r3, 0x134cc	//134cc <channelid>
    3618:	8360      	ld.b      	r3, (r3, 0x0)
    361a:	74cc      	zextb      	r3, r3
    361c:	6c8f      	mov      	r2, r3
    361e:	1162      	lrw      	r3, 0x13700	//13700 <dma>
    3620:	2200      	addi      	r2, 1      	//0x1
    3622:	d0430883 	ldr.w      	r3, (r3, r2<<2)
    3626:	6c0f      	mov      	r0, r3
    3628:	e3fff948 	bsr      	0x28b8	//28b8 <dma_chx_block_ts_read>
    362c:	c4004820 	lsli      	r0, r0, 0
    3630:	6cc3      	mov      	r3, r0
    3632:	64d0      	cmphs      	r4, r3
    3634:	0fc0      	bf      	0x35b4	//35b4 <test_dma_singal_allchan+0x1a8>
				printf("transfer size:%x completed size:%x\n", dma_chx_block_ts_read(dma.chan_reg[channelid]),
						dma_chx_compled_blk_transfer_size_read(dma.chan_reg[channelid]));
			printf("Channel%d finished DMA transfer.\n",channelid+1);
    3636:	107e      	lrw      	r3, 0x134cc	//134cc <channelid>
    3638:	8360      	ld.b      	r3, (r3, 0x0)
    363a:	74cc      	zextb      	r3, r3
    363c:	2300      	addi      	r3, 1      	//0x1
    363e:	1104      	lrw      	r0, 0x10218	//10218 <__etext+0x668>
    3640:	6c4f      	mov      	r1, r3
    3642:	e0005987 	bsr      	0xe950	//e950 <printf>
    3646:	c4004820 	lsli      	r0, r0, 0
			dma_singal_stop_1(&dma,channelid);
    364a:	1079      	lrw      	r3, 0x134cc	//134cc <channelid>
    364c:	8360      	ld.b      	r3, (r3, 0x0)
    364e:	74cc      	zextb      	r3, r3
    3650:	1015      	lrw      	r0, 0x13700	//13700 <dma>
    3652:	6c4f      	mov      	r1, r3
    3654:	e3fffeba 	bsr      	0x33c8	//33c8 <dma_singal_stop_1>
    3658:	c4004820 	lsli      	r0, r0, 0
			CK_INTC_FreeIrq(CK_INTC_DMAC);
    365c:	3006      	movi      	r0, 6      	//0x6
    365e:	e000185d 	bsr      	0x6718	//6718 <CK_INTC_FreeIrq>
    3662:	c4004820 	lsli      	r0, r0, 0
		}
		psrcaddr = srcaddr;
    3666:	1b07      	addi      	r3, sp, 28
    3668:	1a05      	addi      	r2, sp, 20
    366a:	9240      	ld.w      	r2, (r2, 0x0)
    366c:	b340      	st.w      	r2, (r3, 0x0)
		pdstaddr = dstaddr;
    366e:	1b06      	addi      	r3, sp, 24
    3670:	1a04      	addi      	r2, sp, 16
    3672:	9240      	ld.w      	r2, (r2, 0x0)
    3674:	b340      	st.w      	r2, (r3, 0x0)
		printf("psrcaddr = %x, pdstaddr = %x, data_size = %x \n", psrcaddr, pdstaddr, config->data_size);
    3676:	1b0a      	addi      	r3, sp, 40
    3678:	9360      	ld.w      	r3, (r3, 0x0)
    367a:	9364      	ld.w      	r3, (r3, 0x10)
    367c:	1907      	addi      	r1, sp, 28
    367e:	1a06      	addi      	r2, sp, 24
    3680:	1016      	lrw      	r0, 0x1023c	//1023c <__etext+0x68c>
    3682:	9120      	ld.w      	r1, (r1, 0x0)
    3684:	9240      	ld.w      	r2, (r2, 0x0)
    3686:	e0005965 	bsr      	0xe950	//e950 <printf>
    368a:	c4004820 	lsli      	r0, r0, 0
		//printf("psrcaddr = %x, pdstaddr = %x, data_size = %x \n", psrcaddr, pdstaddr, &dma);
		for(j=0; j<config->data_size; j+=4)
    368e:	1b08      	addi      	r3, sp, 32
    3690:	3200      	movi      	r2, 0      	//0x0
    3692:	b340      	st.w      	r2, (r3, 0x0)
    3694:	0442      	br      	0x3718	//3718 <test_dma_singal_allchan+0x30c>
    3696:	0000      	.short	0x0000
    3698:	000101d8 	.long	0x000101d8
    369c:	0000e950 	.long	0x0000e950
    36a0:	00002e1c 	.long	0x00002e1c
    36a4:	00013700 	.long	0x00013700
    36a8:	00002ee8 	.long	0x00002ee8
    36ac:	000134cc 	.long	0x000134cc
    36b0:	00013724 	.long	0x00013724
    36b4:	00003010 	.long	0x00003010
    36b8:	00002f68 	.long	0x00002f68
    36bc:	00003288 	.long	0x00003288
    36c0:	00002aec 	.long	0x00002aec
    36c4:	000028b8 	.long	0x000028b8
    36c8:	000101f4 	.long	0x000101f4
    36cc:	00010218 	.long	0x00010218
    36d0:	000033c8 	.long	0x000033c8
    36d4:	00006718 	.long	0x00006718
    36d8:	0001023c 	.long	0x0001023c
		{
			if (*psrcaddr != *pdstaddr)
    36dc:	1b07      	addi      	r3, sp, 28
    36de:	9360      	ld.w      	r3, (r3, 0x0)
    36e0:	9340      	ld.w      	r2, (r3, 0x0)
    36e2:	1b06      	addi      	r3, sp, 24
    36e4:	9360      	ld.w      	r3, (r3, 0x0)
    36e6:	9360      	ld.w      	r3, (r3, 0x0)
    36e8:	64ca      	cmpne      	r2, r3
    36ea:	0c08      	bf      	0x36fa	//36fa <test_dma_singal_allchan+0x2ee>
				printf("DMA transfer %x data error!\n", psrcaddr);
    36ec:	1b07      	addi      	r3, sp, 28
    36ee:	101c      	lrw      	r0, 0x1026c	//1026c <__etext+0x6bc>
    36f0:	9320      	ld.w      	r1, (r3, 0x0)
    36f2:	e000592f 	bsr      	0xe950	//e950 <printf>
    36f6:	c4004820 	lsli      	r0, r0, 0
			psrcaddr++;
    36fa:	1b07      	addi      	r3, sp, 28
    36fc:	1a07      	addi      	r2, sp, 28
    36fe:	9240      	ld.w      	r2, (r2, 0x0)
    3700:	2203      	addi      	r2, 4      	//0x4
    3702:	b340      	st.w      	r2, (r3, 0x0)
			pdstaddr++;
    3704:	1b06      	addi      	r3, sp, 24
    3706:	1a06      	addi      	r2, sp, 24
    3708:	9240      	ld.w      	r2, (r2, 0x0)
    370a:	2203      	addi      	r2, 4      	//0x4
    370c:	b340      	st.w      	r2, (r3, 0x0)
		}
		psrcaddr = srcaddr;
		pdstaddr = dstaddr;
		printf("psrcaddr = %x, pdstaddr = %x, data_size = %x \n", psrcaddr, pdstaddr, config->data_size);
		//printf("psrcaddr = %x, pdstaddr = %x, data_size = %x \n", psrcaddr, pdstaddr, &dma);
		for(j=0; j<config->data_size; j+=4)
    370e:	1b08      	addi      	r3, sp, 32
    3710:	1a08      	addi      	r2, sp, 32
    3712:	9240      	ld.w      	r2, (r2, 0x0)
    3714:	2203      	addi      	r2, 4      	//0x4
    3716:	b340      	st.w      	r2, (r3, 0x0)
    3718:	1b0a      	addi      	r3, sp, 40
    371a:	9360      	ld.w      	r3, (r3, 0x0)
    371c:	9344      	ld.w      	r2, (r3, 0x10)
    371e:	1b08      	addi      	r3, sp, 32
    3720:	9360      	ld.w      	r3, (r3, 0x0)
    3722:	648c      	cmphs      	r3, r2
    3724:	0fdc      	bf      	0x36dc	//36dc <test_dma_singal_allchan+0x2d0>
		printf("dma init error.\n");
		return -1;
	}

	//for(i=1;i<=8;i++)
	for(i=1;i<(testnum+1);i++)
    3726:	e46e0026 	addi      	r3, sp, 39      	//0x27
    372a:	e44e0026 	addi      	r2, sp, 39      	//0x27
    372e:	8240      	ld.b      	r2, (r2, 0x0)
    3730:	2200      	addi      	r2, 1      	//0x1
    3732:	a340      	st.b      	r2, (r3, 0x0)
    3734:	e46e0026 	addi      	r3, sp, 39      	//0x27
    3738:	8360      	ld.b      	r3, (r3, 0x0)
    373a:	748c      	zextb      	r2, r3
    373c:	6cfb      	mov      	r3, sp
    373e:	8360      	ld.b      	r3, (r3, 0x0)
    3740:	74cc      	zextb      	r3, r3
    3742:	2300      	addi      	r3, 1      	//0x1
    3744:	64c9      	cmplt      	r2, r3
    3746:	0a85      	bt      	0x3450	//3450 <test_dma_singal_allchan+0x44>
				printf("DMA transfer %x data error!\n", psrcaddr);
			psrcaddr++;
			pdstaddr++;
		}
	}
	printf("dma signal for all channels test sucess.\n");
    3748:	1007      	lrw      	r0, 0x1028c	//1028c <__etext+0x6dc>
    374a:	e0005903 	bsr      	0xe950	//e950 <printf>
    374e:	c4004820 	lsli      	r0, r0, 0
	return 0;
    3752:	3300      	movi      	r3, 0      	//0x0
}
    3754:	6c0f      	mov      	r0, r3
    3756:	140b      	addi      	sp, sp, 44
    3758:	1491      	pop      	r4, r15
    375a:	0000      	.short	0x0000
    375c:	0001026c 	.long	0x0001026c
    3760:	0000e950 	.long	0x0000e950
    3764:	0001028c 	.long	0x0001028c

00003768 <readl>:
{
    *(volatile Bit16u *)addr = value;
}

static inline Bit32u readl(const volatile void *addr)
{
    3768:	1421      	subi      	sp, sp, 4
    376a:	6cfb      	mov      	r3, sp
    376c:	b300      	st.w      	r0, (r3, 0x0)
    return *(const volatile Bit32u *)addr;
    376e:	6cfb      	mov      	r3, sp
    3770:	9360      	ld.w      	r3, (r3, 0x0)
    3772:	9360      	ld.w      	r3, (r3, 0x0)
}
    3774:	6c0f      	mov      	r0, r3
    3776:	1401      	addi      	sp, sp, 4
    3778:	783c      	rts
	...

0000377c <writel>:

static inline void writel(Bit32u value, volatile void *addr)
{
    377c:	1422      	subi      	sp, sp, 8
    377e:	1b01      	addi      	r3, sp, 4
    3780:	b300      	st.w      	r0, (r3, 0x0)
    3782:	6cfb      	mov      	r3, sp
    3784:	b320      	st.w      	r1, (r3, 0x0)
    *(volatile Bit32u *)addr = value;
    3786:	6cfb      	mov      	r3, sp
    3788:	9360      	ld.w      	r3, (r3, 0x0)
    378a:	1a01      	addi      	r2, sp, 4
    378c:	9240      	ld.w      	r2, (r2, 0x0)
    378e:	b340      	st.w      	r2, (r3, 0x0)
}
    3790:	1402      	addi      	sp, sp, 8
    3792:	783c      	rts

00003794 <dw_write>:

static inline void dw_write(Bit32u val, void* addr)
{
    3794:	14d1      	push      	r4, r15
    3796:	1423      	subi      	sp, sp, 12
    3798:	1b01      	addi      	r3, sp, 4
    379a:	b300      	st.w      	r0, (r3, 0x0)
    379c:	6cfb      	mov      	r3, sp
    379e:	b320      	st.w      	r1, (r3, 0x0)
	Bit32u value;
	value =readl(addr);
    37a0:	1c02      	addi      	r4, sp, 8
    37a2:	6cfb      	mov      	r3, sp
    37a4:	9300      	ld.w      	r0, (r3, 0x0)
    37a6:	e3ffffe1 	bsr      	0x3768	//3768 <readl>
    37aa:	c4004820 	lsli      	r0, r0, 0
    37ae:	b400      	st.w      	r0, (r4, 0x0)
	value |= val;
    37b0:	1b02      	addi      	r3, sp, 8
    37b2:	1902      	addi      	r1, sp, 8
    37b4:	1a01      	addi      	r2, sp, 4
    37b6:	9120      	ld.w      	r1, (r1, 0x0)
    37b8:	9240      	ld.w      	r2, (r2, 0x0)
    37ba:	6c84      	or      	r2, r1
    37bc:	b340      	st.w      	r2, (r3, 0x0)
	writel(value, addr);
    37be:	1a02      	addi      	r2, sp, 8
    37c0:	6cfb      	mov      	r3, sp
    37c2:	9200      	ld.w      	r0, (r2, 0x0)
    37c4:	9320      	ld.w      	r1, (r3, 0x0)
    37c6:	e3ffffdb 	bsr      	0x377c	//377c <writel>
    37ca:	c4004820 	lsli      	r0, r0, 0
}
    37ce:	1403      	addi      	sp, sp, 12
    37d0:	1491      	pop      	r4, r15
	...

000037d4 <dw_clear>:

static inline void dw_clear(Bit32u val, void* addr)
{
    37d4:	14d1      	push      	r4, r15
    37d6:	1423      	subi      	sp, sp, 12
    37d8:	1b01      	addi      	r3, sp, 4
    37da:	b300      	st.w      	r0, (r3, 0x0)
    37dc:	6cfb      	mov      	r3, sp
    37de:	b320      	st.w      	r1, (r3, 0x0)
	Bit32u value;
	value =readl(addr);
    37e0:	1c02      	addi      	r4, sp, 8
    37e2:	6cfb      	mov      	r3, sp
    37e4:	9300      	ld.w      	r0, (r3, 0x0)
    37e6:	e3ffffc1 	bsr      	0x3768	//3768 <readl>
    37ea:	c4004820 	lsli      	r0, r0, 0
    37ee:	b400      	st.w      	r0, (r4, 0x0)
	value &= ~val;
    37f0:	1b01      	addi      	r3, sp, 4
    37f2:	9360      	ld.w      	r3, (r3, 0x0)
    37f4:	c4632481 	nor      	r1, r3, r3
    37f8:	1b02      	addi      	r3, sp, 8
    37fa:	1a02      	addi      	r2, sp, 8
    37fc:	9240      	ld.w      	r2, (r2, 0x0)
    37fe:	6884      	and      	r2, r1
    3800:	b340      	st.w      	r2, (r3, 0x0)
	writel(value, addr);
    3802:	1a02      	addi      	r2, sp, 8
    3804:	6cfb      	mov      	r3, sp
    3806:	9200      	ld.w      	r0, (r2, 0x0)
    3808:	9320      	ld.w      	r1, (r3, 0x0)
    380a:	e3ffffb9 	bsr      	0x377c	//377c <writel>
    380e:	c4004820 	lsli      	r0, r0, 0
}
    3812:	1403      	addi      	sp, sp, 12
    3814:	1491      	pop      	r4, r15
	...

00003818 <GPIO_Port_Data_Write>:
#include "include/io.h"
#include "gpio.h"

/*function 1_1: write data to portX*/
Bit32u GPIO_Port_Data_Write(GPIO_PortReg_TypeDef* GPIOx,Bit32u Data)
{
    3818:	14d0      	push      	r15
    381a:	1422      	subi      	sp, sp, 8
    381c:	1b01      	addi      	r3, sp, 4
    381e:	b300      	st.w      	r0, (r3, 0x0)
    3820:	6cfb      	mov      	r3, sp
    3822:	b320      	st.w      	r1, (r3, 0x0)
	//GPIOx->gpio_swportx_dr=Data;
	reg_direct_writel(Data,GPIOx,gpio_swportx_dr);
    3824:	1b01      	addi      	r3, sp, 4
    3826:	9360      	ld.w      	r3, (r3, 0x0)
    3828:	6cbb      	mov      	r2, sp
    382a:	9200      	ld.w      	r0, (r2, 0x0)
    382c:	6c4f      	mov      	r1, r3
    382e:	e3ffffa7 	bsr      	0x377c	//377c <writel>
    3832:	c4004820 	lsli      	r0, r0, 0
	return Data;
    3836:	6cfb      	mov      	r3, sp
    3838:	9360      	ld.w      	r3, (r3, 0x0)
}
    383a:	6c0f      	mov      	r0, r3
    383c:	1402      	addi      	sp, sp, 8
    383e:	1490      	pop      	r15

00003840 <GPIO_Pin_Set>:
/*function 1_2: write 1 to bit [n] of portX
 * GPIOx=GPIOA/GPIOB/GPIOC/GPIOD
 * Pin=GPIO_Pin_n or GPIO_Pin_a | GPIO_Pin_b | GPIO_Pin_c .....
 * */
void GPIO_Pin_Set(GPIO_PortReg_TypeDef* GPIOx,Bit32u Pin)
{
    3840:	14d0      	push      	r15
    3842:	1422      	subi      	sp, sp, 8
    3844:	1b01      	addi      	r3, sp, 4
    3846:	b300      	st.w      	r0, (r3, 0x0)
    3848:	6cfb      	mov      	r3, sp
    384a:	b320      	st.w      	r1, (r3, 0x0)
	//GPIOx->gpio_swportx_dr |= Pin;
	reg_writel(Pin,GPIOx,gpio_swportx_dr);
    384c:	1b01      	addi      	r3, sp, 4
    384e:	9360      	ld.w      	r3, (r3, 0x0)
    3850:	6cbb      	mov      	r2, sp
    3852:	9200      	ld.w      	r0, (r2, 0x0)
    3854:	6c4f      	mov      	r1, r3
    3856:	e3ffff9f 	bsr      	0x3794	//3794 <dw_write>
    385a:	c4004820 	lsli      	r0, r0, 0
}
    385e:	1402      	addi      	sp, sp, 8
    3860:	1490      	pop      	r15
	...

00003864 <GPIO_Pin_Reset>:
/*function 1_3: write 0 to bit [n] of portX
 *GPIOx=GPIOA/GPIOB/GPIOC/GPIOD
 * Pin=GPIO_Pin_n or GPIO_Pin_a | GPIO_Pin_b | GPIO_Pin_c .....
 * */
void GPIO_Pin_Reset(GPIO_PortReg_TypeDef* GPIOx,Bit32u Pin)
{
    3864:	14d0      	push      	r15
    3866:	1422      	subi      	sp, sp, 8
    3868:	1b01      	addi      	r3, sp, 4
    386a:	b300      	st.w      	r0, (r3, 0x0)
    386c:	6cfb      	mov      	r3, sp
    386e:	b320      	st.w      	r1, (r3, 0x0)
	//GPIOx->gpio_swportx_dr &= ~Pin;
	reg_clearl(Pin,GPIOx,gpio_swportx_dr);
    3870:	1b01      	addi      	r3, sp, 4
    3872:	9360      	ld.w      	r3, (r3, 0x0)
    3874:	6cbb      	mov      	r2, sp
    3876:	9200      	ld.w      	r0, (r2, 0x0)
    3878:	6c4f      	mov      	r1, r3
    387a:	e3ffffad 	bsr      	0x37d4	//37d4 <dw_clear>
    387e:	c4004820 	lsli      	r0, r0, 0
}
    3882:	1402      	addi      	sp, sp, 8
    3884:	1490      	pop      	r15
	...

00003888 <GPIO_Get_PORT_Inter_Data>:
/*function 1_4: read data of portX
 *GPIOx=GPIOA/GPIOB/GPIOC/GPIOD
 *!!The value read back is equal to the last value written to this register.
 * */
Bit32u GPIO_Get_PORT_Inter_Data(GPIO_PortReg_TypeDef* GPIOx)
{
    3888:	14d1      	push      	r4, r15
    388a:	1422      	subi      	sp, sp, 8
    388c:	6cfb      	mov      	r3, sp
    388e:	b300      	st.w      	r0, (r3, 0x0)
	Bit32u temp = 0;
    3890:	1b01      	addi      	r3, sp, 4
    3892:	3200      	movi      	r2, 0      	//0x0
    3894:	b340      	st.w      	r2, (r3, 0x0)
	//temp = GPIOx->gpio_swportx_dr;
	temp = reg_readl(GPIOx,gpio_swportx_dr);
    3896:	6cfb      	mov      	r3, sp
    3898:	9360      	ld.w      	r3, (r3, 0x0)
    389a:	1c01      	addi      	r4, sp, 4
    389c:	6c0f      	mov      	r0, r3
    389e:	e3ffff65 	bsr      	0x3768	//3768 <readl>
    38a2:	c4004820 	lsli      	r0, r0, 0
    38a6:	b400      	st.w      	r0, (r4, 0x0)
	return temp;
    38a8:	1b01      	addi      	r3, sp, 4
    38aa:	9360      	ld.w      	r3, (r3, 0x0)
}
    38ac:	6c0f      	mov      	r0, r3
    38ae:	1402      	addi      	sp, sp, 8
    38b0:	1491      	pop      	r4, r15
	...

000038b4 <GPIO_Get_Pin_Inter_Data>:
 *GPIOx=GPIOA/GPIOB/GPIOC/GPIOD
 *Pin=GPIO_Pin_n or GPIO_Pin_a | GPIO_Pin_b | GPIO_Pin_c .....
 *!!The value read back is equal to the last value written to this register
 * */
Bit32u GPIO_Get_Pin_Inter_Data(GPIO_PortReg_TypeDef* GPIOx,Bit32u Pin)
{
    38b4:	14d0      	push      	r15
    38b6:	1423      	subi      	sp, sp, 12
    38b8:	1b01      	addi      	r3, sp, 4
    38ba:	b300      	st.w      	r0, (r3, 0x0)
    38bc:	6cfb      	mov      	r3, sp
    38be:	b320      	st.w      	r1, (r3, 0x0)
	Bit32u temp = 0;
    38c0:	1b02      	addi      	r3, sp, 8
    38c2:	3200      	movi      	r2, 0      	//0x0
    38c4:	b340      	st.w      	r2, (r3, 0x0)
	//temp = GPIOx->gpio_swportx_dr & Pin;
	temp = reg_readl(GPIOx,gpio_swportx_dr) & Pin;
    38c6:	1b01      	addi      	r3, sp, 4
    38c8:	9360      	ld.w      	r3, (r3, 0x0)
    38ca:	6c0f      	mov      	r0, r3
    38cc:	e3ffff4e 	bsr      	0x3768	//3768 <readl>
    38d0:	c4004820 	lsli      	r0, r0, 0
    38d4:	6c43      	mov      	r1, r0
    38d6:	1b02      	addi      	r3, sp, 8
    38d8:	6cbb      	mov      	r2, sp
    38da:	9240      	ld.w      	r2, (r2, 0x0)
    38dc:	6884      	and      	r2, r1
    38de:	b340      	st.w      	r2, (r3, 0x0)
	return temp;
    38e0:	1b02      	addi      	r3, sp, 8
    38e2:	9360      	ld.w      	r3, (r3, 0x0)
}
    38e4:	6c0f      	mov      	r0, r3
    38e6:	1403      	addi      	sp, sp, 12
    38e8:	1490      	pop      	r15
	...

000038ec <GPIO_Set_Port_Dir>:

/*function 2_1: set direction of portX
 *GPIOx=GPIOA/GPIOB/GPIOC/GPIOD
  * */
Bit32u GPIO_Set_Port_Dir(GPIO_PortReg_TypeDef* GPIOx,GPIO_Direction_TypeDef Direction)
{
    38ec:	14d0      	push      	r15
    38ee:	1422      	subi      	sp, sp, 8
    38f0:	1b01      	addi      	r3, sp, 4
    38f2:	b300      	st.w      	r0, (r3, 0x0)
    38f4:	6cfb      	mov      	r3, sp
    38f6:	b320      	st.w      	r1, (r3, 0x0)
	if(Direction==OUTPUT)
    38f8:	6cfb      	mov      	r3, sp
    38fa:	9360      	ld.w      	r3, (r3, 0x0)
    38fc:	3b41      	cmpnei      	r3, 1
    38fe:	080d      	bt      	0x3918	//3918 <GPIO_Set_Port_Dir+0x2c>
	{
		//GPIOx->gpio_swportx_ddr = 0xFFFF;
		reg_direct_writel(0xFFFF,GPIOx,gpio_swportx_ddr);
    3900:	1b01      	addi      	r3, sp, 4
    3902:	9360      	ld.w      	r3, (r3, 0x0)
    3904:	2303      	addi      	r3, 4      	//0x4
    3906:	ea00ffff 	movi      	r0, 65535      	//0xffff
    390a:	6c4f      	mov      	r1, r3
    390c:	e3ffff38 	bsr      	0x377c	//377c <writel>
    3910:	c4004820 	lsli      	r0, r0, 0
		return 0;
    3914:	3300      	movi      	r3, 0      	//0x0
    3916:	0412      	br      	0x393a	//393a <GPIO_Set_Port_Dir+0x4e>
	}
	else if(Direction==INPUT)
    3918:	6cfb      	mov      	r3, sp
    391a:	9360      	ld.w      	r3, (r3, 0x0)
    391c:	e923000e 	bnez      	r3, 0x3938	//3938 <GPIO_Set_Port_Dir+0x4c>
	{
		//GPIOx->gpio_swportx_ddr = 0;
		reg_clearl(0xFFFF,GPIOx,gpio_swportx_ddr);
    3920:	1b01      	addi      	r3, sp, 4
    3922:	9360      	ld.w      	r3, (r3, 0x0)
    3924:	2303      	addi      	r3, 4      	//0x4
    3926:	ea00ffff 	movi      	r0, 65535      	//0xffff
    392a:	6c4f      	mov      	r1, r3
    392c:	e3ffff54 	bsr      	0x37d4	//37d4 <dw_clear>
    3930:	c4004820 	lsli      	r0, r0, 0
		return 0;
    3934:	3300      	movi      	r3, 0      	//0x0
    3936:	0402      	br      	0x393a	//393a <GPIO_Set_Port_Dir+0x4e>
	}
	return 1;
    3938:	3301      	movi      	r3, 1      	//0x1
}
    393a:	6c0f      	mov      	r0, r3
    393c:	1402      	addi      	sp, sp, 8
    393e:	1490      	pop      	r15
    3940:	00003768 	.long	0x00003768
    3944:	0000377c 	.long	0x0000377c
    3948:	00003794 	.long	0x00003794
    394c:	000037d4 	.long	0x000037d4

00003950 <GPIO_Set_Pin_Dir>:
/*function 2_2: set direction of pin[n] of portX
 *GPIOx=GPIOA/GPIOB/GPIOC/GPIOD
 *Pin=GPIO_Pin_n or GPIO_Pin_a | GPIO_Pin_b | GPIO_Pin_c .....
 * */
Bit32u GPIO_Set_Pin_Dir(GPIO_PortReg_TypeDef* GPIOx,Bit32u Pin,GPIO_Direction_TypeDef Direction)
{
    3950:	14d0      	push      	r15
    3952:	1423      	subi      	sp, sp, 12
    3954:	1b02      	addi      	r3, sp, 8
    3956:	b300      	st.w      	r0, (r3, 0x0)
    3958:	1b01      	addi      	r3, sp, 4
    395a:	b320      	st.w      	r1, (r3, 0x0)
    395c:	6cfb      	mov      	r3, sp
    395e:	b340      	st.w      	r2, (r3, 0x0)
	if(Direction==OUTPUT)
    3960:	6cfb      	mov      	r3, sp
    3962:	9360      	ld.w      	r3, (r3, 0x0)
    3964:	3b41      	cmpnei      	r3, 1
    3966:	080d      	bt      	0x3980	//3980 <GPIO_Set_Pin_Dir+0x30>
	{
		//GPIOx->gpio_swportx_ddr |= Pin;
		reg_writel(Pin,GPIOx,gpio_swportx_ddr);
    3968:	1b02      	addi      	r3, sp, 8
    396a:	9360      	ld.w      	r3, (r3, 0x0)
    396c:	2303      	addi      	r3, 4      	//0x4
    396e:	1a01      	addi      	r2, sp, 4
    3970:	9200      	ld.w      	r0, (r2, 0x0)
    3972:	6c4f      	mov      	r1, r3
    3974:	e3ffff10 	bsr      	0x3794	//3794 <dw_write>
    3978:	c4004820 	lsli      	r0, r0, 0
		return 0;
    397c:	3300      	movi      	r3, 0      	//0x0
    397e:	0412      	br      	0x39a2	//39a2 <GPIO_Set_Pin_Dir+0x52>
	}
	else if(Direction==INPUT)
    3980:	6cfb      	mov      	r3, sp
    3982:	9360      	ld.w      	r3, (r3, 0x0)
    3984:	e923000e 	bnez      	r3, 0x39a0	//39a0 <GPIO_Set_Pin_Dir+0x50>
	{
		//GPIOx->gpio_swportx_ddr &= ~Pin;
		reg_clearl(Pin,GPIOx,gpio_swportx_ddr);
    3988:	1b02      	addi      	r3, sp, 8
    398a:	9360      	ld.w      	r3, (r3, 0x0)
    398c:	2303      	addi      	r3, 4      	//0x4
    398e:	1a01      	addi      	r2, sp, 4
    3990:	9200      	ld.w      	r0, (r2, 0x0)
    3992:	6c4f      	mov      	r1, r3
    3994:	e3ffff20 	bsr      	0x37d4	//37d4 <dw_clear>
    3998:	c4004820 	lsli      	r0, r0, 0
		return 0;
    399c:	3300      	movi      	r3, 0      	//0x0
    399e:	0402      	br      	0x39a2	//39a2 <GPIO_Set_Pin_Dir+0x52>
	}
	return 1;
    39a0:	3301      	movi      	r3, 1      	//0x1
}
    39a2:	6c0f      	mov      	r0, r3
    39a4:	1403      	addi      	sp, sp, 12
    39a6:	1490      	pop      	r15

000039a8 <GPIO_Set_Port_Source>:
/*function 3_1: set data source of portX
 *GPIOx=GPIOA/GPIOB/GPIOC/GPIOD
 *Pin=GPIO_Pin_n or GPIO_Pin_a | GPIO_Pin_b | GPIO_Pin_c .....
 * */
Bit32u GPIO_Set_Port_Source(GPIO_PortReg_TypeDef* GPIOx,GPIO_Source_TypeDef Source)
{
    39a8:	14d0      	push      	r15
    39aa:	1422      	subi      	sp, sp, 8
    39ac:	1b01      	addi      	r3, sp, 4
    39ae:	b300      	st.w      	r0, (r3, 0x0)
    39b0:	6cfb      	mov      	r3, sp
    39b2:	b320      	st.w      	r1, (r3, 0x0)
	if(Source==HARDWARE)
    39b4:	6cfb      	mov      	r3, sp
    39b6:	9360      	ld.w      	r3, (r3, 0x0)
    39b8:	3b41      	cmpnei      	r3, 1
    39ba:	080d      	bt      	0x39d4	//39d4 <GPIO_Set_Port_Source+0x2c>
	{
		//GPIOx->gpio_swportx_ctl = 0xFFFF;
		reg_direct_writel(0xFFFF,GPIOx,gpio_swportx_ctl);
    39bc:	1b01      	addi      	r3, sp, 4
    39be:	9360      	ld.w      	r3, (r3, 0x0)
    39c0:	2307      	addi      	r3, 8      	//0x8
    39c2:	ea00ffff 	movi      	r0, 65535      	//0xffff
    39c6:	6c4f      	mov      	r1, r3
    39c8:	e3fffeda 	bsr      	0x377c	//377c <writel>
    39cc:	c4004820 	lsli      	r0, r0, 0
		return 0;
    39d0:	3300      	movi      	r3, 0      	//0x0
    39d2:	0412      	br      	0x39f6	//39f6 <GPIO_Set_Port_Source+0x4e>
	}
	else if(Source==SOFTWARE)
    39d4:	6cfb      	mov      	r3, sp
    39d6:	9360      	ld.w      	r3, (r3, 0x0)
    39d8:	e923000e 	bnez      	r3, 0x39f4	//39f4 <GPIO_Set_Port_Source+0x4c>
	{
		//GPIOx->gpio_swportx_ctl = 0;
		reg_clearl(0xFFFF,GPIOx,gpio_swportx_ctl);
    39dc:	1b01      	addi      	r3, sp, 4
    39de:	9360      	ld.w      	r3, (r3, 0x0)
    39e0:	2307      	addi      	r3, 8      	//0x8
    39e2:	ea00ffff 	movi      	r0, 65535      	//0xffff
    39e6:	6c4f      	mov      	r1, r3
    39e8:	e3fffef6 	bsr      	0x37d4	//37d4 <dw_clear>
    39ec:	c4004820 	lsli      	r0, r0, 0
		return 0;
    39f0:	3300      	movi      	r3, 0      	//0x0
    39f2:	0402      	br      	0x39f6	//39f6 <GPIO_Set_Port_Source+0x4e>
	}
	return 1;
    39f4:	3301      	movi      	r3, 1      	//0x1
}
    39f6:	6c0f      	mov      	r0, r3
    39f8:	1402      	addi      	sp, sp, 8
    39fa:	1490      	pop      	r15

000039fc <GPIO_Set_Pin_Source>:
/*function 3_2: set data source of pin[n] of portX
 *GPIOx=GPIOA/GPIOB/GPIOC/GPIOD
 *Pin=GPIO_Pin_n or GPIO_Pin_a | GPIO_Pin_b | GPIO_Pin_c .....
 * */
Bit32u GPIO_Set_Pin_Source(GPIO_PortReg_TypeDef* GPIOx,Bit32u Pin,GPIO_Source_TypeDef Source)
{
    39fc:	14d0      	push      	r15
    39fe:	1423      	subi      	sp, sp, 12
    3a00:	1b02      	addi      	r3, sp, 8
    3a02:	b300      	st.w      	r0, (r3, 0x0)
    3a04:	1b01      	addi      	r3, sp, 4
    3a06:	b320      	st.w      	r1, (r3, 0x0)
    3a08:	6cfb      	mov      	r3, sp
    3a0a:	b340      	st.w      	r2, (r3, 0x0)
	if(Source==HARDWARE)
    3a0c:	6cfb      	mov      	r3, sp
    3a0e:	9360      	ld.w      	r3, (r3, 0x0)
    3a10:	3b41      	cmpnei      	r3, 1
    3a12:	080d      	bt      	0x3a2c	//3a2c <GPIO_Set_Pin_Source+0x30>
	{
		//GPIOx->gpio_swportx_ctl |= Pin;
		reg_writel(Pin,GPIOx,gpio_swportx_ctl);
    3a14:	1b02      	addi      	r3, sp, 8
    3a16:	9360      	ld.w      	r3, (r3, 0x0)
    3a18:	2307      	addi      	r3, 8      	//0x8
    3a1a:	1a01      	addi      	r2, sp, 4
    3a1c:	9200      	ld.w      	r0, (r2, 0x0)
    3a1e:	6c4f      	mov      	r1, r3
    3a20:	e3fffeba 	bsr      	0x3794	//3794 <dw_write>
    3a24:	c4004820 	lsli      	r0, r0, 0
		return 0;
    3a28:	3300      	movi      	r3, 0      	//0x0
    3a2a:	0412      	br      	0x3a4e	//3a4e <GPIO_Set_Pin_Source+0x52>
	}
	else if(Source==SOFTWARE)
    3a2c:	6cfb      	mov      	r3, sp
    3a2e:	9360      	ld.w      	r3, (r3, 0x0)
    3a30:	e923000e 	bnez      	r3, 0x3a4c	//3a4c <GPIO_Set_Pin_Source+0x50>
	{
		//GPIOx->gpio_swportx_ctl &= ~Pin;
		reg_clearl(Pin,GPIOx,gpio_swportx_ctl);
    3a34:	1b02      	addi      	r3, sp, 8
    3a36:	9360      	ld.w      	r3, (r3, 0x0)
    3a38:	2307      	addi      	r3, 8      	//0x8
    3a3a:	1a01      	addi      	r2, sp, 4
    3a3c:	9200      	ld.w      	r0, (r2, 0x0)
    3a3e:	6c4f      	mov      	r1, r3
    3a40:	e3fffeca 	bsr      	0x37d4	//37d4 <dw_clear>
    3a44:	c4004820 	lsli      	r0, r0, 0
		return 0;
    3a48:	3300      	movi      	r3, 0      	//0x0
    3a4a:	0402      	br      	0x3a4e	//3a4e <GPIO_Set_Pin_Source+0x52>
	}
	return 1;
    3a4c:	3301      	movi      	r3, 1      	//0x1
}
    3a4e:	6c0f      	mov      	r0, r3
    3a50:	1403      	addi      	sp, sp, 12
    3a52:	1490      	pop      	r15

00003a54 <GPIO_IT_CMD>:

/*function 4_1: set IT enabled or disabed of pin[n] of portA
 *Pin=GPIO_Pin_n or GPIO_Pin_a | GPIO_Pin_b | GPIO_Pin_c .....
 * */
Bit32u GPIO_IT_CMD(Bit32u Pin,State_TypeDef Newstate)
{
    3a54:	14d0      	push      	r15
    3a56:	1422      	subi      	sp, sp, 8
    3a58:	1b01      	addi      	r3, sp, 4
    3a5a:	b300      	st.w      	r0, (r3, 0x0)
    3a5c:	6cfb      	mov      	r3, sp
    3a5e:	b320      	st.w      	r1, (r3, 0x0)
	if(Newstate==ENABLE)
    3a60:	6cfb      	mov      	r3, sp
    3a62:	9360      	ld.w      	r3, (r3, 0x0)
    3a64:	3b41      	cmpnei      	r3, 1
    3a66:	080a      	bt      	0x3a7a	//3a7a <GPIO_IT_CMD+0x26>
	{
		//GPIO->gpio_inten |= Pin;      // do not affect other pins
		reg_writel(Pin,GPIO,gpio_inten);
    3a68:	1b01      	addi      	r3, sp, 4
    3a6a:	9300      	ld.w      	r0, (r3, 0x0)
    3a6c:	1036      	lrw      	r1, 0x19040030	//19040030 <__stack+0x18c40038>
    3a6e:	e3fffe93 	bsr      	0x3794	//3794 <dw_write>
    3a72:	c4004820 	lsli      	r0, r0, 0
		return 0;
    3a76:	3300      	movi      	r3, 0      	//0x0
    3a78:	040f      	br      	0x3a96	//3a96 <GPIO_IT_CMD+0x42>
	}
	else if(Newstate==DISABLE)
    3a7a:	6cfb      	mov      	r3, sp
    3a7c:	9360      	ld.w      	r3, (r3, 0x0)
    3a7e:	e923000b 	bnez      	r3, 0x3a94	//3a94 <GPIO_IT_CMD+0x40>
	{
		//GPIO->gpio_inten &= ~Pin;    //do not affect other pins
		reg_clearl(Pin,GPIO,gpio_inten);
    3a82:	1b01      	addi      	r3, sp, 4
    3a84:	9300      	ld.w      	r0, (r3, 0x0)
    3a86:	1030      	lrw      	r1, 0x19040030	//19040030 <__stack+0x18c40038>
    3a88:	e3fffea6 	bsr      	0x37d4	//37d4 <dw_clear>
    3a8c:	c4004820 	lsli      	r0, r0, 0
		return 0;
    3a90:	3300      	movi      	r3, 0      	//0x0
    3a92:	0402      	br      	0x3a96	//3a96 <GPIO_IT_CMD+0x42>
	}
	else
		return 1;
    3a94:	3301      	movi      	r3, 1      	//0x1
}
    3a96:	6c0f      	mov      	r0, r3
    3a98:	1402      	addi      	sp, sp, 8
    3a9a:	1490      	pop      	r15

00003a9c <GPIO_IT_ENABLE>:

/*function 4_2: set IT enabled pin[n] of portA
 *Pin=GPIO_Pin_n or GPIO_Pin_a | GPIO_Pin_b | GPIO_Pin_c .....
 * */
void GPIO_IT_ENABLE(Bit32u Pin)
{
    3a9c:	14d0      	push      	r15
    3a9e:	1421      	subi      	sp, sp, 4
    3aa0:	6cfb      	mov      	r3, sp
    3aa2:	b300      	st.w      	r0, (r3, 0x0)
	//GPIO->gpio_inten |= Pin;      // do not affect other pins
	reg_writel(Pin,GPIO,gpio_inten);
    3aa4:	6cfb      	mov      	r3, sp
    3aa6:	9300      	ld.w      	r0, (r3, 0x0)
    3aa8:	1027      	lrw      	r1, 0x19040030	//19040030 <__stack+0x18c40038>
    3aaa:	e3fffe75 	bsr      	0x3794	//3794 <dw_write>
    3aae:	c4004820 	lsli      	r0, r0, 0
}
    3ab2:	1401      	addi      	sp, sp, 4
    3ab4:	1490      	pop      	r15
    3ab6:	0000      	.short	0x0000
    3ab8:	00003794 	.long	0x00003794
    3abc:	000037d4 	.long	0x000037d4
    3ac0:	0000377c 	.long	0x0000377c
    3ac4:	19040030 	.long	0x19040030

00003ac8 <GPIO_IT_DISABLE>:

/*function 4_3: set IT disenabled pin[n] of portA
 *Pin=GPIO_Pin_n or GPIO_Pin_a | GPIO_Pin_b | GPIO_Pin_c .....
 * */
void GPIO_IT_DISABLE(Bit32u Pin)
{
    3ac8:	14d0      	push      	r15
    3aca:	1421      	subi      	sp, sp, 4
    3acc:	6cfb      	mov      	r3, sp
    3ace:	b300      	st.w      	r0, (r3, 0x0)
	//GPIO->gpio_inten &= ~Pin;      // do not affect other pins
	reg_clearl(Pin,GPIO,gpio_inten);
    3ad0:	6cfb      	mov      	r3, sp
    3ad2:	9300      	ld.w      	r0, (r3, 0x0)
    3ad4:	132a      	lrw      	r1, 0x19040030	//19040030 <__stack+0x18c40038>
    3ad6:	e3fffe7f 	bsr      	0x37d4	//37d4 <dw_clear>
    3ada:	c4004820 	lsli      	r0, r0, 0
}
    3ade:	1401      	addi      	sp, sp, 4
    3ae0:	1490      	pop      	r15
	...

00003ae4 <GPIO_IT_Musk_CMD>:

/*function 5_1: set IT mask or umask of pin[n] of portA
 *Pin=GPIO_Pin_n or GPIO_Pin_a | GPIO_Pin_b | GPIO_Pin_c .....
 * */
Bit32u GPIO_IT_Musk_CMD(Bit32u Pin,GPIO_ITMask_TypeDef MaskState)
{
    3ae4:	14d0      	push      	r15
    3ae6:	1422      	subi      	sp, sp, 8
    3ae8:	1b01      	addi      	r3, sp, 4
    3aea:	b300      	st.w      	r0, (r3, 0x0)
    3aec:	6cfb      	mov      	r3, sp
    3aee:	b320      	st.w      	r1, (r3, 0x0)
	if(MaskState==GPIO_IT_MASK)
    3af0:	6cfb      	mov      	r3, sp
    3af2:	9360      	ld.w      	r3, (r3, 0x0)
    3af4:	3b41      	cmpnei      	r3, 1
    3af6:	080a      	bt      	0x3b0a	//3b0a <GPIO_IT_Musk_CMD+0x26>
	{
		//GPIO->gpio_intmask |= Pin;      // do not affect other pins
		reg_writel(Pin,GPIO,gpio_intmask);
    3af8:	1b01      	addi      	r3, sp, 4
    3afa:	9300      	ld.w      	r0, (r3, 0x0)
    3afc:	1322      	lrw      	r1, 0x19040034	//19040034 <__stack+0x18c4003c>
    3afe:	e3fffe4b 	bsr      	0x3794	//3794 <dw_write>
    3b02:	c4004820 	lsli      	r0, r0, 0
		return 0;
    3b06:	3300      	movi      	r3, 0      	//0x0
    3b08:	040f      	br      	0x3b26	//3b26 <GPIO_IT_Musk_CMD+0x42>
	}
	else if(MaskState==GPIO_IT_UMASK)
    3b0a:	6cfb      	mov      	r3, sp
    3b0c:	9360      	ld.w      	r3, (r3, 0x0)
    3b0e:	e923000b 	bnez      	r3, 0x3b24	//3b24 <GPIO_IT_Musk_CMD+0x40>
	{
		//GPIO->gpio_intmask &= ~Pin;     //do not affect other pins
		reg_clearl(Pin,GPIO,gpio_intmask);
    3b12:	1b01      	addi      	r3, sp, 4
    3b14:	9300      	ld.w      	r0, (r3, 0x0)
    3b16:	123c      	lrw      	r1, 0x19040034	//19040034 <__stack+0x18c4003c>
    3b18:	e3fffe5e 	bsr      	0x37d4	//37d4 <dw_clear>
    3b1c:	c4004820 	lsli      	r0, r0, 0
		return 0;
    3b20:	3300      	movi      	r3, 0      	//0x0
    3b22:	0402      	br      	0x3b26	//3b26 <GPIO_IT_Musk_CMD+0x42>
	}
	else
		return 1;
    3b24:	3301      	movi      	r3, 1      	//0x1
}
    3b26:	6c0f      	mov      	r0, r3
    3b28:	1402      	addi      	sp, sp, 8
    3b2a:	1490      	pop      	r15

00003b2c <GPIO_IT_Mask>:

/*function 5_2: set IT mask pin[n] of portA
 *Pin=GPIO_Pin_n or GPIO_Pin_a | GPIO_Pin_b | GPIO_Pin_c .....
 * */
void GPIO_IT_Mask(Bit32u Pin)
{
    3b2c:	14d0      	push      	r15
    3b2e:	1421      	subi      	sp, sp, 4
    3b30:	6cfb      	mov      	r3, sp
    3b32:	b300      	st.w      	r0, (r3, 0x0)
	//GPIO->gpio_intmask |= Pin;      // do not affect other pins
	reg_writel(Pin,GPIO,gpio_intmask);
    3b34:	6cfb      	mov      	r3, sp
    3b36:	9300      	ld.w      	r0, (r3, 0x0)
    3b38:	1233      	lrw      	r1, 0x19040034	//19040034 <__stack+0x18c4003c>
    3b3a:	e3fffe2d 	bsr      	0x3794	//3794 <dw_write>
    3b3e:	c4004820 	lsli      	r0, r0, 0
}
    3b42:	1401      	addi      	sp, sp, 4
    3b44:	1490      	pop      	r15
	...

00003b48 <GPIO_IT_Umask>:

/*function 5_3: set IT umask pin[n] of portA
 *Pin=GPIO_Pin_n or GPIO_Pin_a | GPIO_Pin_b | GPIO_Pin_c .....
 * */
void GPIO_IT_Umask(Bit32u Pin)
{
    3b48:	14d0      	push      	r15
    3b4a:	1421      	subi      	sp, sp, 4
    3b4c:	6cfb      	mov      	r3, sp
    3b4e:	b300      	st.w      	r0, (r3, 0x0)
	//GPIO->gpio_intmask &= ~Pin;     //do not affect other pins
	reg_clearl(Pin,GPIO,gpio_intmask);
    3b50:	6cfb      	mov      	r3, sp
    3b52:	9300      	ld.w      	r0, (r3, 0x0)
    3b54:	122c      	lrw      	r1, 0x19040034	//19040034 <__stack+0x18c4003c>
    3b56:	e3fffe3f 	bsr      	0x37d4	//37d4 <dw_clear>
    3b5a:	c4004820 	lsli      	r0, r0, 0
}
    3b5e:	1401      	addi      	sp, sp, 4
    3b60:	1490      	pop      	r15
	...

00003b64 <GPIO_Set_IT_Type>:

/*function 6_1: set IT type of pin[n] of portA,level sentive or edge sentive
 *Pin=GPIO_Pin_n or GPIO_Pin_a | GPIO_Pin_b | GPIO_Pin_c .....
 * */
Bit32u GPIO_Set_IT_Type(Bit32u Pin,GPIO_ITType_TypeDef ITtype)
{
    3b64:	14d0      	push      	r15
    3b66:	1422      	subi      	sp, sp, 8
    3b68:	1b01      	addi      	r3, sp, 4
    3b6a:	b300      	st.w      	r0, (r3, 0x0)
    3b6c:	6cfb      	mov      	r3, sp
    3b6e:	b320      	st.w      	r1, (r3, 0x0)
	//GPIO->gpio_int_bothedge=0;                //bothedge should not be set
	reg_direct_writel(0,GPIO,gpio_int_bothedge);
    3b70:	3000      	movi      	r0, 0      	//0x0
    3b72:	1227      	lrw      	r1, 0x19040068	//19040068 <__stack+0x18c40070>
    3b74:	e3fffe04 	bsr      	0x377c	//377c <writel>
    3b78:	c4004820 	lsli      	r0, r0, 0
	if(ITtype==GPIO_IT_Edge)
    3b7c:	6cfb      	mov      	r3, sp
    3b7e:	9360      	ld.w      	r3, (r3, 0x0)
    3b80:	3b41      	cmpnei      	r3, 1
    3b82:	080a      	bt      	0x3b96	//3b96 <GPIO_Set_IT_Type+0x32>
	{
		//GPIO->gpio_inttype_level |= Pin;      //do not affect other pins
		reg_writel(Pin,GPIO,gpio_inttype_level);
    3b84:	1b01      	addi      	r3, sp, 4
    3b86:	9300      	ld.w      	r0, (r3, 0x0)
    3b88:	1223      	lrw      	r1, 0x19040038	//19040038 <__stack+0x18c40040>
    3b8a:	e3fffe05 	bsr      	0x3794	//3794 <dw_write>
    3b8e:	c4004820 	lsli      	r0, r0, 0
		return 0;
    3b92:	3300      	movi      	r3, 0      	//0x0
    3b94:	040f      	br      	0x3bb2	//3bb2 <GPIO_Set_IT_Type+0x4e>
	}
	else if(ITtype==GPIO_IT_Level)
    3b96:	6cfb      	mov      	r3, sp
    3b98:	9360      	ld.w      	r3, (r3, 0x0)
    3b9a:	e923000b 	bnez      	r3, 0x3bb0	//3bb0 <GPIO_Set_IT_Type+0x4c>
	{
		//GPIO->gpio_inttype_level &= ~Pin;     //do not affect other pins
		reg_clearl(Pin,GPIO,gpio_inttype_level);
    3b9e:	1b01      	addi      	r3, sp, 4
    3ba0:	9300      	ld.w      	r0, (r3, 0x0)
    3ba2:	113d      	lrw      	r1, 0x19040038	//19040038 <__stack+0x18c40040>
    3ba4:	e3fffe18 	bsr      	0x37d4	//37d4 <dw_clear>
    3ba8:	c4004820 	lsli      	r0, r0, 0
		return 0;
    3bac:	3300      	movi      	r3, 0      	//0x0
    3bae:	0402      	br      	0x3bb2	//3bb2 <GPIO_Set_IT_Type+0x4e>
	}
	else
		return 1;
    3bb0:	3301      	movi      	r3, 1      	//0x1
}
    3bb2:	6c0f      	mov      	r0, r3
    3bb4:	1402      	addi      	sp, sp, 8
    3bb6:	1490      	pop      	r15

00003bb8 <GPIO_Set_IT_Type_lev>:

/*function 6_2: set IT type of pin[n] of portA,level sentive
 *Pin=GPIO_Pin_n or GPIO_Pin_a | GPIO_Pin_b | GPIO_Pin_c .....
 * */
void GPIO_Set_IT_Type_lev(Bit32u Pin)
{
    3bb8:	14d0      	push      	r15
    3bba:	1421      	subi      	sp, sp, 4
    3bbc:	6cfb      	mov      	r3, sp
    3bbe:	b300      	st.w      	r0, (r3, 0x0)
	//GPIO->gpio_int_bothedge=0;            //bothedge should not be set
	//GPIO->gpio_inttype_level &= ~Pin;     //do not affect other pins
	reg_direct_writel(0,GPIO,gpio_int_bothedge);
    3bc0:	3000      	movi      	r0, 0      	//0x0
    3bc2:	1133      	lrw      	r1, 0x19040068	//19040068 <__stack+0x18c40070>
    3bc4:	e3fffddc 	bsr      	0x377c	//377c <writel>
    3bc8:	c4004820 	lsli      	r0, r0, 0
	reg_writel(Pin,GPIO,gpio_inttype_level);
    3bcc:	6cfb      	mov      	r3, sp
    3bce:	9300      	ld.w      	r0, (r3, 0x0)
    3bd0:	1131      	lrw      	r1, 0x19040038	//19040038 <__stack+0x18c40040>
    3bd2:	e3fffde1 	bsr      	0x3794	//3794 <dw_write>
    3bd6:	c4004820 	lsli      	r0, r0, 0
}
    3bda:	1401      	addi      	sp, sp, 4
    3bdc:	1490      	pop      	r15
	...

00003be0 <GPIO_Set_IT_Type_Edge>:

/*function 6_3: set IT type of pin[n] of portA,edge sentive
 *Pin=GPIO_Pin_n or GPIO_Pin_a | GPIO_Pin_b | GPIO_Pin_c .....
 * */
void GPIO_Set_IT_Type_Edge(Bit32u Pin)
{
    3be0:	14d0      	push      	r15
    3be2:	1421      	subi      	sp, sp, 4
    3be4:	6cfb      	mov      	r3, sp
    3be6:	b300      	st.w      	r0, (r3, 0x0)
	//GPIO->gpio_int_bothedge=0;            //bothedge should not be set
	//GPIO->gpio_inttype_level |= Pin;      //do not affect other pins
	reg_direct_writel(0,GPIO,gpio_int_bothedge);
    3be8:	3000      	movi      	r0, 0      	//0x0
    3bea:	1129      	lrw      	r1, 0x19040068	//19040068 <__stack+0x18c40070>
    3bec:	e3fffdc8 	bsr      	0x377c	//377c <writel>
    3bf0:	c4004820 	lsli      	r0, r0, 0
	reg_clearl(Pin,GPIO,gpio_inttype_level);
    3bf4:	6cfb      	mov      	r3, sp
    3bf6:	9300      	ld.w      	r0, (r3, 0x0)
    3bf8:	1127      	lrw      	r1, 0x19040038	//19040038 <__stack+0x18c40040>
    3bfa:	e3fffded 	bsr      	0x37d4	//37d4 <dw_clear>
    3bfe:	c4004820 	lsli      	r0, r0, 0
}
    3c02:	1401      	addi      	sp, sp, 4
    3c04:	1490      	pop      	r15
	...

00003c08 <GPIO_Set_IT_Polarity>:

/*function 7_1: set IT type of pin[n] of portA,low active/falling edge or high active/rising edge
 *Pin=GPIO_Pin_n or GPIO_Pin_a | GPIO_Pin_b | GPIO_Pin_c .....
 * */
Bit32u GPIO_Set_IT_Polarity(Bit32u Pin,GPIO_ITPolarity_TypeDef Polarity)
{
    3c08:	14d0      	push      	r15
    3c0a:	1422      	subi      	sp, sp, 8
    3c0c:	1b01      	addi      	r3, sp, 4
    3c0e:	b300      	st.w      	r0, (r3, 0x0)
    3c10:	6cfb      	mov      	r3, sp
    3c12:	b320      	st.w      	r1, (r3, 0x0)
	if(Polarity==GPIO_IT_High_Rising)
    3c14:	6cfb      	mov      	r3, sp
    3c16:	9360      	ld.w      	r3, (r3, 0x0)
    3c18:	3b41      	cmpnei      	r3, 1
    3c1a:	0810      	bt      	0x3c3a	//3c3a <GPIO_Set_IT_Polarity+0x32>
	{
		//GPIO->gpio_int_bothedge=0;           //bothedge should not be set
		//GPIO->gpio_int_polarity |= Pin;      //do not affect other pins
		reg_direct_writel(0,GPIO,gpio_int_bothedge);
    3c1c:	3000      	movi      	r0, 0      	//0x0
    3c1e:	103c      	lrw      	r1, 0x19040068	//19040068 <__stack+0x18c40070>
    3c20:	e3fffdae 	bsr      	0x377c	//377c <writel>
    3c24:	c4004820 	lsli      	r0, r0, 0
		reg_writel(Pin,GPIO,gpio_int_polarity);
    3c28:	1b01      	addi      	r3, sp, 4
    3c2a:	9300      	ld.w      	r0, (r3, 0x0)
    3c2c:	103b      	lrw      	r1, 0x1904003c	//1904003c <__stack+0x18c40044>
    3c2e:	e3fffdb3 	bsr      	0x3794	//3794 <dw_write>
    3c32:	c4004820 	lsli      	r0, r0, 0
		return 0;
    3c36:	3300      	movi      	r3, 0      	//0x0
    3c38:	0433      	br      	0x3c9e	//3c9e <GPIO_Set_IT_Polarity+0x96>
	}
	else if(Polarity==GPIO_IT_Low_Falling)
    3c3a:	6cfb      	mov      	r3, sp
    3c3c:	9360      	ld.w      	r3, (r3, 0x0)
    3c3e:	e9230011 	bnez      	r3, 0x3c60	//3c60 <GPIO_Set_IT_Polarity+0x58>
	{
		//GPIO->gpio_int_bothedge=0;           //bothedge should not be set
		//GPIO->gpio_int_polarity &= ~Pin;     //do not affect other pins
		reg_direct_writel(0,GPIO,gpio_int_bothedge);
    3c42:	3000      	movi      	r0, 0      	//0x0
    3c44:	1032      	lrw      	r1, 0x19040068	//19040068 <__stack+0x18c40070>
    3c46:	e3fffd9b 	bsr      	0x377c	//377c <writel>
    3c4a:	c4004820 	lsli      	r0, r0, 0
		reg_clearl(Pin,GPIO,gpio_int_polarity);
    3c4e:	1b01      	addi      	r3, sp, 4
    3c50:	9300      	ld.w      	r0, (r3, 0x0)
    3c52:	1032      	lrw      	r1, 0x1904003c	//1904003c <__stack+0x18c40044>
    3c54:	e3fffdc0 	bsr      	0x37d4	//37d4 <dw_clear>
    3c58:	c4004820 	lsli      	r0, r0, 0
		return 0;
    3c5c:	3300      	movi      	r3, 0      	//0x0
    3c5e:	0420      	br      	0x3c9e	//3c9e <GPIO_Set_IT_Polarity+0x96>
	}
	else if(Polarity==GPIO_IT_Bothedge)
    3c60:	6cfb      	mov      	r3, sp
    3c62:	9360      	ld.w      	r3, (r3, 0x0)
    3c64:	3b42      	cmpnei      	r3, 2
    3c66:	081b      	bt      	0x3c9c	//3c9c <GPIO_Set_IT_Polarity+0x94>
	{
		//GPIO->gpio_int_bothedge |= Pin;      //do not affect other pins
		reg_writel(Pin,GPIO,gpio_int_bothedge);
    3c68:	1b01      	addi      	r3, sp, 4
    3c6a:	9300      	ld.w      	r0, (r3, 0x0)
    3c6c:	1028      	lrw      	r1, 0x19040068	//19040068 <__stack+0x18c40070>
    3c6e:	e3fffd93 	bsr      	0x3794	//3794 <dw_write>
    3c72:	c4004820 	lsli      	r0, r0, 0
		return 0;
    3c76:	3300      	movi      	r3, 0      	//0x0
    3c78:	0413      	br      	0x3c9e	//3c9e <GPIO_Set_IT_Polarity+0x96>
    3c7a:	0000      	.short	0x0000
    3c7c:	19040030 	.long	0x19040030
    3c80:	000037d4 	.long	0x000037d4
    3c84:	19040034 	.long	0x19040034
    3c88:	00003794 	.long	0x00003794
    3c8c:	19040068 	.long	0x19040068
    3c90:	0000377c 	.long	0x0000377c
    3c94:	19040038 	.long	0x19040038
    3c98:	1904003c 	.long	0x1904003c
	}
	else
		return 1;
    3c9c:	3301      	movi      	r3, 1      	//0x1
}
    3c9e:	6c0f      	mov      	r0, r3
    3ca0:	1402      	addi      	sp, sp, 8
    3ca2:	1490      	pop      	r15

00003ca4 <GPIO_Set_IT_Polar_LOW>:

/*function 7_2: set IT type of pin[n] of portA,low active/falling edge
 *Pin=GPIO_Pin_n or GPIO_Pin_a | GPIO_Pin_b | GPIO_Pin_c .....
 * */
void GPIO_Set_IT_Polar_LOW(Bit32u Pin)
{
    3ca4:	14d0      	push      	r15
    3ca6:	1421      	subi      	sp, sp, 4
    3ca8:	6cfb      	mov      	r3, sp
    3caa:	b300      	st.w      	r0, (r3, 0x0)
	//GPIO->gpio_int_bothedge=0;            //bothedge should not be set
	//GPIO->gpio_int_polarity &= ~Pin;      //do not affect other pins
	reg_direct_writel(0,GPIO,gpio_int_bothedge);
    3cac:	3000      	movi      	r0, 0      	//0x0
    3cae:	1238      	lrw      	r1, 0x19040068	//19040068 <__stack+0x18c40070>
    3cb0:	e3fffd66 	bsr      	0x377c	//377c <writel>
    3cb4:	c4004820 	lsli      	r0, r0, 0
	reg_clearl(Pin,GPIO,gpio_int_polarity);
    3cb8:	6cfb      	mov      	r3, sp
    3cba:	9300      	ld.w      	r0, (r3, 0x0)
    3cbc:	1236      	lrw      	r1, 0x1904003c	//1904003c <__stack+0x18c40044>
    3cbe:	e3fffd8b 	bsr      	0x37d4	//37d4 <dw_clear>
    3cc2:	c4004820 	lsli      	r0, r0, 0
}
    3cc6:	1401      	addi      	sp, sp, 4
    3cc8:	1490      	pop      	r15
	...

00003ccc <GPIO_Set_IT_Polar_HIGH>:

/*function 7_3: set IT type of pin[n] of portA,high active/rising edge
 *Pin=GPIO_Pin_n or GPIO_Pin_a | GPIO_Pin_b | GPIO_Pin_c .....
 * */
void GPIO_Set_IT_Polar_HIGH(Bit32u Pin)
{
    3ccc:	14d0      	push      	r15
    3cce:	1421      	subi      	sp, sp, 4
    3cd0:	6cfb      	mov      	r3, sp
    3cd2:	b300      	st.w      	r0, (r3, 0x0)
	//GPIO->gpio_int_bothedge=0;           //bothedge should not be set
	//GPIO->gpio_int_polarity |= Pin;      //do not affect other pins
	reg_direct_writel(0,GPIO,gpio_int_bothedge);
    3cd4:	3000      	movi      	r0, 0      	//0x0
    3cd6:	122e      	lrw      	r1, 0x19040068	//19040068 <__stack+0x18c40070>
    3cd8:	e3fffd52 	bsr      	0x377c	//377c <writel>
    3cdc:	c4004820 	lsli      	r0, r0, 0
	reg_writel(Pin,GPIO,gpio_int_polarity);
    3ce0:	6cfb      	mov      	r3, sp
    3ce2:	9300      	ld.w      	r0, (r3, 0x0)
    3ce4:	122c      	lrw      	r1, 0x1904003c	//1904003c <__stack+0x18c40044>
    3ce6:	e3fffd57 	bsr      	0x3794	//3794 <dw_write>
    3cea:	c4004820 	lsli      	r0, r0, 0
}
    3cee:	1401      	addi      	sp, sp, 4
    3cf0:	1490      	pop      	r15
	...

00003cf4 <GPIO_Set_IT_Polar_BothEdge>:

/*function 18_1: set IT type of pin[n] of portA,both edge
 *Pin=GPIO_Pin_n or GPIO_Pin_a | GPIO_Pin_b | GPIO_Pin_c .....
 * */
void GPIO_Set_IT_Polar_BothEdge(Bit32u Pin)
{
    3cf4:	14d0      	push      	r15
    3cf6:	1421      	subi      	sp, sp, 4
    3cf8:	6cfb      	mov      	r3, sp
    3cfa:	b300      	st.w      	r0, (r3, 0x0)
	//GPIO->gpio_int_bothedge |= Pin;
	reg_writel(Pin,GPIO,gpio_int_bothedge);
    3cfc:	6cfb      	mov      	r3, sp
    3cfe:	9300      	ld.w      	r0, (r3, 0x0)
    3d00:	1223      	lrw      	r1, 0x19040068	//19040068 <__stack+0x18c40070>
    3d02:	e3fffd49 	bsr      	0x3794	//3794 <dw_write>
    3d06:	c4004820 	lsli      	r0, r0, 0
}
    3d0a:	1401      	addi      	sp, sp, 4
    3d0c:	1490      	pop      	r15
	...

00003d10 <GPIO_Get_ITStat>:

/*function 8_1: get IT status of pin[n] of portA,ACTIVE or INACTIVE
 *Pin=GPIO_Pin_n
 * */
ITStatus_TypeDef GPIO_Get_ITStat(Bit32u Pin)
{
    3d10:	14d0      	push      	r15
    3d12:	1422      	subi      	sp, sp, 8
    3d14:	6cfb      	mov      	r3, sp
    3d16:	b300      	st.w      	r0, (r3, 0x0)
	ITStatus_TypeDef bitstatus=INACTIVE;
    3d18:	1b01      	addi      	r3, sp, 4
    3d1a:	3200      	movi      	r2, 0      	//0x0
    3d1c:	b340      	st.w      	r2, (r3, 0x0)
	//if (!(GPIO->gpio_intstatus & Pin))
	if (!(reg_readl(GPIO, gpio_intstatus) & Pin))
    3d1e:	ea201904 	movih      	r0, 6404      	//0x1904
    3d22:	38a6      	bseti      	r0, 6
    3d24:	e3fffd22 	bsr      	0x3768	//3768 <readl>
    3d28:	c4004820 	lsli      	r0, r0, 0
    3d2c:	6c83      	mov      	r2, r0
    3d2e:	6cfb      	mov      	r3, sp
    3d30:	9360      	ld.w      	r3, (r3, 0x0)
    3d32:	68c8      	and      	r3, r2
    3d34:	e9230006 	bnez      	r3, 0x3d40	//3d40 <GPIO_Get_ITStat+0x30>

	{
		bitstatus = INACTIVE;             /* Interrupt is inactive */
    3d38:	1b01      	addi      	r3, sp, 4
    3d3a:	3200      	movi      	r2, 0      	//0x0
    3d3c:	b340      	st.w      	r2, (r3, 0x0)
    3d3e:	0404      	br      	0x3d46	//3d46 <GPIO_Get_ITStat+0x36>
	}
	else
	{
		bitstatus = ACTIVE;               /* Interrupt is active */
    3d40:	1b01      	addi      	r3, sp, 4
    3d42:	3201      	movi      	r2, 1      	//0x1
    3d44:	b340      	st.w      	r2, (r3, 0x0)
	}
	return bitstatus;
    3d46:	1b01      	addi      	r3, sp, 4
    3d48:	9360      	ld.w      	r3, (r3, 0x0)
}
    3d4a:	6c0f      	mov      	r0, r3
    3d4c:	1402      	addi      	sp, sp, 8
    3d4e:	1490      	pop      	r15

00003d50 <GPIO_Get_RITStat>:

/*function 9_1: get raw IT status of pin[n] of portA,ACTIVE or INACTIVE
 *Pin=GPIO_Pin_n
 * */
ITStatus_TypeDef GPIO_Get_RITStat(Bit32u Pin)
{
    3d50:	14d0      	push      	r15
    3d52:	1422      	subi      	sp, sp, 8
    3d54:	6cfb      	mov      	r3, sp
    3d56:	b300      	st.w      	r0, (r3, 0x0)
	ITStatus_TypeDef bitstatus=INACTIVE;
    3d58:	1b01      	addi      	r3, sp, 4
    3d5a:	3200      	movi      	r2, 0      	//0x0
    3d5c:	b340      	st.w      	r2, (r3, 0x0)
	//if (!(GPIO->gpio_raw_intstatus & Pin))
	if (!(reg_readl(GPIO, gpio_raw_intstatus) & Pin))
    3d5e:	1112      	lrw      	r0, 0x19040044	//19040044 <__stack+0x18c4004c>
    3d60:	e3fffd04 	bsr      	0x3768	//3768 <readl>
    3d64:	c4004820 	lsli      	r0, r0, 0
    3d68:	6c83      	mov      	r2, r0
    3d6a:	6cfb      	mov      	r3, sp
    3d6c:	9360      	ld.w      	r3, (r3, 0x0)
    3d6e:	68c8      	and      	r3, r2
    3d70:	e9230006 	bnez      	r3, 0x3d7c	//3d7c <GPIO_Get_RITStat+0x2c>
	{
		bitstatus = INACTIVE;             /* Interrupt is inactive */
    3d74:	1b01      	addi      	r3, sp, 4
    3d76:	3200      	movi      	r2, 0      	//0x0
    3d78:	b340      	st.w      	r2, (r3, 0x0)
    3d7a:	0404      	br      	0x3d82	//3d82 <GPIO_Get_RITStat+0x32>
	}
	else
	{
		bitstatus = ACTIVE;               /* Interrupt is active */
    3d7c:	1b01      	addi      	r3, sp, 4
    3d7e:	3201      	movi      	r2, 1      	//0x1
    3d80:	b340      	st.w      	r2, (r3, 0x0)
	}
	return bitstatus;
    3d82:	1b01      	addi      	r3, sp, 4
    3d84:	9360      	ld.w      	r3, (r3, 0x0)
}
    3d86:	6c0f      	mov      	r0, r3
    3d88:	1402      	addi      	sp, sp, 8
    3d8a:	1490      	pop      	r15

00003d8c <GPIO_Debounce_CMD>:

/*function 10_1: set Debounce enable or disable of pin[n] of portA
 *Pin=GPIO_Pin_n or GPIO_Pin_a | GPIO_Pin_b | GPIO_Pin_c .....
 * */
Bit32u GPIO_Debounce_CMD(Bit32u Pin,State_TypeDef Newstate)
{
    3d8c:	14d0      	push      	r15
    3d8e:	1422      	subi      	sp, sp, 8
    3d90:	1b01      	addi      	r3, sp, 4
    3d92:	b300      	st.w      	r0, (r3, 0x0)
    3d94:	6cfb      	mov      	r3, sp
    3d96:	b320      	st.w      	r1, (r3, 0x0)
	if(Newstate==ENABLE)
    3d98:	6cfb      	mov      	r3, sp
    3d9a:	9360      	ld.w      	r3, (r3, 0x0)
    3d9c:	3b41      	cmpnei      	r3, 1
    3d9e:	080a      	bt      	0x3db2	//3db2 <GPIO_Debounce_CMD+0x26>
	{
		//GPIO->gpio_debounce |= Pin;      // do not affect other pins
		reg_writel(Pin,GPIO,gpio_debounce);
    3da0:	1b01      	addi      	r3, sp, 4
    3da2:	9300      	ld.w      	r0, (r3, 0x0)
    3da4:	1121      	lrw      	r1, 0x19040048	//19040048 <__stack+0x18c40050>
    3da6:	e3fffcf7 	bsr      	0x3794	//3794 <dw_write>
    3daa:	c4004820 	lsli      	r0, r0, 0
		return 0;
    3dae:	3300      	movi      	r3, 0      	//0x0
    3db0:	040f      	br      	0x3dce	//3dce <GPIO_Debounce_CMD+0x42>
	}
	else if(Newstate==DISABLE)
    3db2:	6cfb      	mov      	r3, sp
    3db4:	9360      	ld.w      	r3, (r3, 0x0)
    3db6:	e923000b 	bnez      	r3, 0x3dcc	//3dcc <GPIO_Debounce_CMD+0x40>
	{
		//GPIO->gpio_debounce &= ~Pin;      //do not affect other pins
		reg_clearl(Pin,GPIO,gpio_debounce);
    3dba:	1b01      	addi      	r3, sp, 4
    3dbc:	9300      	ld.w      	r0, (r3, 0x0)
    3dbe:	103b      	lrw      	r1, 0x19040048	//19040048 <__stack+0x18c40050>
    3dc0:	e3fffd0a 	bsr      	0x37d4	//37d4 <dw_clear>
    3dc4:	c4004820 	lsli      	r0, r0, 0
		return 0;
    3dc8:	3300      	movi      	r3, 0      	//0x0
    3dca:	0402      	br      	0x3dce	//3dce <GPIO_Debounce_CMD+0x42>
	}
	else
		return 1;
    3dcc:	3301      	movi      	r3, 1      	//0x1
}
    3dce:	6c0f      	mov      	r0, r3
    3dd0:	1402      	addi      	sp, sp, 8
    3dd2:	1490      	pop      	r15

00003dd4 <GPIO_Debounce_ENABLE>:

/*function 10_2: set Debounce enable of pin[n] of portA
 *Pin=GPIO_Pin_n or GPIO_Pin_a | GPIO_Pin_b | GPIO_Pin_c .....
 * */
void GPIO_Debounce_ENABLE(Bit32u Pin)
{
    3dd4:	14d0      	push      	r15
    3dd6:	1421      	subi      	sp, sp, 4
    3dd8:	6cfb      	mov      	r3, sp
    3dda:	b300      	st.w      	r0, (r3, 0x0)
	//GPIO->gpio_debounce |= Pin;      // do not affect other pins
	reg_writel(Pin,GPIO,gpio_debounce);
    3ddc:	6cfb      	mov      	r3, sp
    3dde:	9300      	ld.w      	r0, (r3, 0x0)
    3de0:	1032      	lrw      	r1, 0x19040048	//19040048 <__stack+0x18c40050>
    3de2:	e3fffcd9 	bsr      	0x3794	//3794 <dw_write>
    3de6:	c4004820 	lsli      	r0, r0, 0
}
    3dea:	1401      	addi      	sp, sp, 4
    3dec:	1490      	pop      	r15
	...

00003df0 <GPIO_Debounce_DISABLE>:

/*function 10_3: set Debounce disable of pin[n] of portA
 *Pin=GPIO_Pin_n or GPIO_Pin_a | GPIO_Pin_b | GPIO_Pin_c .....
 * */
void GPIO_Debounce_DISABLE(Bit32u Pin)
{
    3df0:	14d0      	push      	r15
    3df2:	1421      	subi      	sp, sp, 4
    3df4:	6cfb      	mov      	r3, sp
    3df6:	b300      	st.w      	r0, (r3, 0x0)
	//GPIO->gpio_debounce &= ~Pin;      // do not affect other pins
	reg_clearl(Pin,GPIO,gpio_debounce);
    3df8:	6cfb      	mov      	r3, sp
    3dfa:	9300      	ld.w      	r0, (r3, 0x0)
    3dfc:	102b      	lrw      	r1, 0x19040048	//19040048 <__stack+0x18c40050>
    3dfe:	e3fffceb 	bsr      	0x37d4	//37d4 <dw_clear>
    3e02:	c4004820 	lsli      	r0, r0, 0
}
    3e06:	1401      	addi      	sp, sp, 4
    3e08:	1490      	pop      	r15
    3e0a:	0000      	.short	0x0000
    3e0c:	19040068 	.long	0x19040068
    3e10:	0000377c 	.long	0x0000377c
    3e14:	1904003c 	.long	0x1904003c
    3e18:	000037d4 	.long	0x000037d4
    3e1c:	00003794 	.long	0x00003794
    3e20:	00003768 	.long	0x00003768
    3e24:	19040044 	.long	0x19040044
    3e28:	19040048 	.long	0x19040048

00003e2c <GPIO_Clear_ITSTAT>:

/*function 11_1: clear IT flag of pin[n] of portA
 *Pin=GPIO_Pin_n or GPIO_Pin_a | GPIO_Pin_b | GPIO_Pin_c .....
 * */
void GPIO_Clear_ITSTAT(Bit32u Pin)
{
    3e2c:	14d0      	push      	r15
    3e2e:	1421      	subi      	sp, sp, 4
    3e30:	6cfb      	mov      	r3, sp
    3e32:	b300      	st.w      	r0, (r3, 0x0)
	//GPIO->gpio_porta_eoi |= Pin;       // do not affect other pins
	reg_direct_writel(Pin,GPIO,gpio_porta_eoi);  //gpio_porta_eoi write only
    3e34:	6cfb      	mov      	r3, sp
    3e36:	9300      	ld.w      	r0, (r3, 0x0)
    3e38:	123a      	lrw      	r1, 0x1904004c	//1904004c <__stack+0x18c40054>
    3e3a:	e3fffca1 	bsr      	0x377c	//377c <writel>
    3e3e:	c4004820 	lsli      	r0, r0, 0
}
    3e42:	1401      	addi      	sp, sp, 4
    3e44:	1490      	pop      	r15
	...

00003e48 <GPIOA_Get_Ext_Data>:

/*function 12_1: get external value of pin[n] of portA
 *Pin=GPIO_Pin_n
 * */
Bit32u GPIOA_Get_Ext_Data(Bit32u Pin)
{
    3e48:	14d0      	push      	r15
    3e4a:	1422      	subi      	sp, sp, 8
    3e4c:	6cfb      	mov      	r3, sp
    3e4e:	b300      	st.w      	r0, (r3, 0x0)
	Bit32u temp;
	//temp = GPIO->gpio_ext_porta & Pin;
	temp = reg_readl(GPIO, gpio_ext_porta)& Pin;
    3e50:	1216      	lrw      	r0, 0x19040050	//19040050 <__stack+0x18c40058>
    3e52:	e3fffc8b 	bsr      	0x3768	//3768 <readl>
    3e56:	c4004820 	lsli      	r0, r0, 0
    3e5a:	6c43      	mov      	r1, r0
    3e5c:	1b01      	addi      	r3, sp, 4
    3e5e:	6cbb      	mov      	r2, sp
    3e60:	9240      	ld.w      	r2, (r2, 0x0)
    3e62:	6884      	and      	r2, r1
    3e64:	b340      	st.w      	r2, (r3, 0x0)
	return temp;
    3e66:	1b01      	addi      	r3, sp, 4
    3e68:	9360      	ld.w      	r3, (r3, 0x0)
}
    3e6a:	6c0f      	mov      	r0, r3
    3e6c:	1402      	addi      	sp, sp, 8
    3e6e:	1490      	pop      	r15

00003e70 <GPIOB_Get_Ext_Data>:

/*function 13_1: get external value of pin[n] of portB
 *Pin=GPIO_Pin_n
 * */
Bit32u GPIOB_Get_Ext_Data(Bit32u Pin)
{
    3e70:	14d0      	push      	r15
    3e72:	1422      	subi      	sp, sp, 8
    3e74:	6cfb      	mov      	r3, sp
    3e76:	b300      	st.w      	r0, (r3, 0x0)
	Bit32u temp;
	//temp = GPIO->gpio_ext_portb & Pin;
	temp = reg_readl(GPIO, gpio_ext_portb)& Pin;
    3e78:	120e      	lrw      	r0, 0x19040054	//19040054 <__stack+0x18c4005c>
    3e7a:	e3fffc77 	bsr      	0x3768	//3768 <readl>
    3e7e:	c4004820 	lsli      	r0, r0, 0
    3e82:	6c43      	mov      	r1, r0
    3e84:	1b01      	addi      	r3, sp, 4
    3e86:	6cbb      	mov      	r2, sp
    3e88:	9240      	ld.w      	r2, (r2, 0x0)
    3e8a:	6884      	and      	r2, r1
    3e8c:	b340      	st.w      	r2, (r3, 0x0)
	return temp;
    3e8e:	1b01      	addi      	r3, sp, 4
    3e90:	9360      	ld.w      	r3, (r3, 0x0)
}
    3e92:	6c0f      	mov      	r0, r3
    3e94:	1402      	addi      	sp, sp, 8
    3e96:	1490      	pop      	r15

00003e98 <GPIOC_Get_Ext_Data>:

/*function 14_1: get external value of pin[n] of portC
 *Pin=GPIO_Pin_n
 * */
Bit32u GPIOC_Get_Ext_Data(Bit32u Pin)
{
    3e98:	14d0      	push      	r15
    3e9a:	1422      	subi      	sp, sp, 8
    3e9c:	6cfb      	mov      	r3, sp
    3e9e:	b300      	st.w      	r0, (r3, 0x0)
	Bit32u temp;
	//temp = GPIO->gpio_ext_portc & Pin;
	temp = reg_readl(GPIO, gpio_ext_portc)& Pin;
    3ea0:	1205      	lrw      	r0, 0x19040058	//19040058 <__stack+0x18c40060>
    3ea2:	e3fffc63 	bsr      	0x3768	//3768 <readl>
    3ea6:	c4004820 	lsli      	r0, r0, 0
    3eaa:	6c43      	mov      	r1, r0
    3eac:	1b01      	addi      	r3, sp, 4
    3eae:	6cbb      	mov      	r2, sp
    3eb0:	9240      	ld.w      	r2, (r2, 0x0)
    3eb2:	6884      	and      	r2, r1
    3eb4:	b340      	st.w      	r2, (r3, 0x0)
	return temp;
    3eb6:	1b01      	addi      	r3, sp, 4
    3eb8:	9360      	ld.w      	r3, (r3, 0x0)
}
    3eba:	6c0f      	mov      	r0, r3
    3ebc:	1402      	addi      	sp, sp, 8
    3ebe:	1490      	pop      	r15

00003ec0 <GPIOD_Get_Ext_Data>:

/*function 15_1: get external value of pin[n] of portD
 *Pin=GPIO_Pin_n
 * */
Bit32u GPIOD_Get_Ext_Data(Bit32u Pin)
{
    3ec0:	14d0      	push      	r15
    3ec2:	1422      	subi      	sp, sp, 8
    3ec4:	6cfb      	mov      	r3, sp
    3ec6:	b300      	st.w      	r0, (r3, 0x0)
	Bit32u temp;
	//temp = GPIO->gpio_ext_portd & Pin;
	temp = reg_readl(GPIO, gpio_ext_portd)& Pin;
    3ec8:	111c      	lrw      	r0, 0x1904005c	//1904005c <__stack+0x18c40064>
    3eca:	e3fffc4f 	bsr      	0x3768	//3768 <readl>
    3ece:	c4004820 	lsli      	r0, r0, 0
    3ed2:	6c43      	mov      	r1, r0
    3ed4:	1b01      	addi      	r3, sp, 4
    3ed6:	6cbb      	mov      	r2, sp
    3ed8:	9240      	ld.w      	r2, (r2, 0x0)
    3eda:	6884      	and      	r2, r1
    3edc:	b340      	st.w      	r2, (r3, 0x0)
	return temp;
    3ede:	1b01      	addi      	r3, sp, 4
    3ee0:	9360      	ld.w      	r3, (r3, 0x0)
}
    3ee2:	6c0f      	mov      	r0, r3
    3ee4:	1402      	addi      	sp, sp, 8
    3ee6:	1490      	pop      	r15

00003ee8 <GPIOA_IT_Sync_CMD>:

/*function 16_1: set IT of pin[n] of portA Synchronize to pclk_intr or not*/
Bit32u GPIOA_IT_Sync_CMD(State_TypeDef Newstate)
{
    3ee8:	14d0      	push      	r15
    3eea:	1421      	subi      	sp, sp, 4
    3eec:	6cfb      	mov      	r3, sp
    3eee:	b300      	st.w      	r0, (r3, 0x0)
	if(Newstate==ENABLE)
    3ef0:	6cfb      	mov      	r3, sp
    3ef2:	9360      	ld.w      	r3, (r3, 0x0)
    3ef4:	3b41      	cmpnei      	r3, 1
    3ef6:	0809      	bt      	0x3f08	//3f08 <GPIOA_IT_Sync_CMD+0x20>
	{
		//GPIO->gpio_ls_sync = 1;
		reg_direct_writel(1,GPIO,gpio_ls_sync);
    3ef8:	3001      	movi      	r0, 1      	//0x1
    3efa:	1131      	lrw      	r1, 0x19040060	//19040060 <__stack+0x18c40068>
    3efc:	e3fffc40 	bsr      	0x377c	//377c <writel>
    3f00:	c4004820 	lsli      	r0, r0, 0
		return 0;
    3f04:	3300      	movi      	r3, 0      	//0x0
    3f06:	040e      	br      	0x3f22	//3f22 <GPIOA_IT_Sync_CMD+0x3a>
	}
	else if(Newstate==DISABLE)
    3f08:	6cfb      	mov      	r3, sp
    3f0a:	9360      	ld.w      	r3, (r3, 0x0)
    3f0c:	e923000a 	bnez      	r3, 0x3f20	//3f20 <GPIOA_IT_Sync_CMD+0x38>
	{
		//GPIO->gpio_ls_sync =0;
		reg_direct_writel(0,GPIO,gpio_ls_sync);
    3f10:	3000      	movi      	r0, 0      	//0x0
    3f12:	112b      	lrw      	r1, 0x19040060	//19040060 <__stack+0x18c40068>
    3f14:	e3fffc34 	bsr      	0x377c	//377c <writel>
    3f18:	c4004820 	lsli      	r0, r0, 0
		return 0;
    3f1c:	3300      	movi      	r3, 0      	//0x0
    3f1e:	0402      	br      	0x3f22	//3f22 <GPIOA_IT_Sync_CMD+0x3a>
	}
	else
		return 1;
    3f20:	3301      	movi      	r3, 1      	//0x1
}
    3f22:	6c0f      	mov      	r0, r3
    3f24:	1401      	addi      	sp, sp, 4
    3f26:	1490      	pop      	r15

00003f28 <GPIO_Get_ID_Code>:

/*function 17_1: get gpio_id_code */
Bit32u GPIO_Get_ID_Code(void)
{
    3f28:	14d1      	push      	r4, r15
    3f2a:	1421      	subi      	sp, sp, 4
	Bit32u temp;
	//temp = GPIO->gpio_id_code;
	temp =reg_readl(GPIO, gpio_id_code);
    3f2c:	6d3b      	mov      	r4, sp
    3f2e:	1105      	lrw      	r0, 0x19040064	//19040064 <__stack+0x18c4006c>
    3f30:	e3fffc1c 	bsr      	0x3768	//3768 <readl>
    3f34:	c4004820 	lsli      	r0, r0, 0
    3f38:	b400      	st.w      	r0, (r4, 0x0)
	return temp;
    3f3a:	6cfb      	mov      	r3, sp
    3f3c:	9360      	ld.w      	r3, (r3, 0x0)
}
    3f3e:	6c0f      	mov      	r0, r3
    3f40:	1401      	addi      	sp, sp, 4
    3f42:	1491      	pop      	r4, r15

00003f44 <GPIO_Get_Comp_Ver>:

/*function 19_1: get gpio comp version */
Bit32u GPIO_Get_Comp_Ver(void)
{
    3f44:	14d1      	push      	r4, r15
    3f46:	1421      	subi      	sp, sp, 4
	Bit32u temp;
	//temp = GPIO->gpio_ver_id_code;
	temp =reg_readl(GPIO, gpio_ver_id_code);
    3f48:	6d3b      	mov      	r4, sp
    3f4a:	101f      	lrw      	r0, 0x1904006c	//1904006c <__stack+0x18c40074>
    3f4c:	e3fffc0e 	bsr      	0x3768	//3768 <readl>
    3f50:	c4004820 	lsli      	r0, r0, 0
    3f54:	b400      	st.w      	r0, (r4, 0x0)
	return temp;
    3f56:	6cfb      	mov      	r3, sp
    3f58:	9360      	ld.w      	r3, (r3, 0x0)
}
    3f5a:	6c0f      	mov      	r0, r3
    3f5c:	1401      	addi      	sp, sp, 4
    3f5e:	1491      	pop      	r4, r15

00003f60 <GPIO_Get_Config>:

/*function 20_1: get par of config_1 or config_2 */
Bit32u GPIO_Get_Config(GPIO_ParamterTypeDef Paramter)
{
    3f60:	14d1      	push      	r4, r15
    3f62:	1424      	subi      	sp, sp, 16
    3f64:	6cfb      	mov      	r3, sp
    3f66:	b300      	st.w      	r0, (r3, 0x0)
	Bit32u temp,temp1,temp2=0;
    3f68:	1b02      	addi      	r3, sp, 8
    3f6a:	3200      	movi      	r2, 0      	//0x0
    3f6c:	b340      	st.w      	r2, (r3, 0x0)
	//temp1= GPIO->gpio_config_reg1;
	//temp2= GPIO->gpio_config_reg2;
	temp1 =reg_readl(GPIO, gpio_config_reg1);
    3f6e:	1c01      	addi      	r4, sp, 4
    3f70:	1016      	lrw      	r0, 0x19040074	//19040074 <__stack+0x18c4007c>
    3f72:	e3fffbfb 	bsr      	0x3768	//3768 <readl>
    3f76:	c4004820 	lsli      	r0, r0, 0
    3f7a:	b400      	st.w      	r0, (r4, 0x0)
	temp2 =reg_readl(GPIO, gpio_config_reg2);
    3f7c:	1c02      	addi      	r4, sp, 8
    3f7e:	1014      	lrw      	r0, 0x19040070	//19040070 <__stack+0x18c40078>
    3f80:	e3fffbf4 	bsr      	0x3768	//3768 <readl>
    3f84:	c4004820 	lsli      	r0, r0, 0
    3f88:	b400      	st.w      	r0, (r4, 0x0)
	switch(Paramter)
    3f8a:	6cfb      	mov      	r3, sp
    3f8c:	9340      	ld.w      	r2, (r3, 0x0)
    3f8e:	3a13      	cmphsi      	r2, 20      	//0x14
    3f90:	08c0      	bt      	0x4110	//4110 <GPIO_Get_Config+0x1b0>
    3f92:	9360      	ld.w      	r3, (r3, 0x0)
    3f94:	4342      	lsli      	r2, r3, 2
    3f96:	106f      	lrw      	r3, 0x102b8	//102b8 <__etext+0x708>
    3f98:	5a6c      	addu      	r3, r2, r3
    3f9a:	9360      	ld.w      	r3, (r3, 0x0)
    3f9c:	780c      	jmp      	r3
    3f9e:	0000      	.short	0x0000
    3fa0:	1904004c 	.long	0x1904004c
    3fa4:	0000377c 	.long	0x0000377c
    3fa8:	19040050 	.long	0x19040050
    3fac:	00003768 	.long	0x00003768
    3fb0:	19040054 	.long	0x19040054
    3fb4:	19040058 	.long	0x19040058
    3fb8:	1904005c 	.long	0x1904005c
    3fbc:	19040060 	.long	0x19040060
    3fc0:	19040064 	.long	0x19040064
    3fc4:	1904006c 	.long	0x1904006c
    3fc8:	19040074 	.long	0x19040074
    3fcc:	19040070 	.long	0x19040070
    3fd0:	000102b8 	.long	0x000102b8
	{
	    /*config_1*/
		case INTERRUPT_BOTH_EDGE_TYPE:    temp= (temp1>>21) & 0x01;     break; /* bit[21] */
    3fd4:	1b01      	addi      	r3, sp, 4
    3fd6:	9360      	ld.w      	r3, (r3, 0x0)
    3fd8:	4b55      	lsri      	r2, r3, 21
    3fda:	1b03      	addi      	r3, sp, 12
    3fdc:	e4422001 	andi      	r2, r2, 1
    3fe0:	b340      	st.w      	r2, (r3, 0x0)
    3fe2:	049c      	br      	0x411a	//411a <GPIO_Get_Config+0x1ba>
		case ENCODED_ID_WIDTH:            temp= (temp1>>16) & 0x1F;     break; /* bit[20:16] */
    3fe4:	1b01      	addi      	r3, sp, 4
    3fe6:	9360      	ld.w      	r3, (r3, 0x0)
    3fe8:	4b50      	lsri      	r2, r3, 16
    3fea:	1b03      	addi      	r3, sp, 12
    3fec:	e442201f 	andi      	r2, r2, 31
    3ff0:	b340      	st.w      	r2, (r3, 0x0)
    3ff2:	0494      	br      	0x411a	//411a <GPIO_Get_Config+0x1ba>
		case GPIO_ID:                     temp= (temp1>>15) & 0x01;     break; /* bit[15] */
    3ff4:	1b01      	addi      	r3, sp, 4
    3ff6:	9360      	ld.w      	r3, (r3, 0x0)
    3ff8:	4b4f      	lsri      	r2, r3, 15
    3ffa:	1b03      	addi      	r3, sp, 12
    3ffc:	e4422001 	andi      	r2, r2, 1
    4000:	b340      	st.w      	r2, (r3, 0x0)
    4002:	048c      	br      	0x411a	//411a <GPIO_Get_Config+0x1ba>
		case ADD_ENCODED_PARAMS:          temp= (temp1>>14) & 0x01;     break; /* bit[14] */
    4004:	1b01      	addi      	r3, sp, 4
    4006:	9360      	ld.w      	r3, (r3, 0x0)
    4008:	4b4e      	lsri      	r2, r3, 14
    400a:	1b03      	addi      	r3, sp, 12
    400c:	e4422001 	andi      	r2, r2, 1
    4010:	b340      	st.w      	r2, (r3, 0x0)
    4012:	0484      	br      	0x411a	//411a <GPIO_Get_Config+0x1ba>
		case DEBOUNCE:                    temp= (temp1>>13) & 0x01;     break; /* bit[13] */
    4014:	1b01      	addi      	r3, sp, 4
    4016:	9360      	ld.w      	r3, (r3, 0x0)
    4018:	4b4d      	lsri      	r2, r3, 13
    401a:	1b03      	addi      	r3, sp, 12
    401c:	e4422001 	andi      	r2, r2, 1
    4020:	b340      	st.w      	r2, (r3, 0x0)
    4022:	047c      	br      	0x411a	//411a <GPIO_Get_Config+0x1ba>
		case PORTA_INTR:                  temp= (temp1>>12) & 0x01;     break; /* bit[12] */
    4024:	1b01      	addi      	r3, sp, 4
    4026:	9360      	ld.w      	r3, (r3, 0x0)
    4028:	4b4c      	lsri      	r2, r3, 12
    402a:	1b03      	addi      	r3, sp, 12
    402c:	e4422001 	andi      	r2, r2, 1
    4030:	b340      	st.w      	r2, (r3, 0x0)
    4032:	0474      	br      	0x411a	//411a <GPIO_Get_Config+0x1ba>
		case HW_PORTD:                    temp= (temp1>>11) & 0x01;     break; /* bit[11] */
    4034:	1b01      	addi      	r3, sp, 4
    4036:	9360      	ld.w      	r3, (r3, 0x0)
    4038:	4b4b      	lsri      	r2, r3, 11
    403a:	1b03      	addi      	r3, sp, 12
    403c:	e4422001 	andi      	r2, r2, 1
    4040:	b340      	st.w      	r2, (r3, 0x0)
    4042:	046c      	br      	0x411a	//411a <GPIO_Get_Config+0x1ba>
		case HW_PORTC:                    temp= (temp1>>10) & 0x01;     break; /* bit[10] */
    4044:	1b01      	addi      	r3, sp, 4
    4046:	9360      	ld.w      	r3, (r3, 0x0)
    4048:	4b4a      	lsri      	r2, r3, 10
    404a:	1b03      	addi      	r3, sp, 12
    404c:	e4422001 	andi      	r2, r2, 1
    4050:	b340      	st.w      	r2, (r3, 0x0)
    4052:	0464      	br      	0x411a	//411a <GPIO_Get_Config+0x1ba>
		case HW_PORTB:                    temp= (temp1>>9) & 0x01;      break; /* bit[9] */
    4054:	1b01      	addi      	r3, sp, 4
    4056:	9360      	ld.w      	r3, (r3, 0x0)
    4058:	4b49      	lsri      	r2, r3, 9
    405a:	1b03      	addi      	r3, sp, 12
    405c:	e4422001 	andi      	r2, r2, 1
    4060:	b340      	st.w      	r2, (r3, 0x0)
    4062:	045c      	br      	0x411a	//411a <GPIO_Get_Config+0x1ba>
		case HW_PORTA:                    temp= (temp1>>8) & 0x01;      break; /* bit[8] */
    4064:	1b01      	addi      	r3, sp, 4
    4066:	9360      	ld.w      	r3, (r3, 0x0)
    4068:	4b48      	lsri      	r2, r3, 8
    406a:	1b03      	addi      	r3, sp, 12
    406c:	e4422001 	andi      	r2, r2, 1
    4070:	b340      	st.w      	r2, (r3, 0x0)
    4072:	0454      	br      	0x411a	//411a <GPIO_Get_Config+0x1ba>
		case PORTD_SINGLE_CTL:            temp= (temp1>>7) & 0x01;      break; /* bit[7] */
    4074:	1b01      	addi      	r3, sp, 4
    4076:	9360      	ld.w      	r3, (r3, 0x0)
    4078:	4b47      	lsri      	r2, r3, 7
    407a:	1b03      	addi      	r3, sp, 12
    407c:	e4422001 	andi      	r2, r2, 1
    4080:	b340      	st.w      	r2, (r3, 0x0)
    4082:	044c      	br      	0x411a	//411a <GPIO_Get_Config+0x1ba>
		case PORTC_SINGLE_CTL:            temp= (temp1>>6) & 0x01;      break; /* bit[6] */
    4084:	1b01      	addi      	r3, sp, 4
    4086:	9360      	ld.w      	r3, (r3, 0x0)
    4088:	4b46      	lsri      	r2, r3, 6
    408a:	1b03      	addi      	r3, sp, 12
    408c:	e4422001 	andi      	r2, r2, 1
    4090:	b340      	st.w      	r2, (r3, 0x0)
    4092:	0444      	br      	0x411a	//411a <GPIO_Get_Config+0x1ba>
		case PORTB_SINGLE_CTL:            temp= (temp1>>5) & 0x01;      break; /* bit[5] */
    4094:	1b01      	addi      	r3, sp, 4
    4096:	9360      	ld.w      	r3, (r3, 0x0)
    4098:	4b45      	lsri      	r2, r3, 5
    409a:	1b03      	addi      	r3, sp, 12
    409c:	e4422001 	andi      	r2, r2, 1
    40a0:	b340      	st.w      	r2, (r3, 0x0)
    40a2:	043c      	br      	0x411a	//411a <GPIO_Get_Config+0x1ba>
		case PORTA_SINGLE_CTL:            temp= (temp1>>4) & 0x01;      break; /* bit[4] */
    40a4:	1b01      	addi      	r3, sp, 4
    40a6:	9360      	ld.w      	r3, (r3, 0x0)
    40a8:	4b44      	lsri      	r2, r3, 4
    40aa:	1b03      	addi      	r3, sp, 12
    40ac:	e4422001 	andi      	r2, r2, 1
    40b0:	b340      	st.w      	r2, (r3, 0x0)
    40b2:	0434      	br      	0x411a	//411a <GPIO_Get_Config+0x1ba>
		case NUM_PORTS:                   temp= (temp1>>2) & 0x03;      break; /* bit[3:2] */
    40b4:	1b01      	addi      	r3, sp, 4
    40b6:	9360      	ld.w      	r3, (r3, 0x0)
    40b8:	4b42      	lsri      	r2, r3, 2
    40ba:	1b03      	addi      	r3, sp, 12
    40bc:	e4422003 	andi      	r2, r2, 3
    40c0:	b340      	st.w      	r2, (r3, 0x0)
    40c2:	042c      	br      	0x411a	//411a <GPIO_Get_Config+0x1ba>
		case APB_DATA_WIDTH:              temp= temp1 & 0x03;           break; /* bit[1:0] */
    40c4:	1b03      	addi      	r3, sp, 12
    40c6:	1a01      	addi      	r2, sp, 4
    40c8:	9240      	ld.w      	r2, (r2, 0x0)
    40ca:	e4422003 	andi      	r2, r2, 3
    40ce:	b340      	st.w      	r2, (r3, 0x0)
    40d0:	0425      	br      	0x411a	//411a <GPIO_Get_Config+0x1ba>
		/*config_2*/
		case ENCODED_ID_PWIDTH_D:         temp= (temp2>>15) & 0x1F;     break; /* bit[19:15] */
    40d2:	1b02      	addi      	r3, sp, 8
    40d4:	9360      	ld.w      	r3, (r3, 0x0)
    40d6:	4b4f      	lsri      	r2, r3, 15
    40d8:	1b03      	addi      	r3, sp, 12
    40da:	e442201f 	andi      	r2, r2, 31
    40de:	b340      	st.w      	r2, (r3, 0x0)
    40e0:	041d      	br      	0x411a	//411a <GPIO_Get_Config+0x1ba>
		case ENCODED_ID_PWIDTH_C:         temp= (temp2>>10) & 0x1F;     break; /* bit[14:10] */
    40e2:	1b02      	addi      	r3, sp, 8
    40e4:	9360      	ld.w      	r3, (r3, 0x0)
    40e6:	4b4a      	lsri      	r2, r3, 10
    40e8:	1b03      	addi      	r3, sp, 12
    40ea:	e442201f 	andi      	r2, r2, 31
    40ee:	b340      	st.w      	r2, (r3, 0x0)
    40f0:	0415      	br      	0x411a	//411a <GPIO_Get_Config+0x1ba>
		case ENCODED_ID_PWIDTH_B:         temp= (temp2>>5) & 0x1F;      break; /* bit[9:5] */
    40f2:	1b02      	addi      	r3, sp, 8
    40f4:	9360      	ld.w      	r3, (r3, 0x0)
    40f6:	4b45      	lsri      	r2, r3, 5
    40f8:	1b03      	addi      	r3, sp, 12
    40fa:	e442201f 	andi      	r2, r2, 31
    40fe:	b340      	st.w      	r2, (r3, 0x0)
    4100:	040d      	br      	0x411a	//411a <GPIO_Get_Config+0x1ba>
		case ENCODED_ID_PWIDTH_A:         temp= temp2 & 0x1F;           break; /* bit[4:0] */
    4102:	1b03      	addi      	r3, sp, 12
    4104:	1a02      	addi      	r2, sp, 8
    4106:	9240      	ld.w      	r2, (r2, 0x0)
    4108:	e442201f 	andi      	r2, r2, 31
    410c:	b340      	st.w      	r2, (r3, 0x0)
    410e:	0406      	br      	0x411a	//411a <GPIO_Get_Config+0x1ba>
		default:                          temp= 0xFFFFFFFF;             break;
    4110:	1a03      	addi      	r2, sp, 12
    4112:	3300      	movi      	r3, 0      	//0x0
    4114:	2b00      	subi      	r3, 1      	//0x1
    4116:	b260      	st.w      	r3, (r2, 0x0)
    4118:	6c00      	or      	r0, r0
	}
	return temp;
    411a:	1b03      	addi      	r3, sp, 12
    411c:	9360      	ld.w      	r3, (r3, 0x0)
}
    411e:	6c0f      	mov      	r0, r3
    4120:	1404      	addi      	sp, sp, 16
    4122:	1491      	pop      	r4, r15

00004124 <GPIOB_Config>:

/*config function1*/
void GPIOB_Config(Bit32u Pin,GPIO_Source_TypeDef Source,GPIO_Direction_TypeDef Direction)
{
    4124:	14d0      	push      	r15
    4126:	1423      	subi      	sp, sp, 12
    4128:	1b02      	addi      	r3, sp, 8
    412a:	b300      	st.w      	r0, (r3, 0x0)
    412c:	1b01      	addi      	r3, sp, 4
    412e:	b320      	st.w      	r1, (r3, 0x0)
    4130:	6cfb      	mov      	r3, sp
    4132:	b340      	st.w      	r2, (r3, 0x0)
	GPIO_Set_Pin_Source(GPIOB,Pin,Source);
    4134:	1a02      	addi      	r2, sp, 8
    4136:	1b01      	addi      	r3, sp, 4
    4138:	ea201904 	movih      	r0, 6404      	//0x1904
    413c:	200b      	addi      	r0, 12      	//0xc
    413e:	9220      	ld.w      	r1, (r2, 0x0)
    4140:	9340      	ld.w      	r2, (r3, 0x0)
    4142:	e3fffc5d 	bsr      	0x39fc	//39fc <GPIO_Set_Pin_Source>
    4146:	c4004820 	lsli      	r0, r0, 0
	GPIO_Set_Pin_Dir(GPIOB,Pin,Direction);
    414a:	1a02      	addi      	r2, sp, 8
    414c:	6cfb      	mov      	r3, sp
    414e:	ea201904 	movih      	r0, 6404      	//0x1904
    4152:	200b      	addi      	r0, 12      	//0xc
    4154:	9220      	ld.w      	r1, (r2, 0x0)
    4156:	9340      	ld.w      	r2, (r3, 0x0)
    4158:	e3fffbfc 	bsr      	0x3950	//3950 <GPIO_Set_Pin_Dir>
    415c:	c4004820 	lsli      	r0, r0, 0
}
    4160:	1403      	addi      	sp, sp, 12
    4162:	1490      	pop      	r15

00004164 <GPIOC_Config>:

/*config function2*/
void GPIOC_Config(Bit32u Pin,GPIO_Source_TypeDef Source,GPIO_Direction_TypeDef Direction)
{
    4164:	14d0      	push      	r15
    4166:	1423      	subi      	sp, sp, 12
    4168:	1b02      	addi      	r3, sp, 8
    416a:	b300      	st.w      	r0, (r3, 0x0)
    416c:	1b01      	addi      	r3, sp, 4
    416e:	b320      	st.w      	r1, (r3, 0x0)
    4170:	6cfb      	mov      	r3, sp
    4172:	b340      	st.w      	r2, (r3, 0x0)
	GPIO_Set_Pin_Source(GPIOB,Pin,Source);
    4174:	1a02      	addi      	r2, sp, 8
    4176:	1b01      	addi      	r3, sp, 4
    4178:	ea201904 	movih      	r0, 6404      	//0x1904
    417c:	200b      	addi      	r0, 12      	//0xc
    417e:	9220      	ld.w      	r1, (r2, 0x0)
    4180:	9340      	ld.w      	r2, (r3, 0x0)
    4182:	e3fffc3d 	bsr      	0x39fc	//39fc <GPIO_Set_Pin_Source>
    4186:	c4004820 	lsli      	r0, r0, 0
	GPIO_Set_Pin_Dir(GPIOB,Pin,Direction);
    418a:	1a02      	addi      	r2, sp, 8
    418c:	6cfb      	mov      	r3, sp
    418e:	ea201904 	movih      	r0, 6404      	//0x1904
    4192:	200b      	addi      	r0, 12      	//0xc
    4194:	9220      	ld.w      	r1, (r2, 0x0)
    4196:	9340      	ld.w      	r2, (r3, 0x0)
    4198:	e3fffbdc 	bsr      	0x3950	//3950 <GPIO_Set_Pin_Dir>
    419c:	c4004820 	lsli      	r0, r0, 0
}
    41a0:	1403      	addi      	sp, sp, 12
    41a2:	1490      	pop      	r15

000041a4 <GPIOD_Config>:

/*config function3*/
void GPIOD_Config(Bit32u Pin,GPIO_Source_TypeDef Source,GPIO_Direction_TypeDef Direction)
{
    41a4:	14d0      	push      	r15
    41a6:	1423      	subi      	sp, sp, 12
    41a8:	1b02      	addi      	r3, sp, 8
    41aa:	b300      	st.w      	r0, (r3, 0x0)
    41ac:	1b01      	addi      	r3, sp, 4
    41ae:	b320      	st.w      	r1, (r3, 0x0)
    41b0:	6cfb      	mov      	r3, sp
    41b2:	b340      	st.w      	r2, (r3, 0x0)
	GPIO_Set_Pin_Source(GPIOD,Pin,Source);
    41b4:	1a02      	addi      	r2, sp, 8
    41b6:	1b01      	addi      	r3, sp, 4
    41b8:	1115      	lrw      	r0, 0x19040024	//19040024 <__stack+0x18c4002c>
    41ba:	9220      	ld.w      	r1, (r2, 0x0)
    41bc:	9340      	ld.w      	r2, (r3, 0x0)
    41be:	e3fffc1f 	bsr      	0x39fc	//39fc <GPIO_Set_Pin_Source>
    41c2:	c4004820 	lsli      	r0, r0, 0
	GPIO_Set_Pin_Dir(GPIOD,Pin,Direction);
    41c6:	1a02      	addi      	r2, sp, 8
    41c8:	6cfb      	mov      	r3, sp
    41ca:	1111      	lrw      	r0, 0x19040024	//19040024 <__stack+0x18c4002c>
    41cc:	9220      	ld.w      	r1, (r2, 0x0)
    41ce:	9340      	ld.w      	r2, (r3, 0x0)
    41d0:	e3fffbc0 	bsr      	0x3950	//3950 <GPIO_Set_Pin_Dir>
    41d4:	c4004820 	lsli      	r0, r0, 0
}
    41d8:	1403      	addi      	sp, sp, 12
    41da:	1490      	pop      	r15

000041dc <GPIOA_Normal_Config>:

/*config function4*/
void GPIOA_Normal_Config(Bit32u Pin,GPIO_Source_TypeDef Source,GPIO_Direction_TypeDef Direction)
{
    41dc:	14d0      	push      	r15
    41de:	1423      	subi      	sp, sp, 12
    41e0:	1b02      	addi      	r3, sp, 8
    41e2:	b300      	st.w      	r0, (r3, 0x0)
    41e4:	1b01      	addi      	r3, sp, 4
    41e6:	b320      	st.w      	r1, (r3, 0x0)
    41e8:	6cfb      	mov      	r3, sp
    41ea:	b340      	st.w      	r2, (r3, 0x0)
	GPIO_Set_Pin_Source(GPIOA,Pin,Source);
    41ec:	1a02      	addi      	r2, sp, 8
    41ee:	1b01      	addi      	r3, sp, 4
    41f0:	ea201904 	movih      	r0, 6404      	//0x1904
    41f4:	9220      	ld.w      	r1, (r2, 0x0)
    41f6:	9340      	ld.w      	r2, (r3, 0x0)
    41f8:	e3fffc02 	bsr      	0x39fc	//39fc <GPIO_Set_Pin_Source>
    41fc:	c4004820 	lsli      	r0, r0, 0
	GPIO_Set_Pin_Dir(GPIOA,Pin,Direction);
    4200:	1a02      	addi      	r2, sp, 8
    4202:	6cfb      	mov      	r3, sp
    4204:	ea201904 	movih      	r0, 6404      	//0x1904
    4208:	9220      	ld.w      	r1, (r2, 0x0)
    420a:	9340      	ld.w      	r2, (r3, 0x0)
    420c:	e3fffba2 	bsr      	0x3950	//3950 <GPIO_Set_Pin_Dir>
    4210:	c4004820 	lsli      	r0, r0, 0
}
    4214:	1403      	addi      	sp, sp, 12
    4216:	1490      	pop      	r15

00004218 <GPIOA_IT_Config>:

/*config function5*/
void GPIOA_IT_Config(Bit32u Pin,GPIO_ITMask_TypeDef MaskState,GPIO_ITType_TypeDef ITtype,GPIO_ITPolarity_TypeDef Polarity)
{
    4218:	14d0      	push      	r15
    421a:	1424      	subi      	sp, sp, 16
    421c:	e58e000b 	addi      	r12, sp, 12      	//0xc
    4220:	dc0c2000 	st.w      	r0, (r12, 0x0)
    4224:	1802      	addi      	r0, sp, 8
    4226:	b020      	st.w      	r1, (r0, 0x0)
    4228:	1901      	addi      	r1, sp, 4
    422a:	b140      	st.w      	r2, (r1, 0x0)
    422c:	6cbb      	mov      	r2, sp
    422e:	b260      	st.w      	r3, (r2, 0x0)
	GPIO_Set_IT_Type(Pin,ITtype);
    4230:	1a03      	addi      	r2, sp, 12
    4232:	1b01      	addi      	r3, sp, 4
    4234:	9200      	ld.w      	r0, (r2, 0x0)
    4236:	9320      	ld.w      	r1, (r3, 0x0)
    4238:	e3fffc96 	bsr      	0x3b64	//3b64 <GPIO_Set_IT_Type>
    423c:	c4004820 	lsli      	r0, r0, 0
	GPIO_Set_IT_Polarity(Pin,Polarity);
    4240:	1a03      	addi      	r2, sp, 12
    4242:	6cfb      	mov      	r3, sp
    4244:	9200      	ld.w      	r0, (r2, 0x0)
    4246:	9320      	ld.w      	r1, (r3, 0x0)
    4248:	e3fffce0 	bsr      	0x3c08	//3c08 <GPIO_Set_IT_Polarity>
    424c:	c4004820 	lsli      	r0, r0, 0
	GPIO_IT_Musk_CMD(Pin,MaskState);
    4250:	1a03      	addi      	r2, sp, 12
    4252:	1b02      	addi      	r3, sp, 8
    4254:	9200      	ld.w      	r0, (r2, 0x0)
    4256:	9320      	ld.w      	r1, (r3, 0x0)
    4258:	e3fffc46 	bsr      	0x3ae4	//3ae4 <GPIO_IT_Musk_CMD>
    425c:	c4004820 	lsli      	r0, r0, 0
}
    4260:	1404      	addi      	sp, sp, 16
    4262:	1490      	pop      	r15

00004264 <GPIOA_IT_Register>:

Bit32u GPIOA_IT_Register(void)
{
    4264:	14d0      	push      	r15
	/* clear interrupt flag */
	GPIO_Clear_ITSTAT(GPIO_Pin_All);
    4266:	ea00ffff 	movi      	r0, 65535      	//0xffff
    426a:	e3fffde1 	bsr      	0x3e2c	//3e2c <GPIO_Clear_ITSTAT>
    426e:	c4004820 	lsli      	r0, r0, 0

    CK_INTC_RequestIrq(CK_GPIOA_IRQ, CK_GPIO_Handler);
    4272:	300f      	movi      	r0, 15      	//0xf
    4274:	102b      	lrw      	r1, 0x42a8	//42a8 <CK_GPIO_Handler>
    4276:	e00011c1 	bsr      	0x65f8	//65f8 <CK_INTC_RequestIrq>
    427a:	c4004820 	lsli      	r0, r0, 0
    return 0;
    427e:	3300      	movi      	r3, 0      	//0x0
}
    4280:	6c0f      	mov      	r0, r3
    4282:	1490      	pop      	r15
    4284:	000039fc 	.long	0x000039fc
    4288:	00003950 	.long	0x00003950
    428c:	19040024 	.long	0x19040024
    4290:	00003b64 	.long	0x00003b64
    4294:	00003c08 	.long	0x00003c08
    4298:	00003ae4 	.long	0x00003ae4
    429c:	00003e2c 	.long	0x00003e2c
    42a0:	000042a8 	.long	0x000042a8
    42a4:	000065f8 	.long	0x000065f8

000042a8 <CK_GPIO_Handler>:
#include "gpio.h"
#include "misc.h"

Bit32u gpiotestflag=0;
void CK_GPIO_Handler(Bit32u irqid)
{
    42a8:	14d1      	push      	r4, r15
    42aa:	1422      	subi      	sp, sp, 8
    42ac:	6cfb      	mov      	r3, sp
    42ae:	b300      	st.w      	r0, (r3, 0x0)
	ITStatus_TypeDef temp=GPIO_Get_ITStat(GPIO_Pin_1);
    42b0:	1c01      	addi      	r4, sp, 4
    42b2:	3002      	movi      	r0, 2      	//0x2
    42b4:	e3fffd2e 	bsr      	0x3d10	//3d10 <GPIO_Get_ITStat>
    42b8:	c4004820 	lsli      	r0, r0, 0
    42bc:	b400      	st.w      	r0, (r4, 0x0)
	if(temp)
    42be:	1b01      	addi      	r3, sp, 4
    42c0:	9360      	ld.w      	r3, (r3, 0x0)
    42c2:	e903000a 	bez      	r3, 0x42d6	//42d6 <CK_GPIO_Handler+0x2e>
	{
		GPIO_Pin_Set(GPIOA,GPIO_Pin_0);
    42c6:	ea201904 	movih      	r0, 6404      	//0x1904
    42ca:	3101      	movi      	r1, 1      	//0x1
    42cc:	e3fffaba 	bsr      	0x3840	//3840 <GPIO_Pin_Set>
    42d0:	c4004820 	lsli      	r0, r0, 0
    42d4:	0408      	br      	0x42e4	//42e4 <CK_GPIO_Handler+0x3c>
	}
	else
	{
		GPIO_Pin_Reset(GPIOA,GPIO_Pin_0);
    42d6:	ea201904 	movih      	r0, 6404      	//0x1904
    42da:	3101      	movi      	r1, 1      	//0x1
    42dc:	e3fffac4 	bsr      	0x3864	//3864 <GPIO_Pin_Reset>
    42e0:	c4004820 	lsli      	r0, r0, 0
	}
	printf(" IT state :%x \n", temp);
    42e4:	1b01      	addi      	r3, sp, 4
    42e6:	100c      	lrw      	r0, 0x10308	//10308 <__etext+0x758>
    42e8:	9320      	ld.w      	r1, (r3, 0x0)
    42ea:	e0005333 	bsr      	0xe950	//e950 <printf>
    42ee:	c4004820 	lsli      	r0, r0, 0
	GPIO_Clear_ITSTAT(GPIO_Pin_1);
    42f2:	3002      	movi      	r0, 2      	//0x2
    42f4:	e3fffd9c 	bsr      	0x3e2c	//3e2c <GPIO_Clear_ITSTAT>
    42f8:	c4004820 	lsli      	r0, r0, 0
	gpiotestflag=1;
    42fc:	1069      	lrw      	r3, 0x134d0	//134d0 <gpiotestflag>
    42fe:	3201      	movi      	r2, 1      	//0x1
    4300:	b340      	st.w      	r2, (r3, 0x0)
}
    4302:	1402      	addi      	sp, sp, 8
    4304:	1491      	pop      	r4, r15
    4306:	0000      	.short	0x0000
    4308:	00003d10 	.long	0x00003d10
    430c:	00003840 	.long	0x00003840
    4310:	00003864 	.long	0x00003864
    4314:	00010308 	.long	0x00010308
    4318:	0000e950 	.long	0x0000e950
    431c:	00003e2c 	.long	0x00003e2c
    4320:	000134d0 	.long	0x000134d0

00004324 <GPIO_test1>:
/*no interrupt*/
void GPIO_test1(void)
{
    4324:	14d1      	push      	r4, r15
    4326:	1421      	subi      	sp, sp, 4
	Bit32u temp=0;
    4328:	6cfb      	mov      	r3, sp
    432a:	3200      	movi      	r2, 0      	//0x0
    432c:	b340      	st.w      	r2, (r3, 0x0)
	GPIO_Set_Port_Source(GPIOA,SOFTWARE);
    432e:	ea201904 	movih      	r0, 6404      	//0x1904
    4332:	3100      	movi      	r1, 0      	//0x0
    4334:	e3fffb3a 	bsr      	0x39a8	//39a8 <GPIO_Set_Port_Source>
    4338:	c4004820 	lsli      	r0, r0, 0
	GPIO_Set_Port_Source(GPIOB,SOFTWARE);
    433c:	ea201904 	movih      	r0, 6404      	//0x1904
    4340:	200b      	addi      	r0, 12      	//0xc
    4342:	3100      	movi      	r1, 0      	//0x0
    4344:	e3fffb32 	bsr      	0x39a8	//39a8 <GPIO_Set_Port_Source>
    4348:	c4004820 	lsli      	r0, r0, 0
	GPIO_Set_Port_Source(GPIOC,SOFTWARE);
    434c:	ea201904 	movih      	r0, 6404      	//0x1904
    4350:	2017      	addi      	r0, 24      	//0x18
    4352:	3100      	movi      	r1, 0      	//0x0
    4354:	e3fffb2a 	bsr      	0x39a8	//39a8 <GPIO_Set_Port_Source>
    4358:	c4004820 	lsli      	r0, r0, 0
	GPIO_Set_Port_Source(GPIOD,SOFTWARE);
    435c:	110d      	lrw      	r0, 0x19040024	//19040024 <__stack+0x18c4002c>
    435e:	3100      	movi      	r1, 0      	//0x0
    4360:	e3fffb24 	bsr      	0x39a8	//39a8 <GPIO_Set_Port_Source>
    4364:	c4004820 	lsli      	r0, r0, 0

	GPIO_Set_Pin_Dir(GPIOA,GPIO_Pin_0,OUTPUT);
    4368:	ea201904 	movih      	r0, 6404      	//0x1904
    436c:	3101      	movi      	r1, 1      	//0x1
    436e:	3201      	movi      	r2, 1      	//0x1
    4370:	e3fffaf0 	bsr      	0x3950	//3950 <GPIO_Set_Pin_Dir>
    4374:	c4004820 	lsli      	r0, r0, 0
	GPIO_Set_Pin_Dir(GPIOA,GPIO_Pin_1,INPUT);
    4378:	ea201904 	movih      	r0, 6404      	//0x1904
    437c:	3102      	movi      	r1, 2      	//0x2
    437e:	3200      	movi      	r2, 0      	//0x0
    4380:	e3fffae8 	bsr      	0x3950	//3950 <GPIO_Set_Pin_Dir>
    4384:	c4004820 	lsli      	r0, r0, 0
	GPIO_Set_Port_Dir(GPIOB,OUTPUT);
    4388:	ea201904 	movih      	r0, 6404      	//0x1904
    438c:	200b      	addi      	r0, 12      	//0xc
    438e:	3101      	movi      	r1, 1      	//0x1
    4390:	e3fffaae 	bsr      	0x38ec	//38ec <GPIO_Set_Port_Dir>
    4394:	c4004820 	lsli      	r0, r0, 0
	GPIO_Set_Port_Dir(GPIOC,OUTPUT);
    4398:	ea201904 	movih      	r0, 6404      	//0x1904
    439c:	2017      	addi      	r0, 24      	//0x18
    439e:	3101      	movi      	r1, 1      	//0x1
    43a0:	e3fffaa6 	bsr      	0x38ec	//38ec <GPIO_Set_Port_Dir>
    43a4:	c4004820 	lsli      	r0, r0, 0
	GPIO_Set_Port_Dir(GPIOD,OUTPUT);
    43a8:	101a      	lrw      	r0, 0x19040024	//19040024 <__stack+0x18c4002c>
    43aa:	3101      	movi      	r1, 1      	//0x1
    43ac:	e3fffaa0 	bsr      	0x38ec	//38ec <GPIO_Set_Port_Dir>
    43b0:	c4004820 	lsli      	r0, r0, 0

	GPIO_Pin_Reset(GPIOA,GPIO_Pin_0);
    43b4:	ea201904 	movih      	r0, 6404      	//0x1904
    43b8:	3101      	movi      	r1, 1      	//0x1
    43ba:	e3fffa55 	bsr      	0x3864	//3864 <GPIO_Pin_Reset>
    43be:	c4004820 	lsli      	r0, r0, 0
	GPIO_Pin_Set(GPIOB,GPIO_Pin_0);
    43c2:	ea201904 	movih      	r0, 6404      	//0x1904
    43c6:	200b      	addi      	r0, 12      	//0xc
    43c8:	3101      	movi      	r1, 1      	//0x1
    43ca:	e3fffa3b 	bsr      	0x3840	//3840 <GPIO_Pin_Set>
    43ce:	c4004820 	lsli      	r0, r0, 0
	GPIO_Pin_Reset(GPIOC,GPIO_Pin_0);
    43d2:	ea201904 	movih      	r0, 6404      	//0x1904
    43d6:	2017      	addi      	r0, 24      	//0x18
    43d8:	3101      	movi      	r1, 1      	//0x1
    43da:	e3fffa45 	bsr      	0x3864	//3864 <GPIO_Pin_Reset>
    43de:	c4004820 	lsli      	r0, r0, 0
	GPIO_Pin_Set(GPIOD,GPIO_Pin_0);
    43e2:	100c      	lrw      	r0, 0x19040024	//19040024 <__stack+0x18c4002c>
    43e4:	3101      	movi      	r1, 1      	//0x1
    43e6:	e3fffa2d 	bsr      	0x3840	//3840 <GPIO_Pin_Set>
    43ea:	c4004820 	lsli      	r0, r0, 0
	temp=GPIOA_Get_Ext_Data(GPIO_Pin_1);
    43ee:	6d3b      	mov      	r4, sp
    43f0:	3002      	movi      	r0, 2      	//0x2
    43f2:	e3fffd2b 	bsr      	0x3e48	//3e48 <GPIOA_Get_Ext_Data>
    43f6:	c4004820 	lsli      	r0, r0, 0
    43fa:	b400      	st.w      	r0, (r4, 0x0)
	printf("Pin1 of PortA :%x \n", temp);
    43fc:	6cfb      	mov      	r3, sp
    43fe:	100b      	lrw      	r0, 0x10318	//10318 <__etext+0x768>
    4400:	9320      	ld.w      	r1, (r3, 0x0)
    4402:	e00052a7 	bsr      	0xe950	//e950 <printf>
    4406:	c4004820 	lsli      	r0, r0, 0
	while(1);
    440a:	0400      	br      	0x440a	//440a <GPIO_test1+0xe6>
    440c:	000039a8 	.long	0x000039a8
    4410:	19040024 	.long	0x19040024
    4414:	00003950 	.long	0x00003950
    4418:	000038ec 	.long	0x000038ec
    441c:	00003864 	.long	0x00003864
    4420:	00003840 	.long	0x00003840
    4424:	00003e48 	.long	0x00003e48
    4428:	00010318 	.long	0x00010318
    442c:	0000e950 	.long	0x0000e950

00004430 <GPIO_test2>:
}

/*interrupt*/
void GPIO_test2(void)
{
    4430:	14d0      	push      	r15
	gpiotestflag=0;
    4432:	1275      	lrw      	r3, 0x134d0	//134d0 <gpiotestflag>
    4434:	3200      	movi      	r2, 0      	//0x0
    4436:	b340      	st.w      	r2, (r3, 0x0)
	printf (" gpio test begins\n");
    4438:	1214      	lrw      	r0, 0x1032c	//1032c <__etext+0x77c>
    443a:	e000528b 	bsr      	0xe950	//e950 <printf>
    443e:	c4004820 	lsli      	r0, r0, 0
	GPIO_Set_Port_Source(GPIOA,SOFTWARE);
    4442:	ea201904 	movih      	r0, 6404      	//0x1904
    4446:	3100      	movi      	r1, 0      	//0x0
    4448:	e3fffab0 	bsr      	0x39a8	//39a8 <GPIO_Set_Port_Source>
    444c:	c4004820 	lsli      	r0, r0, 0
	GPIO_Set_Port_Source(GPIOB,SOFTWARE);
    4450:	ea201904 	movih      	r0, 6404      	//0x1904
    4454:	200b      	addi      	r0, 12      	//0xc
    4456:	3100      	movi      	r1, 0      	//0x0
    4458:	e3fffaa8 	bsr      	0x39a8	//39a8 <GPIO_Set_Port_Source>
    445c:	c4004820 	lsli      	r0, r0, 0
	GPIO_Set_Port_Source(GPIOC,SOFTWARE);
    4460:	ea201904 	movih      	r0, 6404      	//0x1904
    4464:	2017      	addi      	r0, 24      	//0x18
    4466:	3100      	movi      	r1, 0      	//0x0
    4468:	e3fffaa0 	bsr      	0x39a8	//39a8 <GPIO_Set_Port_Source>
    446c:	c4004820 	lsli      	r0, r0, 0
	GPIO_Set_Port_Source(GPIOD,SOFTWARE);
    4470:	1209      	lrw      	r0, 0x19040024	//19040024 <__stack+0x18c4002c>
    4472:	3100      	movi      	r1, 0      	//0x0
    4474:	e3fffa9a 	bsr      	0x39a8	//39a8 <GPIO_Set_Port_Source>
    4478:	c4004820 	lsli      	r0, r0, 0

	GPIO_Set_Pin_Dir(GPIOA,GPIO_Pin_0,OUTPUT);
    447c:	ea201904 	movih      	r0, 6404      	//0x1904
    4480:	3101      	movi      	r1, 1      	//0x1
    4482:	3201      	movi      	r2, 1      	//0x1
    4484:	e3fffa66 	bsr      	0x3950	//3950 <GPIO_Set_Pin_Dir>
    4488:	c4004820 	lsli      	r0, r0, 0
	GPIO_Set_Pin_Dir(GPIOA,GPIO_Pin_1,INPUT);
    448c:	ea201904 	movih      	r0, 6404      	//0x1904
    4490:	3102      	movi      	r1, 2      	//0x2
    4492:	3200      	movi      	r2, 0      	//0x0
    4494:	e3fffa5e 	bsr      	0x3950	//3950 <GPIO_Set_Pin_Dir>
    4498:	c4004820 	lsli      	r0, r0, 0
	GPIO_Set_Port_Dir(GPIOB,OUTPUT);
    449c:	ea201904 	movih      	r0, 6404      	//0x1904
    44a0:	200b      	addi      	r0, 12      	//0xc
    44a2:	3101      	movi      	r1, 1      	//0x1
    44a4:	e3fffa24 	bsr      	0x38ec	//38ec <GPIO_Set_Port_Dir>
    44a8:	c4004820 	lsli      	r0, r0, 0
	GPIO_Set_Port_Dir(GPIOC,OUTPUT);
    44ac:	ea201904 	movih      	r0, 6404      	//0x1904
    44b0:	2017      	addi      	r0, 24      	//0x18
    44b2:	3101      	movi      	r1, 1      	//0x1
    44b4:	e3fffa1c 	bsr      	0x38ec	//38ec <GPIO_Set_Port_Dir>
    44b8:	c4004820 	lsli      	r0, r0, 0
	GPIO_Set_Port_Dir(GPIOD,OUTPUT);
    44bc:	1116      	lrw      	r0, 0x19040024	//19040024 <__stack+0x18c4002c>
    44be:	3101      	movi      	r1, 1      	//0x1
    44c0:	e3fffa16 	bsr      	0x38ec	//38ec <GPIO_Set_Port_Dir>
    44c4:	c4004820 	lsli      	r0, r0, 0

	GPIO_Pin_Reset(GPIOA,GPIO_Pin_0);
    44c8:	ea201904 	movih      	r0, 6404      	//0x1904
    44cc:	3101      	movi      	r1, 1      	//0x1
    44ce:	e3fff9cb 	bsr      	0x3864	//3864 <GPIO_Pin_Reset>
    44d2:	c4004820 	lsli      	r0, r0, 0
	GPIO_Pin_Set(GPIOB,GPIO_Pin_0);
    44d6:	ea201904 	movih      	r0, 6404      	//0x1904
    44da:	200b      	addi      	r0, 12      	//0xc
    44dc:	3101      	movi      	r1, 1      	//0x1
    44de:	e3fff9b1 	bsr      	0x3840	//3840 <GPIO_Pin_Set>
    44e2:	c4004820 	lsli      	r0, r0, 0
	GPIO_Pin_Reset(GPIOC,GPIO_Pin_0);
    44e6:	ea201904 	movih      	r0, 6404      	//0x1904
    44ea:	2017      	addi      	r0, 24      	//0x18
    44ec:	3101      	movi      	r1, 1      	//0x1
    44ee:	e3fff9bb 	bsr      	0x3864	//3864 <GPIO_Pin_Reset>
    44f2:	c4004820 	lsli      	r0, r0, 0
	GPIO_Pin_Set(GPIOD,GPIO_Pin_0);
    44f6:	1108      	lrw      	r0, 0x19040024	//19040024 <__stack+0x18c4002c>
    44f8:	3101      	movi      	r1, 1      	//0x1
    44fa:	e3fff9a3 	bsr      	0x3840	//3840 <GPIO_Pin_Set>
    44fe:	c4004820 	lsli      	r0, r0, 0

	GPIO_Pin_Set(GPIOA,GPIO_Pin_0);
    4502:	ea201904 	movih      	r0, 6404      	//0x1904
    4506:	3101      	movi      	r1, 1      	//0x1
    4508:	e3fff99c 	bsr      	0x3840	//3840 <GPIO_Pin_Set>
    450c:	c4004820 	lsli      	r0, r0, 0
	GPIO_Pin_Reset(GPIOB,GPIO_Pin_0);
    4510:	ea201904 	movih      	r0, 6404      	//0x1904
    4514:	200b      	addi      	r0, 12      	//0xc
    4516:	3101      	movi      	r1, 1      	//0x1
    4518:	e3fff9a6 	bsr      	0x3864	//3864 <GPIO_Pin_Reset>
    451c:	c4004820 	lsli      	r0, r0, 0
	GPIO_Pin_Set(GPIOC,GPIO_Pin_0);
    4520:	ea201904 	movih      	r0, 6404      	//0x1904
    4524:	2017      	addi      	r0, 24      	//0x18
    4526:	3101      	movi      	r1, 1      	//0x1
    4528:	e3fff98c 	bsr      	0x3840	//3840 <GPIO_Pin_Set>
    452c:	c4004820 	lsli      	r0, r0, 0
	GPIO_Pin_Reset(GPIOD,GPIO_Pin_0);
    4530:	1019      	lrw      	r0, 0x19040024	//19040024 <__stack+0x18c4002c>
    4532:	3101      	movi      	r1, 1      	//0x1
    4534:	e3fff998 	bsr      	0x3864	//3864 <GPIO_Pin_Reset>
    4538:	c4004820 	lsli      	r0, r0, 0

	GPIOA_IT_Config(GPIO_Pin_1,GPIO_IT_UMASK,GPIO_IT_Edge,GPIO_IT_Low_Falling);
    453c:	3002      	movi      	r0, 2      	//0x2
    453e:	3100      	movi      	r1, 0      	//0x0
    4540:	3201      	movi      	r2, 1      	//0x1
    4542:	3300      	movi      	r3, 0      	//0x0
    4544:	e3fffe6a 	bsr      	0x4218	//4218 <GPIOA_IT_Config>
    4548:	c4004820 	lsli      	r0, r0, 0
	GPIOA_IT_Register();
    454c:	e3fffe8c 	bsr      	0x4264	//4264 <GPIOA_IT_Register>
    4550:	c4004820 	lsli      	r0, r0, 0
	GPIO_IT_ENABLE(GPIO_Pin_1);
    4554:	3002      	movi      	r0, 2      	//0x2
    4556:	e3fffaa3 	bsr      	0x3a9c	//3a9c <GPIO_IT_ENABLE>
    455a:	c4004820 	lsli      	r0, r0, 0

	GPIO_Pin_Reset(GPIOC,GPIO_Pin_0);
    455e:	ea201904 	movih      	r0, 6404      	//0x1904
    4562:	2017      	addi      	r0, 24      	//0x18
    4564:	3101      	movi      	r1, 1      	//0x1
    4566:	e3fff97f 	bsr      	0x3864	//3864 <GPIO_Pin_Reset>
    456a:	c4004820 	lsli      	r0, r0, 0

	while(!gpiotestflag);
    456e:	6c00      	or      	r0, r0
    4570:	1065      	lrw      	r3, 0x134d0	//134d0 <gpiotestflag>
    4572:	9360      	ld.w      	r3, (r3, 0x0)
    4574:	e903fffe 	bez      	r3, 0x4570	//4570 <GPIO_test2+0x140>
	printf (" gpio test success\n");
    4578:	100f      	lrw      	r0, 0x10340	//10340 <__etext+0x790>
    457a:	e00051eb 	bsr      	0xe950	//e950 <printf>
    457e:	c4004820 	lsli      	r0, r0, 0


}
    4582:	1490      	pop      	r15
    4584:	000134d0 	.long	0x000134d0
    4588:	0001032c 	.long	0x0001032c
    458c:	0000e950 	.long	0x0000e950
    4590:	000039a8 	.long	0x000039a8
    4594:	19040024 	.long	0x19040024
    4598:	00003950 	.long	0x00003950
    459c:	000038ec 	.long	0x000038ec
    45a0:	00003864 	.long	0x00003864
    45a4:	00003840 	.long	0x00003840
    45a8:	00004218 	.long	0x00004218
    45ac:	00004264 	.long	0x00004264
    45b0:	00003a9c 	.long	0x00003a9c
    45b4:	00010340 	.long	0x00010340

000045b8 <I2C_Test1>:

//static Bit32u IC_EMPTYFIFO_HOLD_MASTER_EN = 1;
static Bit8u temp[20]={0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};
Bit8u *p=temp;
void I2C_Test1(void)
{
    45b8:	14d0      	push      	r15
	I2C_Deactive();
    45ba:	e0000abb 	bsr      	0x5b30	//5b30 <I2C_Deactive>
    45be:	c4004820 	lsli      	r0, r0, 0
	I2C_Config(MASTER,address_bit_7,SPEED_STANDARD_MODE);
    45c2:	3000      	movi      	r0, 0      	//0x0
    45c4:	3101      	movi      	r1, 1      	//0x1
    45c6:	3202      	movi      	r2, 2      	//0x2
    45c8:	e0000abc 	bsr      	0x5b40	//5b40 <I2C_Config>
    45cc:	c4004820 	lsli      	r0, r0, 0
	I2C_Set_TAR_Addr(0x01);
    45d0:	3001      	movi      	r0, 1      	//0x1
    45d2:	e00003fb 	bsr      	0x4dc8	//4dc8 <I2C_Set_TAR_Addr>
    45d6:	c4004820 	lsli      	r0, r0, 0
	I2C_Set_SS_SCL_FREQ(100);
    45da:	3064      	movi      	r0, 100      	//0x64
    45dc:	e00004e4 	bsr      	0x4fa4	//4fa4 <I2C_Set_SS_SCL_FREQ>
    45e0:	c4004820 	lsli      	r0, r0, 0
    I2C_IT_Register();
    45e4:	e0000ad0 	bsr      	0x5b84	//5b84 <I2C_IT_Register>
    45e8:	c4004820 	lsli      	r0, r0, 0
	I2C_UMask_IT(IC_INT_ALL);
    45ec:	ea007fff 	movi      	r0, 32767      	//0x7fff
    45f0:	e0000726 	bsr      	0x543c	//543c <I2C_UMask_IT>
    45f4:	c4004820 	lsli      	r0, r0, 0
	I2C_Set_RXThreshold(0);
    45f8:	3000      	movi      	r0, 0      	//0x0
    45fa:	e0000871 	bsr      	0x56dc	//56dc <I2C_Set_RXThreshold>
    45fe:	c4004820 	lsli      	r0, r0, 0
	I2C_Set_TXThreshold(0);
    4602:	3000      	movi      	r0, 0      	//0x0
    4604:	e000087c 	bsr      	0x56fc	//56fc <I2C_Set_TXThreshold>
    4608:	c4004820 	lsli      	r0, r0, 0
	I2C_CMD(ENABLE);
    460c:	3001      	movi      	r0, 1      	//0x1
    460e:	e00009b9 	bsr      	0x5980	//5980 <I2C_CMD>
    4612:	c4004820 	lsli      	r0, r0, 0
	I2C_Send_Data(*p++);
    4616:	127c      	lrw      	r3, 0x11304	//11304 <p>
    4618:	9360      	ld.w      	r3, (r3, 0x0)
    461a:	8340      	ld.b      	r2, (r3, 0x0)
    461c:	7488      	zextb      	r2, r2
    461e:	5b22      	addi      	r1, r3, 1      	//0x1
    4620:	1279      	lrw      	r3, 0x11304	//11304 <p>
    4622:	b320      	st.w      	r1, (r3, 0x0)
    4624:	6c0b      	mov      	r0, r2
    4626:	e0000421 	bsr      	0x4e68	//4e68 <I2C_Send_Data>
    462a:	c4004820 	lsli      	r0, r0, 0
	while(1);
    462e:	0400      	br      	0x462e	//462e <I2C_Test1+0x76>

00004630 <I2C_Init_For_EEPROM>:
}

void I2C_Init_For_EEPROM(void)
{
    4630:	14d0      	push      	r15
	I2C_Deactive();
    4632:	e0000a7f 	bsr      	0x5b30	//5b30 <I2C_Deactive>
    4636:	c4004820 	lsli      	r0, r0, 0
	I2C_Config(MASTER,address_bit_7,SPEED_STANDARD_MODE);
    463a:	3000      	movi      	r0, 0      	//0x0
    463c:	3101      	movi      	r1, 1      	//0x1
    463e:	3202      	movi      	r2, 2      	//0x2
    4640:	e0000a80 	bsr      	0x5b40	//5b40 <I2C_Config>
    4644:	c4004820 	lsli      	r0, r0, 0
	I2C_Set_TAR_Addr(Device_Addr);
    4648:	1271      	lrw      	r3, 0x112ec	//112ec <Device_Addr>
    464a:	8360      	ld.b      	r3, (r3, 0x0)
    464c:	74cc      	zextb      	r3, r3
    464e:	6c0f      	mov      	r0, r3
    4650:	e00003bc 	bsr      	0x4dc8	//4dc8 <I2C_Set_TAR_Addr>
    4654:	c4004820 	lsli      	r0, r0, 0
	I2C_Set_SS_SCL_FREQ(100);
    4658:	3064      	movi      	r0, 100      	//0x64
    465a:	e00004a5 	bsr      	0x4fa4	//4fa4 <I2C_Set_SS_SCL_FREQ>
    465e:	c4004820 	lsli      	r0, r0, 0
    //I2C_INTC_Register(void);
	I2C_UMask_IT(IC_INT_ALL);
    4662:	ea007fff 	movi      	r0, 32767      	//0x7fff
    4666:	e00006eb 	bsr      	0x543c	//543c <I2C_UMask_IT>
    466a:	c4004820 	lsli      	r0, r0, 0
	I2C_Set_RXThreshold(0);
    466e:	3000      	movi      	r0, 0      	//0x0
    4670:	e0000836 	bsr      	0x56dc	//56dc <I2C_Set_RXThreshold>
    4674:	c4004820 	lsli      	r0, r0, 0
	I2C_Set_TXThreshold(0);
    4678:	3000      	movi      	r0, 0      	//0x0
    467a:	e0000841 	bsr      	0x56fc	//56fc <I2C_Set_TXThreshold>
    467e:	c4004820 	lsli      	r0, r0, 0
	I2C_CMD(ENABLE);
    4682:	3001      	movi      	r0, 1      	//0x1
    4684:	e000097e 	bsr      	0x5980	//5980 <I2C_CMD>
    4688:	c4004820 	lsli      	r0, r0, 0
}
    468c:	1490      	pop      	r15
	...

00004690 <EEPROM_Byte_Write>:

/*EEPROM Byte write*/
void EEPROM_Byte_Write(Bit16u Address,Bit8u Data)
{
    4690:	14d1      	push      	r4, r15
    4692:	1425      	subi      	sp, sp, 20
    4694:	6c87      	mov      	r2, r1
    4696:	1b01      	addi      	r3, sp, 4
    4698:	6c43      	mov      	r1, r0
    469a:	ab20      	st.h      	r1, (r3, 0x0)
    469c:	6cfb      	mov      	r3, sp
    469e:	a340      	st.b      	r2, (r3, 0x0)
	Bit32u a=2000;
    46a0:	1a04      	addi      	r2, sp, 16
    46a2:	33fa      	movi      	r3, 250      	//0xfa
    46a4:	4363      	lsli      	r3, r3, 3
    46a6:	b260      	st.w      	r3, (r2, 0x0)
	Bit8u Addr_H,Addr_L=0;
    46a8:	e46e000a 	addi      	r3, sp, 11      	//0xb
    46ac:	3200      	movi      	r2, 0      	//0x0
    46ae:	a340      	st.b      	r2, (r3, 0x0)
	ITStatus_TypeDef ITstatus=INACTIVE;
    46b0:	1b03      	addi      	r3, sp, 12
    46b2:	3200      	movi      	r2, 0      	//0x0
    46b4:	b340      	st.w      	r2, (r3, 0x0)
	Addr_L=Address&0xFF;
    46b6:	e46e000a 	addi      	r3, sp, 11      	//0xb
    46ba:	1a01      	addi      	r2, sp, 4
    46bc:	8a40      	ld.h      	r2, (r2, 0x0)
    46be:	a340      	st.b      	r2, (r3, 0x0)
	Addr_H=(Address>>8)&0xFF;
    46c0:	1b01      	addi      	r3, sp, 4
    46c2:	8b60      	ld.h      	r3, (r3, 0x0)
    46c4:	74cd      	zexth      	r3, r3
    46c6:	4b68      	lsri      	r3, r3, 8
    46c8:	748d      	zexth      	r2, r3
    46ca:	e46e0009 	addi      	r3, sp, 10      	//0xa
    46ce:	a340      	st.b      	r2, (r3, 0x0)
	I2C_Set_Restart(DISABLE);
    46d0:	3000      	movi      	r0, 0      	//0x0
    46d2:	e0000429 	bsr      	0x4f24	//4f24 <I2C_Set_Restart>
    46d6:	c4004820 	lsli      	r0, r0, 0
	I2C_Set_Stop(DISABLE);
    46da:	3000      	movi      	r0, 0      	//0x0
    46dc:	e0000444 	bsr      	0x4f64	//4f64 <I2C_Set_Stop>
    46e0:	c4004820 	lsli      	r0, r0, 0

	I2C_Send_Data(Addr_H);
    46e4:	e46e0009 	addi      	r3, sp, 10      	//0xa
    46e8:	8360      	ld.b      	r3, (r3, 0x0)
    46ea:	74cc      	zextb      	r3, r3
    46ec:	6c0f      	mov      	r0, r3
    46ee:	e00003bd 	bsr      	0x4e68	//4e68 <I2C_Send_Data>
    46f2:	c4004820 	lsli      	r0, r0, 0
	{
		ITstatus=I2C_Get_ITStat(IC_INT_TX_EMPTY);
	}
	*/
	/*ACK???*/
	I2C_Send_Data(Addr_L);
    46f6:	e46e000a 	addi      	r3, sp, 11      	//0xb
    46fa:	8360      	ld.b      	r3, (r3, 0x0)
    46fc:	74cc      	zextb      	r3, r3
    46fe:	6c0f      	mov      	r0, r3
    4700:	e00003b4 	bsr      	0x4e68	//4e68 <I2C_Send_Data>
    4704:	c4004820 	lsli      	r0, r0, 0

	ITstatus=INACTIVE;
    4708:	1b03      	addi      	r3, sp, 12
    470a:	3200      	movi      	r2, 0      	//0x0
    470c:	b340      	st.w      	r2, (r3, 0x0)
	while(!ITstatus)
    470e:	0408      	br      	0x471e	//471e <EEPROM_Byte_Write+0x8e>
	{
		ITstatus=I2C_Get_ITStat(IC_INT_TX_EMPTY);
    4710:	1c03      	addi      	r4, sp, 12
    4712:	3010      	movi      	r0, 16      	//0x10
    4714:	e0000572 	bsr      	0x51f8	//51f8 <I2C_Get_ITStat>
    4718:	c4004820 	lsli      	r0, r0, 0
    471c:	b400      	st.w      	r0, (r4, 0x0)
	*/
	/*ACK???*/
	I2C_Send_Data(Addr_L);

	ITstatus=INACTIVE;
	while(!ITstatus)
    471e:	1b03      	addi      	r3, sp, 12
    4720:	9360      	ld.w      	r3, (r3, 0x0)
    4722:	e903fff7 	bez      	r3, 0x4710	//4710 <EEPROM_Byte_Write+0x80>
	{
		ITstatus=I2C_Get_ITStat(IC_INT_TX_EMPTY);
	}
	/*ACK???*/
	I2C_Set_Stop(ENABLE);
    4726:	3001      	movi      	r0, 1      	//0x1
    4728:	e000041e 	bsr      	0x4f64	//4f64 <I2C_Set_Stop>
    472c:	c4004820 	lsli      	r0, r0, 0
	I2C_Send_Data(Data);
    4730:	6cfb      	mov      	r3, sp
    4732:	8360      	ld.b      	r3, (r3, 0x0)
    4734:	74cc      	zextb      	r3, r3
    4736:	6c0f      	mov      	r0, r3
    4738:	e0000398 	bsr      	0x4e68	//4e68 <I2C_Send_Data>
    473c:	c4004820 	lsli      	r0, r0, 0
	while(a--);
    4740:	6c00      	or      	r0, r0
    4742:	1b04      	addi      	r3, sp, 16
    4744:	9360      	ld.w      	r3, (r3, 0x0)
    4746:	3b40      	cmpnei      	r3, 0
    4748:	c4000503 	mvc      	r3
    474c:	74cc      	zextb      	r3, r3
    474e:	1a04      	addi      	r2, sp, 16
    4750:	1904      	addi      	r1, sp, 16
    4752:	9120      	ld.w      	r1, (r1, 0x0)
    4754:	2900      	subi      	r1, 1      	//0x1
    4756:	b220      	st.w      	r1, (r2, 0x0)
    4758:	e923fff5 	bnez      	r3, 0x4742	//4742 <EEPROM_Byte_Write+0xb2>
}
    475c:	1405      	addi      	sp, sp, 20
    475e:	1491      	pop      	r4, r15
    4760:	00005b30 	.long	0x00005b30
    4764:	00005b40 	.long	0x00005b40
    4768:	00004dc8 	.long	0x00004dc8
    476c:	00004fa4 	.long	0x00004fa4
    4770:	00005b84 	.long	0x00005b84
    4774:	0000543c 	.long	0x0000543c
    4778:	000056dc 	.long	0x000056dc
    477c:	000056fc 	.long	0x000056fc
    4780:	00005980 	.long	0x00005980
    4784:	00011304 	.long	0x00011304
    4788:	00004e68 	.long	0x00004e68
    478c:	000112ec 	.long	0x000112ec
    4790:	00004f24 	.long	0x00004f24
    4794:	00004f64 	.long	0x00004f64
    4798:	000051f8 	.long	0x000051f8

0000479c <EEPROM_Byte_Read>:

/*EEPROM Byte Read*/
static Bit8u a[]={0};
void EEPROM_Byte_Read(Bit16u Startaddr,Bit16u Datasize)
{
    479c:	14d1      	push      	r4, r15
    479e:	1425      	subi      	sp, sp, 20
    47a0:	6c87      	mov      	r2, r1
    47a2:	1b01      	addi      	r3, sp, 4
    47a4:	6c43      	mov      	r1, r0
    47a6:	ab20      	st.h      	r1, (r3, 0x0)
    47a8:	6cfb      	mov      	r3, sp
    47aa:	ab40      	st.h      	r2, (r3, 0x0)
	Bit16u i=0;
    47ac:	e46e0011 	addi      	r3, sp, 18      	//0x12
    47b0:	3200      	movi      	r2, 0      	//0x0
    47b2:	ab40      	st.h      	r2, (r3, 0x0)
	Bit8u Addr_H,Addr_L=0;
    47b4:	e46e000a 	addi      	r3, sp, 11      	//0xb
    47b8:	3200      	movi      	r2, 0      	//0x0
    47ba:	a340      	st.b      	r2, (r3, 0x0)
	ITStatus_TypeDef ITstatus=INACTIVE;
    47bc:	1b03      	addi      	r3, sp, 12
    47be:	3200      	movi      	r2, 0      	//0x0
    47c0:	b340      	st.w      	r2, (r3, 0x0)
	Addr_L=Startaddr&0xFF;
    47c2:	e46e000a 	addi      	r3, sp, 11      	//0xb
    47c6:	1a01      	addi      	r2, sp, 4
    47c8:	8a40      	ld.h      	r2, (r2, 0x0)
    47ca:	a340      	st.b      	r2, (r3, 0x0)
	Addr_H=(Startaddr>>8)&0xFF;
    47cc:	1b01      	addi      	r3, sp, 4
    47ce:	8b60      	ld.h      	r3, (r3, 0x0)
    47d0:	74cd      	zexth      	r3, r3
    47d2:	4b68      	lsri      	r3, r3, 8
    47d4:	748d      	zexth      	r2, r3
    47d6:	e46e0009 	addi      	r3, sp, 10      	//0xa
    47da:	a340      	st.b      	r2, (r3, 0x0)
	I2C_Set_Restart(DISABLE);
    47dc:	3000      	movi      	r0, 0      	//0x0
    47de:	e00003a3 	bsr      	0x4f24	//4f24 <I2C_Set_Restart>
    47e2:	c4004820 	lsli      	r0, r0, 0
	I2C_Set_Stop(DISABLE);
    47e6:	3000      	movi      	r0, 0      	//0x0
    47e8:	e00003be 	bsr      	0x4f64	//4f64 <I2C_Set_Stop>
    47ec:	c4004820 	lsli      	r0, r0, 0

	I2C_Send_Data(Addr_H);
    47f0:	e46e0009 	addi      	r3, sp, 10      	//0xa
    47f4:	8360      	ld.b      	r3, (r3, 0x0)
    47f6:	74cc      	zextb      	r3, r3
    47f8:	6c0f      	mov      	r0, r3
    47fa:	e0000337 	bsr      	0x4e68	//4e68 <I2C_Send_Data>
    47fe:	c4004820 	lsli      	r0, r0, 0

	ITstatus=INACTIVE;
    4802:	1b03      	addi      	r3, sp, 12
    4804:	3200      	movi      	r2, 0      	//0x0
    4806:	b340      	st.w      	r2, (r3, 0x0)
	while(!I2C_Get_ITStat(IC_INT_TX_EMPTY));
    4808:	6c00      	or      	r0, r0
    480a:	3010      	movi      	r0, 16      	//0x10
    480c:	e00004f6 	bsr      	0x51f8	//51f8 <I2C_Get_ITStat>
    4810:	c4004820 	lsli      	r0, r0, 0
    4814:	6cc3      	mov      	r3, r0
    4816:	e903fffa 	bez      	r3, 0x480a	//480a <EEPROM_Byte_Read+0x6e>
	I2C_Send_Data(Addr_L);
    481a:	e46e000a 	addi      	r3, sp, 11      	//0xb
    481e:	8360      	ld.b      	r3, (r3, 0x0)
    4820:	74cc      	zextb      	r3, r3
    4822:	6c0f      	mov      	r0, r3
    4824:	e0000322 	bsr      	0x4e68	//4e68 <I2C_Send_Data>
    4828:	c4004820 	lsli      	r0, r0, 0

	I2C_Set_Restart(ENABLE);    //Restart
    482c:	3001      	movi      	r0, 1      	//0x1
    482e:	e000037b 	bsr      	0x4f24	//4f24 <I2C_Set_Restart>
    4832:	c4004820 	lsli      	r0, r0, 0
	I2C_Receive_Set();
    4836:	e000033d 	bsr      	0x4eb0	//4eb0 <I2C_Receive_Set>
    483a:	c4004820 	lsli      	r0, r0, 0
	I2C_Set_Restart(DISABLE);    //Restart
    483e:	3000      	movi      	r0, 0      	//0x0
    4840:	e0000372 	bsr      	0x4f24	//4f24 <I2C_Set_Restart>
    4844:	c4004820 	lsli      	r0, r0, 0
	}
	I2C_Set_Restart(DISABLE);    //stop
	I2C_Set_Stop(ENABLE);
	I2C_Receive_Set();
#endif
	for(i=0;i<Datasize-1;i++)    // receive data
    4848:	e46e0011 	addi      	r3, sp, 18      	//0x12
    484c:	3200      	movi      	r2, 0      	//0x0
    484e:	ab40      	st.h      	r2, (r3, 0x0)
    4850:	0432      	br      	0x48b4	//48b4 <EEPROM_Byte_Read+0x118>
	{
		ITstatus=INACTIVE;
    4852:	1b03      	addi      	r3, sp, 12
    4854:	3200      	movi      	r2, 0      	//0x0
    4856:	b340      	st.w      	r2, (r3, 0x0)
		while(!ITstatus)
    4858:	0408      	br      	0x4868	//4868 <EEPROM_Byte_Read+0xcc>
		{
			ITstatus=I2C_Get_ITStat(IC_INT_RX_FULL);
    485a:	1c03      	addi      	r4, sp, 12
    485c:	3004      	movi      	r0, 4      	//0x4
    485e:	e00004cd 	bsr      	0x51f8	//51f8 <I2C_Get_ITStat>
    4862:	c4004820 	lsli      	r0, r0, 0
    4866:	b400      	st.w      	r0, (r4, 0x0)
	I2C_Receive_Set();
#endif
	for(i=0;i<Datasize-1;i++)    // receive data
	{
		ITstatus=INACTIVE;
		while(!ITstatus)
    4868:	1b03      	addi      	r3, sp, 12
    486a:	9360      	ld.w      	r3, (r3, 0x0)
    486c:	e903fff7 	bez      	r3, 0x485a	//485a <EEPROM_Byte_Read+0xbe>
		{
			ITstatus=I2C_Get_ITStat(IC_INT_RX_FULL);
		}
		//while(!I2C_Get_ITStat(IC_INT_RX_FULL));
		a[i]=I2C_Receive_Data();
    4870:	e46e0011 	addi      	r3, sp, 18      	//0x12
    4874:	8b60      	ld.h      	r3, (r3, 0x0)
    4876:	750d      	zexth      	r4, r3
    4878:	e000033c 	bsr      	0x4ef0	//4ef0 <I2C_Receive_Data>
    487c:	c4004820 	lsli      	r0, r0, 0
    4880:	6cc3      	mov      	r3, r0
    4882:	6c8f      	mov      	r2, r3
    4884:	116d      	lrw      	r3, 0x134d4	//134d4 <a>
    4886:	d4830022 	str.b      	r2, (r3, r4<<0)
		if(i<Datasize-2)
    488a:	e46e0011 	addi      	r3, sp, 18      	//0x12
    488e:	8b60      	ld.h      	r3, (r3, 0x0)
    4890:	748d      	zexth      	r2, r3
    4892:	6cfb      	mov      	r3, sp
    4894:	8b60      	ld.h      	r3, (r3, 0x0)
    4896:	74cd      	zexth      	r3, r3
    4898:	2b01      	subi      	r3, 2      	//0x2
    489a:	64c9      	cmplt      	r2, r3
    489c:	0c05      	bf      	0x48a6	//48a6 <EEPROM_Byte_Read+0x10a>
			I2C_Receive_Set();
    489e:	e0000309 	bsr      	0x4eb0	//4eb0 <I2C_Receive_Set>
    48a2:	c4004820 	lsli      	r0, r0, 0
	}
	I2C_Set_Restart(DISABLE);    //stop
	I2C_Set_Stop(ENABLE);
	I2C_Receive_Set();
#endif
	for(i=0;i<Datasize-1;i++)    // receive data
    48a6:	e46e0011 	addi      	r3, sp, 18      	//0x12
    48aa:	e44e0011 	addi      	r2, sp, 18      	//0x12
    48ae:	8a40      	ld.h      	r2, (r2, 0x0)
    48b0:	2200      	addi      	r2, 1      	//0x1
    48b2:	ab40      	st.h      	r2, (r3, 0x0)
    48b4:	e46e0011 	addi      	r3, sp, 18      	//0x12
    48b8:	8b60      	ld.h      	r3, (r3, 0x0)
    48ba:	748d      	zexth      	r2, r3
    48bc:	6cfb      	mov      	r3, sp
    48be:	8b60      	ld.h      	r3, (r3, 0x0)
    48c0:	74cd      	zexth      	r3, r3
    48c2:	2b00      	subi      	r3, 1      	//0x1
    48c4:	64c9      	cmplt      	r2, r3
    48c6:	0bc6      	bt      	0x4852	//4852 <EEPROM_Byte_Read+0xb6>
		//while(!I2C_Get_ITStat(IC_INT_RX_FULL));
		a[i]=I2C_Receive_Data();
		if(i<Datasize-2)
			I2C_Receive_Set();
	}
	I2C_Set_Restart(DISABLE);    //stop
    48c8:	3000      	movi      	r0, 0      	//0x0
    48ca:	e000032d 	bsr      	0x4f24	//4f24 <I2C_Set_Restart>
    48ce:	c4004820 	lsli      	r0, r0, 0
	I2C_Set_Stop(ENABLE);
    48d2:	3001      	movi      	r0, 1      	//0x1
    48d4:	e0000348 	bsr      	0x4f64	//4f64 <I2C_Set_Stop>
    48d8:	c4004820 	lsli      	r0, r0, 0
	I2C_Receive_Set();
    48dc:	e00002ea 	bsr      	0x4eb0	//4eb0 <I2C_Receive_Set>
    48e0:	c4004820 	lsli      	r0, r0, 0

	ITstatus=INACTIVE;
    48e4:	1b03      	addi      	r3, sp, 12
    48e6:	3200      	movi      	r2, 0      	//0x0
    48e8:	b340      	st.w      	r2, (r3, 0x0)
	while(!ITstatus)
    48ea:	0408      	br      	0x48fa	//48fa <EEPROM_Byte_Read+0x15e>
	{
		ITstatus=I2C_Get_ITStat(IC_INT_RX_FULL);
    48ec:	1c03      	addi      	r4, sp, 12
    48ee:	3004      	movi      	r0, 4      	//0x4
    48f0:	e0000484 	bsr      	0x51f8	//51f8 <I2C_Get_ITStat>
    48f4:	c4004820 	lsli      	r0, r0, 0
    48f8:	b400      	st.w      	r0, (r4, 0x0)
	I2C_Set_Restart(DISABLE);    //stop
	I2C_Set_Stop(ENABLE);
	I2C_Receive_Set();

	ITstatus=INACTIVE;
	while(!ITstatus)
    48fa:	1b03      	addi      	r3, sp, 12
    48fc:	9360      	ld.w      	r3, (r3, 0x0)
    48fe:	e903fff7 	bez      	r3, 0x48ec	//48ec <EEPROM_Byte_Read+0x150>
	{
		ITstatus=I2C_Get_ITStat(IC_INT_RX_FULL);
	}
	//while(!I2C_Get_ITStat(IC_INT_RX_FULL));
	a[Datasize-1]=I2C_Receive_Data();
    4902:	6cfb      	mov      	r3, sp
    4904:	8b60      	ld.h      	r3, (r3, 0x0)
    4906:	74cd      	zexth      	r3, r3
    4908:	5b83      	subi      	r4, r3, 1      	//0x1
    490a:	e00002f3 	bsr      	0x4ef0	//4ef0 <I2C_Receive_Data>
    490e:	c4004820 	lsli      	r0, r0, 0
    4912:	6cc3      	mov      	r3, r0
    4914:	6c8f      	mov      	r2, r3
    4916:	1069      	lrw      	r3, 0x134d4	//134d4 <a>
    4918:	d4830022 	str.b      	r2, (r3, r4<<0)
}
    491c:	1405      	addi      	sp, sp, 20
    491e:	1491      	pop      	r4, r15
    4920:	00004f24 	.long	0x00004f24
    4924:	00004f64 	.long	0x00004f64
    4928:	00004e68 	.long	0x00004e68
    492c:	000051f8 	.long	0x000051f8
    4930:	00004eb0 	.long	0x00004eb0
    4934:	00004ef0 	.long	0x00004ef0
    4938:	000134d4 	.long	0x000134d4

0000493c <I2C_Test_For_EEPROM>:

void I2C_Test_For_EEPROM(void)
{
    493c:	14d0      	push      	r15
    493e:	1435      	subi      	sp, sp, 84
	Bit8u tmp[80]={0};
    4940:	6cfb      	mov      	r3, sp
    4942:	6c8f      	mov      	r2, r3
    4944:	3350      	movi      	r3, 80      	//0x50
    4946:	6c0b      	mov      	r0, r2
    4948:	3100      	movi      	r1, 0      	//0x0
    494a:	6c8f      	mov      	r2, r3
    494c:	e0005560 	bsr      	0xf40c	//f40c <__memset_fast>
    4950:	c4004820 	lsli      	r0, r0, 0
	//Bit8u temp1[50]={0};
	Bit16u i = 0;
    4954:	e46e0051 	addi      	r3, sp, 82      	//0x52
    4958:	3200      	movi      	r2, 0      	//0x0
    495a:	ab40      	st.h      	r2, (r3, 0x0)
	Bit16u j = 10000;
    495c:	1b14      	addi      	r3, sp, 80
    495e:	ea022710 	movi      	r2, 10000      	//0x2710
    4962:	ab40      	st.h      	r2, (r3, 0x0)

	printf("IIC test begins! \n");
    4964:	1218      	lrw      	r0, 0x10354	//10354 <__etext+0x7a4>
    4966:	e0004ff5 	bsr      	0xe950	//e950 <printf>
    496a:	c4004820 	lsli      	r0, r0, 0
	I2C_Init_For_EEPROM();
    496e:	e3fffe61 	bsr      	0x4630	//4630 <I2C_Init_For_EEPROM>
    4972:	c4004820 	lsli      	r0, r0, 0
	printf(" Init:Compelte! \n");
    4976:	1217      	lrw      	r0, 0x10368	//10368 <__etext+0x7b8>
    4978:	e0004fec 	bsr      	0xe950	//e950 <printf>
    497c:	c4004820 	lsli      	r0, r0, 0

	for(i=0;i<80;i++)
    4980:	e46e0051 	addi      	r3, sp, 82      	//0x52
    4984:	3200      	movi      	r2, 0      	//0x0
    4986:	ab40      	st.h      	r2, (r3, 0x0)
    4988:	0427      	br      	0x49d6	//49d6 <I2C_Test_For_EEPROM+0x9a>
	{
		tmp[i]=i+1;
    498a:	e46e0051 	addi      	r3, sp, 82      	//0x52
    498e:	8b60      	ld.h      	r3, (r3, 0x0)
    4990:	74cd      	zexth      	r3, r3
    4992:	e44e0051 	addi      	r2, sp, 82      	//0x52
    4996:	8a40      	ld.h      	r2, (r2, 0x0)
    4998:	7488      	zextb      	r2, r2
    499a:	2200      	addi      	r2, 1      	//0x1
    499c:	7448      	zextb      	r1, r2
    499e:	6cbb      	mov      	r2, sp
    49a0:	d4620021 	str.b      	r1, (r2, r3<<0)
		EEPROM_Byte_Write(i,tmp[i]);
    49a4:	e46e0051 	addi      	r3, sp, 82      	//0x52
    49a8:	8b60      	ld.h      	r3, (r3, 0x0)
    49aa:	748d      	zexth      	r2, r3
    49ac:	e46e0051 	addi      	r3, sp, 82      	//0x52
    49b0:	8b60      	ld.h      	r3, (r3, 0x0)
    49b2:	74cd      	zexth      	r3, r3
    49b4:	6c7b      	mov      	r1, sp
    49b6:	d0610023 	ldr.b      	r3, (r1, r3<<0)
    49ba:	74cc      	zextb      	r3, r3
    49bc:	6c0b      	mov      	r0, r2
    49be:	6c4f      	mov      	r1, r3
    49c0:	e3fffe68 	bsr      	0x4690	//4690 <EEPROM_Byte_Write>
    49c4:	c4004820 	lsli      	r0, r0, 0

	printf("IIC test begins! \n");
	I2C_Init_For_EEPROM();
	printf(" Init:Compelte! \n");

	for(i=0;i<80;i++)
    49c8:	e46e0051 	addi      	r3, sp, 82      	//0x52
    49cc:	e44e0051 	addi      	r2, sp, 82      	//0x52
    49d0:	8a40      	ld.h      	r2, (r2, 0x0)
    49d2:	2200      	addi      	r2, 1      	//0x1
    49d4:	ab40      	st.h      	r2, (r3, 0x0)
    49d6:	e46e0051 	addi      	r3, sp, 82      	//0x52
    49da:	8b60      	ld.h      	r3, (r3, 0x0)
    49dc:	748d      	zexth      	r2, r3
    49de:	334f      	movi      	r3, 79      	//0x4f
    49e0:	648c      	cmphs      	r3, r2
    49e2:	0bd4      	bt      	0x498a	//498a <I2C_Test_For_EEPROM+0x4e>
	{
		tmp[i]=i+1;
		EEPROM_Byte_Write(i,tmp[i]);
	}
	printf(" Write:Compelte! \n");
    49e4:	111d      	lrw      	r0, 0x1037c	//1037c <__etext+0x7cc>
    49e6:	e0004fb5 	bsr      	0xe950	//e950 <printf>
    49ea:	c4004820 	lsli      	r0, r0, 0

	while(j--);    //delay 10ms?
    49ee:	6c00      	or      	r0, r0
    49f0:	1b14      	addi      	r3, sp, 80
    49f2:	8b60      	ld.h      	r3, (r3, 0x0)
    49f4:	74cd      	zexth      	r3, r3
    49f6:	3b40      	cmpnei      	r3, 0
    49f8:	c4000503 	mvc      	r3
    49fc:	74cc      	zextb      	r3, r3
    49fe:	1a14      	addi      	r2, sp, 80
    4a00:	1914      	addi      	r1, sp, 80
    4a02:	8920      	ld.h      	r1, (r1, 0x0)
    4a04:	2900      	subi      	r1, 1      	//0x1
    4a06:	aa20      	st.h      	r1, (r2, 0x0)
    4a08:	e923fff4 	bnez      	r3, 0x49f0	//49f0 <I2C_Test_For_EEPROM+0xb4>
	EEPROM_Byte_Read(0,50);
    4a0c:	3000      	movi      	r0, 0      	//0x0
    4a0e:	3132      	movi      	r1, 50      	//0x32
    4a10:	e3fffec6 	bsr      	0x479c	//479c <EEPROM_Byte_Read>
    4a14:	c4004820 	lsli      	r0, r0, 0
	printf(" Read:Compelte! \n");
    4a18:	1112      	lrw      	r0, 0x10390	//10390 <__etext+0x7e0>
    4a1a:	e0004f9b 	bsr      	0xe950	//e950 <printf>
    4a1e:	c4004820 	lsli      	r0, r0, 0

	for(i=0;i<50;i++)
    4a22:	e46e0051 	addi      	r3, sp, 82      	//0x52
    4a26:	3200      	movi      	r2, 0      	//0x0
    4a28:	ab40      	st.h      	r2, (r3, 0x0)
    4a2a:	0438      	br      	0x4a9a	//4a9a <I2C_Test_For_EEPROM+0x15e>
	{
		printf(" Send data:%x; Receive data :%x \n", tmp[i],a[i]);
    4a2c:	e46e0051 	addi      	r3, sp, 82      	//0x52
    4a30:	8b60      	ld.h      	r3, (r3, 0x0)
    4a32:	74cd      	zexth      	r3, r3
    4a34:	6cbb      	mov      	r2, sp
    4a36:	d0620023 	ldr.b      	r3, (r2, r3<<0)
    4a3a:	74cc      	zextb      	r3, r3
    4a3c:	6c8f      	mov      	r2, r3
    4a3e:	e46e0051 	addi      	r3, sp, 82      	//0x52
    4a42:	8b60      	ld.h      	r3, (r3, 0x0)
    4a44:	74cd      	zexth      	r3, r3
    4a46:	1128      	lrw      	r1, 0x134d4	//134d4 <a>
    4a48:	d0610023 	ldr.b      	r3, (r1, r3<<0)
    4a4c:	74cc      	zextb      	r3, r3
    4a4e:	1107      	lrw      	r0, 0x103a4	//103a4 <__etext+0x7f4>
    4a50:	6c4b      	mov      	r1, r2
    4a52:	6c8f      	mov      	r2, r3
    4a54:	e0004f7e 	bsr      	0xe950	//e950 <printf>
    4a58:	c4004820 	lsli      	r0, r0, 0
		if(tmp[i]!=a[i])
    4a5c:	e46e0051 	addi      	r3, sp, 82      	//0x52
    4a60:	8b60      	ld.h      	r3, (r3, 0x0)
    4a62:	74cd      	zexth      	r3, r3
    4a64:	6cbb      	mov      	r2, sp
    4a66:	d0620023 	ldr.b      	r3, (r2, r3<<0)
    4a6a:	748c      	zextb      	r2, r3
    4a6c:	e46e0051 	addi      	r3, sp, 82      	//0x52
    4a70:	8b60      	ld.h      	r3, (r3, 0x0)
    4a72:	74cd      	zexth      	r3, r3
    4a74:	103c      	lrw      	r1, 0x134d4	//134d4 <a>
    4a76:	d0610023 	ldr.b      	r3, (r1, r3<<0)
    4a7a:	74cc      	zextb      	r3, r3
    4a7c:	64ca      	cmpne      	r2, r3
    4a7e:	0c07      	bf      	0x4a8c	//4a8c <I2C_Test_For_EEPROM+0x150>
		{
			printf(" ERROR \n");
    4a80:	101b      	lrw      	r0, 0x103c8	//103c8 <__etext+0x818>
    4a82:	e0004f67 	bsr      	0xe950	//e950 <printf>
    4a86:	c4004820 	lsli      	r0, r0, 0
			return;
    4a8a:	0419      	br      	0x4abc	//4abc <I2C_Test_For_EEPROM+0x180>

	while(j--);    //delay 10ms?
	EEPROM_Byte_Read(0,50);
	printf(" Read:Compelte! \n");

	for(i=0;i<50;i++)
    4a8c:	e46e0051 	addi      	r3, sp, 82      	//0x52
    4a90:	e44e0051 	addi      	r2, sp, 82      	//0x52
    4a94:	8a40      	ld.h      	r2, (r2, 0x0)
    4a96:	2200      	addi      	r2, 1      	//0x1
    4a98:	ab40      	st.h      	r2, (r3, 0x0)
    4a9a:	e46e0051 	addi      	r3, sp, 82      	//0x52
    4a9e:	8b60      	ld.h      	r3, (r3, 0x0)
    4aa0:	748d      	zexth      	r2, r3
    4aa2:	3331      	movi      	r3, 49      	//0x31
    4aa4:	648c      	cmphs      	r3, r2
    4aa6:	0bc3      	bt      	0x4a2c	//4a2c <I2C_Test_For_EEPROM+0xf0>
		{
			printf(" ERROR \n");
			return;
		}
	}
	I2C_CMD(DISABLE);    ///close IIC
    4aa8:	3000      	movi      	r0, 0      	//0x0
    4aaa:	e000076b 	bsr      	0x5980	//5980 <I2C_CMD>
    4aae:	c4004820 	lsli      	r0, r0, 0
	printf("IIC test success! \n");
    4ab2:	1011      	lrw      	r0, 0x103d4	//103d4 <__etext+0x824>
    4ab4:	e0004f4e 	bsr      	0xe950	//e950 <printf>
    4ab8:	c4004820 	lsli      	r0, r0, 0

}
    4abc:	1415      	addi      	sp, sp, 84
    4abe:	1490      	pop      	r15
    4ac0:	0000f40c 	.long	0x0000f40c
    4ac4:	00010354 	.long	0x00010354
    4ac8:	0000e950 	.long	0x0000e950
    4acc:	00004630 	.long	0x00004630
    4ad0:	00010368 	.long	0x00010368
    4ad4:	00004690 	.long	0x00004690
    4ad8:	0001037c 	.long	0x0001037c
    4adc:	0000479c 	.long	0x0000479c
    4ae0:	00010390 	.long	0x00010390
    4ae4:	000134d4 	.long	0x000134d4
    4ae8:	000103a4 	.long	0x000103a4
    4aec:	000103c8 	.long	0x000103c8
    4af0:	00005980 	.long	0x00005980
    4af4:	000103d4 	.long	0x000103d4

00004af8 <readl>:
{
    *(volatile Bit16u *)addr = value;
}

static inline Bit32u readl(const volatile void *addr)
{
    4af8:	1421      	subi      	sp, sp, 4
    4afa:	6cfb      	mov      	r3, sp
    4afc:	b300      	st.w      	r0, (r3, 0x0)
    return *(const volatile Bit32u *)addr;
    4afe:	6cfb      	mov      	r3, sp
    4b00:	9360      	ld.w      	r3, (r3, 0x0)
    4b02:	9360      	ld.w      	r3, (r3, 0x0)
}
    4b04:	6c0f      	mov      	r0, r3
    4b06:	1401      	addi      	sp, sp, 4
    4b08:	783c      	rts
	...

00004b0c <writel>:

static inline void writel(Bit32u value, volatile void *addr)
{
    4b0c:	1422      	subi      	sp, sp, 8
    4b0e:	1b01      	addi      	r3, sp, 4
    4b10:	b300      	st.w      	r0, (r3, 0x0)
    4b12:	6cfb      	mov      	r3, sp
    4b14:	b320      	st.w      	r1, (r3, 0x0)
    *(volatile Bit32u *)addr = value;
    4b16:	6cfb      	mov      	r3, sp
    4b18:	9360      	ld.w      	r3, (r3, 0x0)
    4b1a:	1a01      	addi      	r2, sp, 4
    4b1c:	9240      	ld.w      	r2, (r2, 0x0)
    4b1e:	b340      	st.w      	r2, (r3, 0x0)
}
    4b20:	1402      	addi      	sp, sp, 8
    4b22:	783c      	rts

00004b24 <dw_write>:

static inline void dw_write(Bit32u val, void* addr)
{
    4b24:	14d1      	push      	r4, r15
    4b26:	1423      	subi      	sp, sp, 12
    4b28:	1b01      	addi      	r3, sp, 4
    4b2a:	b300      	st.w      	r0, (r3, 0x0)
    4b2c:	6cfb      	mov      	r3, sp
    4b2e:	b320      	st.w      	r1, (r3, 0x0)
	Bit32u value;
	value =readl(addr);
    4b30:	1c02      	addi      	r4, sp, 8
    4b32:	6cfb      	mov      	r3, sp
    4b34:	9300      	ld.w      	r0, (r3, 0x0)
    4b36:	e3ffffe1 	bsr      	0x4af8	//4af8 <readl>
    4b3a:	c4004820 	lsli      	r0, r0, 0
    4b3e:	b400      	st.w      	r0, (r4, 0x0)
	value |= val;
    4b40:	1b02      	addi      	r3, sp, 8
    4b42:	1902      	addi      	r1, sp, 8
    4b44:	1a01      	addi      	r2, sp, 4
    4b46:	9120      	ld.w      	r1, (r1, 0x0)
    4b48:	9240      	ld.w      	r2, (r2, 0x0)
    4b4a:	6c84      	or      	r2, r1
    4b4c:	b340      	st.w      	r2, (r3, 0x0)
	writel(value, addr);
    4b4e:	1a02      	addi      	r2, sp, 8
    4b50:	6cfb      	mov      	r3, sp
    4b52:	9200      	ld.w      	r0, (r2, 0x0)
    4b54:	9320      	ld.w      	r1, (r3, 0x0)
    4b56:	e3ffffdb 	bsr      	0x4b0c	//4b0c <writel>
    4b5a:	c4004820 	lsli      	r0, r0, 0
}
    4b5e:	1403      	addi      	sp, sp, 12
    4b60:	1491      	pop      	r4, r15
	...

00004b64 <dw_clear>:

static inline void dw_clear(Bit32u val, void* addr)
{
    4b64:	14d1      	push      	r4, r15
    4b66:	1423      	subi      	sp, sp, 12
    4b68:	1b01      	addi      	r3, sp, 4
    4b6a:	b300      	st.w      	r0, (r3, 0x0)
    4b6c:	6cfb      	mov      	r3, sp
    4b6e:	b320      	st.w      	r1, (r3, 0x0)
	Bit32u value;
	value =readl(addr);
    4b70:	1c02      	addi      	r4, sp, 8
    4b72:	6cfb      	mov      	r3, sp
    4b74:	9300      	ld.w      	r0, (r3, 0x0)
    4b76:	e3ffffc1 	bsr      	0x4af8	//4af8 <readl>
    4b7a:	c4004820 	lsli      	r0, r0, 0
    4b7e:	b400      	st.w      	r0, (r4, 0x0)
	value &= ~val;
    4b80:	1b01      	addi      	r3, sp, 4
    4b82:	9360      	ld.w      	r3, (r3, 0x0)
    4b84:	c4632481 	nor      	r1, r3, r3
    4b88:	1b02      	addi      	r3, sp, 8
    4b8a:	1a02      	addi      	r2, sp, 8
    4b8c:	9240      	ld.w      	r2, (r2, 0x0)
    4b8e:	6884      	and      	r2, r1
    4b90:	b340      	st.w      	r2, (r3, 0x0)
	writel(value, addr);
    4b92:	1a02      	addi      	r2, sp, 8
    4b94:	6cfb      	mov      	r3, sp
    4b96:	9200      	ld.w      	r0, (r2, 0x0)
    4b98:	9320      	ld.w      	r1, (r3, 0x0)
    4b9a:	e3ffffb9 	bsr      	0x4b0c	//4b0c <writel>
    4b9e:	c4004820 	lsli      	r0, r0, 0
}
    4ba2:	1403      	addi      	sp, sp, 12
    4ba4:	1491      	pop      	r4, r15
    4ba6:	0000      	.short	0x0000
    4ba8:	00004af8 	.long	0x00004af8
    4bac:	00004b0c 	.long	0x00004b0c

00004bb0 <I2C_Set_Mode>:
static Bit32u SPKLEN_HS = 3;
static Bit32u I2C_CLOCK = 25000;  //Khz

/*Function1-1:set IC mode ,set bit0,bit6 of IC_CON reg*/
Bit32u I2C_Set_Mode(IC_Mode_Typedef ICmode)
{
    4bb0:	14d0      	push      	r15
    4bb2:	1421      	subi      	sp, sp, 4
    4bb4:	6cfb      	mov      	r3, sp
    4bb6:	b300      	st.w      	r0, (r3, 0x0)
	//Mode=ICmode;
	if(ICmode==MASTER)
    4bb8:	6cfb      	mov      	r3, sp
    4bba:	9360      	ld.w      	r3, (r3, 0x0)
    4bbc:	e9230012 	bnez      	r3, 0x4be0	//4be0 <I2C_Set_Mode+0x30>
	{
		//I2C->IC_CON |= IC_CON_SLAVE_DISABLE;
		//I2C->IC_CON |= IC_CON_MASTER_MODE;
		reg_writel(IC_CON_SLAVE_DISABLE,I2C,IC_CON);
    4bc0:	3040      	movi      	r0, 64      	//0x40
    4bc2:	ea211905 	movih      	r1, 6405      	//0x1905
    4bc6:	e3ffffaf 	bsr      	0x4b24	//4b24 <dw_write>
    4bca:	c4004820 	lsli      	r0, r0, 0
		reg_writel(IC_CON_MASTER_MODE,I2C,IC_CON);
    4bce:	3001      	movi      	r0, 1      	//0x1
    4bd0:	ea211905 	movih      	r1, 6405      	//0x1905
    4bd4:	e3ffffa8 	bsr      	0x4b24	//4b24 <dw_write>
    4bd8:	c4004820 	lsli      	r0, r0, 0
		return 0;
    4bdc:	3300      	movi      	r3, 0      	//0x0
    4bde:	0416      	br      	0x4c0a	//4c0a <I2C_Set_Mode+0x5a>
	}
	else if(ICmode==SLAVE)
    4be0:	6cfb      	mov      	r3, sp
    4be2:	9360      	ld.w      	r3, (r3, 0x0)
    4be4:	3b41      	cmpnei      	r3, 1
    4be6:	0811      	bt      	0x4c08	//4c08 <I2C_Set_Mode+0x58>
	{
		//I2C->IC_CON &= ~IC_CON_SLAVE_DISABLE;
		//I2C->IC_CON &= ~IC_CON_MASTER_MODE;
		reg_clearl(IC_CON_SLAVE_DISABLE,I2C,IC_CON);
    4be8:	3040      	movi      	r0, 64      	//0x40
    4bea:	ea211905 	movih      	r1, 6405      	//0x1905
    4bee:	e3ffffbb 	bsr      	0x4b64	//4b64 <dw_clear>
    4bf2:	c4004820 	lsli      	r0, r0, 0
		reg_clearl(IC_CON_MASTER_MODE,I2C,IC_CON);
    4bf6:	3001      	movi      	r0, 1      	//0x1
    4bf8:	ea211905 	movih      	r1, 6405      	//0x1905
    4bfc:	e3ffffb4 	bsr      	0x4b64	//4b64 <dw_clear>
    4c00:	c4004820 	lsli      	r0, r0, 0
		return 0;
    4c04:	3300      	movi      	r3, 0      	//0x0
    4c06:	0402      	br      	0x4c0a	//4c0a <I2C_Set_Mode+0x5a>
	}
	else
		return 1;
    4c08:	3301      	movi      	r3, 1      	//0x1
}
    4c0a:	6c0f      	mov      	r0, r3
    4c0c:	1401      	addi      	sp, sp, 4
    4c0e:	1490      	pop      	r15

00004c10 <I2C_Set_SpeedMode>:

/*Function1-2:set IC speed ,set bit2,bit1 of IC_CON reg*/
Bit32u I2C_Set_SpeedMode(IC_SpeedMode_Typedef SpeedMode)
{
    4c10:	14d1      	push      	r4, r15
    4c12:	1422      	subi      	sp, sp, 8
    4c14:	6cfb      	mov      	r3, sp
    4c16:	b300      	st.w      	r0, (r3, 0x0)
	Bit32u temp;
	//temp=I2C->IC_CON;      // get the origin value of IC_CON reg
	temp=reg_readl(I2C,IC_CON);  // get the origin value of IC_CON reg
    4c18:	1c01      	addi      	r4, sp, 4
    4c1a:	ea201905 	movih      	r0, 6405      	//0x1905
    4c1e:	e3ffff6d 	bsr      	0x4af8	//4af8 <readl>
    4c22:	c4004820 	lsli      	r0, r0, 0
    4c26:	b400      	st.w      	r0, (r4, 0x0)
	temp &= ~0x06;               // clear bit[2:1]
    4c28:	1b01      	addi      	r3, sp, 4
    4c2a:	1a01      	addi      	r2, sp, 4
    4c2c:	9240      	ld.w      	r2, (r2, 0x0)
    4c2e:	3a81      	bclri      	r2, 1
    4c30:	3a82      	bclri      	r2, 2
    4c32:	b340      	st.w      	r2, (r3, 0x0)
	temp |= SpeedMode;           // get the speed value
    4c34:	1b01      	addi      	r3, sp, 4
    4c36:	1901      	addi      	r1, sp, 4
    4c38:	6cbb      	mov      	r2, sp
    4c3a:	9120      	ld.w      	r1, (r1, 0x0)
    4c3c:	9240      	ld.w      	r2, (r2, 0x0)
    4c3e:	6c84      	or      	r2, r1
    4c40:	b340      	st.w      	r2, (r3, 0x0)
	//I2C->IC_CON = temp;
	reg_direct_writel(temp,I2C,IC_CON);
    4c42:	1b01      	addi      	r3, sp, 4
    4c44:	9300      	ld.w      	r0, (r3, 0x0)
    4c46:	ea211905 	movih      	r1, 6405      	//0x1905
    4c4a:	e3ffff61 	bsr      	0x4b0c	//4b0c <writel>
    4c4e:	c4004820 	lsli      	r0, r0, 0
	return 0;
    4c52:	3300      	movi      	r3, 0      	//0x0
}
    4c54:	6c0f      	mov      	r0, r3
    4c56:	1402      	addi      	sp, sp, 8
    4c58:	1491      	pop      	r4, r15
	...

00004c5c <I2C_Set_AddrMode>:
/*Function1-3:set IC addrmode
 *  if I2C_DYNAMIC_TAR_UPDATE =0,set bit3(slave ) or bit4(master) of IC_CON reg
 *  if I2C_DYNAMIC_TAR_UPDATE =1,set bit12(master) of IC_TAR reg,bit4(master) of IC_CON reg is read only
 * */
Bit32u I2C_Set_AddrMode(IC_AddrMode_Typedef AddrMode)
{
    4c5c:	14d0      	push      	r15
    4c5e:	1421      	subi      	sp, sp, 4
    4c60:	6cfb      	mov      	r3, sp
    4c62:	b300      	st.w      	r0, (r3, 0x0)
	if(Mode==MASTER)
    4c64:	1177      	lrw      	r3, 0x134dc	//134dc <Mode>
    4c66:	9360      	ld.w      	r3, (r3, 0x0)
    4c68:	e9230040 	bnez      	r3, 0x4ce8	//4ce8 <I2C_Set_AddrMode+0x8c>
	{
		if(I2C_DYNAMIC_TAR_UPDATE==0)
    4c6c:	1176      	lrw      	r3, 0x11308	//11308 <I2C_DYNAMIC_TAR_UPDATE>
    4c6e:	9360      	ld.w      	r3, (r3, 0x0)
    4c70:	e923001e 	bnez      	r3, 0x4cac	//4cac <I2C_Set_AddrMode+0x50>
		{
			if(AddrMode==address_bit_10)
    4c74:	6cfb      	mov      	r3, sp
    4c76:	9360      	ld.w      	r3, (r3, 0x0)
    4c78:	e923000b 	bnez      	r3, 0x4c8e	//4c8e <I2C_Set_AddrMode+0x32>
			{
				//I2C->IC_CON |= IC_CON_10BITADDR_MASTER;
				reg_writel(IC_CON_10BITADDR_MASTER,I2C,IC_CON);
    4c7c:	3010      	movi      	r0, 16      	//0x10
    4c7e:	ea211905 	movih      	r1, 6405      	//0x1905
    4c82:	e3ffff51 	bsr      	0x4b24	//4b24 <dw_write>
    4c86:	c4004820 	lsli      	r0, r0, 0
				return 0;
    4c8a:	3300      	movi      	r3, 0      	//0x0
    4c8c:	044f      	br      	0x4d2a	//4d2a <I2C_Set_AddrMode+0xce>
			}
			else if (AddrMode==address_bit_7)
    4c8e:	6cfb      	mov      	r3, sp
    4c90:	9360      	ld.w      	r3, (r3, 0x0)
    4c92:	3b41      	cmpnei      	r3, 1
    4c94:	080a      	bt      	0x4ca8	//4ca8 <I2C_Set_AddrMode+0x4c>
			{
				//I2C->IC_CON &= ~IC_CON_10BITADDR_MASTER;
				reg_clearl(IC_CON_10BITADDR_MASTER,I2C,IC_CON);
    4c96:	3010      	movi      	r0, 16      	//0x10
    4c98:	ea211905 	movih      	r1, 6405      	//0x1905
    4c9c:	e3ffff64 	bsr      	0x4b64	//4b64 <dw_clear>
    4ca0:	c4004820 	lsli      	r0, r0, 0
				return 0;
    4ca4:	3300      	movi      	r3, 0      	//0x0
    4ca6:	0442      	br      	0x4d2a	//4d2a <I2C_Set_AddrMode+0xce>
			}
			else
				return 1;
    4ca8:	3301      	movi      	r3, 1      	//0x1
    4caa:	0440      	br      	0x4d2a	//4d2a <I2C_Set_AddrMode+0xce>
		}
		else
		{
			if(AddrMode==address_bit_10)
    4cac:	6cfb      	mov      	r3, sp
    4cae:	9360      	ld.w      	r3, (r3, 0x0)
    4cb0:	e923000c 	bnez      	r3, 0x4cc8	//4cc8 <I2C_Set_AddrMode+0x6c>
			{
				//I2C->IC_TAR |= IC_TAR_10BITADDR_MASTER;
				reg_writel(IC_CON_10BITADDR_MASTER,I2C,IC_TAR);
    4cb4:	3010      	movi      	r0, 16      	//0x10
    4cb6:	ea211905 	movih      	r1, 6405      	//0x1905
    4cba:	39a2      	bseti      	r1, 2
    4cbc:	e3ffff34 	bsr      	0x4b24	//4b24 <dw_write>
    4cc0:	c4004820 	lsli      	r0, r0, 0
				return 0;
    4cc4:	3300      	movi      	r3, 0      	//0x0
    4cc6:	0432      	br      	0x4d2a	//4d2a <I2C_Set_AddrMode+0xce>
			}
			else if (AddrMode==address_bit_7)
    4cc8:	6cfb      	mov      	r3, sp
    4cca:	9360      	ld.w      	r3, (r3, 0x0)
    4ccc:	3b41      	cmpnei      	r3, 1
    4cce:	080b      	bt      	0x4ce4	//4ce4 <I2C_Set_AddrMode+0x88>
			{
				//I2C->IC_TAR &= ~IC_TAR_10BITADDR_MASTER;
				reg_clearl(IC_CON_10BITADDR_MASTER,I2C,IC_TAR);
    4cd0:	3010      	movi      	r0, 16      	//0x10
    4cd2:	ea211905 	movih      	r1, 6405      	//0x1905
    4cd6:	39a2      	bseti      	r1, 2
    4cd8:	e3ffff46 	bsr      	0x4b64	//4b64 <dw_clear>
    4cdc:	c4004820 	lsli      	r0, r0, 0
				return 0;
    4ce0:	3300      	movi      	r3, 0      	//0x0
    4ce2:	0424      	br      	0x4d2a	//4d2a <I2C_Set_AddrMode+0xce>
			}
			else
				return 1;
    4ce4:	3301      	movi      	r3, 1      	//0x1
    4ce6:	0422      	br      	0x4d2a	//4d2a <I2C_Set_AddrMode+0xce>
		}

	}
	else if(Mode==SLAVE)
    4ce8:	1076      	lrw      	r3, 0x134dc	//134dc <Mode>
    4cea:	9360      	ld.w      	r3, (r3, 0x0)
    4cec:	3b41      	cmpnei      	r3, 1
    4cee:	081d      	bt      	0x4d28	//4d28 <I2C_Set_AddrMode+0xcc>
	{
		if(AddrMode==address_bit_10)
    4cf0:	6cfb      	mov      	r3, sp
    4cf2:	9360      	ld.w      	r3, (r3, 0x0)
    4cf4:	e923000b 	bnez      	r3, 0x4d0a	//4d0a <I2C_Set_AddrMode+0xae>
		{
			//I2C->IC_CON |= IC_CON_10BITADDR_SLAVE;
			reg_writel(IC_CON_10BITADDR_SLAVE,I2C,IC_CON);
    4cf8:	3008      	movi      	r0, 8      	//0x8
    4cfa:	ea211905 	movih      	r1, 6405      	//0x1905
    4cfe:	e3ffff13 	bsr      	0x4b24	//4b24 <dw_write>
    4d02:	c4004820 	lsli      	r0, r0, 0
			return 0;
    4d06:	3300      	movi      	r3, 0      	//0x0
    4d08:	0411      	br      	0x4d2a	//4d2a <I2C_Set_AddrMode+0xce>
		}
		else if (AddrMode==address_bit_7)
    4d0a:	6cfb      	mov      	r3, sp
    4d0c:	9360      	ld.w      	r3, (r3, 0x0)
    4d0e:	3b41      	cmpnei      	r3, 1
    4d10:	080a      	bt      	0x4d24	//4d24 <I2C_Set_AddrMode+0xc8>
		{
			//I2C->IC_CON &= ~IC_CON_10BITADDR_SLAVE;
			reg_clearl(IC_CON_10BITADDR_SLAVE,I2C,IC_CON);
    4d12:	3008      	movi      	r0, 8      	//0x8
    4d14:	ea211905 	movih      	r1, 6405      	//0x1905
    4d18:	e3ffff26 	bsr      	0x4b64	//4b64 <dw_clear>
    4d1c:	c4004820 	lsli      	r0, r0, 0
			return 0;
    4d20:	3300      	movi      	r3, 0      	//0x0
    4d22:	0404      	br      	0x4d2a	//4d2a <I2C_Set_AddrMode+0xce>
		}
		else
			return 1;
    4d24:	3301      	movi      	r3, 1      	//0x1
    4d26:	0402      	br      	0x4d2a	//4d2a <I2C_Set_AddrMode+0xce>
	}
	else
		return 1;
    4d28:	3301      	movi      	r3, 1      	//0x1
}
    4d2a:	6c0f      	mov      	r0, r3
    4d2c:	1401      	addi      	sp, sp, 4
    4d2e:	1490      	pop      	r15
    4d30:	00004b24 	.long	0x00004b24
    4d34:	00004b64 	.long	0x00004b64
    4d38:	00004af8 	.long	0x00004af8
    4d3c:	00004b0c 	.long	0x00004b0c
    4d40:	000134dc 	.long	0x000134dc
    4d44:	00011308 	.long	0x00011308

00004d48 <I2C_Restart_EN>:

/*Function1-4:enable/disable IC restart ,set bit5 of IC_CON reg(only in master mode)*/
Bit32u I2C_Restart_EN(State_TypeDef NewState)
{
    4d48:	14d0      	push      	r15
    4d4a:	1421      	subi      	sp, sp, 4
    4d4c:	6cfb      	mov      	r3, sp
    4d4e:	b300      	st.w      	r0, (r3, 0x0)
	if (NewState == ENABLE)
    4d50:	6cfb      	mov      	r3, sp
    4d52:	9360      	ld.w      	r3, (r3, 0x0)
    4d54:	3b41      	cmpnei      	r3, 1
    4d56:	080a      	bt      	0x4d6a	//4d6a <I2C_Restart_EN+0x22>
	{
		//I2C->IC_CON |= IC_CON_RESTART_EN;
		reg_writel(IC_CON_RESTART_EN,I2C,IC_CON);
    4d58:	3020      	movi      	r0, 32      	//0x20
    4d5a:	ea211905 	movih      	r1, 6405      	//0x1905
    4d5e:	e3fffee3 	bsr      	0x4b24	//4b24 <dw_write>
    4d62:	c4004820 	lsli      	r0, r0, 0
		return 0;
    4d66:	3300      	movi      	r3, 0      	//0x0
    4d68:	040f      	br      	0x4d86	//4d86 <I2C_Restart_EN+0x3e>
	}
	else if(NewState == DISABLE)
    4d6a:	6cfb      	mov      	r3, sp
    4d6c:	9360      	ld.w      	r3, (r3, 0x0)
    4d6e:	e923000b 	bnez      	r3, 0x4d84	//4d84 <I2C_Restart_EN+0x3c>
	{
		//I2C->IC_CON &= ~IC_CON_RESTART_EN;
		reg_clearl(IC_CON_RESTART_EN,I2C,IC_CON);
    4d72:	3020      	movi      	r0, 32      	//0x20
    4d74:	ea211905 	movih      	r1, 6405      	//0x1905
    4d78:	e3fffef6 	bsr      	0x4b64	//4b64 <dw_clear>
    4d7c:	c4004820 	lsli      	r0, r0, 0
		return 0;
    4d80:	3300      	movi      	r3, 0      	//0x0
    4d82:	0402      	br      	0x4d86	//4d86 <I2C_Restart_EN+0x3e>
	}
	else
		return 1;
    4d84:	3301      	movi      	r3, 1      	//0x1
}
    4d86:	6c0f      	mov      	r0, r3
    4d88:	1401      	addi      	sp, sp, 4
    4d8a:	1490      	pop      	r15

00004d8c <I2C_TXEMP_CTRL>:

/*Function1-5:Control TX empty IT  ,set bit8 of IC_CON reg(only in master mode)*/
Bit32u I2C_TXEMP_CTRL(BOOL NewState)
{
    4d8c:	14d0      	push      	r15
    4d8e:	1421      	subi      	sp, sp, 4
    4d90:	6cfb      	mov      	r3, sp
    4d92:	b300      	st.w      	r0, (r3, 0x0)
	if (NewState == TRUE)
    4d94:	6cfb      	mov      	r3, sp
    4d96:	9360      	ld.w      	r3, (r3, 0x0)
    4d98:	3b41      	cmpnei      	r3, 1
    4d9a:	080b      	bt      	0x4db0	//4db0 <I2C_TXEMP_CTRL+0x24>
	{
		//I2C->IC_CON |= IC_CON_TX_EMPTY_CTRL;
		reg_writel(IC_CON_TX_EMPTY_CTRL,I2C,IC_CON);
    4d9c:	3080      	movi      	r0, 128      	//0x80
    4d9e:	4001      	lsli      	r0, r0, 1
    4da0:	ea211905 	movih      	r1, 6405      	//0x1905
    4da4:	e3fffec0 	bsr      	0x4b24	//4b24 <dw_write>
    4da8:	c4004820 	lsli      	r0, r0, 0
		return 0;
    4dac:	3300      	movi      	r3, 0      	//0x0
    4dae:	040a      	br      	0x4dc2	//4dc2 <I2C_TXEMP_CTRL+0x36>
	}
	else
	{
		//I2C->IC_CON &= ~IC_CON_TX_EMPTY_CTRL;
		reg_clearl(IC_CON_TX_EMPTY_CTRL,I2C,IC_CON);
    4db0:	3080      	movi      	r0, 128      	//0x80
    4db2:	4001      	lsli      	r0, r0, 1
    4db4:	ea211905 	movih      	r1, 6405      	//0x1905
    4db8:	e3fffed6 	bsr      	0x4b64	//4b64 <dw_clear>
    4dbc:	c4004820 	lsli      	r0, r0, 0
		return 0;
    4dc0:	3300      	movi      	r3, 0      	//0x0
	}
}
    4dc2:	6c0f      	mov      	r0, r3
    4dc4:	1401      	addi      	sp, sp, 4
    4dc6:	1490      	pop      	r15

00004dc8 <I2C_Set_TAR_Addr>:

/*Function2-1:set IC target address ,set bit[9:0] of IC_TAR reg*/
Bit32u I2C_Set_TAR_Addr(Bit32u Address)
{
    4dc8:	14d1      	push      	r4, r15
    4dca:	1422      	subi      	sp, sp, 8
    4dcc:	6cfb      	mov      	r3, sp
    4dce:	b300      	st.w      	r0, (r3, 0x0)
	Bit32u temp;
	//temp=I2C->IC_TAR;        // get the origin value of IC_TAR reg
	temp=reg_readl(I2C,IC_TAR);   // get the origin value of IC_TAR reg
    4dd0:	1c01      	addi      	r4, sp, 4
    4dd2:	ea201905 	movih      	r0, 6405      	//0x1905
    4dd6:	38a2      	bseti      	r0, 2
    4dd8:	e3fffe90 	bsr      	0x4af8	//4af8 <readl>
    4ddc:	c4004820 	lsli      	r0, r0, 0
    4de0:	b400      	st.w      	r0, (r4, 0x0)
	temp &= ~0x03FF;              // clear bit[9:0]
    4de2:	1b01      	addi      	r3, sp, 4
    4de4:	1a01      	addi      	r2, sp, 4
    4de6:	9240      	ld.w      	r2, (r2, 0x0)
    4de8:	e44233ff 	andni      	r2, r2, 1023
    4dec:	b340      	st.w      	r2, (r3, 0x0)
	temp |= Address;              // get the address
    4dee:	1b01      	addi      	r3, sp, 4
    4df0:	1901      	addi      	r1, sp, 4
    4df2:	6cbb      	mov      	r2, sp
    4df4:	9120      	ld.w      	r1, (r1, 0x0)
    4df6:	9240      	ld.w      	r2, (r2, 0x0)
    4df8:	6c84      	or      	r2, r1
    4dfa:	b340      	st.w      	r2, (r3, 0x0)
	//I2C->IC_TAR = temp;
	reg_direct_writel(temp,I2C,IC_TAR);
    4dfc:	1b01      	addi      	r3, sp, 4
    4dfe:	9300      	ld.w      	r0, (r3, 0x0)
    4e00:	ea211905 	movih      	r1, 6405      	//0x1905
    4e04:	39a2      	bseti      	r1, 2
    4e06:	e3fffe83 	bsr      	0x4b0c	//4b0c <writel>
    4e0a:	c4004820 	lsli      	r0, r0, 0
	return 0;
    4e0e:	3300      	movi      	r3, 0      	//0x0
}
    4e10:	6c0f      	mov      	r0, r3
    4e12:	1402      	addi      	sp, sp, 8
    4e14:	1491      	pop      	r4, r15
	...

00004e18 <I2C_Set_SLA_Addr>:

/*Function3-1:set IC slave address ,set bit[9:0] of IC_SAR reg*/
Bit32u I2C_Set_SLA_Addr(Bit32u Address)
{
    4e18:	14d1      	push      	r4, r15
    4e1a:	1422      	subi      	sp, sp, 8
    4e1c:	6cfb      	mov      	r3, sp
    4e1e:	b300      	st.w      	r0, (r3, 0x0)
	Bit32u temp;
	//temp=I2C->IC_SAR;        // get the origin value of IC_SAR reg
	temp=reg_readl(I2C,IC_SAR);   // get the origin value of IC_SAR reg
    4e20:	1c01      	addi      	r4, sp, 4
    4e22:	ea201905 	movih      	r0, 6405      	//0x1905
    4e26:	38a3      	bseti      	r0, 3
    4e28:	e3fffe68 	bsr      	0x4af8	//4af8 <readl>
    4e2c:	c4004820 	lsli      	r0, r0, 0
    4e30:	b400      	st.w      	r0, (r4, 0x0)
	temp &= ~0x03FF;         // clear bit[9:0]
    4e32:	1b01      	addi      	r3, sp, 4
    4e34:	1a01      	addi      	r2, sp, 4
    4e36:	9240      	ld.w      	r2, (r2, 0x0)
    4e38:	e44233ff 	andni      	r2, r2, 1023
    4e3c:	b340      	st.w      	r2, (r3, 0x0)
	temp |= Address;         // get the address
    4e3e:	1b01      	addi      	r3, sp, 4
    4e40:	1901      	addi      	r1, sp, 4
    4e42:	6cbb      	mov      	r2, sp
    4e44:	9120      	ld.w      	r1, (r1, 0x0)
    4e46:	9240      	ld.w      	r2, (r2, 0x0)
    4e48:	6c84      	or      	r2, r1
    4e4a:	b340      	st.w      	r2, (r3, 0x0)
	//I2C->IC_SAR = temp;
	reg_direct_writel(temp,I2C,IC_SAR);
    4e4c:	1b01      	addi      	r3, sp, 4
    4e4e:	9300      	ld.w      	r0, (r3, 0x0)
    4e50:	ea211905 	movih      	r1, 6405      	//0x1905
    4e54:	39a3      	bseti      	r1, 3
    4e56:	e3fffe5b 	bsr      	0x4b0c	//4b0c <writel>
    4e5a:	c4004820 	lsli      	r0, r0, 0
	return 0;
    4e5e:	3300      	movi      	r3, 0      	//0x0
}
    4e60:	6c0f      	mov      	r0, r3
    4e62:	1402      	addi      	sp, sp, 8
    4e64:	1491      	pop      	r4, r15
	...

00004e68 <I2C_Send_Data>:

/*Function5-1:send IC data ,set bit[8] to write ,set bit[7:0] of IC_DATA_CMD*/
Bit32u I2C_Send_Data(Bit8u Data)
{
    4e68:	14d0      	push      	r15
    4e6a:	1422      	subi      	sp, sp, 8
    4e6c:	6c83      	mov      	r2, r0
    4e6e:	6cfb      	mov      	r3, sp
    4e70:	a340      	st.b      	r2, (r3, 0x0)
	Bit32u temp=IC_DATA_CMD_Data;
    4e72:	1b01      	addi      	r3, sp, 4
    4e74:	105e      	lrw      	r2, 0x134d8	//134d8 <IC_DATA_CMD_Data>
    4e76:	9240      	ld.w      	r2, (r2, 0x0)
    4e78:	b340      	st.w      	r2, (r3, 0x0)
	temp &= ~0x1FF;                           // clear bit[8:0],set bit[8] to write
    4e7a:	1b01      	addi      	r3, sp, 4
    4e7c:	1a01      	addi      	r2, sp, 4
    4e7e:	9240      	ld.w      	r2, (r2, 0x0)
    4e80:	e44231ff 	andni      	r2, r2, 511
    4e84:	b340      	st.w      	r2, (r3, 0x0)
	temp |= Data;
    4e86:	6cfb      	mov      	r3, sp
    4e88:	8360      	ld.b      	r3, (r3, 0x0)
    4e8a:	744c      	zextb      	r1, r3
    4e8c:	1b01      	addi      	r3, sp, 4
    4e8e:	1a01      	addi      	r2, sp, 4
    4e90:	9240      	ld.w      	r2, (r2, 0x0)
    4e92:	6c84      	or      	r2, r1
    4e94:	b340      	st.w      	r2, (r3, 0x0)
	//I2C->IC_DATA_CMD = temp;
	reg_direct_writel(temp,I2C,IC_DATA_CMD);
    4e96:	1b01      	addi      	r3, sp, 4
    4e98:	9300      	ld.w      	r0, (r3, 0x0)
    4e9a:	ea211905 	movih      	r1, 6405      	//0x1905
    4e9e:	39a4      	bseti      	r1, 4
    4ea0:	e3fffe36 	bsr      	0x4b0c	//4b0c <writel>
    4ea4:	c4004820 	lsli      	r0, r0, 0
	return 0;
    4ea8:	3300      	movi      	r3, 0      	//0x0
}
    4eaa:	6c0f      	mov      	r0, r3
    4eac:	1402      	addi      	sp, sp, 8
    4eae:	1490      	pop      	r15

00004eb0 <I2C_Receive_Set>:

/*Function5-6:set bit[8] to Read,read bit[10:8] of IC_DATA_CMD*/
void I2C_Receive_Set(void)
{
    4eb0:	14d0      	push      	r15
    4eb2:	1421      	subi      	sp, sp, 4
	Bit32u temp=IC_DATA_CMD_Data;
    4eb4:	6cfb      	mov      	r3, sp
    4eb6:	104e      	lrw      	r2, 0x134d8	//134d8 <IC_DATA_CMD_Data>
    4eb8:	9240      	ld.w      	r2, (r2, 0x0)
    4eba:	b340      	st.w      	r2, (r3, 0x0)
	temp |=0x100;                              //set bit[8] to Read
    4ebc:	6cfb      	mov      	r3, sp
    4ebe:	6cbb      	mov      	r2, sp
    4ec0:	9240      	ld.w      	r2, (r2, 0x0)
    4ec2:	3aa8      	bseti      	r2, 8
    4ec4:	b340      	st.w      	r2, (r3, 0x0)
	//I2C->IC_DATA_CMD = temp1;
	reg_direct_writel(temp,I2C,IC_DATA_CMD);
    4ec6:	6cfb      	mov      	r3, sp
    4ec8:	9300      	ld.w      	r0, (r3, 0x0)
    4eca:	ea211905 	movih      	r1, 6405      	//0x1905
    4ece:	39a4      	bseti      	r1, 4
    4ed0:	e3fffe1e 	bsr      	0x4b0c	//4b0c <writel>
    4ed4:	c4004820 	lsli      	r0, r0, 0
}
    4ed8:	1401      	addi      	sp, sp, 4
    4eda:	1490      	pop      	r15
    4edc:	00004b24 	.long	0x00004b24
    4ee0:	00004b64 	.long	0x00004b64
    4ee4:	00004af8 	.long	0x00004af8
    4ee8:	00004b0c 	.long	0x00004b0c
    4eec:	000134d8 	.long	0x000134d8

00004ef0 <I2C_Receive_Data>:
/*Function5-2:receive IC data read/write ,read bit[7:0] of IC_DATA_CMD*/
Bit8u I2C_Receive_Data(void)
{
    4ef0:	14d1      	push      	r4, r15
    4ef2:	1421      	subi      	sp, sp, 4
	Bit32u temp=0;
    4ef4:	6cfb      	mov      	r3, sp
    4ef6:	3200      	movi      	r2, 0      	//0x0
    4ef8:	b340      	st.w      	r2, (r3, 0x0)
	//temp = I2C->IC_DATA_CMD;
	temp =reg_readl(I2C,IC_DATA_CMD);
    4efa:	6d3b      	mov      	r4, sp
    4efc:	ea201905 	movih      	r0, 6405      	//0x1905
    4f00:	38a4      	bseti      	r0, 4
    4f02:	e3fffdfb 	bsr      	0x4af8	//4af8 <readl>
    4f06:	c4004820 	lsli      	r0, r0, 0
    4f0a:	b400      	st.w      	r0, (r4, 0x0)
	temp &= 0xFF;
    4f0c:	6cfb      	mov      	r3, sp
    4f0e:	6cbb      	mov      	r2, sp
    4f10:	9240      	ld.w      	r2, (r2, 0x0)
    4f12:	e44220ff 	andi      	r2, r2, 255
    4f16:	b340      	st.w      	r2, (r3, 0x0)
	return temp;
    4f18:	6cfb      	mov      	r3, sp
    4f1a:	9360      	ld.w      	r3, (r3, 0x0)
    4f1c:	74cc      	zextb      	r3, r3
}
    4f1e:	6c0f      	mov      	r0, r3
    4f20:	1401      	addi      	sp, sp, 4
    4f22:	1491      	pop      	r4, r15

00004f24 <I2C_Set_Restart>:

/*Function5-3:set restart transfer or not ,set bit[10] of static IC_DATA_CMD_Data*/
Bit32u I2C_Set_Restart(State_TypeDef NewState)
{
    4f24:	1421      	subi      	sp, sp, 4
    4f26:	6cfb      	mov      	r3, sp
    4f28:	b300      	st.w      	r0, (r3, 0x0)
	if(NewState==ENABLE)
    4f2a:	6cfb      	mov      	r3, sp
    4f2c:	9360      	ld.w      	r3, (r3, 0x0)
    4f2e:	3b41      	cmpnei      	r3, 1
    4f30:	0809      	bt      	0x4f42	//4f42 <I2C_Set_Restart+0x1e>
	{
		IC_DATA_CMD_Data |= IC_DB_RESTART;
    4f32:	126e      	lrw      	r3, 0x134d8	//134d8 <IC_DATA_CMD_Data>
    4f34:	9360      	ld.w      	r3, (r3, 0x0)
    4f36:	c5432842 	bseti      	r2, r3, 10
    4f3a:	126c      	lrw      	r3, 0x134d8	//134d8 <IC_DATA_CMD_Data>
    4f3c:	b340      	st.w      	r2, (r3, 0x0)
		return 0;
    4f3e:	3300      	movi      	r3, 0      	//0x0
    4f40:	040e      	br      	0x4f5c	//4f5c <I2C_Set_Restart+0x38>
	}
	else if(NewState==DISABLE)
    4f42:	6cfb      	mov      	r3, sp
    4f44:	9360      	ld.w      	r3, (r3, 0x0)
    4f46:	e923000a 	bnez      	r3, 0x4f5a	//4f5a <I2C_Set_Restart+0x36>
	{
		IC_DATA_CMD_Data &= ~IC_DB_RESTART;
    4f4a:	1268      	lrw      	r3, 0x134d8	//134d8 <IC_DATA_CMD_Data>
    4f4c:	9360      	ld.w      	r3, (r3, 0x0)
    4f4e:	c5432822 	bclri      	r2, r3, 10
    4f52:	1266      	lrw      	r3, 0x134d8	//134d8 <IC_DATA_CMD_Data>
    4f54:	b340      	st.w      	r2, (r3, 0x0)
		return 0;
    4f56:	3300      	movi      	r3, 0      	//0x0
    4f58:	0402      	br      	0x4f5c	//4f5c <I2C_Set_Restart+0x38>
	}
	else
	return 1;
    4f5a:	3301      	movi      	r3, 1      	//0x1
}
    4f5c:	6c0f      	mov      	r0, r3
    4f5e:	1401      	addi      	sp, sp, 4
    4f60:	783c      	rts
	...

00004f64 <I2C_Set_Stop>:

/*Function5-4:stop transfer or not ,set bit[9] of static IC_DATA_CMD_Data*/
Bit32u I2C_Set_Stop(State_TypeDef NewState)
{
    4f64:	1421      	subi      	sp, sp, 4
    4f66:	6cfb      	mov      	r3, sp
    4f68:	b300      	st.w      	r0, (r3, 0x0)
	if(NewState==ENABLE)
    4f6a:	6cfb      	mov      	r3, sp
    4f6c:	9360      	ld.w      	r3, (r3, 0x0)
    4f6e:	3b41      	cmpnei      	r3, 1
    4f70:	0809      	bt      	0x4f82	//4f82 <I2C_Set_Stop+0x1e>
	{
		IC_DATA_CMD_Data |= IC_DB_STOP;
    4f72:	117e      	lrw      	r3, 0x134d8	//134d8 <IC_DATA_CMD_Data>
    4f74:	9360      	ld.w      	r3, (r3, 0x0)
    4f76:	c5232842 	bseti      	r2, r3, 9
    4f7a:	117c      	lrw      	r3, 0x134d8	//134d8 <IC_DATA_CMD_Data>
    4f7c:	b340      	st.w      	r2, (r3, 0x0)
		return 0;
    4f7e:	3300      	movi      	r3, 0      	//0x0
    4f80:	040e      	br      	0x4f9c	//4f9c <I2C_Set_Stop+0x38>
	}
	else if(NewState==DISABLE)
    4f82:	6cfb      	mov      	r3, sp
    4f84:	9360      	ld.w      	r3, (r3, 0x0)
    4f86:	e923000a 	bnez      	r3, 0x4f9a	//4f9a <I2C_Set_Stop+0x36>
	{
		IC_DATA_CMD_Data &= ~IC_DB_STOP;
    4f8a:	1178      	lrw      	r3, 0x134d8	//134d8 <IC_DATA_CMD_Data>
    4f8c:	9360      	ld.w      	r3, (r3, 0x0)
    4f8e:	c5232822 	bclri      	r2, r3, 9
    4f92:	1176      	lrw      	r3, 0x134d8	//134d8 <IC_DATA_CMD_Data>
    4f94:	b340      	st.w      	r2, (r3, 0x0)
		return 0;
    4f96:	3300      	movi      	r3, 0      	//0x0
    4f98:	0402      	br      	0x4f9c	//4f9c <I2C_Set_Stop+0x38>
	}
	else
	return 1;
    4f9a:	3301      	movi      	r3, 1      	//0x1
}
    4f9c:	6c0f      	mov      	r0, r3
    4f9e:	1401      	addi      	sp, sp, 4
    4fa0:	783c      	rts
	...

00004fa4 <I2C_Set_SS_SCL_FREQ>:
/*Function6&7-1:set IC Standard Speed I2C Clock SCL High and Low Counts ,set bit[15:0] of IC_SS_SCL_HCNT & IC_SS_SCL_LCNT reg
 * unit:KHz
 * Duty ratio:50%
 * */
Bit32u I2C_Set_SS_SCL_FREQ(Bit8u Frequeny)   //frequency<=100
{
    4fa4:	14d0      	push      	r15
    4fa6:	1424      	subi      	sp, sp, 16
    4fa8:	6c83      	mov      	r2, r0
    4faa:	6cfb      	mov      	r3, sp
    4fac:	a340      	st.b      	r2, (r3, 0x0)
	Bit32u HighCNT,LowCNT,temp=0;
    4fae:	1b01      	addi      	r3, sp, 4
    4fb0:	3200      	movi      	r2, 0      	//0x0
    4fb2:	b340      	st.w      	r2, (r3, 0x0)
	temp=((I2C_CLOCK/Frequeny)-SPKLEN_FS-8)%2;
    4fb4:	116e      	lrw      	r3, 0x11314	//11314 <I2C_CLOCK>
    4fb6:	9340      	ld.w      	r2, (r3, 0x0)
    4fb8:	6cfb      	mov      	r3, sp
    4fba:	8360      	ld.b      	r3, (r3, 0x0)
    4fbc:	74cc      	zextb      	r3, r3
    4fbe:	c4628022 	divu      	r2, r2, r3
    4fc2:	116c      	lrw      	r3, 0x1130c	//1130c <SPKLEN_FS>
    4fc4:	9360      	ld.w      	r3, (r3, 0x0)
    4fc6:	5a6d      	subu      	r3, r2, r3
    4fc8:	5b5f      	subi      	r2, r3, 8      	//0x8
    4fca:	1b01      	addi      	r3, sp, 4
    4fcc:	e4422001 	andi      	r2, r2, 1
    4fd0:	b340      	st.w      	r2, (r3, 0x0)
	if(Frequeny>100)
    4fd2:	6cfb      	mov      	r3, sp
    4fd4:	8360      	ld.b      	r3, (r3, 0x0)
    4fd6:	748c      	zextb      	r2, r3
    4fd8:	3364      	movi      	r3, 100      	//0x64
    4fda:	648c      	cmphs      	r3, r2
    4fdc:	0803      	bt      	0x4fe2	//4fe2 <I2C_Set_SS_SCL_FREQ+0x3e>
		return 1;
    4fde:	3301      	movi      	r3, 1      	//0x1
    4fe0:	043e      	br      	0x505c	//505c <I2C_Set_SS_SCL_FREQ+0xb8>
	else                                     //SS_FREQ<=100KHz
	{
		if(temp)
    4fe2:	1b01      	addi      	r3, sp, 4
    4fe4:	9360      	ld.w      	r3, (r3, 0x0)
    4fe6:	e9030016 	bez      	r3, 0x5012	//5012 <I2C_Set_SS_SCL_FREQ+0x6e>
		{
			HighCNT=LowCNT=((I2C_CLOCK/Frequeny)-SPKLEN_FS-8)/2+1;
    4fea:	1161      	lrw      	r3, 0x11314	//11314 <I2C_CLOCK>
    4fec:	9340      	ld.w      	r2, (r3, 0x0)
    4fee:	6cfb      	mov      	r3, sp
    4ff0:	8360      	ld.b      	r3, (r3, 0x0)
    4ff2:	74cc      	zextb      	r3, r3
    4ff4:	c4628022 	divu      	r2, r2, r3
    4ff8:	107e      	lrw      	r3, 0x1130c	//1130c <SPKLEN_FS>
    4ffa:	9360      	ld.w      	r3, (r3, 0x0)
    4ffc:	5a6d      	subu      	r3, r2, r3
    4ffe:	2b07      	subi      	r3, 8      	//0x8
    5000:	4b41      	lsri      	r2, r3, 1
    5002:	1b02      	addi      	r3, sp, 8
    5004:	2200      	addi      	r2, 1      	//0x1
    5006:	b340      	st.w      	r2, (r3, 0x0)
    5008:	1b03      	addi      	r3, sp, 12
    500a:	1a02      	addi      	r2, sp, 8
    500c:	9240      	ld.w      	r2, (r2, 0x0)
    500e:	b340      	st.w      	r2, (r3, 0x0)
    5010:	0413      	br      	0x5036	//5036 <I2C_Set_SS_SCL_FREQ+0x92>
		}
		else
			HighCNT=LowCNT=((I2C_CLOCK/Frequeny)-SPKLEN_FS-8)/2;
    5012:	1077      	lrw      	r3, 0x11314	//11314 <I2C_CLOCK>
    5014:	9340      	ld.w      	r2, (r3, 0x0)
    5016:	6cfb      	mov      	r3, sp
    5018:	8360      	ld.b      	r3, (r3, 0x0)
    501a:	74cc      	zextb      	r3, r3
    501c:	c4628022 	divu      	r2, r2, r3
    5020:	1074      	lrw      	r3, 0x1130c	//1130c <SPKLEN_FS>
    5022:	9360      	ld.w      	r3, (r3, 0x0)
    5024:	5a6d      	subu      	r3, r2, r3
    5026:	5b5f      	subi      	r2, r3, 8      	//0x8
    5028:	1b02      	addi      	r3, sp, 8
    502a:	4a41      	lsri      	r2, r2, 1
    502c:	b340      	st.w      	r2, (r3, 0x0)
    502e:	1b03      	addi      	r3, sp, 12
    5030:	1a02      	addi      	r2, sp, 8
    5032:	9240      	ld.w      	r2, (r2, 0x0)
    5034:	b340      	st.w      	r2, (r3, 0x0)
	reg_direct_writel(HighCNT, I2C, IC_SS_SCL_HCNT);
    5036:	1b03      	addi      	r3, sp, 12
    5038:	9300      	ld.w      	r0, (r3, 0x0)
    503a:	ea211905 	movih      	r1, 6405      	//0x1905
    503e:	2113      	addi      	r1, 20      	//0x14
    5040:	e3fffd66 	bsr      	0x4b0c	//4b0c <writel>
    5044:	c4004820 	lsli      	r0, r0, 0
	reg_direct_writel(LowCNT, I2C, IC_SS_SCL_LCNT);
    5048:	1b02      	addi      	r3, sp, 8
    504a:	9300      	ld.w      	r0, (r3, 0x0)
    504c:	ea211905 	movih      	r1, 6405      	//0x1905
    5050:	2117      	addi      	r1, 24      	//0x18
    5052:	e3fffd5d 	bsr      	0x4b0c	//4b0c <writel>
    5056:	c4004820 	lsli      	r0, r0, 0
	return 0;
    505a:	3300      	movi      	r3, 0      	//0x0
	}
}
    505c:	6c0f      	mov      	r0, r3
    505e:	1404      	addi      	sp, sp, 16
    5060:	1490      	pop      	r15
    5062:	0000      	.short	0x0000
    5064:	00004af8 	.long	0x00004af8
    5068:	000134d8 	.long	0x000134d8
    506c:	00011314 	.long	0x00011314
    5070:	0001130c 	.long	0x0001130c
    5074:	00004b0c 	.long	0x00004b0c

00005078 <I2C_Set_FS_SCL_FREQ>:

/*Function8&9-1:set Fast Mode or Fast Mode Plus I2C Clock SCL High and Low Counts ,set bit[15:0] of IC_FS_SCL_HCNT & IC_FS_SCL_LCNT reg*/
Bit32u I2C_Set_FS_SCL_FREQ(Bit32u Frequeny)
{
    5078:	14d0      	push      	r15
    507a:	1424      	subi      	sp, sp, 16
    507c:	6cfb      	mov      	r3, sp
    507e:	b300      	st.w      	r0, (r3, 0x0)
	Bit32u HighCNT,LowCNT,temp=0;
    5080:	1b01      	addi      	r3, sp, 4
    5082:	3200      	movi      	r2, 0      	//0x0
    5084:	b340      	st.w      	r2, (r3, 0x0)
	temp=((I2C_CLOCK/Frequeny)-SPKLEN_FS-8)%2;
    5086:	1277      	lrw      	r3, 0x11314	//11314 <I2C_CLOCK>
    5088:	9340      	ld.w      	r2, (r3, 0x0)
    508a:	6cfb      	mov      	r3, sp
    508c:	9360      	ld.w      	r3, (r3, 0x0)
    508e:	c4628022 	divu      	r2, r2, r3
    5092:	1275      	lrw      	r3, 0x1130c	//1130c <SPKLEN_FS>
    5094:	9360      	ld.w      	r3, (r3, 0x0)
    5096:	5a6d      	subu      	r3, r2, r3
    5098:	5b5f      	subi      	r2, r3, 8      	//0x8
    509a:	1b01      	addi      	r3, sp, 4
    509c:	e4422001 	andi      	r2, r2, 1
    50a0:	b340      	st.w      	r2, (r3, 0x0)
	if(Frequeny>1000)
    50a2:	6cfb      	mov      	r3, sp
    50a4:	9340      	ld.w      	r2, (r3, 0x0)
    50a6:	33fa      	movi      	r3, 250      	//0xfa
    50a8:	4362      	lsli      	r3, r3, 2
    50aa:	648c      	cmphs      	r3, r2
    50ac:	0803      	bt      	0x50b2	//50b2 <I2C_Set_FS_SCL_FREQ+0x3a>
		return 1;
    50ae:	3301      	movi      	r3, 1      	//0x1
    50b0:	043c      	br      	0x5128	//5128 <I2C_Set_FS_SCL_FREQ+0xb0>
	else                                     //FS_FREQ<=1000KHz
	{
		if(temp)
    50b2:	1b01      	addi      	r3, sp, 4
    50b4:	9360      	ld.w      	r3, (r3, 0x0)
    50b6:	e9030015 	bez      	r3, 0x50e0	//50e0 <I2C_Set_FS_SCL_FREQ+0x68>
		{
			HighCNT=LowCNT=((I2C_CLOCK/Frequeny)-SPKLEN_FS-8)/2+1;
    50ba:	126a      	lrw      	r3, 0x11314	//11314 <I2C_CLOCK>
    50bc:	9340      	ld.w      	r2, (r3, 0x0)
    50be:	6cfb      	mov      	r3, sp
    50c0:	9360      	ld.w      	r3, (r3, 0x0)
    50c2:	c4628022 	divu      	r2, r2, r3
    50c6:	1268      	lrw      	r3, 0x1130c	//1130c <SPKLEN_FS>
    50c8:	9360      	ld.w      	r3, (r3, 0x0)
    50ca:	5a6d      	subu      	r3, r2, r3
    50cc:	2b07      	subi      	r3, 8      	//0x8
    50ce:	4b41      	lsri      	r2, r3, 1
    50d0:	1b02      	addi      	r3, sp, 8
    50d2:	2200      	addi      	r2, 1      	//0x1
    50d4:	b340      	st.w      	r2, (r3, 0x0)
    50d6:	1b03      	addi      	r3, sp, 12
    50d8:	1a02      	addi      	r2, sp, 8
    50da:	9240      	ld.w      	r2, (r2, 0x0)
    50dc:	b340      	st.w      	r2, (r3, 0x0)
    50de:	0412      	br      	0x5102	//5102 <I2C_Set_FS_SCL_FREQ+0x8a>
		}
		else
			HighCNT=LowCNT=((I2C_CLOCK/Frequeny)-SPKLEN_FS-8)/2;
    50e0:	1260      	lrw      	r3, 0x11314	//11314 <I2C_CLOCK>
    50e2:	9340      	ld.w      	r2, (r3, 0x0)
    50e4:	6cfb      	mov      	r3, sp
    50e6:	9360      	ld.w      	r3, (r3, 0x0)
    50e8:	c4628022 	divu      	r2, r2, r3
    50ec:	117e      	lrw      	r3, 0x1130c	//1130c <SPKLEN_FS>
    50ee:	9360      	ld.w      	r3, (r3, 0x0)
    50f0:	5a6d      	subu      	r3, r2, r3
    50f2:	5b5f      	subi      	r2, r3, 8      	//0x8
    50f4:	1b02      	addi      	r3, sp, 8
    50f6:	4a41      	lsri      	r2, r2, 1
    50f8:	b340      	st.w      	r2, (r3, 0x0)
    50fa:	1b03      	addi      	r3, sp, 12
    50fc:	1a02      	addi      	r2, sp, 8
    50fe:	9240      	ld.w      	r2, (r2, 0x0)
    5100:	b340      	st.w      	r2, (r3, 0x0)
	reg_direct_writel(HighCNT, I2C, IC_FS_SCL_HCNT);
    5102:	1b03      	addi      	r3, sp, 12
    5104:	9300      	ld.w      	r0, (r3, 0x0)
    5106:	ea211905 	movih      	r1, 6405      	//0x1905
    510a:	211b      	addi      	r1, 28      	//0x1c
    510c:	e3fffd00 	bsr      	0x4b0c	//4b0c <writel>
    5110:	c4004820 	lsli      	r0, r0, 0
	reg_direct_writel(LowCNT, I2C, IC_FS_SCL_LCNT);
    5114:	1b02      	addi      	r3, sp, 8
    5116:	9300      	ld.w      	r0, (r3, 0x0)
    5118:	ea211905 	movih      	r1, 6405      	//0x1905
    511c:	39a5      	bseti      	r1, 5
    511e:	e3fffcf7 	bsr      	0x4b0c	//4b0c <writel>
    5122:	c4004820 	lsli      	r0, r0, 0
	return 0;
    5126:	3300      	movi      	r3, 0      	//0x0
	}
}
    5128:	6c0f      	mov      	r0, r3
    512a:	1404      	addi      	sp, sp, 16
    512c:	1490      	pop      	r15
	...

00005130 <I2C_Set_HS_SCL_FREQ>:

/*Function10&11-1:set High Speed I2C Clock SCL High and Low Counts ,set bit[15:0] of IC_HS_SCL_HCNT & IC_HS_SCL_LCNT reg*/
Bit32u I2C_Set_HS_SCL_FREQ(Bit32u Frequeny)
{
    5130:	14d0      	push      	r15
    5132:	1424      	subi      	sp, sp, 16
    5134:	6cfb      	mov      	r3, sp
    5136:	b300      	st.w      	r0, (r3, 0x0)
	Bit32u HighCNT,LowCNT,temp=0;
    5138:	1b01      	addi      	r3, sp, 4
    513a:	3200      	movi      	r2, 0      	//0x0
    513c:	b340      	st.w      	r2, (r3, 0x0)
	temp=((I2C_CLOCK/Frequeny)-SPKLEN_HS-8)%2;
    513e:	1169      	lrw      	r3, 0x11314	//11314 <I2C_CLOCK>
    5140:	9340      	ld.w      	r2, (r3, 0x0)
    5142:	6cfb      	mov      	r3, sp
    5144:	9360      	ld.w      	r3, (r3, 0x0)
    5146:	c4628022 	divu      	r2, r2, r3
    514a:	1169      	lrw      	r3, 0x11310	//11310 <SPKLEN_HS>
    514c:	9360      	ld.w      	r3, (r3, 0x0)
    514e:	5a6d      	subu      	r3, r2, r3
    5150:	5b5f      	subi      	r2, r3, 8      	//0x8
    5152:	1b01      	addi      	r3, sp, 4
    5154:	e4422001 	andi      	r2, r2, 1
    5158:	b340      	st.w      	r2, (r3, 0x0)
	if(Frequeny>3400)
    515a:	6cfb      	mov      	r3, sp
    515c:	9340      	ld.w      	r2, (r3, 0x0)
    515e:	ea030d48 	movi      	r3, 3400      	//0xd48
    5162:	648c      	cmphs      	r3, r2
    5164:	0803      	bt      	0x516a	//516a <I2C_Set_HS_SCL_FREQ+0x3a>
		return 1;
    5166:	3301      	movi      	r3, 1      	//0x1
    5168:	0438      	br      	0x51d8	//51d8 <I2C_Set_HS_SCL_FREQ+0xa8>
	else                                   //SS_FREQ<=3.4M
	{
		if(temp)
    516a:	1b01      	addi      	r3, sp, 4
    516c:	9360      	ld.w      	r3, (r3, 0x0)
    516e:	e9030015 	bez      	r3, 0x5198	//5198 <I2C_Set_HS_SCL_FREQ+0x68>
		{
			HighCNT=LowCNT=((I2C_CLOCK/Frequeny)-SPKLEN_HS-8)/2+1;
    5172:	107c      	lrw      	r3, 0x11314	//11314 <I2C_CLOCK>
    5174:	9340      	ld.w      	r2, (r3, 0x0)
    5176:	6cfb      	mov      	r3, sp
    5178:	9360      	ld.w      	r3, (r3, 0x0)
    517a:	c4628022 	divu      	r2, r2, r3
    517e:	107c      	lrw      	r3, 0x11310	//11310 <SPKLEN_HS>
    5180:	9360      	ld.w      	r3, (r3, 0x0)
    5182:	5a6d      	subu      	r3, r2, r3
    5184:	2b07      	subi      	r3, 8      	//0x8
    5186:	4b41      	lsri      	r2, r3, 1
    5188:	1b02      	addi      	r3, sp, 8
    518a:	2200      	addi      	r2, 1      	//0x1
    518c:	b340      	st.w      	r2, (r3, 0x0)
    518e:	1b03      	addi      	r3, sp, 12
    5190:	1a02      	addi      	r2, sp, 8
    5192:	9240      	ld.w      	r2, (r2, 0x0)
    5194:	b340      	st.w      	r2, (r3, 0x0)
    5196:	0412      	br      	0x51ba	//51ba <I2C_Set_HS_SCL_FREQ+0x8a>
		}
		else
			HighCNT=LowCNT=((I2C_CLOCK/Frequeny)-SPKLEN_HS-8)/2;
    5198:	1072      	lrw      	r3, 0x11314	//11314 <I2C_CLOCK>
    519a:	9340      	ld.w      	r2, (r3, 0x0)
    519c:	6cfb      	mov      	r3, sp
    519e:	9360      	ld.w      	r3, (r3, 0x0)
    51a0:	c4628022 	divu      	r2, r2, r3
    51a4:	1072      	lrw      	r3, 0x11310	//11310 <SPKLEN_HS>
    51a6:	9360      	ld.w      	r3, (r3, 0x0)
    51a8:	5a6d      	subu      	r3, r2, r3
    51aa:	5b5f      	subi      	r2, r3, 8      	//0x8
    51ac:	1b02      	addi      	r3, sp, 8
    51ae:	4a41      	lsri      	r2, r2, 1
    51b0:	b340      	st.w      	r2, (r3, 0x0)
    51b2:	1b03      	addi      	r3, sp, 12
    51b4:	1a02      	addi      	r2, sp, 8
    51b6:	9240      	ld.w      	r2, (r2, 0x0)
    51b8:	b340      	st.w      	r2, (r3, 0x0)
	reg_direct_writel(HighCNT, I2C, IC_HS_SCL_HCNT);
    51ba:	1b03      	addi      	r3, sp, 12
    51bc:	9300      	ld.w      	r0, (r3, 0x0)
    51be:	102d      	lrw      	r1, 0x19050024	//19050024 <__stack+0x18c5002c>
    51c0:	e3fffca6 	bsr      	0x4b0c	//4b0c <writel>
    51c4:	c4004820 	lsli      	r0, r0, 0
	reg_direct_writel(LowCNT, I2C, IC_HS_SCL_LCNT);
    51c8:	1b02      	addi      	r3, sp, 8
    51ca:	9300      	ld.w      	r0, (r3, 0x0)
    51cc:	102a      	lrw      	r1, 0x19050028	//19050028 <__stack+0x18c50030>
    51ce:	e3fffc9f 	bsr      	0x4b0c	//4b0c <writel>
    51d2:	c4004820 	lsli      	r0, r0, 0
	return 0;
    51d6:	3300      	movi      	r3, 0      	//0x0
	}
}
    51d8:	6c0f      	mov      	r0, r3
    51da:	1404      	addi      	sp, sp, 16
    51dc:	1490      	pop      	r15
    51de:	0000      	.short	0x0000
    51e0:	00011314 	.long	0x00011314
    51e4:	0001130c 	.long	0x0001130c
    51e8:	00004b0c 	.long	0x00004b0c
    51ec:	00011310 	.long	0x00011310
    51f0:	19050024 	.long	0x19050024
    51f4:	19050028 	.long	0x19050028

000051f8 <I2C_Get_ITStat>:

/*Function12-1:Query interrupt status,read bit[14:0] of IC_INRT_STAT reg*/
ITStatus_TypeDef I2C_Get_ITStat(IC_INTR_Typedef INRT_Item)
{
    51f8:	14d0      	push      	r15
    51fa:	1422      	subi      	sp, sp, 8
    51fc:	6cfb      	mov      	r3, sp
    51fe:	b300      	st.w      	r0, (r3, 0x0)
	ITStatus_TypeDef bitstatus=INACTIVE;
    5200:	1b01      	addi      	r3, sp, 4
    5202:	3200      	movi      	r2, 0      	//0x0
    5204:	b340      	st.w      	r2, (r3, 0x0)
	//if (!(I2C->IC_INTR_STAT & INRT_Item))
	if (!(reg_readl(I2C,IC_INTR_STAT) & INRT_Item))
    5206:	1307      	lrw      	r0, 0x1905002c	//1905002c <__stack+0x18c50034>
    5208:	e3fffc78 	bsr      	0x4af8	//4af8 <readl>
    520c:	c4004820 	lsli      	r0, r0, 0
    5210:	6c83      	mov      	r2, r0
    5212:	6cfb      	mov      	r3, sp
    5214:	9360      	ld.w      	r3, (r3, 0x0)
    5216:	68c8      	and      	r3, r2
    5218:	e9230006 	bnez      	r3, 0x5224	//5224 <I2C_Get_ITStat+0x2c>
	{
		bitstatus = INACTIVE;             /* Interrupt is inactive */
    521c:	1b01      	addi      	r3, sp, 4
    521e:	3200      	movi      	r2, 0      	//0x0
    5220:	b340      	st.w      	r2, (r3, 0x0)
    5222:	0404      	br      	0x522a	//522a <I2C_Get_ITStat+0x32>
	}
	else
	{
		bitstatus = ACTIVE;               /* Interrupt is active */
    5224:	1b01      	addi      	r3, sp, 4
    5226:	3201      	movi      	r2, 1      	//0x1
    5228:	b340      	st.w      	r2, (r3, 0x0)
	}
	return bitstatus;
    522a:	1b01      	addi      	r3, sp, 4
    522c:	9360      	ld.w      	r3, (r3, 0x0)
}
    522e:	6c0f      	mov      	r0, r3
    5230:	1402      	addi      	sp, sp, 8
    5232:	1490      	pop      	r15

00005234 <I2C_Mask_IT>:

/*Function13-1:Mask raw interrupt status,clear bit[15:0] of IC_RAW_INRT_MASK reg */
Bit32u I2C_Mask_IT(IC_INTR_Typedef INTR_Item)
{
    5234:	14d0      	push      	r15
    5236:	1421      	subi      	sp, sp, 4
    5238:	6cfb      	mov      	r3, sp
    523a:	b300      	st.w      	r0, (r3, 0x0)
	switch(INTR_Item)
    523c:	6cfb      	mov      	r3, sp
    523e:	9360      	ld.w      	r3, (r3, 0x0)
    5240:	eb430080 	cmpnei      	r3, 128      	//0x80
    5244:	0c99      	bf      	0x5376	//5376 <I2C_Mask_IT+0x142>
    5246:	eb030080 	cmphsi      	r3, 129      	//0x81
    524a:	081a      	bt      	0x527e	//527e <I2C_Mask_IT+0x4a>
    524c:	3b44      	cmpnei      	r3, 4
    524e:	0c62      	bf      	0x5312	//5312 <I2C_Mask_IT+0xde>
    5250:	3b04      	cmphsi      	r3, 5      	//0x5
    5252:	0808      	bt      	0x5262	//5262 <I2C_Mask_IT+0x2e>
    5254:	3b41      	cmpnei      	r3, 1
    5256:	0c4a      	bf      	0x52ea	//52ea <I2C_Mask_IT+0xb6>
    5258:	3b00      	cmphsi      	r3, 1      	//0x1
    525a:	0c3d      	bf      	0x52d4	//52d4 <I2C_Mask_IT+0xa0>
    525c:	3b42      	cmpnei      	r3, 2
    525e:	0c50      	bf      	0x52fe	//52fe <I2C_Mask_IT+0xca>
    5260:	04ea      	br      	0x5434	//5434 <I2C_Mask_IT+0x200>
    5262:	3b50      	cmpnei      	r3, 16
    5264:	0c6b      	bf      	0x533a	//533a <I2C_Mask_IT+0x106>
    5266:	3b10      	cmphsi      	r3, 17      	//0x11
    5268:	0804      	bt      	0x5270	//5270 <I2C_Mask_IT+0x3c>
    526a:	3b48      	cmpnei      	r3, 8
    526c:	0c5d      	bf      	0x5326	//5326 <I2C_Mask_IT+0xf2>
    526e:	04e3      	br      	0x5434	//5434 <I2C_Mask_IT+0x200>
    5270:	eb430020 	cmpnei      	r3, 32      	//0x20
    5274:	0c6d      	bf      	0x534e	//534e <I2C_Mask_IT+0x11a>
    5276:	eb430040 	cmpnei      	r3, 64      	//0x40
    527a:	0c74      	bf      	0x5362	//5362 <I2C_Mask_IT+0x12e>
    527c:	04dc      	br      	0x5434	//5434 <I2C_Mask_IT+0x200>
    527e:	eb430800 	cmpnei      	r3, 2048      	//0x800
    5282:	0cad      	bf      	0x53dc	//53dc <I2C_Mask_IT+0x1a8>
    5284:	eb030800 	cmphsi      	r3, 2049      	//0x801
    5288:	080b      	bt      	0x529e	//529e <I2C_Mask_IT+0x6a>
    528a:	eb430200 	cmpnei      	r3, 512      	//0x200
    528e:	0c91      	bf      	0x53b0	//53b0 <I2C_Mask_IT+0x17c>
    5290:	eb430400 	cmpnei      	r3, 1024      	//0x400
    5294:	0c99      	bf      	0x53c6	//53c6 <I2C_Mask_IT+0x192>
    5296:	eb430100 	cmpnei      	r3, 256      	//0x100
    529a:	0c78      	bf      	0x538a	//538a <I2C_Mask_IT+0x156>
    529c:	04cc      	br      	0x5434	//5434 <I2C_Mask_IT+0x200>
    529e:	eb432000 	cmpnei      	r3, 8192      	//0x2000
    52a2:	0cb3      	bf      	0x5408	//5408 <I2C_Mask_IT+0x1d4>
    52a4:	eb032000 	cmphsi      	r3, 8193      	//0x2001
    52a8:	0805      	bt      	0x52b2	//52b2 <I2C_Mask_IT+0x7e>
    52aa:	eb431000 	cmpnei      	r3, 4096      	//0x1000
    52ae:	0ca2      	bf      	0x53f2	//53f2 <I2C_Mask_IT+0x1be>
    52b0:	04c2      	br      	0x5434	//5434 <I2C_Mask_IT+0x200>
    52b2:	eb434000 	cmpnei      	r3, 16384      	//0x4000
    52b6:	0cb4      	bf      	0x541e	//541e <I2C_Mask_IT+0x1ea>
    52b8:	eb437fff 	cmpnei      	r3, 32767      	//0x7fff
    52bc:	08bc      	bt      	0x5434	//5434 <I2C_Mask_IT+0x200>
		case IC_INT_GEN_CALL:       I2C->IC_CLR_INTR &= ~IC_INT_GEN_CALL;      return 0;break; /* Mask IC_INT_GEN_CALL */
		case IC_INT_RESTART_DET:    I2C->IC_CLR_INTR &= ~IC_INT_RESTART_DET;   return 0;break; /* Mask IC_INT_RESTART_DET */
		case IC_INT_MST_ON_HOLD:    I2C->IC_CLR_INTR &= ~IC_INT_MST_ON_HOLD;   return 0;break; /* Mask IC_INT_MST_ON_HOLD */
		case IC_INT_SCL_STUCK_AT_LOW:    I2C->IC_CLR_INTR |= IC_INT_SCL_STUCK_AT_LOW;       return 0;break; /* Mask IC_INT_SCL_STUCK_AT_LOW */
#endif
		case IC_INT_ALL:            reg_clearl(IC_INT_ALL,I2C,IC_CLR_INTR);             return 0;break; /* Mask all interrupt */
    52be:	ea007fff 	movi      	r0, 32767      	//0x7fff
    52c2:	ea211905 	movih      	r1, 6405      	//0x1905
    52c6:	39a6      	bseti      	r1, 6
    52c8:	e3fffc4e 	bsr      	0x4b64	//4b64 <dw_clear>
    52cc:	c4004820 	lsli      	r0, r0, 0
    52d0:	3300      	movi      	r3, 0      	//0x0
    52d2:	04b2      	br      	0x5436	//5436 <I2C_Mask_IT+0x202>
		case IC_INT_NONE:           reg_direct_writel(IC_INT_ALL, I2C, IC_CLR_INTR);   return 0;break; /* Mask none interrupt */
    52d4:	ea007fff 	movi      	r0, 32767      	//0x7fff
    52d8:	ea211905 	movih      	r1, 6405      	//0x1905
    52dc:	39a6      	bseti      	r1, 6
    52de:	e3fffc17 	bsr      	0x4b0c	//4b0c <writel>
    52e2:	c4004820 	lsli      	r0, r0, 0
    52e6:	3300      	movi      	r3, 0      	//0x0
    52e8:	04a7      	br      	0x5436	//5436 <I2C_Mask_IT+0x202>
		case IC_INT_RX_UNDE:        reg_clearl(IC_INT_RX_UNDE, I2C, IC_CLR_INTR);       return 0;break; /* Mask IC_INT_RX_UNDE */
    52ea:	3001      	movi      	r0, 1      	//0x1
    52ec:	ea211905 	movih      	r1, 6405      	//0x1905
    52f0:	39a6      	bseti      	r1, 6
    52f2:	e3fffc39 	bsr      	0x4b64	//4b64 <dw_clear>
    52f6:	c4004820 	lsli      	r0, r0, 0
    52fa:	3300      	movi      	r3, 0      	//0x0
    52fc:	049d      	br      	0x5436	//5436 <I2C_Mask_IT+0x202>
		case IC_INT_RX_OVER:        reg_clearl(IC_INT_RX_OVER, I2C, IC_CLR_INTR);       return 0;break; /* Mask IC_INT_RX_OVER */
    52fe:	3002      	movi      	r0, 2      	//0x2
    5300:	ea211905 	movih      	r1, 6405      	//0x1905
    5304:	39a6      	bseti      	r1, 6
    5306:	e3fffc2f 	bsr      	0x4b64	//4b64 <dw_clear>
    530a:	c4004820 	lsli      	r0, r0, 0
    530e:	3300      	movi      	r3, 0      	//0x0
    5310:	0493      	br      	0x5436	//5436 <I2C_Mask_IT+0x202>
		case IC_INT_RX_FULL:        reg_clearl(IC_INT_RX_FULL, I2C, IC_CLR_INTR);       return 0;break; /* Mask IC_INT_RX_FULL */
    5312:	3004      	movi      	r0, 4      	//0x4
    5314:	ea211905 	movih      	r1, 6405      	//0x1905
    5318:	39a6      	bseti      	r1, 6
    531a:	e3fffc25 	bsr      	0x4b64	//4b64 <dw_clear>
    531e:	c4004820 	lsli      	r0, r0, 0
    5322:	3300      	movi      	r3, 0      	//0x0
    5324:	0489      	br      	0x5436	//5436 <I2C_Mask_IT+0x202>
		case IC_INT_TX_OVER:        reg_clearl(IC_INT_TX_OVER, I2C, IC_CLR_INTR);       return 0;break; /* Mask IC_INT_TX_OVER */
    5326:	3008      	movi      	r0, 8      	//0x8
    5328:	ea211905 	movih      	r1, 6405      	//0x1905
    532c:	39a6      	bseti      	r1, 6
    532e:	e3fffc1b 	bsr      	0x4b64	//4b64 <dw_clear>
    5332:	c4004820 	lsli      	r0, r0, 0
    5336:	3300      	movi      	r3, 0      	//0x0
    5338:	047f      	br      	0x5436	//5436 <I2C_Mask_IT+0x202>
		case IC_INT_TX_EMPTY:       reg_clearl(IC_INT_TX_EMPTY, I2C, IC_CLR_INTR);      return 0;break; /* Mask IC_INT_TX_EMPTY */
    533a:	3010      	movi      	r0, 16      	//0x10
    533c:	ea211905 	movih      	r1, 6405      	//0x1905
    5340:	39a6      	bseti      	r1, 6
    5342:	e3fffc11 	bsr      	0x4b64	//4b64 <dw_clear>
    5346:	c4004820 	lsli      	r0, r0, 0
    534a:	3300      	movi      	r3, 0      	//0x0
    534c:	0475      	br      	0x5436	//5436 <I2C_Mask_IT+0x202>
		case IC_INT_RD_REQ:         reg_clearl(IC_INT_RD_REQ, I2C, IC_CLR_INTR);        return 0;break; /* Mask IC_INT_RD_REQ */
    534e:	3020      	movi      	r0, 32      	//0x20
    5350:	ea211905 	movih      	r1, 6405      	//0x1905
    5354:	39a6      	bseti      	r1, 6
    5356:	e3fffc07 	bsr      	0x4b64	//4b64 <dw_clear>
    535a:	c4004820 	lsli      	r0, r0, 0
    535e:	3300      	movi      	r3, 0      	//0x0
    5360:	046b      	br      	0x5436	//5436 <I2C_Mask_IT+0x202>
		case IC_INT_TX_ABRT:        reg_clearl(IC_INT_TX_ABRT, I2C, IC_CLR_INTR);       return 0;break; /* Mask IC_INT_TX_ABRT */
    5362:	3040      	movi      	r0, 64      	//0x40
    5364:	ea211905 	movih      	r1, 6405      	//0x1905
    5368:	39a6      	bseti      	r1, 6
    536a:	e3fffbfd 	bsr      	0x4b64	//4b64 <dw_clear>
    536e:	c4004820 	lsli      	r0, r0, 0
    5372:	3300      	movi      	r3, 0      	//0x0
    5374:	0461      	br      	0x5436	//5436 <I2C_Mask_IT+0x202>
		case IC_INT_RX_DONE:        reg_clearl(IC_INT_RX_DONE, I2C, IC_CLR_INTR);       return 0;break; /* Mask IC_INT_RX_DONE */
    5376:	3080      	movi      	r0, 128      	//0x80
    5378:	ea211905 	movih      	r1, 6405      	//0x1905
    537c:	39a6      	bseti      	r1, 6
    537e:	e3fffbf3 	bsr      	0x4b64	//4b64 <dw_clear>
    5382:	c4004820 	lsli      	r0, r0, 0
    5386:	3300      	movi      	r3, 0      	//0x0
    5388:	0457      	br      	0x5436	//5436 <I2C_Mask_IT+0x202>
		case IC_INT_ACTIVITY:       reg_clearl(IC_INT_ACTIVITY, I2C, IC_CLR_INTR);      return 0;break; /* Mask IC_INT_ACTIVITY */
    538a:	3080      	movi      	r0, 128      	//0x80
    538c:	4001      	lsli      	r0, r0, 1
    538e:	ea211905 	movih      	r1, 6405      	//0x1905
    5392:	39a6      	bseti      	r1, 6
    5394:	e3fffbe8 	bsr      	0x4b64	//4b64 <dw_clear>
    5398:	c4004820 	lsli      	r0, r0, 0
    539c:	3300      	movi      	r3, 0      	//0x0
    539e:	044c      	br      	0x5436	//5436 <I2C_Mask_IT+0x202>
    53a0:	1905002c 	.long	0x1905002c
    53a4:	00004af8 	.long	0x00004af8
    53a8:	00004b64 	.long	0x00004b64
    53ac:	00004b0c 	.long	0x00004b0c
		case IC_INT_STOP_DET:       reg_clearl(IC_INT_STOP_DET, I2C, IC_CLR_INTR);      return 0;break; /* Mask IC_INT_STOP_DET */
    53b0:	3080      	movi      	r0, 128      	//0x80
    53b2:	4002      	lsli      	r0, r0, 2
    53b4:	ea211905 	movih      	r1, 6405      	//0x1905
    53b8:	39a6      	bseti      	r1, 6
    53ba:	e3fffbd5 	bsr      	0x4b64	//4b64 <dw_clear>
    53be:	c4004820 	lsli      	r0, r0, 0
    53c2:	3300      	movi      	r3, 0      	//0x0
    53c4:	0439      	br      	0x5436	//5436 <I2C_Mask_IT+0x202>
		case IC_INT_START_DET:      reg_clearl(IC_INT_START_DET, I2C, IC_CLR_INTR);     return 0;break; /* Mask IC_INT_START_DET */
    53c6:	3080      	movi      	r0, 128      	//0x80
    53c8:	4003      	lsli      	r0, r0, 3
    53ca:	ea211905 	movih      	r1, 6405      	//0x1905
    53ce:	39a6      	bseti      	r1, 6
    53d0:	e3fffbca 	bsr      	0x4b64	//4b64 <dw_clear>
    53d4:	c4004820 	lsli      	r0, r0, 0
    53d8:	3300      	movi      	r3, 0      	//0x0
    53da:	042e      	br      	0x5436	//5436 <I2C_Mask_IT+0x202>
		case IC_INT_GEN_CALL:       reg_clearl(IC_INT_GEN_CALL, I2C, IC_CLR_INTR);      return 0;break; /* Mask IC_INT_GEN_CALL */
    53dc:	3080      	movi      	r0, 128      	//0x80
    53de:	4004      	lsli      	r0, r0, 4
    53e0:	ea211905 	movih      	r1, 6405      	//0x1905
    53e4:	39a6      	bseti      	r1, 6
    53e6:	e3fffbbf 	bsr      	0x4b64	//4b64 <dw_clear>
    53ea:	c4004820 	lsli      	r0, r0, 0
    53ee:	3300      	movi      	r3, 0      	//0x0
    53f0:	0423      	br      	0x5436	//5436 <I2C_Mask_IT+0x202>
		case IC_INT_RESTART_DET:    reg_clearl(IC_INT_RESTART_DET, I2C, IC_CLR_INTR);   return 0;break; /* Mask IC_INT_RESTART_DET */
    53f2:	3080      	movi      	r0, 128      	//0x80
    53f4:	4005      	lsli      	r0, r0, 5
    53f6:	ea211905 	movih      	r1, 6405      	//0x1905
    53fa:	39a6      	bseti      	r1, 6
    53fc:	e3fffbb4 	bsr      	0x4b64	//4b64 <dw_clear>
    5400:	c4004820 	lsli      	r0, r0, 0
    5404:	3300      	movi      	r3, 0      	//0x0
    5406:	0418      	br      	0x5436	//5436 <I2C_Mask_IT+0x202>
		case IC_INT_MST_ON_HOLD:    reg_clearl(IC_INT_MST_ON_HOLD, I2C, IC_CLR_INTR);   return 0;break; /* Mask IC_INT_MST_ON_HOLD */
    5408:	3080      	movi      	r0, 128      	//0x80
    540a:	4006      	lsli      	r0, r0, 6
    540c:	ea211905 	movih      	r1, 6405      	//0x1905
    5410:	39a6      	bseti      	r1, 6
    5412:	e3fffba9 	bsr      	0x4b64	//4b64 <dw_clear>
    5416:	c4004820 	lsli      	r0, r0, 0
    541a:	3300      	movi      	r3, 0      	//0x0
    541c:	040d      	br      	0x5436	//5436 <I2C_Mask_IT+0x202>
		case IC_INT_SCL_STUCK_AT_LOW:    reg_clearl(IC_INT_SCL_STUCK_AT_LOW, I2C, IC_CLR_INTR);       return 0;break; /* Mask IC_INT_SCL_STUCK_AT_LOW */
    541e:	3080      	movi      	r0, 128      	//0x80
    5420:	4007      	lsli      	r0, r0, 7
    5422:	ea211905 	movih      	r1, 6405      	//0x1905
    5426:	39a6      	bseti      	r1, 6
    5428:	e3fffb9e 	bsr      	0x4b64	//4b64 <dw_clear>
    542c:	c4004820 	lsli      	r0, r0, 0
    5430:	3300      	movi      	r3, 0      	//0x0
    5432:	0402      	br      	0x5436	//5436 <I2C_Mask_IT+0x202>
		default:return 1;break;
    5434:	3301      	movi      	r3, 1      	//0x1
	}
}
    5436:	6c0f      	mov      	r0, r3
    5438:	1401      	addi      	sp, sp, 4
    543a:	1490      	pop      	r15

0000543c <I2C_UMask_IT>:

/*Function13-2:Umask raw interrupt status,set bit[15:0] of IC_RAW_INRT_MASK reg */
Bit32u I2C_UMask_IT(IC_INTR_Typedef INTR_Item)
{
    543c:	14d0      	push      	r15
    543e:	1421      	subi      	sp, sp, 4
    5440:	6cfb      	mov      	r3, sp
    5442:	b300      	st.w      	r0, (r3, 0x0)
	switch(INTR_Item)
    5444:	6cfb      	mov      	r3, sp
    5446:	9360      	ld.w      	r3, (r3, 0x0)
    5448:	eb430080 	cmpnei      	r3, 128      	//0x80
    544c:	0c9e      	bf      	0x5588	//5588 <I2C_UMask_IT+0x14c>
    544e:	eb030080 	cmphsi      	r3, 129      	//0x81
    5452:	081a      	bt      	0x5486	//5486 <I2C_UMask_IT+0x4a>
    5454:	3b44      	cmpnei      	r3, 4
    5456:	0c62      	bf      	0x551a	//551a <I2C_UMask_IT+0xde>
    5458:	3b04      	cmphsi      	r3, 5      	//0x5
    545a:	0808      	bt      	0x546a	//546a <I2C_UMask_IT+0x2e>
    545c:	3b41      	cmpnei      	r3, 1
    545e:	0c4a      	bf      	0x54f2	//54f2 <I2C_UMask_IT+0xb6>
    5460:	3b00      	cmphsi      	r3, 1      	//0x1
    5462:	0c3d      	bf      	0x54dc	//54dc <I2C_UMask_IT+0xa0>
    5464:	3b42      	cmpnei      	r3, 2
    5466:	0c50      	bf      	0x5506	//5506 <I2C_UMask_IT+0xca>
    5468:	04e7      	br      	0x5636	//5636 <I2C_UMask_IT+0x1fa>
    546a:	3b50      	cmpnei      	r3, 16
    546c:	0c6b      	bf      	0x5542	//5542 <I2C_UMask_IT+0x106>
    546e:	3b10      	cmphsi      	r3, 17      	//0x11
    5470:	0804      	bt      	0x5478	//5478 <I2C_UMask_IT+0x3c>
    5472:	3b48      	cmpnei      	r3, 8
    5474:	0c5d      	bf      	0x552e	//552e <I2C_UMask_IT+0xf2>
    5476:	04e0      	br      	0x5636	//5636 <I2C_UMask_IT+0x1fa>
    5478:	eb430020 	cmpnei      	r3, 32      	//0x20
    547c:	0c72      	bf      	0x5560	//5560 <I2C_UMask_IT+0x124>
    547e:	eb430040 	cmpnei      	r3, 64      	//0x40
    5482:	0c79      	bf      	0x5574	//5574 <I2C_UMask_IT+0x138>
    5484:	04d9      	br      	0x5636	//5636 <I2C_UMask_IT+0x1fa>
    5486:	eb430800 	cmpnei      	r3, 2048      	//0x800
    548a:	0caa      	bf      	0x55de	//55de <I2C_UMask_IT+0x1a2>
    548c:	eb030800 	cmphsi      	r3, 2049      	//0x801
    5490:	080b      	bt      	0x54a6	//54a6 <I2C_UMask_IT+0x6a>
    5492:	eb430200 	cmpnei      	r3, 512      	//0x200
    5496:	0c8e      	bf      	0x55b2	//55b2 <I2C_UMask_IT+0x176>
    5498:	eb430400 	cmpnei      	r3, 1024      	//0x400
    549c:	0c96      	bf      	0x55c8	//55c8 <I2C_UMask_IT+0x18c>
    549e:	eb430100 	cmpnei      	r3, 256      	//0x100
    54a2:	0c7d      	bf      	0x559c	//559c <I2C_UMask_IT+0x160>
    54a4:	04c9      	br      	0x5636	//5636 <I2C_UMask_IT+0x1fa>
    54a6:	eb432000 	cmpnei      	r3, 8192      	//0x2000
    54aa:	0cb0      	bf      	0x560a	//560a <I2C_UMask_IT+0x1ce>
    54ac:	eb032000 	cmphsi      	r3, 8193      	//0x2001
    54b0:	0805      	bt      	0x54ba	//54ba <I2C_UMask_IT+0x7e>
    54b2:	eb431000 	cmpnei      	r3, 4096      	//0x1000
    54b6:	0c9f      	bf      	0x55f4	//55f4 <I2C_UMask_IT+0x1b8>
    54b8:	04bf      	br      	0x5636	//5636 <I2C_UMask_IT+0x1fa>
    54ba:	eb434000 	cmpnei      	r3, 16384      	//0x4000
    54be:	0cb1      	bf      	0x5620	//5620 <I2C_UMask_IT+0x1e4>
    54c0:	eb437fff 	cmpnei      	r3, 32767      	//0x7fff
    54c4:	08b9      	bt      	0x5636	//5636 <I2C_UMask_IT+0x1fa>
		case IC_INT_GEN_CALL:       I2C->IC_CLR_INTR |= IC_INT_GEN_CALL;      return 0;break; /* Mask IC_INT_GEN_CALL */
		case IC_INT_RESTART_DET:    I2C->IC_CLR_INTR |= IC_INT_RESTART_DET;   return 0;break; /* Mask IC_INT_RESTART_DET */
		case IC_INT_MST_ON_HOLD:    I2C->IC_CLR_INTR |= IC_INT_MST_ON_HOLD;   return 0;break; /* Mask IC_INT_MST_ON_HOLD */
		case IC_INT_SCL_STUCK_AT_LOW:    I2C->IC_CLR_INTR |= IC_INT_SCL_STUCK_AT_LOW;       return 0;break; /* Mask IC_INT_SCL_STUCK_AT_LOW */
#endif
		case IC_INT_ALL:            reg_writel(IC_INT_ALL,I2C,IC_CLR_INTR);             return 0;break; /* Mask all interrupt */
    54c6:	ea007fff 	movi      	r0, 32767      	//0x7fff
    54ca:	ea211905 	movih      	r1, 6405      	//0x1905
    54ce:	39a6      	bseti      	r1, 6
    54d0:	e3fffb2a 	bsr      	0x4b24	//4b24 <dw_write>
    54d4:	c4004820 	lsli      	r0, r0, 0
    54d8:	3300      	movi      	r3, 0      	//0x0
    54da:	04af      	br      	0x5638	//5638 <I2C_UMask_IT+0x1fc>
		case IC_INT_NONE:           reg_clearl(IC_INT_ALL, I2C, IC_CLR_INTR);           return 0;break; /* Mask none interrupt */
    54dc:	ea007fff 	movi      	r0, 32767      	//0x7fff
    54e0:	ea211905 	movih      	r1, 6405      	//0x1905
    54e4:	39a6      	bseti      	r1, 6
    54e6:	e3fffb3f 	bsr      	0x4b64	//4b64 <dw_clear>
    54ea:	c4004820 	lsli      	r0, r0, 0
    54ee:	3300      	movi      	r3, 0      	//0x0
    54f0:	04a4      	br      	0x5638	//5638 <I2C_UMask_IT+0x1fc>
		case IC_INT_RX_UNDE:        reg_writel(IC_INT_RX_UNDE, I2C, IC_CLR_INTR);       return 0;break; /* Mask IC_INT_RX_UNDE */
    54f2:	3001      	movi      	r0, 1      	//0x1
    54f4:	ea211905 	movih      	r1, 6405      	//0x1905
    54f8:	39a6      	bseti      	r1, 6
    54fa:	e3fffb15 	bsr      	0x4b24	//4b24 <dw_write>
    54fe:	c4004820 	lsli      	r0, r0, 0
    5502:	3300      	movi      	r3, 0      	//0x0
    5504:	049a      	br      	0x5638	//5638 <I2C_UMask_IT+0x1fc>
		case IC_INT_RX_OVER:        reg_writel(IC_INT_RX_OVER, I2C, IC_CLR_INTR);       return 0;break; /* Mask IC_INT_RX_OVER */
    5506:	3002      	movi      	r0, 2      	//0x2
    5508:	ea211905 	movih      	r1, 6405      	//0x1905
    550c:	39a6      	bseti      	r1, 6
    550e:	e3fffb0b 	bsr      	0x4b24	//4b24 <dw_write>
    5512:	c4004820 	lsli      	r0, r0, 0
    5516:	3300      	movi      	r3, 0      	//0x0
    5518:	0490      	br      	0x5638	//5638 <I2C_UMask_IT+0x1fc>
		case IC_INT_RX_FULL:        reg_writel(IC_INT_RX_FULL, I2C, IC_CLR_INTR);       return 0;break; /* Mask IC_INT_RX_FULL */
    551a:	3004      	movi      	r0, 4      	//0x4
    551c:	ea211905 	movih      	r1, 6405      	//0x1905
    5520:	39a6      	bseti      	r1, 6
    5522:	e3fffb01 	bsr      	0x4b24	//4b24 <dw_write>
    5526:	c4004820 	lsli      	r0, r0, 0
    552a:	3300      	movi      	r3, 0      	//0x0
    552c:	0486      	br      	0x5638	//5638 <I2C_UMask_IT+0x1fc>
		case IC_INT_TX_OVER:        reg_writel(IC_INT_TX_OVER, I2C, IC_CLR_INTR);       return 0;break; /* Mask IC_INT_TX_OVER */
    552e:	3008      	movi      	r0, 8      	//0x8
    5530:	ea211905 	movih      	r1, 6405      	//0x1905
    5534:	39a6      	bseti      	r1, 6
    5536:	e3fffaf7 	bsr      	0x4b24	//4b24 <dw_write>
    553a:	c4004820 	lsli      	r0, r0, 0
    553e:	3300      	movi      	r3, 0      	//0x0
    5540:	047c      	br      	0x5638	//5638 <I2C_UMask_IT+0x1fc>
		case IC_INT_TX_EMPTY:       reg_writel(IC_INT_TX_EMPTY, I2C, IC_CLR_INTR);      return 0;break; /* Mask IC_INT_TX_EMPTY */
    5542:	3010      	movi      	r0, 16      	//0x10
    5544:	ea211905 	movih      	r1, 6405      	//0x1905
    5548:	39a6      	bseti      	r1, 6
    554a:	e3fffaed 	bsr      	0x4b24	//4b24 <dw_write>
    554e:	c4004820 	lsli      	r0, r0, 0
    5552:	3300      	movi      	r3, 0      	//0x0
    5554:	0472      	br      	0x5638	//5638 <I2C_UMask_IT+0x1fc>
    5556:	0000      	.short	0x0000
    5558:	00004b64 	.long	0x00004b64
    555c:	00004b24 	.long	0x00004b24
		case IC_INT_RD_REQ:         reg_writel(IC_INT_RD_REQ, I2C, IC_CLR_INTR);        return 0;break; /* Mask IC_INT_RD_REQ */
    5560:	3020      	movi      	r0, 32      	//0x20
    5562:	ea211905 	movih      	r1, 6405      	//0x1905
    5566:	39a6      	bseti      	r1, 6
    5568:	e3fffade 	bsr      	0x4b24	//4b24 <dw_write>
    556c:	c4004820 	lsli      	r0, r0, 0
    5570:	3300      	movi      	r3, 0      	//0x0
    5572:	0463      	br      	0x5638	//5638 <I2C_UMask_IT+0x1fc>
		case IC_INT_TX_ABRT:        reg_writel(IC_INT_TX_ABRT, I2C, IC_CLR_INTR);       return 0;break; /* Mask IC_INT_TX_ABRT */
    5574:	3040      	movi      	r0, 64      	//0x40
    5576:	ea211905 	movih      	r1, 6405      	//0x1905
    557a:	39a6      	bseti      	r1, 6
    557c:	e3fffad4 	bsr      	0x4b24	//4b24 <dw_write>
    5580:	c4004820 	lsli      	r0, r0, 0
    5584:	3300      	movi      	r3, 0      	//0x0
    5586:	0459      	br      	0x5638	//5638 <I2C_UMask_IT+0x1fc>
		case IC_INT_RX_DONE:        reg_writel(IC_INT_RX_DONE, I2C, IC_CLR_INTR);       return 0;break; /* Mask IC_INT_RX_DONE */
    5588:	3080      	movi      	r0, 128      	//0x80
    558a:	ea211905 	movih      	r1, 6405      	//0x1905
    558e:	39a6      	bseti      	r1, 6
    5590:	e3fffaca 	bsr      	0x4b24	//4b24 <dw_write>
    5594:	c4004820 	lsli      	r0, r0, 0
    5598:	3300      	movi      	r3, 0      	//0x0
    559a:	044f      	br      	0x5638	//5638 <I2C_UMask_IT+0x1fc>
		case IC_INT_ACTIVITY:       reg_writel(IC_INT_ACTIVITY, I2C, IC_CLR_INTR);      return 0;break; /* Mask IC_INT_ACTIVITY */
    559c:	3080      	movi      	r0, 128      	//0x80
    559e:	4001      	lsli      	r0, r0, 1
    55a0:	ea211905 	movih      	r1, 6405      	//0x1905
    55a4:	39a6      	bseti      	r1, 6
    55a6:	e3fffabf 	bsr      	0x4b24	//4b24 <dw_write>
    55aa:	c4004820 	lsli      	r0, r0, 0
    55ae:	3300      	movi      	r3, 0      	//0x0
    55b0:	0444      	br      	0x5638	//5638 <I2C_UMask_IT+0x1fc>
		case IC_INT_STOP_DET:       reg_writel(IC_INT_STOP_DET, I2C, IC_CLR_INTR);      return 0;break; /* Mask IC_INT_STOP_DET */
    55b2:	3080      	movi      	r0, 128      	//0x80
    55b4:	4002      	lsli      	r0, r0, 2
    55b6:	ea211905 	movih      	r1, 6405      	//0x1905
    55ba:	39a6      	bseti      	r1, 6
    55bc:	e3fffab4 	bsr      	0x4b24	//4b24 <dw_write>
    55c0:	c4004820 	lsli      	r0, r0, 0
    55c4:	3300      	movi      	r3, 0      	//0x0
    55c6:	0439      	br      	0x5638	//5638 <I2C_UMask_IT+0x1fc>
		case IC_INT_START_DET:      reg_writel(IC_INT_START_DET, I2C, IC_CLR_INTR);     return 0;break; /* Mask IC_INT_START_DET */
    55c8:	3080      	movi      	r0, 128      	//0x80
    55ca:	4003      	lsli      	r0, r0, 3
    55cc:	ea211905 	movih      	r1, 6405      	//0x1905
    55d0:	39a6      	bseti      	r1, 6
    55d2:	e3fffaa9 	bsr      	0x4b24	//4b24 <dw_write>
    55d6:	c4004820 	lsli      	r0, r0, 0
    55da:	3300      	movi      	r3, 0      	//0x0
    55dc:	042e      	br      	0x5638	//5638 <I2C_UMask_IT+0x1fc>
		case IC_INT_GEN_CALL:       reg_writel(IC_INT_GEN_CALL, I2C, IC_CLR_INTR);      return 0;break; /* Mask IC_INT_GEN_CALL */
    55de:	3080      	movi      	r0, 128      	//0x80
    55e0:	4004      	lsli      	r0, r0, 4
    55e2:	ea211905 	movih      	r1, 6405      	//0x1905
    55e6:	39a6      	bseti      	r1, 6
    55e8:	e3fffa9e 	bsr      	0x4b24	//4b24 <dw_write>
    55ec:	c4004820 	lsli      	r0, r0, 0
    55f0:	3300      	movi      	r3, 0      	//0x0
    55f2:	0423      	br      	0x5638	//5638 <I2C_UMask_IT+0x1fc>
		case IC_INT_RESTART_DET:    reg_writel(IC_INT_RESTART_DET, I2C, IC_CLR_INTR);   return 0;break; /* Mask IC_INT_RESTART_DET */
    55f4:	3080      	movi      	r0, 128      	//0x80
    55f6:	4005      	lsli      	r0, r0, 5
    55f8:	ea211905 	movih      	r1, 6405      	//0x1905
    55fc:	39a6      	bseti      	r1, 6
    55fe:	e3fffa93 	bsr      	0x4b24	//4b24 <dw_write>
    5602:	c4004820 	lsli      	r0, r0, 0
    5606:	3300      	movi      	r3, 0      	//0x0
    5608:	0418      	br      	0x5638	//5638 <I2C_UMask_IT+0x1fc>
		case IC_INT_MST_ON_HOLD:    reg_writel(IC_INT_MST_ON_HOLD, I2C, IC_CLR_INTR);   return 0;break; /* Mask IC_INT_MST_ON_HOLD */
    560a:	3080      	movi      	r0, 128      	//0x80
    560c:	4006      	lsli      	r0, r0, 6
    560e:	ea211905 	movih      	r1, 6405      	//0x1905
    5612:	39a6      	bseti      	r1, 6
    5614:	e3fffa88 	bsr      	0x4b24	//4b24 <dw_write>
    5618:	c4004820 	lsli      	r0, r0, 0
    561c:	3300      	movi      	r3, 0      	//0x0
    561e:	040d      	br      	0x5638	//5638 <I2C_UMask_IT+0x1fc>
		case IC_INT_SCL_STUCK_AT_LOW:    reg_writel(IC_INT_SCL_STUCK_AT_LOW, I2C, IC_CLR_INTR);       return 0;break; /* Mask IC_INT_SCL_STUCK_AT_LOW */
    5620:	3080      	movi      	r0, 128      	//0x80
    5622:	4007      	lsli      	r0, r0, 7
    5624:	ea211905 	movih      	r1, 6405      	//0x1905
    5628:	39a6      	bseti      	r1, 6
    562a:	e3fffa7d 	bsr      	0x4b24	//4b24 <dw_write>
    562e:	c4004820 	lsli      	r0, r0, 0
    5632:	3300      	movi      	r3, 0      	//0x0
    5634:	0402      	br      	0x5638	//5638 <I2C_UMask_IT+0x1fc>
		default:return 1;break;
    5636:	3301      	movi      	r3, 1      	//0x1
	}
}
    5638:	6c0f      	mov      	r0, r3
    563a:	1401      	addi      	sp, sp, 4
    563c:	1490      	pop      	r15
	...

00005640 <I2C_Mask_IT_CMD>:
/*Function13-3:set INTR mask or umask,read bit[15:0] of IC_RAW_INRT_STAT reg
 *INRT_Item could be one item or multiple ,IC_INT_RX_UNDE or IC_INT_RX_UNDE|IC_INT_RX_OVER|....
 * */
Bit32u I2C_Mask_IT_CMD(IC_INTR_Typedef INTR_Item,IC_ITMask_TypeDef MaskState)
{
    5640:	14d0      	push      	r15
    5642:	1422      	subi      	sp, sp, 8
    5644:	1b01      	addi      	r3, sp, 4
    5646:	b300      	st.w      	r0, (r3, 0x0)
    5648:	6cfb      	mov      	r3, sp
    564a:	b320      	st.w      	r1, (r3, 0x0)
	if(MaskState==IC_IT_MASK)
    564c:	6cfb      	mov      	r3, sp
    564e:	9360      	ld.w      	r3, (r3, 0x0)
    5650:	e923000d 	bnez      	r3, 0x566a	//566a <I2C_Mask_IT_CMD+0x2a>
	{
		//I2C->IC_CLR_INTR &= ~INTR_Item;
		reg_clearl(INTR_Item,I2C,IC_CLR_INTR);
    5654:	1b01      	addi      	r3, sp, 4
    5656:	9300      	ld.w      	r0, (r3, 0x0)
    5658:	ea211905 	movih      	r1, 6405      	//0x1905
    565c:	39a6      	bseti      	r1, 6
    565e:	e3fffa83 	bsr      	0x4b64	//4b64 <dw_clear>
    5662:	c4004820 	lsli      	r0, r0, 0
		return 0;
    5666:	3300      	movi      	r3, 0      	//0x0
    5668:	0411      	br      	0x568a	//568a <I2C_Mask_IT_CMD+0x4a>
	}
	else if(MaskState==IC_IT_UMASK)
    566a:	6cfb      	mov      	r3, sp
    566c:	9360      	ld.w      	r3, (r3, 0x0)
    566e:	3b41      	cmpnei      	r3, 1
    5670:	080c      	bt      	0x5688	//5688 <I2C_Mask_IT_CMD+0x48>
	{
		//I2C->IC_CLR_INTR |= INTR_Item;
		reg_writel(INTR_Item,I2C,IC_CLR_INTR);
    5672:	1b01      	addi      	r3, sp, 4
    5674:	9300      	ld.w      	r0, (r3, 0x0)
    5676:	ea211905 	movih      	r1, 6405      	//0x1905
    567a:	39a6      	bseti      	r1, 6
    567c:	e3fffa54 	bsr      	0x4b24	//4b24 <dw_write>
    5680:	c4004820 	lsli      	r0, r0, 0
		return 0;
    5684:	3300      	movi      	r3, 0      	//0x0
    5686:	0402      	br      	0x568a	//568a <I2C_Mask_IT_CMD+0x4a>
	}
	else
		return 1;
    5688:	3301      	movi      	r3, 1      	//0x1
}
    568a:	6c0f      	mov      	r0, r3
    568c:	1402      	addi      	sp, sp, 8
    568e:	1490      	pop      	r15

00005690 <I2C_Get_ITRStat>:

/*Function14-1:Query raw interrupt status,read bit[14:0] of IC_RAW_INRT_STAT reg*/
ITStatus_TypeDef I2C_Get_ITRStat(IC_INTR_Typedef INRT_Item)
{
    5690:	14d0      	push      	r15
    5692:	1422      	subi      	sp, sp, 8
    5694:	6cfb      	mov      	r3, sp
    5696:	b300      	st.w      	r0, (r3, 0x0)
	ITStatus_TypeDef bitstatus=INACTIVE;
    5698:	1b01      	addi      	r3, sp, 4
    569a:	3200      	movi      	r2, 0      	//0x0
    569c:	b340      	st.w      	r2, (r3, 0x0)
	//if (!(I2C->IC_RAW_INTR_STAT & INRT_Item))
	if (!(reg_readl(I2C,IC_RAW_INTR_STAT) & INRT_Item))
    569e:	100e      	lrw      	r0, 0x19050034	//19050034 <__stack+0x18c5003c>
    56a0:	e3fffa2c 	bsr      	0x4af8	//4af8 <readl>
    56a4:	c4004820 	lsli      	r0, r0, 0
    56a8:	6c83      	mov      	r2, r0
    56aa:	6cfb      	mov      	r3, sp
    56ac:	9360      	ld.w      	r3, (r3, 0x0)
    56ae:	68c8      	and      	r3, r2
    56b0:	e9230006 	bnez      	r3, 0x56bc	//56bc <I2C_Get_ITRStat+0x2c>
	{
		bitstatus = INACTIVE;             /* Interrupt is inactive */
    56b4:	1b01      	addi      	r3, sp, 4
    56b6:	3200      	movi      	r2, 0      	//0x0
    56b8:	b340      	st.w      	r2, (r3, 0x0)
    56ba:	0404      	br      	0x56c2	//56c2 <I2C_Get_ITRStat+0x32>
	}
	else
	{
		bitstatus = ACTIVE;               /* Interrupt is active */
    56bc:	1b01      	addi      	r3, sp, 4
    56be:	3201      	movi      	r2, 1      	//0x1
    56c0:	b340      	st.w      	r2, (r3, 0x0)
	}
	return bitstatus;
    56c2:	1b01      	addi      	r3, sp, 4
    56c4:	9360      	ld.w      	r3, (r3, 0x0)
}
    56c6:	6c0f      	mov      	r0, r3
    56c8:	1402      	addi      	sp, sp, 8
    56ca:	1490      	pop      	r15
    56cc:	00004b24 	.long	0x00004b24
    56d0:	00004b64 	.long	0x00004b64
    56d4:	19050034 	.long	0x19050034
    56d8:	00004af8 	.long	0x00004af8

000056dc <I2C_Set_RXThreshold>:

/*Function15-1:set RX FIFO Threshold ,set bit[7:0] of IC_RX_TL reg*/
Bit32u I2C_Set_RXThreshold(Bit32u ThresholdValue)
{
    56dc:	14d0      	push      	r15
    56de:	1421      	subi      	sp, sp, 4
    56e0:	6cfb      	mov      	r3, sp
    56e2:	b300      	st.w      	r0, (r3, 0x0)
	//I2C->IC_RX_TL = ThresholdValue;
	reg_direct_writel(ThresholdValue, I2C, IC_RX_TL);
    56e4:	6cfb      	mov      	r3, sp
    56e6:	9300      	ld.w      	r0, (r3, 0x0)
    56e8:	1324      	lrw      	r1, 0x19050038	//19050038 <__stack+0x18c50040>
    56ea:	e3fffa11 	bsr      	0x4b0c	//4b0c <writel>
    56ee:	c4004820 	lsli      	r0, r0, 0
	return 0;
    56f2:	3300      	movi      	r3, 0      	//0x0
}
    56f4:	6c0f      	mov      	r0, r3
    56f6:	1401      	addi      	sp, sp, 4
    56f8:	1490      	pop      	r15
	...

000056fc <I2C_Set_TXThreshold>:

/*Function16-2:set TX FIFO Threshold ,set bit[7:0] of IC_TX_TL reg*/
Bit32u I2C_Set_TXThreshold(Bit32u ThresholdValue)
{
    56fc:	14d0      	push      	r15
    56fe:	1421      	subi      	sp, sp, 4
    5700:	6cfb      	mov      	r3, sp
    5702:	b300      	st.w      	r0, (r3, 0x0)
	//I2C->IC_TX_TL = ThresholdValue;
	reg_direct_writel(ThresholdValue, I2C, IC_TX_TL);
    5704:	6cfb      	mov      	r3, sp
    5706:	9300      	ld.w      	r0, (r3, 0x0)
    5708:	123e      	lrw      	r1, 0x1905003c	//1905003c <__stack+0x18c50044>
    570a:	e3fffa01 	bsr      	0x4b0c	//4b0c <writel>
    570e:	c4004820 	lsli      	r0, r0, 0
	return 0;
    5712:	3300      	movi      	r3, 0      	//0x0
}
    5714:	6c0f      	mov      	r0, r3
    5716:	1401      	addi      	sp, sp, 4
    5718:	1490      	pop      	r15
	...

0000571c <I2C_Clear_ITStat>:

/*Function17-1:Clear interrupt status,read IC_CLR_INTR or individua interrupt clear reg :
 * !!MST_ON_HOLD/TX_EMPTY/RX_FULL Set and Cleared by Hardware*/
Bit32u I2C_Clear_ITStat(IC_INTR_Typedef INRT_Item)
{
    571c:	14d1      	push      	r4, r15
    571e:	1422      	subi      	sp, sp, 8
    5720:	6cfb      	mov      	r3, sp
    5722:	b300      	st.w      	r0, (r3, 0x0)
	Bit32u temp;
	switch(INRT_Item)
    5724:	6cfb      	mov      	r3, sp
    5726:	9360      	ld.w      	r3, (r3, 0x0)
    5728:	eb430100 	cmpnei      	r3, 256      	//0x100
    572c:	0c6f      	bf      	0x580a	//580a <I2C_Clear_ITStat+0xee>
    572e:	eb030100 	cmphsi      	r3, 257      	//0x101
    5732:	0814      	bt      	0x575a	//575a <I2C_Clear_ITStat+0x3e>
    5734:	3b48      	cmpnei      	r3, 8
    5736:	0c46      	bf      	0x57c2	//57c2 <I2C_Clear_ITStat+0xa6>
    5738:	3b08      	cmphsi      	r3, 9      	//0x9
    573a:	0806      	bt      	0x5746	//5746 <I2C_Clear_ITStat+0x2a>
    573c:	3b41      	cmpnei      	r3, 1
    573e:	0c30      	bf      	0x579e	//579e <I2C_Clear_ITStat+0x82>
    5740:	3b42      	cmpnei      	r3, 2
    5742:	0c37      	bf      	0x57b0	//57b0 <I2C_Clear_ITStat+0x94>
    5744:	04ba      	br      	0x58b8	//58b8 <I2C_Clear_ITStat+0x19c>
    5746:	eb430040 	cmpnei      	r3, 64      	//0x40
    574a:	0c4e      	bf      	0x57e6	//57e6 <I2C_Clear_ITStat+0xca>
    574c:	eb430080 	cmpnei      	r3, 128      	//0x80
    5750:	0c54      	bf      	0x57f8	//57f8 <I2C_Clear_ITStat+0xdc>
    5752:	eb430020 	cmpnei      	r3, 32      	//0x20
    5756:	0c3f      	bf      	0x57d4	//57d4 <I2C_Clear_ITStat+0xb8>
    5758:	04b0      	br      	0x58b8	//58b8 <I2C_Clear_ITStat+0x19c>
    575a:	eb430800 	cmpnei      	r3, 2048      	//0x800
    575e:	0c71      	bf      	0x5840	//5840 <I2C_Clear_ITStat+0x124>
    5760:	eb030800 	cmphsi      	r3, 2049      	//0x801
    5764:	0808      	bt      	0x5774	//5774 <I2C_Clear_ITStat+0x58>
    5766:	eb430200 	cmpnei      	r3, 512      	//0x200
    576a:	0c59      	bf      	0x581c	//581c <I2C_Clear_ITStat+0x100>
    576c:	eb430400 	cmpnei      	r3, 1024      	//0x400
    5770:	0c5f      	bf      	0x582e	//582e <I2C_Clear_ITStat+0x112>
    5772:	04a3      	br      	0x58b8	//58b8 <I2C_Clear_ITStat+0x19c>
    5774:	eb434000 	cmpnei      	r3, 16384      	//0x4000
    5778:	0c76      	bf      	0x5864	//5864 <I2C_Clear_ITStat+0x148>
    577a:	eb437fff 	cmpnei      	r3, 32767      	//0x7fff
    577e:	0c05      	bf      	0x5788	//5788 <I2C_Clear_ITStat+0x6c>
    5780:	eb431000 	cmpnei      	r3, 4096      	//0x1000
    5784:	0c67      	bf      	0x5852	//5852 <I2C_Clear_ITStat+0x136>
    5786:	0499      	br      	0x58b8	//58b8 <I2C_Clear_ITStat+0x19c>
		case IC_INT_START_DET:      temp=I2C->IC_CLR_START_DET;  return 0;break; /* clear START_DET*/
		case IC_INT_GEN_CALL:       temp=I2C->IC_CLR_GEN_CALL;   return 0;break; /* clear GEN_CALL*/
		case IC_INT_RESTART_DET:    temp=I2C->IC_CLR_RESTART_DET;return 0;break; /* clear RESTART_DET*/
		case IC_INT_SCL_STUCK_AT_LOW:    temp=I2C->IC_CLR_SCL_STUCK_DET;return 0;break; /* clear RESTART_DET*/
#endif
		case IC_INT_ALL:            temp=reg_readl(I2C,IC_CLR_INTR);       return 0;break; /* clear all interrupt */
    5788:	1c01      	addi      	r4, sp, 4
    578a:	ea201905 	movih      	r0, 6405      	//0x1905
    578e:	38a6      	bseti      	r0, 6
    5790:	e3fff9b4 	bsr      	0x4af8	//4af8 <readl>
    5794:	c4004820 	lsli      	r0, r0, 0
    5798:	b400      	st.w      	r0, (r4, 0x0)
    579a:	3300      	movi      	r3, 0      	//0x0
    579c:	048f      	br      	0x58ba	//58ba <I2C_Clear_ITStat+0x19e>
		case IC_INT_RX_UNDE:        temp=reg_readl(I2C,IC_CLR_RX_UNDER);   return 0;break; /* clear RX_UNDER*/
    579e:	1c01      	addi      	r4, sp, 4
    57a0:	111a      	lrw      	r0, 0x19050044	//19050044 <__stack+0x18c5004c>
    57a2:	e3fff9ab 	bsr      	0x4af8	//4af8 <readl>
    57a6:	c4004820 	lsli      	r0, r0, 0
    57aa:	b400      	st.w      	r0, (r4, 0x0)
    57ac:	3300      	movi      	r3, 0      	//0x0
    57ae:	0486      	br      	0x58ba	//58ba <I2C_Clear_ITStat+0x19e>
		case IC_INT_RX_OVER:        temp=reg_readl(I2C,IC_CLR_RX_OVER);    return 0;break; /* clear RX_OVER*/
    57b0:	1c01      	addi      	r4, sp, 4
    57b2:	1117      	lrw      	r0, 0x19050048	//19050048 <__stack+0x18c50050>
    57b4:	e3fff9a2 	bsr      	0x4af8	//4af8 <readl>
    57b8:	c4004820 	lsli      	r0, r0, 0
    57bc:	b400      	st.w      	r0, (r4, 0x0)
    57be:	3300      	movi      	r3, 0      	//0x0
    57c0:	047d      	br      	0x58ba	//58ba <I2C_Clear_ITStat+0x19e>
		case IC_INT_TX_OVER:        temp=reg_readl(I2C,IC_CLR_TX_OVER);    return 0;break; /* clear TX_OVER*/
    57c2:	1c01      	addi      	r4, sp, 4
    57c4:	1113      	lrw      	r0, 0x1905004c	//1905004c <__stack+0x18c50054>
    57c6:	e3fff999 	bsr      	0x4af8	//4af8 <readl>
    57ca:	c4004820 	lsli      	r0, r0, 0
    57ce:	b400      	st.w      	r0, (r4, 0x0)
    57d0:	3300      	movi      	r3, 0      	//0x0
    57d2:	0474      	br      	0x58ba	//58ba <I2C_Clear_ITStat+0x19e>
		case IC_INT_RD_REQ:         temp=reg_readl(I2C,IC_CLR_RD_REQ);     return 0;break; /* clear RD_REQ*/
    57d4:	1c01      	addi      	r4, sp, 4
    57d6:	1110      	lrw      	r0, 0x19050050	//19050050 <__stack+0x18c50058>
    57d8:	e3fff990 	bsr      	0x4af8	//4af8 <readl>
    57dc:	c4004820 	lsli      	r0, r0, 0
    57e0:	b400      	st.w      	r0, (r4, 0x0)
    57e2:	3300      	movi      	r3, 0      	//0x0
    57e4:	046b      	br      	0x58ba	//58ba <I2C_Clear_ITStat+0x19e>
		case IC_INT_TX_ABRT:        temp=reg_readl(I2C,IC_CLR_TX_ABRT);    return 0;break; /* clear TX_ABRT*/
    57e6:	1c01      	addi      	r4, sp, 4
    57e8:	110c      	lrw      	r0, 0x19050054	//19050054 <__stack+0x18c5005c>
    57ea:	e3fff987 	bsr      	0x4af8	//4af8 <readl>
    57ee:	c4004820 	lsli      	r0, r0, 0
    57f2:	b400      	st.w      	r0, (r4, 0x0)
    57f4:	3300      	movi      	r3, 0      	//0x0
    57f6:	0462      	br      	0x58ba	//58ba <I2C_Clear_ITStat+0x19e>
		case IC_INT_RX_DONE:        temp=reg_readl(I2C,IC_CLR_RX_DONE);    return 0;break; /* clear RX_DONE*/
    57f8:	1c01      	addi      	r4, sp, 4
    57fa:	1109      	lrw      	r0, 0x19050058	//19050058 <__stack+0x18c50060>
    57fc:	e3fff97e 	bsr      	0x4af8	//4af8 <readl>
    5800:	c4004820 	lsli      	r0, r0, 0
    5804:	b400      	st.w      	r0, (r4, 0x0)
    5806:	3300      	movi      	r3, 0      	//0x0
    5808:	0459      	br      	0x58ba	//58ba <I2C_Clear_ITStat+0x19e>
		case IC_INT_ACTIVITY:       temp=reg_readl(I2C,IC_CLR_ACTIVITY);   return 0;break; /* clear ACTIVITY*/
    580a:	1c01      	addi      	r4, sp, 4
    580c:	1105      	lrw      	r0, 0x1905005c	//1905005c <__stack+0x18c50064>
    580e:	e3fff975 	bsr      	0x4af8	//4af8 <readl>
    5812:	c4004820 	lsli      	r0, r0, 0
    5816:	b400      	st.w      	r0, (r4, 0x0)
    5818:	3300      	movi      	r3, 0      	//0x0
    581a:	0450      	br      	0x58ba	//58ba <I2C_Clear_ITStat+0x19e>
		case IC_INT_STOP_DET:       temp=reg_readl(I2C,IC_CLR_STOP_DET);   return 0;break; /* clear STOP_DET*/
    581c:	1c01      	addi      	r4, sp, 4
    581e:	1102      	lrw      	r0, 0x19050060	//19050060 <__stack+0x18c50068>
    5820:	e3fff96c 	bsr      	0x4af8	//4af8 <readl>
    5824:	c4004820 	lsli      	r0, r0, 0
    5828:	b400      	st.w      	r0, (r4, 0x0)
    582a:	3300      	movi      	r3, 0      	//0x0
    582c:	0447      	br      	0x58ba	//58ba <I2C_Clear_ITStat+0x19e>
		case IC_INT_START_DET:      temp=reg_readl(I2C,IC_CLR_START_DET);  return 0;break; /* clear START_DET*/
    582e:	1c01      	addi      	r4, sp, 4
    5830:	101e      	lrw      	r0, 0x19050064	//19050064 <__stack+0x18c5006c>
    5832:	e3fff963 	bsr      	0x4af8	//4af8 <readl>
    5836:	c4004820 	lsli      	r0, r0, 0
    583a:	b400      	st.w      	r0, (r4, 0x0)
    583c:	3300      	movi      	r3, 0      	//0x0
    583e:	043e      	br      	0x58ba	//58ba <I2C_Clear_ITStat+0x19e>
		case IC_INT_GEN_CALL:       temp=reg_readl(I2C,IC_CLR_GEN_CALL);   return 0;break; /* clear GEN_CALL*/
    5840:	1c01      	addi      	r4, sp, 4
    5842:	101b      	lrw      	r0, 0x19050068	//19050068 <__stack+0x18c50070>
    5844:	e3fff95a 	bsr      	0x4af8	//4af8 <readl>
    5848:	c4004820 	lsli      	r0, r0, 0
    584c:	b400      	st.w      	r0, (r4, 0x0)
    584e:	3300      	movi      	r3, 0      	//0x0
    5850:	0435      	br      	0x58ba	//58ba <I2C_Clear_ITStat+0x19e>
		case IC_INT_RESTART_DET:    temp=reg_readl(I2C,IC_CLR_RESTART_DET);return 0;break; /* clear RESTART_DET*/
    5852:	1c01      	addi      	r4, sp, 4
    5854:	1017      	lrw      	r0, 0x190500a8	//190500a8 <__stack+0x18c500b0>
    5856:	e3fff951 	bsr      	0x4af8	//4af8 <readl>
    585a:	c4004820 	lsli      	r0, r0, 0
    585e:	b400      	st.w      	r0, (r4, 0x0)
    5860:	3300      	movi      	r3, 0      	//0x0
    5862:	042c      	br      	0x58ba	//58ba <I2C_Clear_ITStat+0x19e>
		case IC_INT_SCL_STUCK_AT_LOW:    temp=reg_readl(I2C,IC_CLR_SCL_STUCK_DET);return 0;break; /* clear RESTART_DET*/
    5864:	1c01      	addi      	r4, sp, 4
    5866:	1014      	lrw      	r0, 0x190500b4	//190500b4 <__stack+0x18c500bc>
    5868:	e3fff948 	bsr      	0x4af8	//4af8 <readl>
    586c:	c4004820 	lsli      	r0, r0, 0
    5870:	b400      	st.w      	r0, (r4, 0x0)
    5872:	3300      	movi      	r3, 0      	//0x0
    5874:	0423      	br      	0x58ba	//58ba <I2C_Clear_ITStat+0x19e>
    5876:	0000      	.short	0x0000
    5878:	19050038 	.long	0x19050038
    587c:	00004b0c 	.long	0x00004b0c
    5880:	1905003c 	.long	0x1905003c
    5884:	00004af8 	.long	0x00004af8
    5888:	19050044 	.long	0x19050044
    588c:	19050048 	.long	0x19050048
    5890:	1905004c 	.long	0x1905004c
    5894:	19050050 	.long	0x19050050
    5898:	19050054 	.long	0x19050054
    589c:	19050058 	.long	0x19050058
    58a0:	1905005c 	.long	0x1905005c
    58a4:	19050060 	.long	0x19050060
    58a8:	19050064 	.long	0x19050064
    58ac:	19050068 	.long	0x19050068
    58b0:	190500a8 	.long	0x190500a8
    58b4:	190500b4 	.long	0x190500b4
		default:return 1;break;
    58b8:	3301      	movi      	r3, 1      	//0x1
	}
}
    58ba:	6c0f      	mov      	r0, r3
    58bc:	1402      	addi      	sp, sp, 8
    58be:	1491      	pop      	r4, r15

000058c0 <I2C_SDA_Reco_CMD>:

/*Function28-1:SDA stuck recovery ,set bit3 of IC_ENABLE reg */
Bit32u I2C_SDA_Reco_CMD(State_TypeDef NewState)
{
    58c0:	14d0      	push      	r15
    58c2:	1421      	subi      	sp, sp, 4
    58c4:	6cfb      	mov      	r3, sp
    58c6:	b300      	st.w      	r0, (r3, 0x0)
	if (NewState == ENABLE)
    58c8:	6cfb      	mov      	r3, sp
    58ca:	9360      	ld.w      	r3, (r3, 0x0)
    58cc:	3b41      	cmpnei      	r3, 1
    58ce:	0809      	bt      	0x58e0	//58e0 <I2C_SDA_Reco_CMD+0x20>
	{
		//I2C->IC_ENABLE |= IC_ENABLE_SDA_STUCK_RECOVERY_ENABLE;
		reg_writel(IC_ENABLE_SDA_STUCK_RECOVERY_ENABLE,I2C,IC_ENABLE);
    58d0:	3008      	movi      	r0, 8      	//0x8
    58d2:	123b      	lrw      	r1, 0x1905006c	//1905006c <__stack+0x18c50074>
    58d4:	e3fff928 	bsr      	0x4b24	//4b24 <dw_write>
    58d8:	c4004820 	lsli      	r0, r0, 0
		return 0;
    58dc:	3300      	movi      	r3, 0      	//0x0
    58de:	040e      	br      	0x58fa	//58fa <I2C_SDA_Reco_CMD+0x3a>
	}
	else if(NewState == DISABLE)
    58e0:	6cfb      	mov      	r3, sp
    58e2:	9360      	ld.w      	r3, (r3, 0x0)
    58e4:	e923000a 	bnez      	r3, 0x58f8	//58f8 <I2C_SDA_Reco_CMD+0x38>
	{
		//I2C->IC_ENABLE &= ~IC_ENABLE_SDA_STUCK_RECOVERY_ENABLE;
		reg_clearl(IC_ENABLE_SDA_STUCK_RECOVERY_ENABLE,I2C,IC_ENABLE);
    58e8:	3008      	movi      	r0, 8      	//0x8
    58ea:	1235      	lrw      	r1, 0x1905006c	//1905006c <__stack+0x18c50074>
    58ec:	e3fff93c 	bsr      	0x4b64	//4b64 <dw_clear>
    58f0:	c4004820 	lsli      	r0, r0, 0
		return 0;
    58f4:	3300      	movi      	r3, 0      	//0x0
    58f6:	0402      	br      	0x58fa	//58fa <I2C_SDA_Reco_CMD+0x3a>
	}
	else
		return 1;
    58f8:	3301      	movi      	r3, 1      	//0x1
}
    58fa:	6c0f      	mov      	r0, r3
    58fc:	1401      	addi      	sp, sp, 4
    58fe:	1490      	pop      	r15

00005900 <I2C_Block_Trans_CMD>:

/*Function28-2:I2C block transmission enable,set bit2 of IC_ENABLE reg */
Bit32u I2C_Block_Trans_CMD(State_TypeDef NewState)
{
    5900:	14d0      	push      	r15
    5902:	1421      	subi      	sp, sp, 4
    5904:	6cfb      	mov      	r3, sp
    5906:	b300      	st.w      	r0, (r3, 0x0)
	if (NewState == ENABLE)
    5908:	6cfb      	mov      	r3, sp
    590a:	9360      	ld.w      	r3, (r3, 0x0)
    590c:	3b41      	cmpnei      	r3, 1
    590e:	0809      	bt      	0x5920	//5920 <I2C_Block_Trans_CMD+0x20>
	{
		//I2C->IC_ENABLE |= IC_ENABLE_TX_CMD_BLOCK;
		reg_writel(IC_ENABLE_TX_CMD_BLOCK,I2C,IC_ENABLE);
    5910:	3004      	movi      	r0, 4      	//0x4
    5912:	122b      	lrw      	r1, 0x1905006c	//1905006c <__stack+0x18c50074>
    5914:	e3fff908 	bsr      	0x4b24	//4b24 <dw_write>
    5918:	c4004820 	lsli      	r0, r0, 0
		return 0;
    591c:	3300      	movi      	r3, 0      	//0x0
    591e:	040e      	br      	0x593a	//593a <I2C_Block_Trans_CMD+0x3a>
	}
	else if(NewState == DISABLE)
    5920:	6cfb      	mov      	r3, sp
    5922:	9360      	ld.w      	r3, (r3, 0x0)
    5924:	e923000a 	bnez      	r3, 0x5938	//5938 <I2C_Block_Trans_CMD+0x38>
	{
		//I2C->IC_ENABLE &= ~IC_ENABLE_TX_CMD_BLOCK;
		reg_clearl(IC_ENABLE_TX_CMD_BLOCK,I2C,IC_ENABLE);
    5928:	3004      	movi      	r0, 4      	//0x4
    592a:	1225      	lrw      	r1, 0x1905006c	//1905006c <__stack+0x18c50074>
    592c:	e3fff91c 	bsr      	0x4b64	//4b64 <dw_clear>
    5930:	c4004820 	lsli      	r0, r0, 0
		return 0;
    5934:	3300      	movi      	r3, 0      	//0x0
    5936:	0402      	br      	0x593a	//593a <I2C_Block_Trans_CMD+0x3a>
	}
	else
		return 1;
    5938:	3301      	movi      	r3, 1      	//0x1
}
    593a:	6c0f      	mov      	r0, r3
    593c:	1401      	addi      	sp, sp, 4
    593e:	1490      	pop      	r15

00005940 <I2C_Abort_CMD>:

/*Function28-3:I2C abort enable,set bit1 of IC_ENABLE reg */
Bit32u I2C_Abort_CMD(State_TypeDef NewState)
{
    5940:	14d0      	push      	r15
    5942:	1421      	subi      	sp, sp, 4
    5944:	6cfb      	mov      	r3, sp
    5946:	b300      	st.w      	r0, (r3, 0x0)
	if (NewState == ENABLE)
    5948:	6cfb      	mov      	r3, sp
    594a:	9360      	ld.w      	r3, (r3, 0x0)
    594c:	3b41      	cmpnei      	r3, 1
    594e:	0809      	bt      	0x5960	//5960 <I2C_Abort_CMD+0x20>
	{
		//I2C->IC_ENABLE |= IC_ENABLE_ABORT;
		reg_writel(IC_ENABLE_ABORT,I2C,IC_ENABLE);
    5950:	3002      	movi      	r0, 2      	//0x2
    5952:	113b      	lrw      	r1, 0x1905006c	//1905006c <__stack+0x18c50074>
    5954:	e3fff8e8 	bsr      	0x4b24	//4b24 <dw_write>
    5958:	c4004820 	lsli      	r0, r0, 0
		return 0;
    595c:	3300      	movi      	r3, 0      	//0x0
    595e:	040e      	br      	0x597a	//597a <I2C_Abort_CMD+0x3a>
	}
	else if(NewState == DISABLE)
    5960:	6cfb      	mov      	r3, sp
    5962:	9360      	ld.w      	r3, (r3, 0x0)
    5964:	e923000a 	bnez      	r3, 0x5978	//5978 <I2C_Abort_CMD+0x38>
	{
		//I2C->IC_ENABLE &= ~IC_ENABLE_ABORT;
		reg_clearl(IC_ENABLE_ABORT,I2C,IC_ENABLE);
    5968:	3002      	movi      	r0, 2      	//0x2
    596a:	1135      	lrw      	r1, 0x1905006c	//1905006c <__stack+0x18c50074>
    596c:	e3fff8fc 	bsr      	0x4b64	//4b64 <dw_clear>
    5970:	c4004820 	lsli      	r0, r0, 0
		return 0;
    5974:	3300      	movi      	r3, 0      	//0x0
    5976:	0402      	br      	0x597a	//597a <I2C_Abort_CMD+0x3a>
	}
	else
		return 1;
    5978:	3301      	movi      	r3, 1      	//0x1
}
    597a:	6c0f      	mov      	r0, r3
    597c:	1401      	addi      	sp, sp, 4
    597e:	1490      	pop      	r15

00005980 <I2C_CMD>:

/*Function28-4:I2C enable,set bit0 of IC_ENABLE reg */
Bit32u I2C_CMD(State_TypeDef NewState)
{
    5980:	14d0      	push      	r15
    5982:	1421      	subi      	sp, sp, 4
    5984:	6cfb      	mov      	r3, sp
    5986:	b300      	st.w      	r0, (r3, 0x0)
	if (NewState == ENABLE)
    5988:	6cfb      	mov      	r3, sp
    598a:	9360      	ld.w      	r3, (r3, 0x0)
    598c:	3b41      	cmpnei      	r3, 1
    598e:	0809      	bt      	0x59a0	//59a0 <I2C_CMD+0x20>
	{
		//I2C->IC_ENABLE |= IC_ENABLE_ENABLE;
		reg_writel(IC_ENABLE_ENABLE,I2C,IC_ENABLE);
    5990:	3001      	movi      	r0, 1      	//0x1
    5992:	112b      	lrw      	r1, 0x1905006c	//1905006c <__stack+0x18c50074>
    5994:	e3fff8c8 	bsr      	0x4b24	//4b24 <dw_write>
    5998:	c4004820 	lsli      	r0, r0, 0

		return 0;
    599c:	3300      	movi      	r3, 0      	//0x0
    599e:	040e      	br      	0x59ba	//59ba <I2C_CMD+0x3a>
	}
	else if(NewState == DISABLE)
    59a0:	6cfb      	mov      	r3, sp
    59a2:	9360      	ld.w      	r3, (r3, 0x0)
    59a4:	e923000a 	bnez      	r3, 0x59b8	//59b8 <I2C_CMD+0x38>
	{
		//I2C->IC_ENABLE &= ~IC_ENABLE_ENABLE;
		reg_clearl(IC_ENABLE_ENABLE,I2C,IC_ENABLE);
    59a8:	3001      	movi      	r0, 1      	//0x1
    59aa:	1125      	lrw      	r1, 0x1905006c	//1905006c <__stack+0x18c50074>
    59ac:	e3fff8dc 	bsr      	0x4b64	//4b64 <dw_clear>
    59b0:	c4004820 	lsli      	r0, r0, 0
		return 0;
    59b4:	3300      	movi      	r3, 0      	//0x0
    59b6:	0402      	br      	0x59ba	//59ba <I2C_CMD+0x3a>
	}
	else
		return 1;
    59b8:	3301      	movi      	r3, 1      	//0x1
}
    59ba:	6c0f      	mov      	r0, r3
    59bc:	1401      	addi      	sp, sp, 4
    59be:	1490      	pop      	r15

000059c0 <I2C_Get_Stat>:

/*Function29-1:Query I2C status,read bit[11:0] of IC_STATUS reg*/
Bit32u I2C_Get_Stat(IC_STATUS_Typedef StatusItem)
{
    59c0:	14d0      	push      	r15
    59c2:	1421      	subi      	sp, sp, 4
    59c4:	6cfb      	mov      	r3, sp
    59c6:	b300      	st.w      	r0, (r3, 0x0)
	//if ((I2C->IC_STATUS & StatusItem) != 0)
	if ((reg_readl(I2C,IC_STATUS) & StatusItem) != 0)
    59c8:	1100      	lrw      	r0, 0x19050070	//19050070 <__stack+0x18c50078>
    59ca:	e3fff897 	bsr      	0x4af8	//4af8 <readl>
    59ce:	c4004820 	lsli      	r0, r0, 0
    59d2:	6c83      	mov      	r2, r0
    59d4:	6cfb      	mov      	r3, sp
    59d6:	9360      	ld.w      	r3, (r3, 0x0)
    59d8:	68c8      	and      	r3, r2
    59da:	e9030004 	bez      	r3, 0x59e2	//59e2 <I2C_Get_Stat+0x22>
	{
		return 1;
    59de:	3301      	movi      	r3, 1      	//0x1
    59e0:	0402      	br      	0x59e4	//59e4 <I2C_Get_Stat+0x24>
 	}
	else
		return 0;
    59e2:	3300      	movi      	r3, 0      	//0x0
}
    59e4:	6c0f      	mov      	r0, r3
    59e6:	1401      	addi      	sp, sp, 4
    59e8:	1490      	pop      	r15
	...

000059ec <I2C_Set_SDA_Hold>:

/*Function32-1:set I2C RX and TX SDA hold time ,set bit[23:16] /bit[15:0]of IC_SDA_HOLD reg*/
Bit32u I2C_Set_SDA_Hold(Bit32u RX_Holdtime,Bit32u TX_Holdtime)
{
    59ec:	14d1      	push      	r4, r15
    59ee:	1423      	subi      	sp, sp, 12
    59f0:	1a01      	addi      	r2, sp, 4
    59f2:	b200      	st.w      	r0, (r2, 0x0)
    59f4:	6cbb      	mov      	r2, sp
    59f6:	b220      	st.w      	r1, (r2, 0x0)
	Bit32u temp=0;
    59f8:	1a02      	addi      	r2, sp, 8
    59fa:	3100      	movi      	r1, 0      	//0x0
    59fc:	b220      	st.w      	r1, (r2, 0x0)
	temp=(IC_SDA_RX_HODL(RX_Holdtime)&0xFF0000)+(IC_SDA_TX_HODL(TX_Holdtime)&0xFFFF);
    59fe:	1a01      	addi      	r2, sp, 4
    5a00:	9240      	ld.w      	r2, (r2, 0x0)
    5a02:	4230      	lsli      	r1, r2, 16
    5a04:	32ff      	movi      	r2, 255      	//0xff
    5a06:	4250      	lsli      	r2, r2, 16
    5a08:	c4412020 	and      	r0, r1, r2
    5a0c:	6f3b      	mov      	r12, sp
    5a0e:	d82c2000 	ld.w      	r1, (r12, 0x0)
    5a12:	ea03ffff 	movi      	r3, 65535      	//0xffff
    5a16:	3400      	movi      	r4, 0      	//0x0
    5a18:	68c4      	and      	r3, r1
    5a1a:	6908      	and      	r4, r2
    5a1c:	6c8f      	mov      	r2, r3
    5a1e:	1b02      	addi      	r3, sp, 8
    5a20:	5848      	addu      	r2, r0, r2
    5a22:	b340      	st.w      	r2, (r3, 0x0)
	//I2C->IC_SDA_HOLD = temp;
	reg_direct_writel(temp,I2C,IC_SDA_HOLD);
    5a24:	1b02      	addi      	r3, sp, 8
    5a26:	9300      	ld.w      	r0, (r3, 0x0)
    5a28:	102a      	lrw      	r1, 0x1905007c	//1905007c <__stack+0x18c50084>
    5a2a:	e3fff871 	bsr      	0x4b0c	//4b0c <writel>
    5a2e:	c4004820 	lsli      	r0, r0, 0
	return 0;
    5a32:	3300      	movi      	r3, 0      	//0x0
}
    5a34:	6c0f      	mov      	r0, r3
    5a36:	1403      	addi      	sp, sp, 12
    5a38:	1491      	pop      	r4, r15
    5a3a:	0000      	.short	0x0000
    5a3c:	1905006c 	.long	0x1905006c
    5a40:	00004b24 	.long	0x00004b24
    5a44:	00004b64 	.long	0x00004b64
    5a48:	19050070 	.long	0x19050070
    5a4c:	00004af8 	.long	0x00004af8
    5a50:	1905007c 	.long	0x1905007c
    5a54:	00004b0c 	.long	0x00004b0c

00005a58 <I2C_Set_FS_SPKLEN>:

/*Function42-1:set IC_FS_SPKLEN ,set bit[7:0] of IC_FS_SPKLEN reg*/
Bit32u I2C_Set_FS_SPKLEN(Bit8u SpikeLength)
{
    5a58:	14d0      	push      	r15
    5a5a:	1421      	subi      	sp, sp, 4
    5a5c:	6c83      	mov      	r2, r0
    5a5e:	6cfb      	mov      	r3, sp
    5a60:	a340      	st.b      	r2, (r3, 0x0)
	//I2C->IC_FS_SPKLEN = SpikeLength;
	reg_direct_writel(SpikeLength,I2C,IC_FS_SPKLEN);
    5a62:	6cfb      	mov      	r3, sp
    5a64:	8360      	ld.b      	r3, (r3, 0x0)
    5a66:	74cc      	zextb      	r3, r3
    5a68:	6c0f      	mov      	r0, r3
    5a6a:	132c      	lrw      	r1, 0x190500a0	//190500a0 <__stack+0x18c500a8>
    5a6c:	e3fff850 	bsr      	0x4b0c	//4b0c <writel>
    5a70:	c4004820 	lsli      	r0, r0, 0
	SPKLEN_FS=SpikeLength;
    5a74:	6cfb      	mov      	r3, sp
    5a76:	8360      	ld.b      	r3, (r3, 0x0)
    5a78:	748c      	zextb      	r2, r3
    5a7a:	136a      	lrw      	r3, 0x1130c	//1130c <SPKLEN_FS>
    5a7c:	b340      	st.w      	r2, (r3, 0x0)
	return 0;
    5a7e:	3300      	movi      	r3, 0      	//0x0
}
    5a80:	6c0f      	mov      	r0, r3
    5a82:	1401      	addi      	sp, sp, 4
    5a84:	1490      	pop      	r15
	...

00005a88 <I2C_Set_HS_SPKLEN>:

/*Function43-1:set IC_HS_SPKLEN ,set bit[7:0] of IC_HS_SPKLEN reg*/
Bit32u I2C_Set_HS_SPKLEN(Bit8u SpikeLength)
{
    5a88:	14d0      	push      	r15
    5a8a:	1421      	subi      	sp, sp, 4
    5a8c:	6c83      	mov      	r2, r0
    5a8e:	6cfb      	mov      	r3, sp
    5a90:	a340      	st.b      	r2, (r3, 0x0)
	//I2C->IC_HS_SPKLEN = SpikeLength;
	reg_direct_writel(SpikeLength,I2C,IC_HS_SPKLEN);
    5a92:	6cfb      	mov      	r3, sp
    5a94:	8360      	ld.b      	r3, (r3, 0x0)
    5a96:	74cc      	zextb      	r3, r3
    5a98:	6c0f      	mov      	r0, r3
    5a9a:	1323      	lrw      	r1, 0x190500a4	//190500a4 <__stack+0x18c500ac>
    5a9c:	e3fff838 	bsr      	0x4b0c	//4b0c <writel>
    5aa0:	c4004820 	lsli      	r0, r0, 0
	SPKLEN_HS=SpikeLength;
    5aa4:	6cfb      	mov      	r3, sp
    5aa6:	8360      	ld.b      	r3, (r3, 0x0)
    5aa8:	748c      	zextb      	r2, r3
    5aaa:	1360      	lrw      	r3, 0x11310	//11310 <SPKLEN_HS>
    5aac:	b340      	st.w      	r2, (r3, 0x0)
	return 0;
    5aae:	3300      	movi      	r3, 0      	//0x0
}
    5ab0:	6c0f      	mov      	r0, r3
    5ab2:	1401      	addi      	sp, sp, 4
    5ab4:	1490      	pop      	r15
	...

00005ab8 <I2C_Get_CompVer>:

/*Function45-1:Query CompVersion,read  IC_COMP_VERSION reg*/
Bit32u I2C_Get_CompVer(void)
{
    5ab8:	14d1      	push      	r4, r15
    5aba:	1421      	subi      	sp, sp, 4
	//Bit32u temp=I2C->IC_COMP_VERSION;
	Bit32u temp=reg_readl(I2C,IC_COMP_VERSION);
    5abc:	6d3b      	mov      	r4, sp
    5abe:	121c      	lrw      	r0, 0x190500f8	//190500f8 <__stack+0x18c50100>
    5ac0:	e3fff81c 	bsr      	0x4af8	//4af8 <readl>
    5ac4:	c4004820 	lsli      	r0, r0, 0
    5ac8:	b400      	st.w      	r0, (r4, 0x0)
	return temp;
    5aca:	6cfb      	mov      	r3, sp
    5acc:	9360      	ld.w      	r3, (r3, 0x0)
}
    5ace:	6c0f      	mov      	r0, r3
    5ad0:	1401      	addi      	sp, sp, 4
    5ad2:	1491      	pop      	r4, r15

00005ad4 <I2C_Set_SCL_STUCK_AT_LOW_TIMEOUT>:

/*Function47-1:set SCL_STUCK_AT_LOW_TIMEOUT ,set bit[31:0] of IC_SCL_STUCK_AT_LOW_TIMEOUT reg*/
Bit32u I2C_Set_SCL_STUCK_AT_LOW_TIMEOUT(Bit32u Timeout)
{
    5ad4:	14d0      	push      	r15
    5ad6:	1421      	subi      	sp, sp, 4
    5ad8:	6cfb      	mov      	r3, sp
    5ada:	b300      	st.w      	r0, (r3, 0x0)
	//I2C->IC_SCL_STUCK_AT_LOW_TIMEOUT = Timeout;
	reg_direct_writel(Timeout, I2C, IC_SCL_STUCK_AT_LOW_TIMEOUT);
    5adc:	6cfb      	mov      	r3, sp
    5ade:	9300      	ld.w      	r0, (r3, 0x0)
    5ae0:	1235      	lrw      	r1, 0x190500ac	//190500ac <__stack+0x18c500b4>
    5ae2:	e3fff815 	bsr      	0x4b0c	//4b0c <writel>
    5ae6:	c4004820 	lsli      	r0, r0, 0
	return 0;
    5aea:	3300      	movi      	r3, 0      	//0x0
}
    5aec:	6c0f      	mov      	r0, r3
    5aee:	1401      	addi      	sp, sp, 4
    5af0:	1490      	pop      	r15
	...

00005af4 <I2C_Set_SDA_STUCK_AT_LOW_TIMEOUT>:

/*Function48-1:set SDA_STUCK_AT_LOW_TIMEOUT ,set bit[31:0] of IC_SDA_STUCK_AT_LOW_TIMEOUT reg*/
Bit32u I2C_Set_SDA_STUCK_AT_LOW_TIMEOUT(Bit32u Timeout)
{
    5af4:	14d0      	push      	r15
    5af6:	1421      	subi      	sp, sp, 4
    5af8:	6cfb      	mov      	r3, sp
    5afa:	b300      	st.w      	r0, (r3, 0x0)
	//I2C->IC_SDA_STUCK_AT_LOW_TIMEOUT = Timeout;
	reg_direct_writel(Timeout, I2C, IC_SDA_STUCK_AT_LOW_TIMEOUT);
    5afc:	6cfb      	mov      	r3, sp
    5afe:	9300      	ld.w      	r0, (r3, 0x0)
    5b00:	122e      	lrw      	r1, 0x190500b0	//190500b0 <__stack+0x18c500b8>
    5b02:	e3fff805 	bsr      	0x4b0c	//4b0c <writel>
    5b06:	c4004820 	lsli      	r0, r0, 0
	return 0;
    5b0a:	3300      	movi      	r3, 0      	//0x0
}
    5b0c:	6c0f      	mov      	r0, r3
    5b0e:	1401      	addi      	sp, sp, 4
    5b10:	1490      	pop      	r15
	...

00005b14 <I2C_Get_DeviceID>:

/*Function50-1:Query Device ID,read  IC_DEVICE_ID reg*/
Bit32u I2C_Get_DeviceID(void)
{
    5b14:	14d1      	push      	r4, r15
    5b16:	1421      	subi      	sp, sp, 4
	//Bit32u temp=I2C->IC_DEVICE_ID;
	Bit32u temp=reg_readl(I2C,IC_DEVICE_ID);
    5b18:	6d3b      	mov      	r4, sp
    5b1a:	1209      	lrw      	r0, 0x190500b8	//190500b8 <__stack+0x18c500c0>
    5b1c:	e3fff7ee 	bsr      	0x4af8	//4af8 <readl>
    5b20:	c4004820 	lsli      	r0, r0, 0
    5b24:	b400      	st.w      	r0, (r4, 0x0)
	return temp;
    5b26:	6cfb      	mov      	r3, sp
    5b28:	9360      	ld.w      	r3, (r3, 0x0)
}
    5b2a:	6c0f      	mov      	r0, r3
    5b2c:	1401      	addi      	sp, sp, 4
    5b2e:	1491      	pop      	r4, r15

00005b30 <I2C_Deactive>:

/**********Test functions*************/

void I2C_Deactive(void)
{
    5b30:	14d0      	push      	r15
	I2C_CMD(DISABLE);
    5b32:	3000      	movi      	r0, 0      	//0x0
    5b34:	e3ffff26 	bsr      	0x5980	//5980 <I2C_CMD>
    5b38:	c4004820 	lsli      	r0, r0, 0
}
    5b3c:	1490      	pop      	r15
	...

00005b40 <I2C_Config>:

/*I2C Master mode work flow*/
void I2C_Config(IC_Mode_Typedef Mode,IC_AddrMode_Typedef AddrMode,IC_SpeedMode_Typedef SpeedMode)
{
    5b40:	14d0      	push      	r15
    5b42:	1423      	subi      	sp, sp, 12
    5b44:	1b02      	addi      	r3, sp, 8
    5b46:	b300      	st.w      	r0, (r3, 0x0)
    5b48:	1b01      	addi      	r3, sp, 4
    5b4a:	b320      	st.w      	r1, (r3, 0x0)
    5b4c:	6cfb      	mov      	r3, sp
    5b4e:	b340      	st.w      	r2, (r3, 0x0)
	I2C_Set_Mode(Mode);
    5b50:	1b02      	addi      	r3, sp, 8
    5b52:	9300      	ld.w      	r0, (r3, 0x0)
    5b54:	e3fff82e 	bsr      	0x4bb0	//4bb0 <I2C_Set_Mode>
    5b58:	c4004820 	lsli      	r0, r0, 0
	I2C_Set_AddrMode(AddrMode);
    5b5c:	1b01      	addi      	r3, sp, 4
    5b5e:	9300      	ld.w      	r0, (r3, 0x0)
    5b60:	e3fff87e 	bsr      	0x4c5c	//4c5c <I2C_Set_AddrMode>
    5b64:	c4004820 	lsli      	r0, r0, 0
	I2C_Set_SpeedMode(SpeedMode);
    5b68:	6cfb      	mov      	r3, sp
    5b6a:	9300      	ld.w      	r0, (r3, 0x0)
    5b6c:	e3fff852 	bsr      	0x4c10	//4c10 <I2C_Set_SpeedMode>
    5b70:	c4004820 	lsli      	r0, r0, 0
	I2C_Restart_EN(ENABLE);
    5b74:	3001      	movi      	r0, 1      	//0x1
    5b76:	e3fff8e9 	bsr      	0x4d48	//4d48 <I2C_Restart_EN>
    5b7a:	c4004820 	lsli      	r0, r0, 0
}
    5b7e:	1403      	addi      	sp, sp, 12
    5b80:	1490      	pop      	r15
	...

00005b84 <I2C_IT_Register>:

/* config intc,register i2c isq  */
Bit32u I2C_IT_Register(void)
{
    5b84:	14d0      	push      	r15
	/* clear interrupt flag */
	I2C_Clear_ITStat(IC_INT_ALL);
    5b86:	ea007fff 	movi      	r0, 32767      	//0x7fff
    5b8a:	e3fffdc9 	bsr      	0x571c	//571c <I2C_Clear_ITStat>
    5b8e:	c4004820 	lsli      	r0, r0, 0

    CK_INTC_RequestIrq(CK_IIC_IRQ, CK_I2C_Handler);
    5b92:	3010      	movi      	r0, 16      	//0x10
    5b94:	1131      	lrw      	r1, 0x5ba4	//5ba4 <CK_I2C_Handler>
    5b96:	e0000531 	bsr      	0x65f8	//65f8 <CK_INTC_RequestIrq>
    5b9a:	c4004820 	lsli      	r0, r0, 0
    return 0;
    5b9e:	3300      	movi      	r3, 0      	//0x0
}
    5ba0:	6c0f      	mov      	r0, r3
    5ba2:	1490      	pop      	r15

00005ba4 <CK_I2C_Handler>:

void CK_I2C_Handler(Bit32u irqid)
{
    5ba4:	14d0      	push      	r15
    5ba6:	1421      	subi      	sp, sp, 4
    5ba8:	6cfb      	mov      	r3, sp
    5baa:	b300      	st.w      	r0, (r3, 0x0)
	if(I2C_Get_ITRStat(IC_INT_TX_EMPTY))
    5bac:	3010      	movi      	r0, 16      	//0x10
    5bae:	e3fffd71 	bsr      	0x5690	//5690 <I2C_Get_ITRStat>
    5bb2:	c4004820 	lsli      	r0, r0, 0
    5bb6:	6cc3      	mov      	r3, r0
    5bb8:	e92300cc 	bnez      	r3, 0x5d50	//5d50 <CK_I2C_Handler+0x1ac>
		//if(*p!=20)
			//I2C_Send_Data(p++);
		//else
			//I2C_Stop_CMD(ENABLE);
	}
	else if(I2C_Get_ITRStat(IC_INT_RD_REQ))
    5bbc:	3020      	movi      	r0, 32      	//0x20
    5bbe:	e3fffd69 	bsr      	0x5690	//5690 <I2C_Get_ITRStat>
    5bc2:	c4004820 	lsli      	r0, r0, 0
    5bc6:	6cc3      	mov      	r3, r0
    5bc8:	e9030009 	bez      	r3, 0x5bda	//5bda <CK_I2C_Handler+0x36>
	{
		I2C_Clear_ITStat(IC_INT_ALL);
    5bcc:	ea007fff 	movi      	r0, 32767      	//0x7fff
    5bd0:	e3fffda6 	bsr      	0x571c	//571c <I2C_Clear_ITStat>
    5bd4:	c4004820 	lsli      	r0, r0, 0
    5bd8:	04bc      	br      	0x5d50	//5d50 <CK_I2C_Handler+0x1ac>
	}
	else if(I2C_Get_ITRStat(IC_INT_TX_ABRT))
    5bda:	3040      	movi      	r0, 64      	//0x40
    5bdc:	e3fffd5a 	bsr      	0x5690	//5690 <I2C_Get_ITRStat>
    5be0:	c4004820 	lsli      	r0, r0, 0
    5be4:	6cc3      	mov      	r3, r0
    5be6:	e9030009 	bez      	r3, 0x5bf8	//5bf8 <CK_I2C_Handler+0x54>
	{
		I2C_Clear_ITStat(IC_INT_ALL);
    5bea:	ea007fff 	movi      	r0, 32767      	//0x7fff
    5bee:	e3fffd97 	bsr      	0x571c	//571c <I2C_Clear_ITStat>
    5bf2:	c4004820 	lsli      	r0, r0, 0
    5bf6:	04ad      	br      	0x5d50	//5d50 <CK_I2C_Handler+0x1ac>
	}
	else if(I2C_Get_ITRStat(IC_INT_RX_DONE))
    5bf8:	3080      	movi      	r0, 128      	//0x80
    5bfa:	e3fffd4b 	bsr      	0x5690	//5690 <I2C_Get_ITRStat>
    5bfe:	c4004820 	lsli      	r0, r0, 0
    5c02:	6cc3      	mov      	r3, r0
    5c04:	e9030030 	bez      	r3, 0x5c64	//5c64 <CK_I2C_Handler+0xc0>
	{
		I2C_Clear_ITStat(IC_INT_ALL);
    5c08:	ea007fff 	movi      	r0, 32767      	//0x7fff
    5c0c:	e3fffd88 	bsr      	0x571c	//571c <I2C_Clear_ITStat>
    5c10:	c4004820 	lsli      	r0, r0, 0
    5c14:	049e      	br      	0x5d50	//5d50 <CK_I2C_Handler+0x1ac>
    5c16:	0000      	.short	0x0000
    5c18:	190500a0 	.long	0x190500a0
    5c1c:	00004b0c 	.long	0x00004b0c
    5c20:	0001130c 	.long	0x0001130c
    5c24:	190500a4 	.long	0x190500a4
    5c28:	00011310 	.long	0x00011310
    5c2c:	190500f8 	.long	0x190500f8
    5c30:	00004af8 	.long	0x00004af8
    5c34:	190500ac 	.long	0x190500ac
    5c38:	190500b0 	.long	0x190500b0
    5c3c:	190500b8 	.long	0x190500b8
    5c40:	00005980 	.long	0x00005980
    5c44:	00004bb0 	.long	0x00004bb0
    5c48:	00004c5c 	.long	0x00004c5c
    5c4c:	00004c10 	.long	0x00004c10
    5c50:	00004d48 	.long	0x00004d48
    5c54:	0000571c 	.long	0x0000571c
    5c58:	00005ba4 	.long	0x00005ba4
    5c5c:	000065f8 	.long	0x000065f8
    5c60:	00005690 	.long	0x00005690
	}
	else if(I2C_Get_ITRStat(IC_INT_ACTIVITY))
    5c64:	3080      	movi      	r0, 128      	//0x80
    5c66:	4001      	lsli      	r0, r0, 1
    5c68:	e3fffd14 	bsr      	0x5690	//5690 <I2C_Get_ITRStat>
    5c6c:	c4004820 	lsli      	r0, r0, 0
    5c70:	6cc3      	mov      	r3, r0
    5c72:	e9030009 	bez      	r3, 0x5c84	//5c84 <CK_I2C_Handler+0xe0>
	{
		I2C_Clear_ITStat(IC_INT_ALL);
    5c76:	ea007fff 	movi      	r0, 32767      	//0x7fff
    5c7a:	e3fffd51 	bsr      	0x571c	//571c <I2C_Clear_ITStat>
    5c7e:	c4004820 	lsli      	r0, r0, 0
    5c82:	0467      	br      	0x5d50	//5d50 <CK_I2C_Handler+0x1ac>
	}
	else if(I2C_Get_ITRStat(IC_INT_STOP_DET))
    5c84:	3080      	movi      	r0, 128      	//0x80
    5c86:	4002      	lsli      	r0, r0, 2
    5c88:	e3fffd04 	bsr      	0x5690	//5690 <I2C_Get_ITRStat>
    5c8c:	c4004820 	lsli      	r0, r0, 0
    5c90:	6cc3      	mov      	r3, r0
    5c92:	e9030009 	bez      	r3, 0x5ca4	//5ca4 <CK_I2C_Handler+0x100>
	{
		I2C_Clear_ITStat(IC_INT_ALL);
    5c96:	ea007fff 	movi      	r0, 32767      	//0x7fff
    5c9a:	e3fffd41 	bsr      	0x571c	//571c <I2C_Clear_ITStat>
    5c9e:	c4004820 	lsli      	r0, r0, 0
    5ca2:	0457      	br      	0x5d50	//5d50 <CK_I2C_Handler+0x1ac>
	}
	else if(I2C_Get_ITRStat(IC_INT_START_DET))
    5ca4:	3080      	movi      	r0, 128      	//0x80
    5ca6:	4003      	lsli      	r0, r0, 3
    5ca8:	e3fffcf4 	bsr      	0x5690	//5690 <I2C_Get_ITRStat>
    5cac:	c4004820 	lsli      	r0, r0, 0
    5cb0:	6cc3      	mov      	r3, r0
    5cb2:	e9030009 	bez      	r3, 0x5cc4	//5cc4 <CK_I2C_Handler+0x120>
	{
		I2C_Clear_ITStat(IC_INT_ALL);
    5cb6:	ea007fff 	movi      	r0, 32767      	//0x7fff
    5cba:	e3fffd31 	bsr      	0x571c	//571c <I2C_Clear_ITStat>
    5cbe:	c4004820 	lsli      	r0, r0, 0
    5cc2:	0447      	br      	0x5d50	//5d50 <CK_I2C_Handler+0x1ac>
	}
	else if(I2C_Get_ITRStat(IC_INT_GEN_CALL))
    5cc4:	3080      	movi      	r0, 128      	//0x80
    5cc6:	4004      	lsli      	r0, r0, 4
    5cc8:	e3fffce4 	bsr      	0x5690	//5690 <I2C_Get_ITRStat>
    5ccc:	c4004820 	lsli      	r0, r0, 0
    5cd0:	6cc3      	mov      	r3, r0
    5cd2:	e9030009 	bez      	r3, 0x5ce4	//5ce4 <CK_I2C_Handler+0x140>
	{
		I2C_Clear_ITStat(IC_INT_ALL);
    5cd6:	ea007fff 	movi      	r0, 32767      	//0x7fff
    5cda:	e3fffd21 	bsr      	0x571c	//571c <I2C_Clear_ITStat>
    5cde:	c4004820 	lsli      	r0, r0, 0
    5ce2:	0437      	br      	0x5d50	//5d50 <CK_I2C_Handler+0x1ac>
	}
	else if(I2C_Get_ITRStat(IC_INT_RESTART_DET))
    5ce4:	3080      	movi      	r0, 128      	//0x80
    5ce6:	4005      	lsli      	r0, r0, 5
    5ce8:	e3fffcd4 	bsr      	0x5690	//5690 <I2C_Get_ITRStat>
    5cec:	c4004820 	lsli      	r0, r0, 0
    5cf0:	6cc3      	mov      	r3, r0
    5cf2:	e9030009 	bez      	r3, 0x5d04	//5d04 <CK_I2C_Handler+0x160>
	{
		I2C_Clear_ITStat(IC_INT_ALL);
    5cf6:	ea007fff 	movi      	r0, 32767      	//0x7fff
    5cfa:	e3fffd11 	bsr      	0x571c	//571c <I2C_Clear_ITStat>
    5cfe:	c4004820 	lsli      	r0, r0, 0
    5d02:	0427      	br      	0x5d50	//5d50 <CK_I2C_Handler+0x1ac>
	}
	else if(I2C_Get_ITRStat(IC_INT_MST_ON_HOLD))
    5d04:	3080      	movi      	r0, 128      	//0x80
    5d06:	4006      	lsli      	r0, r0, 6
    5d08:	e3fffcc4 	bsr      	0x5690	//5690 <I2C_Get_ITRStat>
    5d0c:	c4004820 	lsli      	r0, r0, 0
    5d10:	6cc3      	mov      	r3, r0
    5d12:	e9030009 	bez      	r3, 0x5d24	//5d24 <CK_I2C_Handler+0x180>
	{
		I2C_Clear_ITStat(IC_INT_ALL);
    5d16:	ea007fff 	movi      	r0, 32767      	//0x7fff
    5d1a:	e3fffd01 	bsr      	0x571c	//571c <I2C_Clear_ITStat>
    5d1e:	c4004820 	lsli      	r0, r0, 0
    5d22:	0417      	br      	0x5d50	//5d50 <CK_I2C_Handler+0x1ac>
	}
	else if(I2C_Get_ITRStat(IC_INT_SCL_STUCK_AT_LOW))
    5d24:	3080      	movi      	r0, 128      	//0x80
    5d26:	4007      	lsli      	r0, r0, 7
    5d28:	e3fffcb4 	bsr      	0x5690	//5690 <I2C_Get_ITRStat>
    5d2c:	c4004820 	lsli      	r0, r0, 0
    5d30:	6cc3      	mov      	r3, r0
    5d32:	e9030009 	bez      	r3, 0x5d44	//5d44 <CK_I2C_Handler+0x1a0>
	{
		I2C_Clear_ITStat(IC_INT_ALL);
    5d36:	ea007fff 	movi      	r0, 32767      	//0x7fff
    5d3a:	e3fffcf1 	bsr      	0x571c	//571c <I2C_Clear_ITStat>
    5d3e:	c4004820 	lsli      	r0, r0, 0
    5d42:	0407      	br      	0x5d50	//5d50 <CK_I2C_Handler+0x1ac>
	}
	else
		I2C_Clear_ITStat(IC_INT_ALL);
    5d44:	ea007fff 	movi      	r0, 32767      	//0x7fff
    5d48:	e3fffcea 	bsr      	0x571c	//571c <I2C_Clear_ITStat>
    5d4c:	c4004820 	lsli      	r0, r0, 0
}
    5d50:	1401      	addi      	sp, sp, 4
    5d52:	1490      	pop      	r15
    5d54:	00005690 	.long	0x00005690
    5d58:	0000571c 	.long	0x0000571c

00005d5c <__flush_dcache>:

/*
 * Data Cache handling functions
 */
static inline void __flush_dcache(void)
{
    5d5c:	14c1      	push      	r4
  register long __b;

  __asm__ __volatile__ ("movi	%0, 0x32\n\t"
    5d5e:	3432      	movi      	r4, 50      	//0x32
    5d60:	c0046431 	mtcr      	r4, cr<17, 0>
                        "mtcr	%0, cr17"
                        : "=r" (__b)); 
}
    5d64:	1481      	pop      	r4
	...

00005d68 <sqrtm1>:
#include "cache.h"
#include "intc.h"
#include "misc.h"

static double sqrtm1(double x)
{
    5d68:	14d1      	push      	r4, r15
    5d6a:	1422      	subi      	sp, sp, 8
    5d6c:	6cfb      	mov      	r3, sp
    5d6e:	b300      	st.w      	r0, (r3, 0x0)
    5d70:	b321      	st.w      	r1, (r3, 0x4)
  return sqrt(x) - 1.0;
    5d72:	6cfb      	mov      	r3, sp
    5d74:	9300      	ld.w      	r0, (r3, 0x0)
    5d76:	9321      	ld.w      	r1, (r3, 0x4)
    5d78:	e00049da 	bsr      	0xf12c	//f12c <__GI_sqrt>
    5d7c:	c4004820 	lsli      	r0, r0, 0
    5d80:	f4011b41 	fmtvrh      	fr1, r1
    5d84:	f4001b61 	fmtvrl      	fr1, r0
    5d88:	1068      	lrw      	r3, 0x103e8	//103e8 <__etext+0x838>
    5d8a:	f4032100 	fldd      	fr0, (r3, 0x0)
    5d8e:	f4010820 	fsubd      	fr0, fr1, fr0
    5d92:	f4001b04 	fmfvrh      	r4, fr0
    5d96:	f4001b23 	fmfvrl      	r3, fr0
}
    5d9a:	6c0f      	mov      	r0, r3
    5d9c:	6c53      	mov      	r1, r4
    5d9e:	1402      	addi      	sp, sp, 8
    5da0:	1491      	pop      	r4, r15
    5da2:	0000      	.short	0x0000
    5da4:	0000f12c 	.long	0x0000f12c
    5da8:	000103e8 	.long	0x000103e8

00005dac <FPU_Except_Test>:

static void FPU_Except_Test()
{
    5dac:	14d1      	push      	r4, r15
    5dae:	1427      	subi      	sp, sp, 28
  CK_UINT32 status;
  double x, y;

  printf("\nExcept Test: FPU. . . \n");
    5db0:	1018      	lrw      	r0, 0x103f0	//103f0 <__etext+0x840>
    5db2:	e00045cf 	bsr      	0xe950	//e950 <printf>
    5db6:	c4004820 	lsli      	r0, r0, 0

  x = -4.2;
    5dba:	1a05      	addi      	r2, sp, 20
    5dbc:	1077      	lrw      	r3, 0x10418	//10418 <__etext+0x868>
    5dbe:	9381      	ld.w      	r4, (r3, 0x4)
    5dc0:	9360      	ld.w      	r3, (r3, 0x0)
    5dc2:	b260      	st.w      	r3, (r2, 0x0)
    5dc4:	b281      	st.w      	r4, (r2, 0x4)
  CK_CPU_ClearFpeStatus();
    5dc6:	e0000615 	bsr      	0x69f0	//69f0 <CK_CPU_ClearFpeStatus>
    5dca:	c4004820 	lsli      	r0, r0, 0
  y = sqrtm1(x);
    5dce:	1c03      	addi      	r4, sp, 12
    5dd0:	1b05      	addi      	r3, sp, 20
    5dd2:	9300      	ld.w      	r0, (r3, 0x0)
    5dd4:	9321      	ld.w      	r1, (r3, 0x4)
    5dd6:	e3ffffc9 	bsr      	0x5d68	//5d68 <sqrtm1>
    5dda:	c4004820 	lsli      	r0, r0, 0
    5dde:	b400      	st.w      	r0, (r4, 0x0)
    5de0:	b421      	st.w      	r1, (r4, 0x4)
  status = CK_CPU_GetFpeStatus();
    5de2:	1c02      	addi      	r4, sp, 8
    5de4:	e000060a 	bsr      	0x69f8	//69f8 <CK_CPU_GetFpeStatus>
    5de8:	c4004820 	lsli      	r0, r0, 0
    5dec:	b400      	st.w      	r0, (r4, 0x0)
  printf("%g %g %d\n", x, y, status);
    5dee:	1a05      	addi      	r2, sp, 20
    5df0:	1b03      	addi      	r3, sp, 12
    5df2:	1902      	addi      	r1, sp, 8
    5df4:	9120      	ld.w      	r1, (r1, 0x0)
    5df6:	b821      	st.w      	r1, (sp, 0x4)
    5df8:	9321      	ld.w      	r1, (r3, 0x4)
    5dfa:	b820      	st.w      	r1, (sp, 0x0)
    5dfc:	9360      	ld.w      	r3, (r3, 0x0)
    5dfe:	100b      	lrw      	r0, 0x1040c	//1040c <__etext+0x85c>
    5e00:	9220      	ld.w      	r1, (r2, 0x0)
    5e02:	9241      	ld.w      	r2, (r2, 0x4)
    5e04:	e00045a6 	bsr      	0xe950	//e950 <printf>
    5e08:	c4004820 	lsli      	r0, r0, 0
}
    5e0c:	1407      	addi      	sp, sp, 28
    5e0e:	1491      	pop      	r4, r15
    5e10:	000103f0 	.long	0x000103f0
    5e14:	0000e950 	.long	0x0000e950
    5e18:	00010418 	.long	0x00010418
    5e1c:	000069f0 	.long	0x000069f0
    5e20:	00005d68 	.long	0x00005d68
    5e24:	000069f8 	.long	0x000069f8
    5e28:	0001040c 	.long	0x0001040c

00005e2c <Alignment_Except_Test>:

static void Alignment_Except_Test()
{
    5e2c:	14d0      	push      	r15
    5e2e:	1422      	subi      	sp, sp, 8
  PCKStruct_ExceptSts exceptStatus;
  CK_UINT32 result = *((CK_UINT8 *)&exceptStatus + 1);
    5e30:	6cfb      	mov      	r3, sp
    5e32:	2300      	addi      	r3, 1      	//0x1
    5e34:	8360      	ld.b      	r3, (r3, 0x0)
    5e36:	748c      	zextb      	r2, r3
    5e38:	1b01      	addi      	r3, sp, 4
    5e3a:	b340      	st.w      	r2, (r3, 0x0)
  printf("\nExcept Test: Alignment. . . \n");
    5e3c:	1014      	lrw      	r0, 0x10420	//10420 <__etext+0x870>
    5e3e:	e0004589 	bsr      	0xe950	//e950 <printf>
    5e42:	c4004820 	lsli      	r0, r0, 0

  asm  ("lrw r7, 0x18000001");
    5e46:	10f4      	lrw      	r7, 0x18000001	//18000001 <__stack+0x17c00009>
  asm  ("ldw r8, (r7, 0x0)");
    5e48:	d9072000 	ld.w      	r8, (r7, 0x0)

  exceptStatus = CK_CPU_GetExceptStatus(CKCORE_VECTOR_ALIGN);
    5e4c:	3001      	movi      	r0, 1      	//0x1
    5e4e:	e00005f7 	bsr      	0x6a3c	//6a3c <CK_CPU_GetExceptStatus>
    5e52:	c4004820 	lsli      	r0, r0, 0
    5e56:	6c83      	mov      	r2, r0
    5e58:	6cfb      	mov      	r3, sp
    5e5a:	b340      	st.w      	r2, (r3, 0x0)
  printf("status=%d::count=%d\n", exceptStatus -> status, exceptStatus -> count);
    5e5c:	6cfb      	mov      	r3, sp
    5e5e:	9360      	ld.w      	r3, (r3, 0x0)
    5e60:	8360      	ld.b      	r3, (r3, 0x0)
    5e62:	4b67      	lsri      	r3, r3, 7
    5e64:	e4632001 	andi      	r3, r3, 1
    5e68:	74cc      	zextb      	r3, r3
    5e6a:	6c8f      	mov      	r2, r3
    5e6c:	6cfb      	mov      	r3, sp
    5e6e:	9360      	ld.w      	r3, (r3, 0x0)
    5e70:	8360      	ld.b      	r3, (r3, 0x0)
    5e72:	e463207f 	andi      	r3, r3, 127
    5e76:	74cc      	zextb      	r3, r3
    5e78:	1009      	lrw      	r0, 0x10440	//10440 <__etext+0x890>
    5e7a:	6c4b      	mov      	r1, r2
    5e7c:	6c8f      	mov      	r2, r3
    5e7e:	e0004569 	bsr      	0xe950	//e950 <printf>
    5e82:	c4004820 	lsli      	r0, r0, 0
}
    5e86:	1402      	addi      	sp, sp, 8
    5e88:	1490      	pop      	r15
    5e8a:	0000      	.short	0x0000
    5e8c:	00010420 	.long	0x00010420
    5e90:	0000e950 	.long	0x0000e950
    5e94:	18000001 	.long	0x18000001
    5e98:	00006a3c 	.long	0x00006a3c
    5e9c:	00010440 	.long	0x00010440

00005ea0 <Access_Except_Test>:

static void Access_Except_Test()
{
    5ea0:	14d1      	push      	r4, r15
    5ea2:	1422      	subi      	sp, sp, 8
  PCKStruct_ExceptSts exceptStatus;
  printf("\nExcept Test: Access. . . \n");
    5ea4:	1015      	lrw      	r0, 0x10458	//10458 <__etext+0x8a8>
    5ea6:	e0004555 	bsr      	0xe950	//e950 <printf>
    5eaa:	c4004820 	lsli      	r0, r0, 0

  CK_UINT8 result = *((CK_UINT8 *)0xFFFFFFFF);
    5eae:	3300      	movi      	r3, 0      	//0x0
    5eb0:	2b00      	subi      	r3, 1      	//0x1
    5eb2:	e44e0006 	addi      	r2, sp, 7      	//0x7
    5eb6:	8360      	ld.b      	r3, (r3, 0x0)
    5eb8:	a260      	st.b      	r3, (r2, 0x0)

  exceptStatus = CK_CPU_GetExceptStatus(CKCORE_VECTOR_ACCESS);
    5eba:	6d3b      	mov      	r4, sp
    5ebc:	3002      	movi      	r0, 2      	//0x2
    5ebe:	e00005bf 	bsr      	0x6a3c	//6a3c <CK_CPU_GetExceptStatus>
    5ec2:	c4004820 	lsli      	r0, r0, 0
    5ec6:	b400      	st.w      	r0, (r4, 0x0)
  printf("status=%d::count=%d\n", exceptStatus -> status, exceptStatus -> count);
    5ec8:	6cfb      	mov      	r3, sp
    5eca:	9360      	ld.w      	r3, (r3, 0x0)
    5ecc:	8360      	ld.b      	r3, (r3, 0x0)
    5ece:	4b67      	lsri      	r3, r3, 7
    5ed0:	e4632001 	andi      	r3, r3, 1
    5ed4:	74cc      	zextb      	r3, r3
    5ed6:	6c8f      	mov      	r2, r3
    5ed8:	6cfb      	mov      	r3, sp
    5eda:	9360      	ld.w      	r3, (r3, 0x0)
    5edc:	8360      	ld.b      	r3, (r3, 0x0)
    5ede:	e463207f 	andi      	r3, r3, 127
    5ee2:	74cc      	zextb      	r3, r3
    5ee4:	1008      	lrw      	r0, 0x10440	//10440 <__etext+0x890>
    5ee6:	6c4b      	mov      	r1, r2
    5ee8:	6c8f      	mov      	r2, r3
    5eea:	e0004533 	bsr      	0xe950	//e950 <printf>
    5eee:	c4004820 	lsli      	r0, r0, 0
}
    5ef2:	1402      	addi      	sp, sp, 8
    5ef4:	1491      	pop      	r4, r15
    5ef6:	0000      	.short	0x0000
    5ef8:	00010458 	.long	0x00010458
    5efc:	0000e950 	.long	0x0000e950
    5f00:	00006a3c 	.long	0x00006a3c
    5f04:	00010440 	.long	0x00010440

00005f08 <ZeroDiv_Except_Test>:

static void ZeroDiv_Except_Test()
{
    5f08:	14d1      	push      	r4, r15
    5f0a:	1422      	subi      	sp, sp, 8
  PCKStruct_ExceptSts exceptStatus;
  CK_UINT32 denomi;

  printf("\nExcept Test: ZeroDiv. . . \n");
    5f0c:	1015      	lrw      	r0, 0x10474	//10474 <__etext+0x8c4>
    5f0e:	e0004521 	bsr      	0xe950	//e950 <printf>
    5f12:	c4004820 	lsli      	r0, r0, 0
  denomi /= 0;
    5f16:	1b01      	addi      	r3, sp, 4
    5f18:	1a01      	addi      	r2, sp, 4
    5f1a:	9220      	ld.w      	r1, (r2, 0x0)
    5f1c:	3200      	movi      	r2, 0      	//0x0
    5f1e:	c4418022 	divu      	r2, r1, r2
    5f22:	b340      	st.w      	r2, (r3, 0x0)
  exceptStatus = CK_CPU_GetExceptStatus(CKCORE_VECTOR_ZERODIV);
    5f24:	6d3b      	mov      	r4, sp
    5f26:	3003      	movi      	r0, 3      	//0x3
    5f28:	e000058a 	bsr      	0x6a3c	//6a3c <CK_CPU_GetExceptStatus>
    5f2c:	c4004820 	lsli      	r0, r0, 0
    5f30:	b400      	st.w      	r0, (r4, 0x0)
  printf("status=%d::count=%d\n", exceptStatus -> status, exceptStatus -> count);
    5f32:	6cfb      	mov      	r3, sp
    5f34:	9360      	ld.w      	r3, (r3, 0x0)
    5f36:	8360      	ld.b      	r3, (r3, 0x0)
    5f38:	4b67      	lsri      	r3, r3, 7
    5f3a:	e4632001 	andi      	r3, r3, 1
    5f3e:	74cc      	zextb      	r3, r3
    5f40:	6c8f      	mov      	r2, r3
    5f42:	6cfb      	mov      	r3, sp
    5f44:	9360      	ld.w      	r3, (r3, 0x0)
    5f46:	8360      	ld.b      	r3, (r3, 0x0)
    5f48:	e463207f 	andi      	r3, r3, 127
    5f4c:	74cc      	zextb      	r3, r3
    5f4e:	1008      	lrw      	r0, 0x10440	//10440 <__etext+0x890>
    5f50:	6c4b      	mov      	r1, r2
    5f52:	6c8f      	mov      	r2, r3
    5f54:	e00044fe 	bsr      	0xe950	//e950 <printf>
    5f58:	c4004820 	lsli      	r0, r0, 0
}
    5f5c:	1402      	addi      	sp, sp, 8
    5f5e:	1491      	pop      	r4, r15
    5f60:	00010474 	.long	0x00010474
    5f64:	0000e950 	.long	0x0000e950
    5f68:	00006a3c 	.long	0x00006a3c
    5f6c:	00010440 	.long	0x00010440

00005f70 <Illegal_Except_Test>:

static void Illegal_Except_Test()
{
    5f70:	14d1      	push      	r4, r15
    5f72:	1421      	subi      	sp, sp, 4
  PCKStruct_ExceptSts exceptStatus;

  printf("\nExcept Test: Illegal. . . \n");
    5f74:	1012      	lrw      	r0, 0x10494	//10494 <__etext+0x8e4>
    5f76:	e00044ed 	bsr      	0xe950	//e950 <printf>
    5f7a:	c4004820 	lsli      	r0, r0, 0
  exceptStatus = CK_CPU_GetExceptStatus(CKCORE_VECTOR_ILLEGAL);
    5f7e:	6d3b      	mov      	r4, sp
    5f80:	3004      	movi      	r0, 4      	//0x4
    5f82:	e000055d 	bsr      	0x6a3c	//6a3c <CK_CPU_GetExceptStatus>
    5f86:	c4004820 	lsli      	r0, r0, 0
    5f8a:	b400      	st.w      	r0, (r4, 0x0)
  printf("status=%d::count=%d\n", exceptStatus -> status, exceptStatus -> count);
    5f8c:	6cfb      	mov      	r3, sp
    5f8e:	9360      	ld.w      	r3, (r3, 0x0)
    5f90:	8360      	ld.b      	r3, (r3, 0x0)
    5f92:	4b67      	lsri      	r3, r3, 7
    5f94:	e4632001 	andi      	r3, r3, 1
    5f98:	74cc      	zextb      	r3, r3
    5f9a:	6c8f      	mov      	r2, r3
    5f9c:	6cfb      	mov      	r3, sp
    5f9e:	9360      	ld.w      	r3, (r3, 0x0)
    5fa0:	8360      	ld.b      	r3, (r3, 0x0)
    5fa2:	e463207f 	andi      	r3, r3, 127
    5fa6:	74cc      	zextb      	r3, r3
    5fa8:	1008      	lrw      	r0, 0x10440	//10440 <__etext+0x890>
    5faa:	6c4b      	mov      	r1, r2
    5fac:	6c8f      	mov      	r2, r3
    5fae:	e00044d1 	bsr      	0xe950	//e950 <printf>
    5fb2:	c4004820 	lsli      	r0, r0, 0
}
    5fb6:	1401      	addi      	sp, sp, 4
    5fb8:	1491      	pop      	r4, r15
    5fba:	0000      	.short	0x0000
    5fbc:	00010494 	.long	0x00010494
    5fc0:	0000e950 	.long	0x0000e950
    5fc4:	00006a3c 	.long	0x00006a3c
    5fc8:	00010440 	.long	0x00010440

00005fcc <Privil_Except_Test>:

static void Privil_Except_Test()
{
    5fcc:	14d1      	push      	r4, r15
    5fce:	1421      	subi      	sp, sp, 4
  PCKStruct_ExceptSts exceptStatus;

  printf("\nExcept Test: Privil. . . \n");
    5fd0:	1016      	lrw      	r0, 0x104b4	//104b4 <__etext+0x904>
    5fd2:	e00044bf 	bsr      	0xe950	//e950 <printf>
    5fd6:	c4004820 	lsli      	r0, r0, 0
  asm  ("mtcr   a0, ss0\n\t"
    5fda:	c0006426 	mtcr      	r0, cr<6, 0>
    5fde:	c0006020 	mfcr      	r0, cr<0, 0>
    5fe2:	389f      	bclri      	r0, 31
    5fe4:	c0006420 	mtcr      	r0, cr<0, 0>
    5fe8:	c0066020 	mfcr      	r0, cr<6, 0>
        "mfcr   a0, psr\n\t"
        "bclri  a0, 31\n\t"
        "mtcr   a0, psr\n\t"
        "mfcr   a0, ss0\n\t"); /* User Mode mfcr command execute */
  exceptStatus = CK_CPU_GetExceptStatus(CKCORE_VECTOR_PRIV);
    5fec:	6d3b      	mov      	r4, sp
    5fee:	3005      	movi      	r0, 5      	//0x5
    5ff0:	e0000526 	bsr      	0x6a3c	//6a3c <CK_CPU_GetExceptStatus>
    5ff4:	c4004820 	lsli      	r0, r0, 0
    5ff8:	b400      	st.w      	r0, (r4, 0x0)
  printf("status=%d::count=%d\n", exceptStatus -> status, exceptStatus -> count);
    5ffa:	6cfb      	mov      	r3, sp
    5ffc:	9360      	ld.w      	r3, (r3, 0x0)
    5ffe:	8360      	ld.b      	r3, (r3, 0x0)
    6000:	4b67      	lsri      	r3, r3, 7
    6002:	e4632001 	andi      	r3, r3, 1
    6006:	74cc      	zextb      	r3, r3
    6008:	6c8f      	mov      	r2, r3
    600a:	6cfb      	mov      	r3, sp
    600c:	9360      	ld.w      	r3, (r3, 0x0)
    600e:	8360      	ld.b      	r3, (r3, 0x0)
    6010:	e463207f 	andi      	r3, r3, 127
    6014:	74cc      	zextb      	r3, r3
    6016:	1008      	lrw      	r0, 0x10440	//10440 <__etext+0x890>
    6018:	6c4b      	mov      	r1, r2
    601a:	6c8f      	mov      	r2, r3
    601c:	e000449a 	bsr      	0xe950	//e950 <printf>
    6020:	c4004820 	lsli      	r0, r0, 0
}
    6024:	1401      	addi      	sp, sp, 4
    6026:	1491      	pop      	r4, r15
    6028:	000104b4 	.long	0x000104b4
    602c:	0000e950 	.long	0x0000e950
    6030:	00006a3c 	.long	0x00006a3c
    6034:	00010440 	.long	0x00010440

00006038 <Unrecover_Except_Test>:

static void Unrecover_Except_Test()
{
    6038:	14d1      	push      	r4, r15
    603a:	1422      	subi      	sp, sp, 8
  PCKStruct_ExceptSts exceptStatus;
  CK_UINT32 denomi;

  printf("\nExcept Test: Unrecover. . . \n");
    603c:	1016      	lrw      	r0, 0x104d0	//104d0 <__etext+0x920>
    603e:	e0004489 	bsr      	0xe950	//e950 <printf>
    6042:	c4004820 	lsli      	r0, r0, 0
  denomi /= 0;
    6046:	1b01      	addi      	r3, sp, 4
    6048:	1a01      	addi      	r2, sp, 4
    604a:	9220      	ld.w      	r1, (r2, 0x0)
    604c:	3200      	movi      	r2, 0      	//0x0
    604e:	c4418022 	divu      	r2, r1, r2
    6052:	b340      	st.w      	r2, (r3, 0x0)
  asm  ("psrclr ee");
    6054:	c1007020 	psrclr      	ee
  exceptStatus = CK_CPU_GetExceptStatus(CKCORE_VECTOR_UNRECOVER);
    6058:	6d3b      	mov      	r4, sp
    605a:	3008      	movi      	r0, 8      	//0x8
    605c:	e00004f0 	bsr      	0x6a3c	//6a3c <CK_CPU_GetExceptStatus>
    6060:	c4004820 	lsli      	r0, r0, 0
    6064:	b400      	st.w      	r0, (r4, 0x0)
  printf("status=%d::count=%d\n", exceptStatus -> status, exceptStatus -> count);
    6066:	6cfb      	mov      	r3, sp
    6068:	9360      	ld.w      	r3, (r3, 0x0)
    606a:	8360      	ld.b      	r3, (r3, 0x0)
    606c:	4b67      	lsri      	r3, r3, 7
    606e:	e4632001 	andi      	r3, r3, 1
    6072:	74cc      	zextb      	r3, r3
    6074:	6c8f      	mov      	r2, r3
    6076:	6cfb      	mov      	r3, sp
    6078:	9360      	ld.w      	r3, (r3, 0x0)
    607a:	8360      	ld.b      	r3, (r3, 0x0)
    607c:	e463207f 	andi      	r3, r3, 127
    6080:	74cc      	zextb      	r3, r3
    6082:	1008      	lrw      	r0, 0x10440	//10440 <__etext+0x890>
    6084:	6c4b      	mov      	r1, r2
    6086:	6c8f      	mov      	r2, r3
    6088:	e0004464 	bsr      	0xe950	//e950 <printf>
    608c:	c4004820 	lsli      	r0, r0, 0
}
    6090:	1402      	addi      	sp, sp, 8
    6092:	1491      	pop      	r4, r15
    6094:	000104d0 	.long	0x000104d0
    6098:	0000e950 	.long	0x0000e950
    609c:	00006a3c 	.long	0x00006a3c
    60a0:	00010440 	.long	0x00010440

000060a4 <Idly_Except_Test>:

static void Idly_Except_Test()
{
    60a4:	14d1      	push      	r4, r15
    60a6:	1421      	subi      	sp, sp, 4
  PCKStruct_ExceptSts exceptStatus;

  printf("\nExcept Test: Idly. . . \n");
    60a8:	1015      	lrw      	r0, 0x104f0	//104f0 <__etext+0x940>
    60aa:	e0004453 	bsr      	0xe950	//e950 <printf>
    60ae:	c4004820 	lsli      	r0, r0, 0
  asm  ("idly\n\t"
    60b2:	c0601c20 	idly      	4      	//0x4
    60b6:	6fbb      	mov      	sp, sp
    60b8:	6fbb      	mov      	sp, sp
    60ba:	6fbb      	mov      	sp, sp
    60bc:	6fbb      	mov      	sp, sp
    60be:	6fbb      	mov      	sp, sp
/* @todo Need to Add Bus Access Exception */
        "mov    sp, sp\n\t"
        "mov    sp, sp\n\t"
        "mov    sp, sp\n\t");

  exceptStatus = CK_CPU_GetExceptStatus(CKCORE_VECTOR_IDLY);
    60c0:	6d3b      	mov      	r4, sp
    60c2:	3009      	movi      	r0, 9      	//0x9
    60c4:	e00004bc 	bsr      	0x6a3c	//6a3c <CK_CPU_GetExceptStatus>
    60c8:	c4004820 	lsli      	r0, r0, 0
    60cc:	b400      	st.w      	r0, (r4, 0x0)
  printf("status=%d::count=%d\n", exceptStatus -> status, exceptStatus -> count);
    60ce:	6cfb      	mov      	r3, sp
    60d0:	9360      	ld.w      	r3, (r3, 0x0)
    60d2:	8360      	ld.b      	r3, (r3, 0x0)
    60d4:	4b67      	lsri      	r3, r3, 7
    60d6:	e4632001 	andi      	r3, r3, 1
    60da:	74cc      	zextb      	r3, r3
    60dc:	6c8f      	mov      	r2, r3
    60de:	6cfb      	mov      	r3, sp
    60e0:	9360      	ld.w      	r3, (r3, 0x0)
    60e2:	8360      	ld.b      	r3, (r3, 0x0)
    60e4:	e463207f 	andi      	r3, r3, 127
    60e8:	74cc      	zextb      	r3, r3
    60ea:	1008      	lrw      	r0, 0x10440	//10440 <__etext+0x890>
    60ec:	6c4b      	mov      	r1, r2
    60ee:	6c8f      	mov      	r2, r3
    60f0:	e0004430 	bsr      	0xe950	//e950 <printf>
    60f4:	c4004820 	lsli      	r0, r0, 0
}
    60f8:	1401      	addi      	sp, sp, 4
    60fa:	1491      	pop      	r4, r15
    60fc:	000104f0 	.long	0x000104f0
    6100:	0000e950 	.long	0x0000e950
    6104:	00006a3c 	.long	0x00006a3c
    6108:	00010440 	.long	0x00010440

0000610c <HWaccel_Except_Test>:

static void HWaccel_Except_Test()
{
    610c:	14d1      	push      	r4, r15
    610e:	1422      	subi      	sp, sp, 8
  PCKStruct_ExceptSts exceptStatus;
  CK_UINT32 getValue;

  printf("\nExcept Test: IHWaccel. . . \n");
    6110:	1102      	lrw      	r0, 0x1050c	//1050c <__etext+0x95c>
    6112:	e000441f 	bsr      	0xe950	//e950 <printf>
    6116:	c4004820 	lsli      	r0, r0, 0
  /* clear CCR2.PLD */
  asm  ("mtcr   a0, ss0\n\t"
    611a:	c0006426 	mtcr      	r0, cr<6, 0>
    611e:	c01f6020 	mfcr      	r0, cr<31, 0>
    6122:	3882      	bclri      	r0, 2
    6124:	c000643f 	mtcr      	r0, cr<31, 0>
    6128:	c0066020 	mfcr      	r0, cr<6, 0>
        "mfcr   a0, cr<31, 0>\n\t"
        "bclri  a0, 2\n\t"
        "mtcr   a0, cr<31, 0>\n\t"
        "mfcr   a0, ss0\n\t");
  /* flush DCache */
  CK_Cache_FlushD();
    612c:	e3fffe18 	bsr      	0x5d5c	//5d5c <__flush_dcache>
    6130:	c4004820 	lsli      	r0, r0, 0
  /* serious liner Memory Access */
  getValue = *((CK_UINT32 *)0x100000);
    6134:	3380      	movi      	r3, 128      	//0x80
    6136:	436d      	lsli      	r3, r3, 13
    6138:	1a01      	addi      	r2, sp, 4
    613a:	9360      	ld.w      	r3, (r3, 0x0)
    613c:	b260      	st.w      	r3, (r2, 0x0)
  getValue = *((CK_UINT32 *)0x200000);
    613e:	3380      	movi      	r3, 128      	//0x80
    6140:	436e      	lsli      	r3, r3, 14
    6142:	1a01      	addi      	r2, sp, 4
    6144:	9360      	ld.w      	r3, (r3, 0x0)
    6146:	b260      	st.w      	r3, (r2, 0x0)
  getValue = *((CK_UINT32 *)0x300000);
    6148:	33c0      	movi      	r3, 192      	//0xc0
    614a:	436e      	lsli      	r3, r3, 14
    614c:	1a01      	addi      	r2, sp, 4
    614e:	9360      	ld.w      	r3, (r3, 0x0)
    6150:	b260      	st.w      	r3, (r2, 0x0)
  getValue = *((CK_UINT32 *)0x400000);
    6152:	3380      	movi      	r3, 128      	//0x80
    6154:	436f      	lsli      	r3, r3, 15
    6156:	1a01      	addi      	r2, sp, 4
    6158:	9360      	ld.w      	r3, (r3, 0x0)
    615a:	b260      	st.w      	r3, (r2, 0x0)
  exceptStatus = CK_CPU_GetExceptStatus(CKCORE_VECTOR_HWACCEL);
    615c:	6d3b      	mov      	r4, sp
    615e:	300c      	movi      	r0, 12      	//0xc
    6160:	e000046e 	bsr      	0x6a3c	//6a3c <CK_CPU_GetExceptStatus>
    6164:	c4004820 	lsli      	r0, r0, 0
    6168:	b400      	st.w      	r0, (r4, 0x0)
  printf("status=%d::count=%d\n", exceptStatus -> status, exceptStatus -> count);
    616a:	6cfb      	mov      	r3, sp
    616c:	9360      	ld.w      	r3, (r3, 0x0)
    616e:	8360      	ld.b      	r3, (r3, 0x0)
    6170:	4b67      	lsri      	r3, r3, 7
    6172:	e4632001 	andi      	r3, r3, 1
    6176:	74cc      	zextb      	r3, r3
    6178:	6c8f      	mov      	r2, r3
    617a:	6cfb      	mov      	r3, sp
    617c:	9360      	ld.w      	r3, (r3, 0x0)
    617e:	8360      	ld.b      	r3, (r3, 0x0)
    6180:	e463207f 	andi      	r3, r3, 127
    6184:	74cc      	zextb      	r3, r3
    6186:	1009      	lrw      	r0, 0x10440	//10440 <__etext+0x890>
    6188:	6c4b      	mov      	r1, r2
    618a:	6c8f      	mov      	r2, r3
    618c:	e00043e2 	bsr      	0xe950	//e950 <printf>
    6190:	c4004820 	lsli      	r0, r0, 0
}
    6194:	1402      	addi      	sp, sp, 8
    6196:	1491      	pop      	r4, r15
    6198:	0001050c 	.long	0x0001050c
    619c:	0000e950 	.long	0x0000e950
    61a0:	00005d5c 	.long	0x00005d5c
    61a4:	00006a3c 	.long	0x00006a3c
    61a8:	00010440 	.long	0x00010440

000061ac <TLB_Except_Test>:

static void TLB_Except_Test()
{
    61ac:	14d1      	push      	r4, r15
    61ae:	1422      	subi      	sp, sp, 8
  PCKStruct_ExceptSts exceptStatus;
  CK_UINT32 getValue;

  printf("\nExcept Test: TLB series. . . \n");
    61b0:	101e      	lrw      	r0, 0x1052c	//1052c <__etext+0x97c>
    61b2:	e00043cf 	bsr      	0xe950	//e950 <printf>
    61b6:	c4004820 	lsli      	r0, r0, 0
  /* Invalid All TLB */
  asm  ("bgeni	a0,	26\n\t"
    61ba:	ea200400 	movih      	r0, 1024      	//0x400
    61be:	c1e06428 	mtcr      	r0, cr<8, 15>
        "mtcr	a0,	cr<8,15>\n\t");
  /* Memory Access */
  getValue = *((CK_UINT32 *)0x100000);
    61c2:	3380      	movi      	r3, 128      	//0x80
    61c4:	436d      	lsli      	r3, r3, 13
    61c6:	1a01      	addi      	r2, sp, 4
    61c8:	9360      	ld.w      	r3, (r3, 0x0)
    61ca:	b260      	st.w      	r3, (r2, 0x0)
  getValue = *((CK_UINT32 *)0x200000);
    61cc:	3380      	movi      	r3, 128      	//0x80
    61ce:	436e      	lsli      	r3, r3, 14
    61d0:	1a01      	addi      	r2, sp, 4
    61d2:	9360      	ld.w      	r3, (r3, 0x0)
    61d4:	b260      	st.w      	r3, (r2, 0x0)
  getValue = *((CK_UINT32 *)0x300000);
    61d6:	33c0      	movi      	r3, 192      	//0xc0
    61d8:	436e      	lsli      	r3, r3, 14
    61da:	1a01      	addi      	r2, sp, 4
    61dc:	9360      	ld.w      	r3, (r3, 0x0)
    61de:	b260      	st.w      	r3, (r2, 0x0)
  getValue = *((CK_UINT32 *)0x400000);
    61e0:	3380      	movi      	r3, 128      	//0x80
    61e2:	436f      	lsli      	r3, r3, 15
    61e4:	1a01      	addi      	r2, sp, 4
    61e6:	9360      	ld.w      	r3, (r3, 0x0)
    61e8:	b260      	st.w      	r3, (r2, 0x0)
  /* @todo other TLB Exception */
  exceptStatus = CK_CPU_GetExceptStatus(CKCORE_VECTOR_TLBMISS);
    61ea:	6d3b      	mov      	r4, sp
    61ec:	300e      	movi      	r0, 14      	//0xe
    61ee:	e0000427 	bsr      	0x6a3c	//6a3c <CK_CPU_GetExceptStatus>
    61f2:	c4004820 	lsli      	r0, r0, 0
    61f6:	b400      	st.w      	r0, (r4, 0x0)
  printf("status=%d::count=%d\n", exceptStatus -> status, exceptStatus -> count);
    61f8:	6cfb      	mov      	r3, sp
    61fa:	9360      	ld.w      	r3, (r3, 0x0)
    61fc:	8360      	ld.b      	r3, (r3, 0x0)
    61fe:	4b67      	lsri      	r3, r3, 7
    6200:	e4632001 	andi      	r3, r3, 1
    6204:	74cc      	zextb      	r3, r3
    6206:	6c8f      	mov      	r2, r3
    6208:	6cfb      	mov      	r3, sp
    620a:	9360      	ld.w      	r3, (r3, 0x0)
    620c:	8360      	ld.b      	r3, (r3, 0x0)
    620e:	e463207f 	andi      	r3, r3, 127
    6212:	74cc      	zextb      	r3, r3
    6214:	1008      	lrw      	r0, 0x10440	//10440 <__etext+0x890>
    6216:	6c4b      	mov      	r1, r2
    6218:	6c8f      	mov      	r2, r3
    621a:	e000439b 	bsr      	0xe950	//e950 <printf>
    621e:	c4004820 	lsli      	r0, r0, 0
}
    6222:	1402      	addi      	sp, sp, 8
    6224:	1491      	pop      	r4, r15
    6226:	0000      	.short	0x0000
    6228:	0001052c 	.long	0x0001052c
    622c:	0000e950 	.long	0x0000e950
    6230:	00006a3c 	.long	0x00006a3c
    6234:	00010440 	.long	0x00010440

00006238 <CK_Except_Test>:

/*
 * main function of expect test program.
 */
void CK_Except_Test()
{
    6238:	14d0      	push      	r15
  printf("\nStart Except Test. . . \n");
    623a:	101a      	lrw      	r0, 0x1054c	//1054c <__etext+0x99c>
    623c:	e000438a 	bsr      	0xe950	//e950 <printf>
    6240:	c4004820 	lsli      	r0, r0, 0

  /* FPU Exception Test */
//  FPU_Except_Test();
  /* Alignment Exception Test */
  Alignment_Except_Test();
    6244:	e3fffdf4 	bsr      	0x5e2c	//5e2c <Alignment_Except_Test>
    6248:	c4004820 	lsli      	r0, r0, 0
  /* Access Exception Test */
  Access_Except_Test();
    624c:	e3fffe2a 	bsr      	0x5ea0	//5ea0 <Access_Except_Test>
    6250:	c4004820 	lsli      	r0, r0, 0
  /* ZeroDiv Exception Test */
  ZeroDiv_Except_Test();
    6254:	e3fffe5a 	bsr      	0x5f08	//5f08 <ZeroDiv_Except_Test>
    6258:	c4004820 	lsli      	r0, r0, 0
  /* @todo Illegal Exception Test */
  Illegal_Except_Test();
    625c:	e3fffe8a 	bsr      	0x5f70	//5f70 <Illegal_Except_Test>
    6260:	c4004820 	lsli      	r0, r0, 0
  /* Privil Exception Test */
  Privil_Except_Test();
    6264:	e3fffeb4 	bsr      	0x5fcc	//5fcc <Privil_Except_Test>
    6268:	c4004820 	lsli      	r0, r0, 0
  /* Unrecover Exception Test */
  Unrecover_Except_Test();
    626c:	e3fffee6 	bsr      	0x6038	//6038 <Unrecover_Except_Test>
    6270:	c4004820 	lsli      	r0, r0, 0
  /* Idly Exception Test */
  Idly_Except_Test();
    6274:	e3ffff18 	bsr      	0x60a4	//60a4 <Idly_Except_Test>
    6278:	c4004820 	lsli      	r0, r0, 0
  /* HW Accel Exception Test */
  HWaccel_Except_Test();
    627c:	e3ffff48 	bsr      	0x610c	//610c <HWaccel_Except_Test>
    6280:	c4004820 	lsli      	r0, r0, 0
  /* TLB Exception Test */
  TLB_Except_Test();
    6284:	e3ffff94 	bsr      	0x61ac	//61ac <TLB_Except_Test>
    6288:	c4004820 	lsli      	r0, r0, 0

  /* trap */
  CK_CPU_TrapTrigger();
    628c:	e00003f2 	bsr      	0x6a70	//6a70 <CK_CPU_TrapTrigger>
    6290:	c4004820 	lsli      	r0, r0, 0

  printf("\nEnd Except Test. . . \n");
    6294:	100f      	lrw      	r0, 0x10568	//10568 <__etext+0x9b8>
    6296:	e000435d 	bsr      	0xe950	//e950 <printf>
    629a:	c4004820 	lsli      	r0, r0, 0
}
    629e:	1490      	pop      	r15
    62a0:	0001054c 	.long	0x0001054c
    62a4:	0000e950 	.long	0x0000e950
    62a8:	00005e2c 	.long	0x00005e2c
    62ac:	00005ea0 	.long	0x00005ea0
    62b0:	00005f08 	.long	0x00005f08
    62b4:	00005f70 	.long	0x00005f70
    62b8:	00005fcc 	.long	0x00005fcc
    62bc:	00006038 	.long	0x00006038
    62c0:	000060a4 	.long	0x000060a4
    62c4:	0000610c 	.long	0x0000610c
    62c8:	000061ac 	.long	0x000061ac
    62cc:	00006a70 	.long	0x00006a70
    62d0:	00010568 	.long	0x00010568

000062d4 <__flush_icache>:

/*
 * Instruction Cache handling functions
 */
static inline void __flush_icache(void)
{
    62d4:	14c1      	push      	r4
  register long __b;

  __asm__ __volatile__ ("movi	%0, 0x11\n\t"
    62d6:	3411      	movi      	r4, 17      	//0x11
    62d8:	c0046431 	mtcr      	r4, cr<17, 0>
                        "mtcr	%0, cr17"
                        : "=r" (__b)); 
}
    62dc:	1481      	pop      	r4
	...

000062e0 <__clear_dcache>:

/*
 * Data Cache handling functions
 */
static inline void __clear_dcache(void)
{
    62e0:	14c1      	push      	r4
  register long __b;

  __asm__ __volatile__ ("movi	%0, 0x22\n\t"
    62e2:	3422      	movi      	r4, 34      	//0x22
    62e4:	c0046431 	mtcr      	r4, cr<17, 0>
                        "mtcr	%0, cr17"
                        : "=r" (__b));
}
    62e8:	1481      	pop      	r4
	...

000062ec <CK_INTC_Init>:
This function initializes irq_desc[NR_IRQS], fast_irq_list[NR_IRQS]
and PR0-PR31.

***************************************************************************/ 
void CK_INTC_Init(void)
{
    62ec:	1421      	subi      	sp, sp, 4
  int i;
  for (i = 0; i < NR_IRQS*2; i++)
    62ee:	6cfb      	mov      	r3, sp
    62f0:	3200      	movi      	r2, 0      	//0x0
    62f2:	b340      	st.w      	r2, (r3, 0x0)
    62f4:	0414      	br      	0x631c	//631c <CK_INTC_Init+0x30>
  {
    irq_desc[i].irqid = 0xffffffff;
    62f6:	1341      	lrw      	r2, 0x134e0	//134e0 <irq_desc>
    62f8:	6cfb      	mov      	r3, sp
    62fa:	9320      	ld.w      	r1, (r3, 0x0)
    62fc:	3300      	movi      	r3, 0      	//0x0
    62fe:	2b00      	subi      	r3, 1      	//0x1
    6300:	d4220903 	str.w      	r3, (r2, r1<<3)
    irq_desc[i].handler = NULL;
    6304:	125d      	lrw      	r2, 0x134e0	//134e0 <irq_desc>
    6306:	6cfb      	mov      	r3, sp
    6308:	9360      	ld.w      	r3, (r3, 0x0)
    630a:	4363      	lsli      	r3, r3, 3
    630c:	5a6c      	addu      	r3, r2, r3
    630e:	3200      	movi      	r2, 0      	//0x0
    6310:	b341      	st.w      	r2, (r3, 0x4)

***************************************************************************/ 
void CK_INTC_Init(void)
{
  int i;
  for (i = 0; i < NR_IRQS*2; i++)
    6312:	6cfb      	mov      	r3, sp
    6314:	6cbb      	mov      	r2, sp
    6316:	9240      	ld.w      	r2, (r2, 0x0)
    6318:	2200      	addi      	r2, 1      	//0x1
    631a:	b340      	st.w      	r2, (r3, 0x0)
    631c:	6cfb      	mov      	r3, sp
    631e:	9360      	ld.w      	r3, (r3, 0x0)
    6320:	eb23003f 	cmplti      	r3, 64      	//0x40
    6324:	0be9      	bt      	0x62f6	//62f6 <CK_INTC_Init+0xa>
    irq_desc[i].irqid = 0xffffffff;
    irq_desc[i].handler = NULL;
  }

  /* initialize PR0-PR31, big endian */
  icrp->PR[0] = 0x00000000;
    6326:	1276      	lrw      	r3, 0x11318	//11318 <icrp>
    6328:	9360      	ld.w      	r3, (r3, 0x0)
    632a:	3200      	movi      	r2, 0      	//0x0
    632c:	b350      	st.w      	r2, (r3, 0x40)
  icrp->PR[1] = 0x00000000;
    632e:	1274      	lrw      	r3, 0x11318	//11318 <icrp>
    6330:	9360      	ld.w      	r3, (r3, 0x0)
    6332:	3200      	movi      	r2, 0      	//0x0
    6334:	b351      	st.w      	r2, (r3, 0x44)
  icrp->PR[2] = 0x08080808;
    6336:	1272      	lrw      	r3, 0x11318	//11318 <icrp>
    6338:	9360      	ld.w      	r3, (r3, 0x0)
    633a:	1252      	lrw      	r2, 0x8080808	//8080808 <__stack+0x7c80810>
    633c:	b352      	st.w      	r2, (r3, 0x48)
  icrp->PR[3] = 0x08080808;
    633e:	1270      	lrw      	r3, 0x11318	//11318 <icrp>
    6340:	9360      	ld.w      	r3, (r3, 0x0)
    6342:	1250      	lrw      	r2, 0x8080808	//8080808 <__stack+0x7c80810>
    6344:	b353      	st.w      	r2, (r3, 0x4c)
  icrp->PR[4] = 0x10101010;
    6346:	126e      	lrw      	r3, 0x11318	//11318 <icrp>
    6348:	9360      	ld.w      	r3, (r3, 0x0)
    634a:	124f      	lrw      	r2, 0x10101010	//10101010 <__stack+0xfd01018>
    634c:	b354      	st.w      	r2, (r3, 0x50)
  icrp->PR[5] = 0x10101010;
    634e:	126c      	lrw      	r3, 0x11318	//11318 <icrp>
    6350:	9360      	ld.w      	r3, (r3, 0x0)
    6352:	124d      	lrw      	r2, 0x10101010	//10101010 <__stack+0xfd01018>
    6354:	b355      	st.w      	r2, (r3, 0x54)
  icrp->PR[6] = 0x18181818;
    6356:	126a      	lrw      	r3, 0x11318	//11318 <icrp>
    6358:	9360      	ld.w      	r3, (r3, 0x0)
    635a:	124c      	lrw      	r2, 0x18181818	//18181818 <__stack+0x17d81820>
    635c:	b356      	st.w      	r2, (r3, 0x58)
  icrp->PR[7] = 0x18181818;
    635e:	1268      	lrw      	r3, 0x11318	//11318 <icrp>
    6360:	9360      	ld.w      	r3, (r3, 0x0)
    6362:	124a      	lrw      	r2, 0x18181818	//18181818 <__stack+0x17d81820>
    6364:	b357      	st.w      	r2, (r3, 0x5c)

  icrp->ICR_ISR |= ICR_AVE;
    6366:	1266      	lrw      	r3, 0x11318	//11318 <icrp>
    6368:	9360      	ld.w      	r3, (r3, 0x0)
    636a:	1245      	lrw      	r2, 0x11318	//11318 <icrp>
    636c:	9240      	ld.w      	r2, (r2, 0x0)
    636e:	9240      	ld.w      	r2, (r2, 0x0)
    6370:	3abf      	bseti      	r2, 31
    6372:	b340      	st.w      	r2, (r3, 0x0)
}
    6374:	1401      	addi      	sp, sp, 4
    6376:	783c      	rts

00006378 <CK_INTC_EnNormalIrq>:

priotity: A priority of normal interrupt which between 0 to 31.

*******************************************************************/
void CK_INTC_EnNormalIrq( IN CK_UINT32 irqid)
{ 
    6378:	14d0      	push      	r15
    637a:	1422      	subi      	sp, sp, 8
    637c:	6cfb      	mov      	r3, sp
    637e:	b300      	st.w      	r0, (r3, 0x0)
  CK_UINT32 psrbk;

  CK_CPU_EnterCritical(&psrbk);
    6380:	1b01      	addi      	r3, sp, 4
    6382:	6c0f      	mov      	r0, r3
    6384:	e0000320 	bsr      	0x69c4	//69c4 <CK_CPU_EnterCritical>
    6388:	c4004820 	lsli      	r0, r0, 0
  icrp->NIER |= (1 << irqid);
    638c:	117c      	lrw      	r3, 0x11318	//11318 <icrp>
    638e:	9360      	ld.w      	r3, (r3, 0x0)
    6390:	115b      	lrw      	r2, 0x11318	//11318 <icrp>
    6392:	9240      	ld.w      	r2, (r2, 0x0)
    6394:	9223      	ld.w      	r1, (r2, 0xc)
    6396:	6cbb      	mov      	r2, sp
    6398:	9240      	ld.w      	r2, (r2, 0x0)
    639a:	3001      	movi      	r0, 1      	//0x1
    639c:	c4404022 	lsl      	r2, r0, r2
    63a0:	6c84      	or      	r2, r1
    63a2:	b343      	st.w      	r2, (r3, 0xc)
  CK_CPU_ExitCritical(psrbk);
    63a4:	1b01      	addi      	r3, sp, 4
    63a6:	9360      	ld.w      	r3, (r3, 0x0)
    63a8:	6c0f      	mov      	r0, r3
    63aa:	e0000319 	bsr      	0x69dc	//69dc <CK_CPU_ExitCritical>
    63ae:	c4004820 	lsli      	r0, r0, 0
}
    63b2:	1402      	addi      	sp, sp, 8
    63b4:	1490      	pop      	r15
	...

000063b8 <CK_INTC_DisNormalIrq>:

priotity: A priority of normal interrupt which between 0 to 31.

**********************************************************************/
void CK_INTC_DisNormalIrq(IN CK_UINT32 irqid)
{  
    63b8:	14d0      	push      	r15
    63ba:	1422      	subi      	sp, sp, 8
    63bc:	6cfb      	mov      	r3, sp
    63be:	b300      	st.w      	r0, (r3, 0x0)
  CK_UINT32 psrbk;

  CK_CPU_EnterCritical(&psrbk);
    63c0:	1b01      	addi      	r3, sp, 4
    63c2:	6c0f      	mov      	r0, r3
    63c4:	e0000300 	bsr      	0x69c4	//69c4 <CK_CPU_EnterCritical>
    63c8:	c4004820 	lsli      	r0, r0, 0
  icrp->NIER &= ~(1 << irqid);
    63cc:	116c      	lrw      	r3, 0x11318	//11318 <icrp>
    63ce:	9360      	ld.w      	r3, (r3, 0x0)
    63d0:	114b      	lrw      	r2, 0x11318	//11318 <icrp>
    63d2:	9240      	ld.w      	r2, (r2, 0x0)
    63d4:	9223      	ld.w      	r1, (r2, 0xc)
    63d6:	6cbb      	mov      	r2, sp
    63d8:	9240      	ld.w      	r2, (r2, 0x0)
    63da:	3001      	movi      	r0, 1      	//0x1
    63dc:	c4404022 	lsl      	r2, r0, r2
    63e0:	6c8a      	nor      	r2, r2
    63e2:	6884      	and      	r2, r1
    63e4:	b343      	st.w      	r2, (r3, 0xc)
  CK_CPU_ExitCritical(psrbk);
    63e6:	1b01      	addi      	r3, sp, 4
    63e8:	9360      	ld.w      	r3, (r3, 0x0)
    63ea:	6c0f      	mov      	r0, r3
    63ec:	e00002f8 	bsr      	0x69dc	//69dc <CK_CPU_ExitCritical>
    63f0:	c4004820 	lsli      	r0, r0, 0
}
    63f4:	1402      	addi      	sp, sp, 8
    63f6:	1490      	pop      	r15

000063f8 <CK_INTC_EnFastIrq>:

priotity: A priority of fast interrupt which between 0 to 31.

***********************************************************************/
void CK_INTC_EnFastIrq(IN CK_UINT32 irqid)
{
    63f8:	14d0      	push      	r15
    63fa:	1422      	subi      	sp, sp, 8
    63fc:	6cfb      	mov      	r3, sp
    63fe:	b300      	st.w      	r0, (r3, 0x0)
  CK_UINT32 psrbk;

  CK_CPU_EnterCritical(&psrbk);
    6400:	1b01      	addi      	r3, sp, 4
    6402:	6c0f      	mov      	r0, r3
    6404:	e00002e0 	bsr      	0x69c4	//69c4 <CK_CPU_EnterCritical>
    6408:	c4004820 	lsli      	r0, r0, 0
  icrp->FIER |= (1 << irqid);
    640c:	107c      	lrw      	r3, 0x11318	//11318 <icrp>
    640e:	9360      	ld.w      	r3, (r3, 0x0)
    6410:	105b      	lrw      	r2, 0x11318	//11318 <icrp>
    6412:	9240      	ld.w      	r2, (r2, 0x0)
    6414:	9225      	ld.w      	r1, (r2, 0x14)
    6416:	6cbb      	mov      	r2, sp
    6418:	9240      	ld.w      	r2, (r2, 0x0)
    641a:	3001      	movi      	r0, 1      	//0x1
    641c:	c4404022 	lsl      	r2, r0, r2
    6420:	6c84      	or      	r2, r1
    6422:	b345      	st.w      	r2, (r3, 0x14)
  CK_CPU_ExitCritical(psrbk);
    6424:	1b01      	addi      	r3, sp, 4
    6426:	9360      	ld.w      	r3, (r3, 0x0)
    6428:	6c0f      	mov      	r0, r3
    642a:	e00002d9 	bsr      	0x69dc	//69dc <CK_CPU_ExitCritical>
    642e:	c4004820 	lsli      	r0, r0, 0
}
    6432:	1402      	addi      	sp, sp, 8
    6434:	1490      	pop      	r15
	...

00006438 <CK_INTC_DisFastIrq>:

priotity: A priority of fast interrupt which between 0 to 31.

**************************************************************************/
void CK_INTC_DisFastIrq(IN CK_UINT32 irqid)
{
    6438:	14d0      	push      	r15
    643a:	1422      	subi      	sp, sp, 8
    643c:	6cfb      	mov      	r3, sp
    643e:	b300      	st.w      	r0, (r3, 0x0)
  CK_UINT32 psrbk;

  CK_CPU_EnterCritical(&psrbk);
    6440:	1b01      	addi      	r3, sp, 4
    6442:	6c0f      	mov      	r0, r3
    6444:	e00002c0 	bsr      	0x69c4	//69c4 <CK_CPU_EnterCritical>
    6448:	c4004820 	lsli      	r0, r0, 0
  icrp->FIER &= ~(1 << irqid);
    644c:	106c      	lrw      	r3, 0x11318	//11318 <icrp>
    644e:	9360      	ld.w      	r3, (r3, 0x0)
    6450:	104b      	lrw      	r2, 0x11318	//11318 <icrp>
    6452:	9240      	ld.w      	r2, (r2, 0x0)
    6454:	9225      	ld.w      	r1, (r2, 0x14)
    6456:	6cbb      	mov      	r2, sp
    6458:	9240      	ld.w      	r2, (r2, 0x0)
    645a:	3001      	movi      	r0, 1      	//0x1
    645c:	c4404022 	lsl      	r2, r0, r2
    6460:	6c8a      	nor      	r2, r2
    6462:	6884      	and      	r2, r1
    6464:	b345      	st.w      	r2, (r3, 0x14)
  CK_CPU_ExitCritical(psrbk);
    6466:	1b01      	addi      	r3, sp, 4
    6468:	9360      	ld.w      	r3, (r3, 0x0)
    646a:	6c0f      	mov      	r0, r3
    646c:	e00002b8 	bsr      	0x69dc	//69dc <CK_CPU_ExitCritical>
    6470:	c4004820 	lsli      	r0, r0, 0
}
    6474:	1402      	addi      	sp, sp, 8
    6476:	1490      	pop      	r15
    6478:	000134e0 	.long	0x000134e0
    647c:	00011318 	.long	0x00011318
    6480:	08080808 	.long	0x08080808
    6484:	10101010 	.long	0x10101010
    6488:	18181818 	.long	0x18181818
    648c:	000069c4 	.long	0x000069c4
    6490:	000069dc 	.long	0x000069dc

00006494 <CK_INTC_MaskNormalIrq>:
primask: The priority level that would be masked, leading to mask those 
         priority levels below primask.

****************************************************************************/
void CK_INTC_MaskNormalIrq(IN CK_UINT32 primask)
{
    6494:	14d0      	push      	r15
    6496:	1423      	subi      	sp, sp, 12
    6498:	6cfb      	mov      	r3, sp
    649a:	b300      	st.w      	r0, (r3, 0x0)
  IN CK_UINT32 temp_icr;
  CK_UINT32 psrbk;

  temp_icr = icrp->ICR_ISR;
    649c:	ea830095 	lrw      	r3, 0x11318	//11318 <icrp>
    64a0:	9340      	ld.w      	r2, (r3, 0x0)
    64a2:	1b02      	addi      	r3, sp, 8
    64a4:	9240      	ld.w      	r2, (r2, 0x0)
    64a6:	b340      	st.w      	r2, (r3, 0x0)

  /*
   * This function will be implemented When fast interrupt masking is disabled,
   * or return at once.
   */
  if((temp_icr &= 0x10000000) == 0x10000000)
    64a8:	1a02      	addi      	r2, sp, 8
    64aa:	1b02      	addi      	r3, sp, 8
    64ac:	9320      	ld.w      	r1, (r3, 0x0)
    64ae:	3380      	movi      	r3, 128      	//0x80
    64b0:	4375      	lsli      	r3, r3, 21
    64b2:	68c4      	and      	r3, r1
    64b4:	b260      	st.w      	r3, (r2, 0x0)
    64b6:	1b02      	addi      	r3, sp, 8
    64b8:	9340      	ld.w      	r2, (r3, 0x0)
    64ba:	3380      	movi      	r3, 128      	//0x80
    64bc:	4375      	lsli      	r3, r3, 21
    64be:	64ca      	cmpne      	r2, r3
    64c0:	0c31      	bf      	0x6522	//6522 <CK_INTC_MaskNormalIrq+0x8e>
    return;
  }

  else
  {
    CK_CPU_EnterCritical(&psrbk);
    64c2:	1b01      	addi      	r3, sp, 4
    64c4:	6c0f      	mov      	r0, r3
    64c6:	e000027f 	bsr      	0x69c4	//69c4 <CK_CPU_EnterCritical>
    64ca:	c4004820 	lsli      	r0, r0, 0
    icrp->ICR_ISR &= 0xffe0ffff;
    64ce:	ea830089 	lrw      	r3, 0x11318	//11318 <icrp>
    64d2:	9360      	ld.w      	r3, (r3, 0x0)
    64d4:	ea820087 	lrw      	r2, 0x11318	//11318 <icrp>
    64d8:	9240      	ld.w      	r2, (r2, 0x0)
    64da:	9220      	ld.w      	r1, (r2, 0x0)
    64dc:	c7405022 	bmaski      	r2, 27      	//0x1b
    64e0:	c6a24902 	rotli      	r2, r2, 21
    64e4:	6884      	and      	r2, r1
    64e6:	b340      	st.w      	r2, (r3, 0x0)
    icrp->ICR_ISR |= ((primask & 0x0000001f) << 16);
    64e8:	ea830082 	lrw      	r3, 0x11318	//11318 <icrp>
    64ec:	9360      	ld.w      	r3, (r3, 0x0)
    64ee:	ea820081 	lrw      	r2, 0x11318	//11318 <icrp>
    64f2:	9240      	ld.w      	r2, (r2, 0x0)
    64f4:	9220      	ld.w      	r1, (r2, 0x0)
    64f6:	6cbb      	mov      	r2, sp
    64f8:	9240      	ld.w      	r2, (r2, 0x0)
    64fa:	e442201f 	andi      	r2, r2, 31
    64fe:	4250      	lsli      	r2, r2, 16
    6500:	6c84      	or      	r2, r1
    6502:	b340      	st.w      	r2, (r3, 0x0)
    icrp->ICR_ISR |= ICR_ME;
    6504:	137b      	lrw      	r3, 0x11318	//11318 <icrp>
    6506:	9360      	ld.w      	r3, (r3, 0x0)
    6508:	135a      	lrw      	r2, 0x11318	//11318 <icrp>
    650a:	9240      	ld.w      	r2, (r2, 0x0)
    650c:	9240      	ld.w      	r2, (r2, 0x0)
    650e:	3abd      	bseti      	r2, 29
    6510:	b340      	st.w      	r2, (r3, 0x0)
    CK_CPU_ExitCritical(psrbk);
    6512:	1b01      	addi      	r3, sp, 4
    6514:	9360      	ld.w      	r3, (r3, 0x0)
    6516:	6c0f      	mov      	r0, r3
    6518:	e0000262 	bsr      	0x69dc	//69dc <CK_CPU_ExitCritical>
    651c:	c4004820 	lsli      	r0, r0, 0
    6520:	0402      	br      	0x6524	//6524 <CK_INTC_MaskNormalIrq+0x90>
   * This function will be implemented When fast interrupt masking is disabled,
   * or return at once.
   */
  if((temp_icr &= 0x10000000) == 0x10000000)
  {
    return;
    6522:	6c00      	or      	r0, r0
    icrp->ICR_ISR &= 0xffe0ffff;
    icrp->ICR_ISR |= ((primask & 0x0000001f) << 16);
    icrp->ICR_ISR |= ICR_ME;
    CK_CPU_ExitCritical(psrbk);
  }
}
    6524:	1403      	addi      	sp, sp, 12
    6526:	1490      	pop      	r15

00006528 <CK_INTC_UnMaskNormalIrq>:

primask: The priority level that would be unmasked.

*********************************************************************/
void CK_INTC_UnMaskNormalIrq(void)
{
    6528:	14d0      	push      	r15
    652a:	1421      	subi      	sp, sp, 4
  CK_UINT32 psrbk;

  CK_CPU_EnterCritical(&psrbk);
    652c:	6cfb      	mov      	r3, sp
    652e:	6c0f      	mov      	r0, r3
    6530:	e000024a 	bsr      	0x69c4	//69c4 <CK_CPU_EnterCritical>
    6534:	c4004820 	lsli      	r0, r0, 0
  icrp->ICR_ISR &= ~ICR_ME;
    6538:	136e      	lrw      	r3, 0x11318	//11318 <icrp>
    653a:	9360      	ld.w      	r3, (r3, 0x0)
    653c:	134d      	lrw      	r2, 0x11318	//11318 <icrp>
    653e:	9240      	ld.w      	r2, (r2, 0x0)
    6540:	9240      	ld.w      	r2, (r2, 0x0)
    6542:	3a9d      	bclri      	r2, 29
    6544:	b340      	st.w      	r2, (r3, 0x0)
  CK_CPU_ExitCritical(psrbk);
    6546:	6cfb      	mov      	r3, sp
    6548:	9360      	ld.w      	r3, (r3, 0x0)
    654a:	6c0f      	mov      	r0, r3
    654c:	e0000248 	bsr      	0x69dc	//69dc <CK_CPU_ExitCritical>
    6550:	c4004820 	lsli      	r0, r0, 0
}
    6554:	1401      	addi      	sp, sp, 4
    6556:	1490      	pop      	r15

00006558 <CK_INTC_MaskFastIrq>:
primask: The priority level that would be masked, leading to mask those 
         priority levels below primask.

**********************************************************************/
void CK_INTC_MaskFastIrq(IN CK_UINT32 primask)
{
    6558:	14d0      	push      	r15
    655a:	1422      	subi      	sp, sp, 8
    655c:	6cfb      	mov      	r3, sp
    655e:	b300      	st.w      	r0, (r3, 0x0)
  CK_UINT32 psrbk;

  CK_CPU_EnterCritical(&psrbk);
    6560:	1b01      	addi      	r3, sp, 4
    6562:	6c0f      	mov      	r0, r3
    6564:	e0000230 	bsr      	0x69c4	//69c4 <CK_CPU_EnterCritical>
    6568:	c4004820 	lsli      	r0, r0, 0
  icrp->ICR_ISR &= 0xffe0ffff;
    656c:	1361      	lrw      	r3, 0x11318	//11318 <icrp>
    656e:	9360      	ld.w      	r3, (r3, 0x0)
    6570:	1340      	lrw      	r2, 0x11318	//11318 <icrp>
    6572:	9240      	ld.w      	r2, (r2, 0x0)
    6574:	9220      	ld.w      	r1, (r2, 0x0)
    6576:	c7405022 	bmaski      	r2, 27      	//0x1b
    657a:	c6a24902 	rotli      	r2, r2, 21
    657e:	6884      	and      	r2, r1
    6580:	b340      	st.w      	r2, (r3, 0x0)
  icrp->ICR_ISR |= ((primask & 0x0000001f) << 16);
    6582:	127c      	lrw      	r3, 0x11318	//11318 <icrp>
    6584:	9360      	ld.w      	r3, (r3, 0x0)
    6586:	125b      	lrw      	r2, 0x11318	//11318 <icrp>
    6588:	9240      	ld.w      	r2, (r2, 0x0)
    658a:	9220      	ld.w      	r1, (r2, 0x0)
    658c:	6cbb      	mov      	r2, sp
    658e:	9240      	ld.w      	r2, (r2, 0x0)
    6590:	e442201f 	andi      	r2, r2, 31
    6594:	4250      	lsli      	r2, r2, 16
    6596:	6c84      	or      	r2, r1
    6598:	b340      	st.w      	r2, (r3, 0x0)
  icrp->ICR_ISR |= ICR_MFI;
    659a:	1276      	lrw      	r3, 0x11318	//11318 <icrp>
    659c:	9360      	ld.w      	r3, (r3, 0x0)
    659e:	1255      	lrw      	r2, 0x11318	//11318 <icrp>
    65a0:	9240      	ld.w      	r2, (r2, 0x0)
    65a2:	9240      	ld.w      	r2, (r2, 0x0)
    65a4:	3abc      	bseti      	r2, 28
    65a6:	b340      	st.w      	r2, (r3, 0x0)
  icrp->ICR_ISR |= ICR_ME;
    65a8:	1272      	lrw      	r3, 0x11318	//11318 <icrp>
    65aa:	9360      	ld.w      	r3, (r3, 0x0)
    65ac:	1251      	lrw      	r2, 0x11318	//11318 <icrp>
    65ae:	9240      	ld.w      	r2, (r2, 0x0)
    65b0:	9240      	ld.w      	r2, (r2, 0x0)
    65b2:	3abd      	bseti      	r2, 29
    65b4:	b340      	st.w      	r2, (r3, 0x0)
  CK_CPU_ExitCritical(psrbk);
    65b6:	1b01      	addi      	r3, sp, 4
    65b8:	9360      	ld.w      	r3, (r3, 0x0)
    65ba:	6c0f      	mov      	r0, r3
    65bc:	e0000210 	bsr      	0x69dc	//69dc <CK_CPU_ExitCritical>
    65c0:	c4004820 	lsli      	r0, r0, 0
}
    65c4:	1402      	addi      	sp, sp, 8
    65c6:	1490      	pop      	r15

000065c8 <CK_INTC_UnMaskFastIrq>:

primask: The priority level that would be unmasked.

***********************************************************************/
void CK_INTC_UnMaskFastIrq(void)
{
    65c8:	14d0      	push      	r15
    65ca:	1421      	subi      	sp, sp, 4
  CK_UINT32 psrbk;

  CK_CPU_EnterCritical(&psrbk);
    65cc:	6cfb      	mov      	r3, sp
    65ce:	6c0f      	mov      	r0, r3
    65d0:	e00001fa 	bsr      	0x69c4	//69c4 <CK_CPU_EnterCritical>
    65d4:	c4004820 	lsli      	r0, r0, 0
  icrp->ICR_ISR &= ~ICR_MFI;
    65d8:	1266      	lrw      	r3, 0x11318	//11318 <icrp>
    65da:	9360      	ld.w      	r3, (r3, 0x0)
    65dc:	1245      	lrw      	r2, 0x11318	//11318 <icrp>
    65de:	9240      	ld.w      	r2, (r2, 0x0)
    65e0:	9240      	ld.w      	r2, (r2, 0x0)
    65e2:	3a9c      	bclri      	r2, 28
    65e4:	b340      	st.w      	r2, (r3, 0x0)
  CK_CPU_ExitCritical(psrbk);
    65e6:	6cfb      	mov      	r3, sp
    65e8:	9360      	ld.w      	r3, (r3, 0x0)
    65ea:	6c0f      	mov      	r0, r3
    65ec:	e00001f8 	bsr      	0x69dc	//69dc <CK_CPU_ExitCritical>
    65f0:	c4004820 	lsli      	r0, r0, 0
}
    65f4:	1401      	addi      	sp, sp, 4
    65f6:	1490      	pop      	r15

000065f8 <CK_INTC_RequestIrq>:
RETURN VALUE: execute result
    FAILURE: invalid irqid or have been registed
    SUCCESS: registed
********************************************************************/
CK_INT32 CK_INTC_RequestIrq(INOUT CK_UINT32 irqid, IrqHandler pirqhandler)
{
    65f8:	14d0      	push      	r15
    65fa:	1426      	subi      	sp, sp, 24
    65fc:	1b01      	addi      	r3, sp, 4
    65fe:	b300      	st.w      	r0, (r3, 0x0)
    6600:	6cfb      	mov      	r3, sp
    6602:	b320      	st.w      	r1, (r3, 0x0)
  PCKStruct_IRQHandler phandler;

  /* Judge the validity of irqid and pirqhandler */
  if((irqid < 0) || (irqid > 63) ||
    6604:	1b01      	addi      	r3, sp, 4
    6606:	9360      	ld.w      	r3, (r3, 0x0)
    6608:	eb03003f 	cmphsi      	r3, 64      	//0x40
    660c:	0805      	bt      	0x6616	//6616 <CK_INTC_RequestIrq+0x1e>
    660e:	6cfb      	mov      	r3, sp
    6610:	9360      	ld.w      	r3, (r3, 0x0)
    6612:	e9230005 	bnez      	r3, 0x661c	//661c <CK_INTC_RequestIrq+0x24>
     (NULL == pirqhandler))
  {
    return FAILURE;
    6616:	3300      	movi      	r3, 0      	//0x0
    6618:	2b00      	subi      	r3, 1      	//0x1
    661a:	047c      	br      	0x6712	//6712 <CK_INTC_RequestIrq+0x11a>
  }
  /* If the list of this irqid is empty */
  phandler = &irq_desc[irqid];
    661c:	1b01      	addi      	r3, sp, 4
    661e:	9360      	ld.w      	r3, (r3, 0x0)
    6620:	4323      	lsli      	r1, r3, 3
    6622:	1b05      	addi      	r3, sp, 20
    6624:	1156      	lrw      	r2, 0x134e0	//134e0 <irq_desc>
    6626:	5948      	addu      	r2, r1, r2
    6628:	b340      	st.w      	r2, (r3, 0x0)
  if(phandler -> handler != NULL){
    662a:	1b05      	addi      	r3, sp, 20
    662c:	9360      	ld.w      	r3, (r3, 0x0)
    662e:	9361      	ld.w      	r3, (r3, 0x4)
    6630:	e9030005 	bez      	r3, 0x663a	//663a <CK_INTC_RequestIrq+0x42>
    return FAILURE;
    6634:	3300      	movi      	r3, 0      	//0x0
    6636:	2b00      	subi      	r3, 1      	//0x1
    6638:	046d      	br      	0x6712	//6712 <CK_INTC_RequestIrq+0x11a>
  }
  phandler -> handler = pirqhandler;
    663a:	1b05      	addi      	r3, sp, 20
    663c:	9360      	ld.w      	r3, (r3, 0x0)
    663e:	6cbb      	mov      	r2, sp
    6640:	9240      	ld.w      	r2, (r2, 0x0)
    6642:	b341      	st.w      	r2, (r3, 0x4)
  phandler -> irqid = irqid;
    6644:	1b05      	addi      	r3, sp, 20
    6646:	9360      	ld.w      	r3, (r3, 0x0)
    6648:	1a01      	addi      	r2, sp, 4
    664a:	9240      	ld.w      	r2, (r2, 0x0)
    664c:	b340      	st.w      	r2, (r3, 0x0)
  /* If is normal interrupt */
  if(irqid < 32)
    664e:	1b01      	addi      	r3, sp, 4
    6650:	9360      	ld.w      	r3, (r3, 0x0)
    6652:	3b1f      	cmphsi      	r3, 32      	//0x20
    6654:	0858      	bt      	0x6704	//6704 <CK_INTC_RequestIrq+0x10c>
    /* Setting Priority */
    CK_UINT32 pr_index;
    CK_UINT32 shift;
    CK_UINT32 psrbk;

    pr_index = (irqid) / 4;
    6656:	1b04      	addi      	r3, sp, 16
    6658:	1a01      	addi      	r2, sp, 4
    665a:	9240      	ld.w      	r2, (r2, 0x0)
    665c:	4a42      	lsri      	r2, r2, 2
    665e:	b340      	st.w      	r2, (r3, 0x0)
    shift = (3-(irqid) % 4) * 8;
    6660:	1b01      	addi      	r3, sp, 4
    6662:	9360      	ld.w      	r3, (r3, 0x0)
    6664:	6cce      	nor      	r3, r3
    6666:	e4432003 	andi      	r2, r3, 3
    666a:	1b03      	addi      	r3, sp, 12
    666c:	4243      	lsli      	r2, r2, 3
    666e:	b340      	st.w      	r2, (r3, 0x0)
    CK_CPU_EnterCritical(&psrbk);
    6670:	1b02      	addi      	r3, sp, 8
    6672:	6c0f      	mov      	r0, r3
    6674:	e00001a8 	bsr      	0x69c4	//69c4 <CK_CPU_EnterCritical>
    6678:	c4004820 	lsli      	r0, r0, 0
    icrp->PR[pr_index] &= ~(0x000000ff << shift);
    667c:	107d      	lrw      	r3, 0x11318	//11318 <icrp>
    667e:	9360      	ld.w      	r3, (r3, 0x0)
    6680:	105c      	lrw      	r2, 0x11318	//11318 <icrp>
    6682:	9240      	ld.w      	r2, (r2, 0x0)
    6684:	1904      	addi      	r1, sp, 16
    6686:	9120      	ld.w      	r1, (r1, 0x0)
    6688:	210f      	addi      	r1, 16      	//0x10
    668a:	d0220881 	ldr.w      	r1, (r2, r1<<2)
    668e:	1a03      	addi      	r2, sp, 12
    6690:	9240      	ld.w      	r2, (r2, 0x0)
    6692:	30ff      	movi      	r0, 255      	//0xff
    6694:	c4404022 	lsl      	r2, r0, r2
    6698:	6c8a      	nor      	r2, r2
    669a:	6848      	and      	r1, r2
    669c:	1a04      	addi      	r2, sp, 16
    669e:	9240      	ld.w      	r2, (r2, 0x0)
    66a0:	220f      	addi      	r2, 16      	//0x10
    66a2:	d4430881 	str.w      	r1, (r3, r2<<2)
    icrp->PR[pr_index] |= ((irqid&(~0x7)) << shift);
    66a6:	1073      	lrw      	r3, 0x11318	//11318 <icrp>
    66a8:	9360      	ld.w      	r3, (r3, 0x0)
    66aa:	1052      	lrw      	r2, 0x11318	//11318 <icrp>
    66ac:	9240      	ld.w      	r2, (r2, 0x0)
    66ae:	1904      	addi      	r1, sp, 16
    66b0:	9120      	ld.w      	r1, (r1, 0x0)
    66b2:	210f      	addi      	r1, 16      	//0x10
    66b4:	d0220881 	ldr.w      	r1, (r2, r1<<2)
    66b8:	1a01      	addi      	r2, sp, 4
    66ba:	9240      	ld.w      	r2, (r2, 0x0)
    66bc:	e4023007 	andni      	r0, r2, 7
    66c0:	1a03      	addi      	r2, sp, 12
    66c2:	9240      	ld.w      	r2, (r2, 0x0)
    66c4:	c4404022 	lsl      	r2, r0, r2
    66c8:	6c48      	or      	r1, r2
    66ca:	1a04      	addi      	r2, sp, 16
    66cc:	9240      	ld.w      	r2, (r2, 0x0)
    66ce:	220f      	addi      	r2, 16      	//0x10
    66d0:	d4430881 	str.w      	r1, (r3, r2<<2)
    CK_CPU_ExitCritical(psrbk);
    66d4:	1b02      	addi      	r3, sp, 8
    66d6:	9360      	ld.w      	r3, (r3, 0x0)
    66d8:	6c0f      	mov      	r0, r3
    66da:	e0000181 	bsr      	0x69dc	//69dc <CK_CPU_ExitCritical>
    66de:	c4004820 	lsli      	r0, r0, 0
    CK_INTC_EnNormalIrq(irqid);
    66e2:	1b01      	addi      	r3, sp, 4
    66e4:	9300      	ld.w      	r0, (r3, 0x0)
    66e6:	e3fffe49 	bsr      	0x6378	//6378 <CK_INTC_EnNormalIrq>
    66ea:	c4004820 	lsli      	r0, r0, 0
    66ee:	0411      	br      	0x6710	//6710 <CK_INTC_RequestIrq+0x118>
    66f0:	00011318 	.long	0x00011318
    66f4:	000069c4 	.long	0x000069c4
    66f8:	000069dc 	.long	0x000069dc
    66fc:	000134e0 	.long	0x000134e0
    6700:	00006378 	.long	0x00006378
  }
  /* If is fast interrupt */
  else
  {
     CK_INTC_EnFastIrq(irqid);
    6704:	1b01      	addi      	r3, sp, 4
    6706:	9300      	ld.w      	r0, (r3, 0x0)
    6708:	e3fffe78 	bsr      	0x63f8	//63f8 <CK_INTC_EnFastIrq>
    670c:	c4004820 	lsli      	r0, r0, 0
  }
  return SUCCESS;
    6710:	3300      	movi      	r3, 0      	//0x0
}
    6712:	6c0f      	mov      	r0, r3
    6714:	1406      	addi      	sp, sp, 24
    6716:	1490      	pop      	r15

00006718 <CK_INTC_FreeIrq>:
RETURN VALUE: execute result
    FAILURE: invalid irqid or not be registed
    SUCCESS: released(can be reused)
**************************************************************************/
CK_INT32 CK_INTC_FreeIrq(INOUT CK_UINT32 irqid)
{
    6718:	14d0      	push      	r15
    671a:	1422      	subi      	sp, sp, 8
    671c:	6cfb      	mov      	r3, sp
    671e:	b300      	st.w      	r0, (r3, 0x0)
  PCKStruct_IRQHandler phandler;

  /* Judge the validity of irqid */
  if((irqid < 0) || (irqid > 63))
    6720:	6cfb      	mov      	r3, sp
    6722:	9340      	ld.w      	r2, (r3, 0x0)
    6724:	333f      	movi      	r3, 63      	//0x3f
    6726:	648c      	cmphs      	r3, r2
    6728:	0804      	bt      	0x6730	//6730 <CK_INTC_FreeIrq+0x18>
  {
    return FAILURE;
    672a:	3300      	movi      	r3, 0      	//0x0
    672c:	2b00      	subi      	r3, 1      	//0x1
    672e:	042b      	br      	0x6784	//6784 <CK_INTC_FreeIrq+0x6c>
  }
  /* Judge has registered */
  phandler = &irq_desc[irqid];
    6730:	6cfb      	mov      	r3, sp
    6732:	9360      	ld.w      	r3, (r3, 0x0)
    6734:	4323      	lsli      	r1, r3, 3
    6736:	1b01      	addi      	r3, sp, 4
    6738:	1256      	lrw      	r2, 0x134e0	//134e0 <irq_desc>
    673a:	5948      	addu      	r2, r1, r2
    673c:	b340      	st.w      	r2, (r3, 0x0)
  if(phandler -> handler == NULL){
    673e:	1b01      	addi      	r3, sp, 4
    6740:	9360      	ld.w      	r3, (r3, 0x0)
    6742:	9361      	ld.w      	r3, (r3, 0x4)
    6744:	e9230005 	bnez      	r3, 0x674e	//674e <CK_INTC_FreeIrq+0x36>
    return FAILURE;
    6748:	3300      	movi      	r3, 0      	//0x0
    674a:	2b00      	subi      	r3, 1      	//0x1
    674c:	041c      	br      	0x6784	//6784 <CK_INTC_FreeIrq+0x6c>
  }
  /* Invalidate handler */
  phandler -> handler = NULL;
    674e:	1b01      	addi      	r3, sp, 4
    6750:	9360      	ld.w      	r3, (r3, 0x0)
    6752:	3200      	movi      	r2, 0      	//0x0
    6754:	b341      	st.w      	r2, (r3, 0x4)
  phandler -> irqid = 0xFFFFFFFF;
    6756:	1b01      	addi      	r3, sp, 4
    6758:	9340      	ld.w      	r2, (r3, 0x0)
    675a:	3300      	movi      	r3, 0      	//0x0
    675c:	2b00      	subi      	r3, 1      	//0x1
    675e:	b260      	st.w      	r3, (r2, 0x0)
  if(irqid < 32)
    6760:	6cfb      	mov      	r3, sp
    6762:	9360      	ld.w      	r3, (r3, 0x0)
    6764:	3b1f      	cmphsi      	r3, 32      	//0x20
    6766:	0808      	bt      	0x6776	//6776 <CK_INTC_FreeIrq+0x5e>
  {
    CK_INTC_DisNormalIrq(irqid);
    6768:	6cfb      	mov      	r3, sp
    676a:	9300      	ld.w      	r0, (r3, 0x0)
    676c:	e3fffe26 	bsr      	0x63b8	//63b8 <CK_INTC_DisNormalIrq>
    6770:	c4004820 	lsli      	r0, r0, 0
    6774:	0407      	br      	0x6782	//6782 <CK_INTC_FreeIrq+0x6a>
  }
  else
  {
    CK_INTC_DisFastIrq(irqid);
    6776:	6cfb      	mov      	r3, sp
    6778:	9300      	ld.w      	r0, (r3, 0x0)
    677a:	e3fffe5f 	bsr      	0x6438	//6438 <CK_INTC_DisFastIrq>
    677e:	c4004820 	lsli      	r0, r0, 0
  }

  return SUCCESS;
    6782:	3300      	movi      	r3, 0      	//0x0
 }
    6784:	6c0f      	mov      	r0, r3
    6786:	1402      	addi      	sp, sp, 8
    6788:	1490      	pop      	r15
	...

0000678c <CK_Exception_Init>:
RETURN VALUE: None

*********************************************************/

void CK_Exception_Init (void)
{
    678c:	14d0      	push      	r15
    678e:	1421      	subi      	sp, sp, 4
  int i;

  /* migrate from silan-ivs2 (liucy) */
  // set all exception vector table as hw_vsr_default
  for (i = 1; i < CKCORE_VECTOR_SYS; i++)
    6790:	6cfb      	mov      	r3, sp
    6792:	3201      	movi      	r2, 1      	//0x1
    6794:	b340      	st.w      	r2, (r3, 0x0)
    6796:	040c      	br      	0x67ae	//67ae <CK_Exception_Init+0x22>
  {
      ckcpu_vsr_table[i] = (CK_UINT32) hw_vsr_default;
    6798:	1221      	lrw      	r1, 0x408	//408 <hw_vsr_default>
    679a:	1262      	lrw      	r3, 0x0	// from address pool at 0x68a0
    679c:	6cbb      	mov      	r2, sp
    679e:	9240      	ld.w      	r2, (r2, 0x0)
    67a0:	d4430881 	str.w      	r1, (r3, r2<<2)
{
  int i;

  /* migrate from silan-ivs2 (liucy) */
  // set all exception vector table as hw_vsr_default
  for (i = 1; i < CKCORE_VECTOR_SYS; i++)
    67a4:	6cfb      	mov      	r3, sp
    67a6:	6cbb      	mov      	r2, sp
    67a8:	9240      	ld.w      	r2, (r2, 0x0)
    67aa:	2200      	addi      	r2, 1      	//0x1
    67ac:	b340      	st.w      	r2, (r3, 0x0)
    67ae:	6cfb      	mov      	r3, sp
    67b0:	9360      	ld.w      	r3, (r3, 0x0)
    67b2:	3b3f      	cmplti      	r3, 32      	//0x20
    67b4:	0bf2      	bt      	0x6798	//6798 <CK_Exception_Init+0xc>
  {
      ckcpu_vsr_table[i] = (CK_UINT32) hw_vsr_default;
  }
  // set interrupt vector table
  for(; (i < 64); i++)
    67b6:	040c      	br      	0x67ce	//67ce <CK_Exception_Init+0x42>
  {
      ckcpu_vsr_table[i] = (CK_UINT32) hw_vsr_inthandler;
    67b8:	113b      	lrw      	r1, 0x5a0	//5a0 <hw_vsr_inthandler>
    67ba:	117a      	lrw      	r3, 0x0	// from address pool at 0x68a0
    67bc:	6cbb      	mov      	r2, sp
    67be:	9240      	ld.w      	r2, (r2, 0x0)
    67c0:	d4430881 	str.w      	r1, (r3, r2<<2)
  for (i = 1; i < CKCORE_VECTOR_SYS; i++)
  {
      ckcpu_vsr_table[i] = (CK_UINT32) hw_vsr_default;
  }
  // set interrupt vector table
  for(; (i < 64); i++)
    67c4:	6cfb      	mov      	r3, sp
    67c6:	6cbb      	mov      	r2, sp
    67c8:	9240      	ld.w      	r2, (r2, 0x0)
    67ca:	2200      	addi      	r2, 1      	//0x1
    67cc:	b340      	st.w      	r2, (r3, 0x0)
    67ce:	6cfb      	mov      	r3, sp
    67d0:	9360      	ld.w      	r3, (r3, 0x0)
    67d2:	eb23003f 	cmplti      	r3, 64      	//0x40
    67d6:	0bf1      	bt      	0x67b8	//67b8 <CK_Exception_Init+0x2c>
  {
      ckcpu_vsr_table[i] = (CK_UINT32) hw_vsr_inthandler;
  }
  // set fast interrupt vector table
  for(; (i < 96); i++)
    67d8:	040c      	br      	0x67f0	//67f0 <CK_Exception_Init+0x64>
  {
      ckcpu_vsr_table[i] = (CK_UINT32) hw_vsr_fiqhandler;
    67da:	1134      	lrw      	r1, 0x614	//614 <hw_vsr_fiqhandler>
    67dc:	1171      	lrw      	r3, 0x0	// from address pool at 0x68a0
    67de:	6cbb      	mov      	r2, sp
    67e0:	9240      	ld.w      	r2, (r2, 0x0)
    67e2:	d4430881 	str.w      	r1, (r3, r2<<2)
  for(; (i < 64); i++)
  {
      ckcpu_vsr_table[i] = (CK_UINT32) hw_vsr_inthandler;
  }
  // set fast interrupt vector table
  for(; (i < 96); i++)
    67e6:	6cfb      	mov      	r3, sp
    67e8:	6cbb      	mov      	r2, sp
    67ea:	9240      	ld.w      	r2, (r2, 0x0)
    67ec:	2200      	addi      	r2, 1      	//0x1
    67ee:	b340      	st.w      	r2, (r3, 0x0)
    67f0:	6cfb      	mov      	r3, sp
    67f2:	9360      	ld.w      	r3, (r3, 0x0)
    67f4:	eb23005f 	cmplti      	r3, 96      	//0x60
    67f8:	0bf1      	bt      	0x67da	//67da <CK_Exception_Init+0x4e>
  {
      ckcpu_vsr_table[i] = (CK_UINT32) hw_vsr_fiqhandler;
  }

  ckcpu_vsr_table[CKCORE_VECTOR_ALIGN] = (CK_UINT32) hw_vsr_alignment;
    67fa:	114d      	lrw      	r2, 0x468	//468 <hw_vsr_alignment>
    67fc:	1169      	lrw      	r3, 0x0	// from address pool at 0x68a0
    67fe:	b341      	st.w      	r2, (r3, 0x4)
#endif
  ckcpu_vsr_table[CKCORE_VECTOR_TRAP] = (CK_UINT32) hhw_vsr_trap;
#endif

  // set the auto interrupt vector table
  ckcpu_vsr_table[CKCORE_VECTOR_AUTOVEC] = (CK_UINT32) hw_vsr_autovec;
    6800:	114c      	lrw      	r2, 0x540	//540 <hw_vsr_autovec>
    6802:	1168      	lrw      	r3, 0x0	// from address pool at 0x68a0
    6804:	b34a      	st.w      	r2, (r3, 0x28)
  ckcpu_vsr_table[CKCORE_VECTOR_FASTAUTOVEC] = (CK_UINT32) hw_vsr_fiqautovec | 0x1;
    6806:	116c      	lrw      	r3, 0x600	//600 <hw_vsr_fiqautovec>
    6808:	c4032842 	bseti      	r2, r3, 0
    680c:	1165      	lrw      	r3, 0x0	// from address pool at 0x68a0
    680e:	b34b      	st.w      	r2, (r3, 0x2c)

  CK_CPU_EnAllNormalIrq();
    6810:	e00000ca 	bsr      	0x69a4	//69a4 <CK_CPU_EnAllNormalIrq>
    6814:	c4004820 	lsli      	r0, r0, 0
  CK_CPU_EnAllFastIrq();
    6818:	e00000ce 	bsr      	0x69b4	//69b4 <CK_CPU_EnAllFastIrq>
    681c:	c4004820 	lsli      	r0, r0, 0

  __clear_dcache();
    6820:	e3fffd60 	bsr      	0x62e0	//62e0 <__clear_dcache>
    6824:	c4004820 	lsli      	r0, r0, 0
  __flush_icache();
    6828:	e3fffd56 	bsr      	0x62d4	//62d4 <__flush_icache>
    682c:	c4004820 	lsli      	r0, r0, 0

}
    6830:	1401      	addi      	sp, sp, 4
    6832:	1490      	pop      	r15

00006834 <CK_INTC_UpdateExceptStatus>:
RETURN VALUE: None

*********************************************************/

void CK_INTC_UpdateExceptStatus (int vector)
{
    6834:	1422      	subi      	sp, sp, 8
    6836:	6cfb      	mov      	r3, sp
    6838:	b300      	st.w      	r0, (r3, 0x0)
    PCKStruct_ExceptSts pExceptSts = (PCKStruct_ExceptSts)exception_status_addr;
    683a:	1164      	lrw      	r3, 0x11284	//11284 <exception_status_addr>
    683c:	9340      	ld.w      	r2, (r3, 0x0)
    683e:	1b01      	addi      	r3, sp, 4
    6840:	b340      	st.w      	r2, (r3, 0x0)

//    printf("Exception: %d\n", vector);
    if ( vector >= 32)
    6842:	6cfb      	mov      	r3, sp
    6844:	9360      	ld.w      	r3, (r3, 0x0)
    6846:	3b3f      	cmplti      	r3, 32      	//0x20
    6848:	0804      	bt      	0x6850	//6850 <CK_INTC_UpdateExceptStatus+0x1c>
    {
        vector = 31;
    684a:	6cfb      	mov      	r3, sp
    684c:	321f      	movi      	r2, 31      	//0x1f
    684e:	b340      	st.w      	r2, (r3, 0x0)
    }
    pExceptSts[vector].count++;
    6850:	6cfb      	mov      	r3, sp
    6852:	9360      	ld.w      	r3, (r3, 0x0)
    6854:	1a01      	addi      	r2, sp, 4
    6856:	9240      	ld.w      	r2, (r2, 0x0)
    6858:	5a6c      	addu      	r3, r2, r3
    685a:	8340      	ld.b      	r2, (r3, 0x0)
    685c:	e442207f 	andi      	r2, r2, 127
    6860:	7488      	zextb      	r2, r2
    6862:	2200      	addi      	r2, 1      	//0x1
    6864:	e442207f 	andi      	r2, r2, 127
    6868:	7448      	zextb      	r1, r2
    686a:	8340      	ld.b      	r2, (r3, 0x0)
    686c:	c4415cc0 	ins      	r2, r1, 6, 0
    6870:	a340      	st.b      	r2, (r3, 0x0)
    pExceptSts[vector].status = 1;
    6872:	6cfb      	mov      	r3, sp
    6874:	9360      	ld.w      	r3, (r3, 0x0)
    6876:	1a01      	addi      	r2, sp, 4
    6878:	9240      	ld.w      	r2, (r2, 0x0)
    687a:	5a4c      	addu      	r2, r2, r3
    687c:	8260      	ld.b      	r3, (r2, 0x0)
    687e:	3101      	movi      	r1, 1      	//0x1
    6880:	c4615c07 	ins      	r3, r1, 7, 7
    6884:	a260      	st.b      	r3, (r2, 0x0)
}
    6886:	1402      	addi      	sp, sp, 8
    6888:	783c      	rts
    688a:	0000      	.short	0x0000
    688c:	000063f8 	.long	0x000063f8
    6890:	000134e0 	.long	0x000134e0
    6894:	000063b8 	.long	0x000063b8
    6898:	00006438 	.long	0x00006438
    689c:	00000408 	.long	0x00000408
    68a0:	00000000 	.long	0x00000000
    68a4:	000005a0 	.long	0x000005a0
    68a8:	00000614 	.long	0x00000614
    68ac:	00000468 	.long	0x00000468
    68b0:	00000540 	.long	0x00000540
    68b4:	00000600 	.long	0x00000600
    68b8:	000069a4 	.long	0x000069a4
    68bc:	000069b4 	.long	0x000069b4
    68c0:	000062e0 	.long	0x000062e0
    68c4:	000062d4 	.long	0x000062d4
    68c8:	00011284 	.long	0x00011284

000068cc <CK_INTC_DefaultService>:
RETURN VALUE: None

*********************************************************/

void CK_INTC_DefaultService (int vector)
{
    68cc:	14d0      	push      	r15
    68ce:	1421      	subi      	sp, sp, 4
    68d0:	6cfb      	mov      	r3, sp
    68d2:	b300      	st.w      	r0, (r3, 0x0)
    CK_INTC_UpdateExceptStatus(vector);
    68d4:	6cfb      	mov      	r3, sp
    68d6:	9300      	ld.w      	r0, (r3, 0x0)
    68d8:	e3ffffae 	bsr      	0x6834	//6834 <CK_INTC_UpdateExceptStatus>
    68dc:	c4004820 	lsli      	r0, r0, 0
}
    68e0:	1401      	addi      	sp, sp, 4
    68e2:	1490      	pop      	r15

000068e4 <CK_INTC_FpeService>:
RETURN VALUE: None

*********************************************************/

void CK_INTC_FpeService (int vector, int fesr, Ckcore_SavedRegisters *regs)
{
    68e4:	14d0      	push      	r15
    68e6:	1423      	subi      	sp, sp, 12
    68e8:	1b02      	addi      	r3, sp, 8
    68ea:	b300      	st.w      	r0, (r3, 0x0)
    68ec:	1b01      	addi      	r3, sp, 4
    68ee:	b320      	st.w      	r1, (r3, 0x0)
    68f0:	6cfb      	mov      	r3, sp
    68f2:	b340      	st.w      	r2, (r3, 0x0)
    CK_INTC_UpdateExceptStatus(vector);
    68f4:	1b02      	addi      	r3, sp, 8
    68f6:	9300      	ld.w      	r0, (r3, 0x0)
    68f8:	e3ffff9e 	bsr      	0x6834	//6834 <CK_INTC_UpdateExceptStatus>
    68fc:	c4004820 	lsli      	r0, r0, 0
    /* @todo set external variable to report to simulator ? */
    fpe_status = fesr;
    6900:	1b01      	addi      	r3, sp, 4
    6902:	9340      	ld.w      	r2, (r3, 0x0)
    6904:	1277      	lrw      	r3, 0x112a4	//112a4 <fpe_status>
    6906:	b340      	st.w      	r2, (r3, 0x0)
}
    6908:	1403      	addi      	sp, sp, 12
    690a:	1490      	pop      	r15

0000690c <CK_INTC_IrqService>:
RETURN VALUE: None

*********************************************************/

void CK_INTC_IrqService (int offset)
{
    690c:	14d0      	push      	r15
    690e:	1423      	subi      	sp, sp, 12
    6910:	6cfb      	mov      	r3, sp
    6912:	b300      	st.w      	r0, (r3, 0x0)
  CK_UINT32 volatile saveStatus = icrp->NIER;
    6914:	1274      	lrw      	r3, 0x11318	//11318 <icrp>
    6916:	9360      	ld.w      	r3, (r3, 0x0)
    6918:	9343      	ld.w      	r2, (r3, 0xc)
    691a:	1b01      	addi      	r3, sp, 4
    691c:	b340      	st.w      	r2, (r3, 0x0)
  PCKStruct_IRQHandler phandler = &irq_desc[offset];
    691e:	6cfb      	mov      	r3, sp
    6920:	9360      	ld.w      	r3, (r3, 0x0)
    6922:	4323      	lsli      	r1, r3, 3
    6924:	1b02      	addi      	r3, sp, 8
    6926:	1251      	lrw      	r2, 0x134e0	//134e0 <irq_desc>
    6928:	5948      	addu      	r2, r1, r2
    692a:	b340      	st.w      	r2, (r3, 0x0)

  /* mask irq  */
  icrp->NIER &= ~(0xff << (((phandler -> irqid) & (~0x7))));
    692c:	126e      	lrw      	r3, 0x11318	//11318 <icrp>
    692e:	9360      	ld.w      	r3, (r3, 0x0)
    6930:	124d      	lrw      	r2, 0x11318	//11318 <icrp>
    6932:	9240      	ld.w      	r2, (r2, 0x0)
    6934:	9223      	ld.w      	r1, (r2, 0xc)
    6936:	1a02      	addi      	r2, sp, 8
    6938:	9240      	ld.w      	r2, (r2, 0x0)
    693a:	9240      	ld.w      	r2, (r2, 0x0)
    693c:	e4423007 	andni      	r2, r2, 7
    6940:	30ff      	movi      	r0, 255      	//0xff
    6942:	c4404022 	lsl      	r2, r0, r2
    6946:	6c8a      	nor      	r2, r2
    6948:	6884      	and      	r2, r1
    694a:	b343      	st.w      	r2, (r3, 0xc)
  asm  ("sync 0");
    694c:	c0000420 	sync      	0      	//0x0

  /* enable nested irq  */
  asm  ("psrset fe,ie");
    6950:	c0c07420 	psrset      	ie,fe
  /* Call Interrupt Handler */
  phandler -> handler(phandler -> irqid);
    6954:	1b02      	addi      	r3, sp, 8
    6956:	9360      	ld.w      	r3, (r3, 0x0)
    6958:	9361      	ld.w      	r3, (r3, 0x4)
    695a:	1a02      	addi      	r2, sp, 8
    695c:	9240      	ld.w      	r2, (r2, 0x0)
    695e:	9240      	ld.w      	r2, (r2, 0x0)
    6960:	6c0b      	mov      	r0, r2
    6962:	7bcd      	jsr      	r3
  /* unmask irq  */
  asm  ("psrclr fe,ie");
    6964:	c0c07020 	psrclr      	ie,fe
  icrp->NIER = saveStatus;
    6968:	117f      	lrw      	r3, 0x11318	//11318 <icrp>
    696a:	9360      	ld.w      	r3, (r3, 0x0)
    696c:	1a01      	addi      	r2, sp, 4
    696e:	9240      	ld.w      	r2, (r2, 0x0)
    6970:	b343      	st.w      	r2, (r3, 0xc)
}
    6972:	1403      	addi      	sp, sp, 12
    6974:	1490      	pop      	r15
	...

00006978 <CK_INTC_FiqService>:
RETURN VALUE: None

*********************************************************/

void CK_INTC_FiqService (int offset)
{
    6978:	14d0      	push      	r15
    697a:	1422      	subi      	sp, sp, 8
    697c:	6cfb      	mov      	r3, sp
    697e:	b300      	st.w      	r0, (r3, 0x0)
  PCKStruct_IRQHandler phandler = &irq_desc[offset];
    6980:	6cfb      	mov      	r3, sp
    6982:	9360      	ld.w      	r3, (r3, 0x0)
    6984:	4323      	lsli      	r1, r3, 3
    6986:	1b01      	addi      	r3, sp, 4
    6988:	1158      	lrw      	r2, 0x134e0	//134e0 <irq_desc>
    698a:	5948      	addu      	r2, r1, r2
    698c:	b340      	st.w      	r2, (r3, 0x0)
  phandler -> handler(phandler -> irqid);
    698e:	1b01      	addi      	r3, sp, 4
    6990:	9360      	ld.w      	r3, (r3, 0x0)
    6992:	9361      	ld.w      	r3, (r3, 0x4)
    6994:	1a01      	addi      	r2, sp, 4
    6996:	9240      	ld.w      	r2, (r2, 0x0)
    6998:	9240      	ld.w      	r2, (r2, 0x0)
    699a:	6c0b      	mov      	r0, r2
    699c:	7bcd      	jsr      	r3
}
    699e:	1402      	addi      	sp, sp, 8
    69a0:	1490      	pop      	r15
	...

000069a4 <CK_CPU_EnAllNormalIrq>:

*********************************************************/

void CK_CPU_EnAllNormalIrq(void)
{
  asm  ("psrset ee,ie");
    69a4:	c1807420 	psrset      	ee,ie
}
    69a8:	783c      	rts
	...

000069ac <CK_CPU_DisAllNormalIrq>:

*********************************************************/

void CK_CPU_DisAllNormalIrq(void)
{
 asm  ("psrclr ie"); 
    69ac:	c0807020 	psrclr      	ie
}
    69b0:	783c      	rts
	...

000069b4 <CK_CPU_EnAllFastIrq>:
RETURN VALUE: None

*********************************************************/
void CK_CPU_EnAllFastIrq(void)
{
 asm  ("psrset fe");
    69b4:	c0407420 	psrset      	fe
}
    69b8:	783c      	rts
	...

000069bc <CK_CPU_DisAllFastIrq>:
RETURN VALUE: None

*********************************************************/
void CK_CPU_DisAllFastIrq(void)
{
  asm  ("psrclr fe"); 
    69bc:	c0407020 	psrclr      	fe
}
    69c0:	783c      	rts
	...

000069c4 <CK_CPU_EnterCritical>:
RETURN VALUE: None

*********************************************************/

void CK_CPU_EnterCritical(CK_UINT32 *psr)
{
    69c4:	1421      	subi      	sp, sp, 4
    69c6:	6cfb      	mov      	r3, sp
    69c8:	b300      	st.w      	r0, (r3, 0x0)
  asm volatile ("mfcr    %0, psr\n\r"
    69ca:	c0006022 	mfcr      	r2, cr<0, 0>
    69ce:	c0c07020 	psrclr      	ie,fe
                "psrclr  ie, fe"
                 : "=r" (*psr) );
    69d2:	6cfb      	mov      	r3, sp
    69d4:	9360      	ld.w      	r3, (r3, 0x0)

*********************************************************/

void CK_CPU_EnterCritical(CK_UINT32 *psr)
{
  asm volatile ("mfcr    %0, psr\n\r"
    69d6:	b340      	st.w      	r2, (r3, 0x0)
                "psrclr  ie, fe"
                 : "=r" (*psr) );
}
    69d8:	1401      	addi      	sp, sp, 4
    69da:	783c      	rts

000069dc <CK_CPU_ExitCritical>:
RETURN VALUE: None

*********************************************************/

void CK_CPU_ExitCritical(CK_UINT32 psr)
{
    69dc:	1421      	subi      	sp, sp, 4
    69de:	6cfb      	mov      	r3, sp
    69e0:	b300      	st.w      	r0, (r3, 0x0)
  asm volatile ("mtcr   %0, psr"
    69e2:	6cfb      	mov      	r3, sp
    69e4:	9360      	ld.w      	r3, (r3, 0x0)
    69e6:	c0036420 	mtcr      	r3, cr<0, 0>
                 : 
                 :"r"(psr));
}
    69ea:	1401      	addi      	sp, sp, 4
    69ec:	783c      	rts
	...

000069f0 <CK_CPU_ClearFpeStatus>:
RETURN VALUE: None

*********************************************************/
void CK_CPU_ClearFpeStatus(void)
{
    fpe_status = 0;
    69f0:	107c      	lrw      	r3, 0x112a4	//112a4 <fpe_status>
    69f2:	3200      	movi      	r2, 0      	//0x0
    69f4:	b340      	st.w      	r2, (r3, 0x0)
}
    69f6:	783c      	rts

000069f8 <CK_CPU_GetFpeStatus>:
RETURN VALUE: fpe_status

*********************************************************/
CK_UINT32 CK_CPU_GetFpeStatus(void)
{
    return fpe_status;
    69f8:	107a      	lrw      	r3, 0x112a4	//112a4 <fpe_status>
    69fa:	9360      	ld.w      	r3, (r3, 0x0)
}
    69fc:	6c0f      	mov      	r0, r3
    69fe:	783c      	rts

00006a00 <CK_CPU_ClearExceptStatus>:

RETURN VALUE: None

*********************************************************/
void CK_CPU_ClearExceptStatus(int vector)
{
    6a00:	1422      	subi      	sp, sp, 8
    6a02:	6cfb      	mov      	r3, sp
    6a04:	b300      	st.w      	r0, (r3, 0x0)
    PCKStruct_ExceptSts pExceptSts = (PCKStruct_ExceptSts)exception_status_addr;
    6a06:	107a      	lrw      	r3, 0x11284	//11284 <exception_status_addr>
    6a08:	9340      	ld.w      	r2, (r3, 0x0)
    6a0a:	1b01      	addi      	r3, sp, 4
    6a0c:	b340      	st.w      	r2, (r3, 0x0)

    pExceptSts[vector].count = 0;
    6a0e:	6cfb      	mov      	r3, sp
    6a10:	9360      	ld.w      	r3, (r3, 0x0)
    6a12:	1a01      	addi      	r2, sp, 4
    6a14:	9240      	ld.w      	r2, (r2, 0x0)
    6a16:	5a4c      	addu      	r2, r2, r3
    6a18:	8260      	ld.b      	r3, (r2, 0x0)
    6a1a:	3100      	movi      	r1, 0      	//0x0
    6a1c:	c4615cc0 	ins      	r3, r1, 6, 0
    6a20:	a260      	st.b      	r3, (r2, 0x0)
    pExceptSts[vector].status = 0;
    6a22:	6cfb      	mov      	r3, sp
    6a24:	9360      	ld.w      	r3, (r3, 0x0)
    6a26:	1a01      	addi      	r2, sp, 4
    6a28:	9240      	ld.w      	r2, (r2, 0x0)
    6a2a:	5a4c      	addu      	r2, r2, r3
    6a2c:	8260      	ld.b      	r3, (r2, 0x0)
    6a2e:	3100      	movi      	r1, 0      	//0x0
    6a30:	c4615c07 	ins      	r3, r1, 7, 7
    6a34:	a260      	st.b      	r3, (r2, 0x0)
}
    6a36:	1402      	addi      	sp, sp, 8
    6a38:	783c      	rts
	...

00006a3c <CK_CPU_GetExceptStatus>:

RETURN VALUE: exception_status

*********************************************************/
PCKStruct_ExceptSts CK_CPU_GetExceptStatus(int vector)
{
    6a3c:	1422      	subi      	sp, sp, 8
    6a3e:	6cfb      	mov      	r3, sp
    6a40:	b300      	st.w      	r0, (r3, 0x0)
    PCKStruct_ExceptSts pExceptSts = (PCKStruct_ExceptSts)exception_status_addr;
    6a42:	106b      	lrw      	r3, 0x11284	//11284 <exception_status_addr>
    6a44:	9340      	ld.w      	r2, (r3, 0x0)
    6a46:	1b01      	addi      	r3, sp, 4
    6a48:	b340      	st.w      	r2, (r3, 0x0)
    return &pExceptSts[vector];
    6a4a:	6cfb      	mov      	r3, sp
    6a4c:	9360      	ld.w      	r3, (r3, 0x0)
    6a4e:	1a01      	addi      	r2, sp, 4
    6a50:	9240      	ld.w      	r2, (r2, 0x0)
    6a52:	5a6c      	addu      	r3, r2, r3
}
    6a54:	6c0f      	mov      	r0, r3
    6a56:	1402      	addi      	sp, sp, 8
    6a58:	783c      	rts
    6a5a:	0000      	.short	0x0000
    6a5c:	00006834 	.long	0x00006834
    6a60:	000112a4 	.long	0x000112a4
    6a64:	00011318 	.long	0x00011318
    6a68:	000134e0 	.long	0x000134e0
    6a6c:	00011284 	.long	0x00011284

00006a70 <CK_CPU_TrapTrigger>:
RETURN VALUE: None

*********************************************************/
void CK_CPU_TrapTrigger(void)
{
    asm  ("trap 0"); 
    6a70:	c0002020 	trap      	0
}
    6a74:	783c      	rts
	...

00006a78 <get_regs_value>:
	        :"=r"(err), "=r"(x), "=r"(errcode)              \
	        :"0"(0), "r"(ptr), "2"(-EFAULT)                 \
	        : "memory");                                    \
}while(0)
inline static unsigned int 
get_regs_value(unsigned int rx, Ckcore_SavedRegisters *regs){
    6a78:	1423      	subi      	sp, sp, 12
    6a7a:	1b01      	addi      	r3, sp, 4
    6a7c:	b300      	st.w      	r0, (r3, 0x0)
    6a7e:	6cfb      	mov      	r3, sp
    6a80:	b320      	st.w      	r1, (r3, 0x0)
	unsigned int value;

	if(rx < 14){
    6a82:	1b01      	addi      	r3, sp, 4
    6a84:	9360      	ld.w      	r3, (r3, 0x0)
    6a86:	3b0d      	cmphsi      	r3, 14      	//0xe
    6a88:	080c      	bt      	0x6aa0	//6aa0 <get_regs_value+0x28>
		value  = *((int *)regs + rx + 3);
    6a8a:	6cfb      	mov      	r3, sp
    6a8c:	9340      	ld.w      	r2, (r3, 0x0)
    6a8e:	1b01      	addi      	r3, sp, 4
    6a90:	9360      	ld.w      	r3, (r3, 0x0)
    6a92:	2302      	addi      	r3, 3      	//0x3
    6a94:	4362      	lsli      	r3, r3, 2
    6a96:	5a6c      	addu      	r3, r2, r3
    6a98:	9340      	ld.w      	r2, (r3, 0x0)
    6a9a:	1b02      	addi      	r3, sp, 8
    6a9c:	b340      	st.w      	r2, (r3, 0x0)
    6a9e:	0415      	br      	0x6ac8	//6ac8 <get_regs_value+0x50>
	}else if(rx == 14){
    6aa0:	1b01      	addi      	r3, sp, 4
    6aa2:	9360      	ld.w      	r3, (r3, 0x0)
    6aa4:	3b4e      	cmpnei      	r3, 14
    6aa6:	0807      	bt      	0x6ab4	//6ab4 <get_regs_value+0x3c>
        value = sizeof(Ckcore_SavedRegisters) + ((unsigned int)regs);
    6aa8:	6cfb      	mov      	r3, sp
    6aaa:	9340      	ld.w      	r2, (r3, 0x0)
    6aac:	1b02      	addi      	r3, sp, 8
    6aae:	2243      	addi      	r2, 68      	//0x44
    6ab0:	b340      	st.w      	r2, (r3, 0x0)
    6ab2:	040b      	br      	0x6ac8	//6ac8 <get_regs_value+0x50>
	}else{
		value = *((int *)regs + rx + 2);
    6ab4:	6cfb      	mov      	r3, sp
    6ab6:	9340      	ld.w      	r2, (r3, 0x0)
    6ab8:	1b01      	addi      	r3, sp, 4
    6aba:	9360      	ld.w      	r3, (r3, 0x0)
    6abc:	2301      	addi      	r3, 2      	//0x2
    6abe:	4362      	lsli      	r3, r3, 2
    6ac0:	5a6c      	addu      	r3, r2, r3
    6ac2:	9340      	ld.w      	r2, (r3, 0x0)
    6ac4:	1b02      	addi      	r3, sp, 8
    6ac6:	b340      	st.w      	r2, (r3, 0x0)
	}

	return value;
    6ac8:	1b02      	addi      	r3, sp, 8
    6aca:	9360      	ld.w      	r3, (r3, 0x0)
}
    6acc:	6c0f      	mov      	r0, r3
    6ace:	1403      	addi      	sp, sp, 12
    6ad0:	783c      	rts
	...

00006ad4 <put_regs_value>:

inline static int
put_regs_value(unsigned int value, unsigned int rx, Ckcore_SavedRegisters *regs){
    6ad4:	14d0      	push      	r15
    6ad6:	1423      	subi      	sp, sp, 12
    6ad8:	1b02      	addi      	r3, sp, 8
    6ada:	b300      	st.w      	r0, (r3, 0x0)
    6adc:	1b01      	addi      	r3, sp, 4
    6ade:	b320      	st.w      	r1, (r3, 0x0)
    6ae0:	6cfb      	mov      	r3, sp
    6ae2:	b340      	st.w      	r2, (r3, 0x0)
	if(rx < 14){
    6ae4:	1b01      	addi      	r3, sp, 4
    6ae6:	9360      	ld.w      	r3, (r3, 0x0)
    6ae8:	3b0d      	cmphsi      	r3, 14      	//0xe
    6aea:	080c      	bt      	0x6b02	//6b02 <put_regs_value+0x2e>
		*((int *)regs + rx + 3) = value;
    6aec:	6cfb      	mov      	r3, sp
    6aee:	9340      	ld.w      	r2, (r3, 0x0)
    6af0:	1b01      	addi      	r3, sp, 4
    6af2:	9360      	ld.w      	r3, (r3, 0x0)
    6af4:	2302      	addi      	r3, 3      	//0x3
    6af6:	4362      	lsli      	r3, r3, 2
    6af8:	5a6c      	addu      	r3, r2, r3
    6afa:	1a02      	addi      	r2, sp, 8
    6afc:	9240      	ld.w      	r2, (r2, 0x0)
    6afe:	b340      	st.w      	r2, (r3, 0x0)
    6b00:	0417      	br      	0x6b2e	//6b2e <put_regs_value+0x5a>
	}else if(rx == 14){
    6b02:	1b01      	addi      	r3, sp, 4
    6b04:	9360      	ld.w      	r3, (r3, 0x0)
    6b06:	3b4e      	cmpnei      	r3, 14
    6b08:	0809      	bt      	0x6b1a	//6b1a <put_regs_value+0x46>
        printf("alignment handler trying to write sp.\n");
    6b0a:	110c      	lrw      	r0, 0x10780	//10780 <__etext+0xbd0>
    6b0c:	e0003f22 	bsr      	0xe950	//e950 <printf>
    6b10:	c4004820 	lsli      	r0, r0, 0
        goto fault;
    6b14:	6c00      	or      	r0, r0
		*((int *)regs + rx + 2) = value;
	}

	return 0;
fault:
	return 1;
    6b16:	3301      	movi      	r3, 1      	//0x1
    6b18:	040c      	br      	0x6b30	//6b30 <put_regs_value+0x5c>
		*((int *)regs + rx + 3) = value;
	}else if(rx == 14){
        printf("alignment handler trying to write sp.\n");
        goto fault;
	}else{
		*((int *)regs + rx + 2) = value;
    6b1a:	6cfb      	mov      	r3, sp
    6b1c:	9340      	ld.w      	r2, (r3, 0x0)
    6b1e:	1b01      	addi      	r3, sp, 4
    6b20:	9360      	ld.w      	r3, (r3, 0x0)
    6b22:	2301      	addi      	r3, 2      	//0x2
    6b24:	4362      	lsli      	r3, r3, 2
    6b26:	5a6c      	addu      	r3, r2, r3
    6b28:	1a02      	addi      	r2, sp, 8
    6b2a:	9240      	ld.w      	r2, (r2, 0x0)
    6b2c:	b340      	st.w      	r2, (r3, 0x0)
	}

	return 0;
    6b2e:	3300      	movi      	r3, 0      	//0x0
fault:
	return 1;
}
    6b30:	6c0f      	mov      	r0, r3
    6b32:	1403      	addi      	sp, sp, 12
    6b34:	1490      	pop      	r15
	...

00006b38 <handle_ldh_16>:

static int 
handle_ldh_16(unsigned long instr, Ckcore_SavedRegisters *regs){
    6b38:	14d3      	push      	r4-r6, r15
    6b3a:	142b      	subi      	sp, sp, 44
    6b3c:	1b01      	addi      	r3, sp, 4
    6b3e:	b300      	st.w      	r0, (r3, 0x0)
    6b40:	6cfb      	mov      	r3, sp
    6b42:	b320      	st.w      	r1, (r3, 0x0)
	unsigned int regx = (instr >> 8) & 0x7;
    6b44:	1b01      	addi      	r3, sp, 4
    6b46:	9360      	ld.w      	r3, (r3, 0x0)
    6b48:	4b48      	lsri      	r2, r3, 8
    6b4a:	1b0a      	addi      	r3, sp, 40
    6b4c:	e4422007 	andi      	r2, r2, 7
    6b50:	b340      	st.w      	r2, (r3, 0x0)
	unsigned int regz = (instr >> 5) & 0x7;
    6b52:	1b01      	addi      	r3, sp, 4
    6b54:	9360      	ld.w      	r3, (r3, 0x0)
    6b56:	4b45      	lsri      	r2, r3, 5
    6b58:	1b09      	addi      	r3, sp, 36
    6b5a:	e4422007 	andi      	r2, r2, 7
    6b5e:	b340      	st.w      	r2, (r3, 0x0)
	unsigned int imm5 = instr & 0x1f;
    6b60:	1b08      	addi      	r3, sp, 32
    6b62:	1a01      	addi      	r2, sp, 4
    6b64:	9240      	ld.w      	r2, (r2, 0x0)
    6b66:	e442201f 	andi      	r2, r2, 31
    6b6a:	b340      	st.w      	r2, (r3, 0x0)
	unsigned int destaddr;
	unsigned int dataregx;
	unsigned short tmpval16;

	dataregx = get_regs_value(regx, regs);
    6b6c:	1c07      	addi      	r4, sp, 28
    6b6e:	1a0a      	addi      	r2, sp, 40
    6b70:	6cfb      	mov      	r3, sp
    6b72:	9200      	ld.w      	r0, (r2, 0x0)
    6b74:	9320      	ld.w      	r1, (r3, 0x0)
    6b76:	e3ffff81 	bsr      	0x6a78	//6a78 <get_regs_value>
    6b7a:	c4004820 	lsli      	r0, r0, 0
    6b7e:	b400      	st.w      	r0, (r4, 0x0)
	destaddr = dataregx + (imm5 << 1);
    6b80:	1b08      	addi      	r3, sp, 32
    6b82:	9360      	ld.w      	r3, (r3, 0x0)
    6b84:	5b6c      	addu      	r3, r3, r3
    6b86:	6c4f      	mov      	r1, r3
    6b88:	1b06      	addi      	r3, sp, 24
    6b8a:	1a07      	addi      	r2, sp, 28
    6b8c:	9240      	ld.w      	r2, (r2, 0x0)
    6b8e:	5948      	addu      	r2, r1, r2
    6b90:	b340      	st.w      	r2, (r3, 0x0)
	get16_unaligned_check(tmpval16, destaddr);
    6b92:	1b05      	addi      	r3, sp, 20
    6b94:	3200      	movi      	r2, 0      	//0x0
    6b96:	b340      	st.w      	r2, (r3, 0x0)
    6b98:	1b04      	addi      	r3, sp, 16
    6b9a:	1a06      	addi      	r2, sp, 24
    6b9c:	9240      	ld.w      	r2, (r2, 0x0)
    6b9e:	b340      	st.w      	r2, (r3, 0x0)
    6ba0:	1b05      	addi      	r3, sp, 20
    6ba2:	9340      	ld.w      	r2, (r3, 0x0)
    6ba4:	1b04      	addi      	r3, sp, 16
    6ba6:	9360      	ld.w      	r3, (r3, 0x0)
    6ba8:	6d4b      	mov      	r5, r2
    6baa:	6d0f      	mov      	r4, r3
    6bac:	84c0      	ld.b      	r6, (r4, 0x0)
    6bae:	2400      	addi      	r4, 1      	//0x1
    6bb0:	040a      	br      	0x6bc4	//6bc4 <handle_ldh_16+0x8c>
    6bb2:	3501      	movi      	r5, 1      	//0x1
    6bb4:	0408      	br      	0x6bc4	//6bc4 <handle_ldh_16+0x8c>
    6bb6:	0000      	.short	0x0000
    6bb8:	00010780 	.long	0x00010780
    6bbc:	0000e950 	.long	0x0000e950
    6bc0:	00006a78 	.long	0x00006a78
    6bc4:	1b05      	addi      	r3, sp, 20
    6bc6:	b3a0      	st.w      	r5, (r3, 0x0)
    6bc8:	1b03      	addi      	r3, sp, 12
    6bca:	b3c0      	st.w      	r6, (r3, 0x0)
    6bcc:	1b04      	addi      	r3, sp, 16
    6bce:	b380      	st.w      	r4, (r3, 0x0)
    6bd0:	e46e0009 	addi      	r3, sp, 10      	//0xa
    6bd4:	1a03      	addi      	r2, sp, 12
    6bd6:	9240      	ld.w      	r2, (r2, 0x0)
    6bd8:	ab40      	st.h      	r2, (r3, 0x0)
    6bda:	1b05      	addi      	r3, sp, 20
    6bdc:	9340      	ld.w      	r2, (r3, 0x0)
    6bde:	1b04      	addi      	r3, sp, 16
    6be0:	9360      	ld.w      	r3, (r3, 0x0)
    6be2:	6d4b      	mov      	r5, r2
    6be4:	6d0f      	mov      	r4, r3
    6be6:	84c0      	ld.b      	r6, (r4, 0x0)
    6be8:	2400      	addi      	r4, 1      	//0x1
    6bea:	0403      	br      	0x6bf0	//6bf0 <handle_ldh_16+0xb8>
    6bec:	3501      	movi      	r5, 1      	//0x1
    6bee:	0401      	br      	0x6bf0	//6bf0 <handle_ldh_16+0xb8>
    6bf0:	1b05      	addi      	r3, sp, 20
    6bf2:	b3a0      	st.w      	r5, (r3, 0x0)
    6bf4:	1b03      	addi      	r3, sp, 12
    6bf6:	b3c0      	st.w      	r6, (r3, 0x0)
    6bf8:	1b04      	addi      	r3, sp, 16
    6bfa:	b380      	st.w      	r4, (r3, 0x0)
    6bfc:	1b03      	addi      	r3, sp, 12
    6bfe:	9360      	ld.w      	r3, (r3, 0x0)
    6c00:	74cd      	zexth      	r3, r3
    6c02:	4368      	lsli      	r3, r3, 8
    6c04:	744d      	zexth      	r1, r3
    6c06:	e46e0009 	addi      	r3, sp, 10      	//0xa
    6c0a:	e44e0009 	addi      	r2, sp, 10      	//0xa
    6c0e:	8a40      	ld.h      	r2, (r2, 0x0)
    6c10:	6c84      	or      	r2, r1
    6c12:	ab40      	st.h      	r2, (r3, 0x0)
    6c14:	1b05      	addi      	r3, sp, 20
    6c16:	9360      	ld.w      	r3, (r3, 0x0)
    6c18:	e9230015 	bnez      	r3, 0x6c42	//6c42 <handle_ldh_16+0x10a>
	if(put_regs_value((unsigned int)tmpval16, regz, regs) != 0){
    6c1c:	e46e0009 	addi      	r3, sp, 10      	//0xa
    6c20:	8b60      	ld.h      	r3, (r3, 0x0)
    6c22:	744d      	zexth      	r1, r3
    6c24:	1a09      	addi      	r2, sp, 36
    6c26:	6cfb      	mov      	r3, sp
    6c28:	6c07      	mov      	r0, r1
    6c2a:	9220      	ld.w      	r1, (r2, 0x0)
    6c2c:	9340      	ld.w      	r2, (r3, 0x0)
    6c2e:	e3ffff53 	bsr      	0x6ad4	//6ad4 <put_regs_value>
    6c32:	c4004820 	lsli      	r0, r0, 0
    6c36:	6cc3      	mov      	r3, r0
    6c38:	e9230004 	bnez      	r3, 0x6c40	//6c40 <handle_ldh_16+0x108>
			goto fault;
	}

	return HANDLER_SUCCESS;
    6c3c:	3300      	movi      	r3, 0      	//0x0
    6c3e:	0403      	br      	0x6c44	//6c44 <handle_ldh_16+0x10c>

	dataregx = get_regs_value(regx, regs);
	destaddr = dataregx + (imm5 << 1);
	get16_unaligned_check(tmpval16, destaddr);
	if(put_regs_value((unsigned int)tmpval16, regz, regs) != 0){
			goto fault;
    6c40:	6c00      	or      	r0, r0
	}

	return HANDLER_SUCCESS;
fault:
	return HANDLER_FAILURE;	
    6c42:	3301      	movi      	r3, 1      	//0x1
}
    6c44:	6c0f      	mov      	r0, r3
    6c46:	140b      	addi      	sp, sp, 44
    6c48:	1493      	pop      	r4-r6, r15
	...

00006c4c <handle_ldw_16>:

static int 
handle_ldw_16(unsigned long instr, Ckcore_SavedRegisters *regs){
    6c4c:	14d3      	push      	r4-r6, r15
    6c4e:	142b      	subi      	sp, sp, 44
    6c50:	1b01      	addi      	r3, sp, 4
    6c52:	b300      	st.w      	r0, (r3, 0x0)
    6c54:	6cfb      	mov      	r3, sp
    6c56:	b320      	st.w      	r1, (r3, 0x0)
	unsigned int regx = (instr >> 8) & 0x7;
    6c58:	1b01      	addi      	r3, sp, 4
    6c5a:	9360      	ld.w      	r3, (r3, 0x0)
    6c5c:	4b48      	lsri      	r2, r3, 8
    6c5e:	1b0a      	addi      	r3, sp, 40
    6c60:	e4422007 	andi      	r2, r2, 7
    6c64:	b340      	st.w      	r2, (r3, 0x0)
	unsigned int regz = (instr >> 5) & 0x7;
    6c66:	1b01      	addi      	r3, sp, 4
    6c68:	9360      	ld.w      	r3, (r3, 0x0)
    6c6a:	4b45      	lsri      	r2, r3, 5
    6c6c:	1b09      	addi      	r3, sp, 36
    6c6e:	e4422007 	andi      	r2, r2, 7
    6c72:	b340      	st.w      	r2, (r3, 0x0)
	unsigned int imm5 = instr & 0x1f;
    6c74:	1b08      	addi      	r3, sp, 32
    6c76:	1a01      	addi      	r2, sp, 4
    6c78:	9240      	ld.w      	r2, (r2, 0x0)
    6c7a:	e442201f 	andi      	r2, r2, 31
    6c7e:	b340      	st.w      	r2, (r3, 0x0)
	unsigned int destaddr,tmpval32;
	unsigned int dataregx;

	dataregx = get_regs_value(regx, regs);
    6c80:	1c07      	addi      	r4, sp, 28
    6c82:	1a0a      	addi      	r2, sp, 40
    6c84:	6cfb      	mov      	r3, sp
    6c86:	9200      	ld.w      	r0, (r2, 0x0)
    6c88:	9320      	ld.w      	r1, (r3, 0x0)
    6c8a:	e3fffef7 	bsr      	0x6a78	//6a78 <get_regs_value>
    6c8e:	c4004820 	lsli      	r0, r0, 0
    6c92:	b400      	st.w      	r0, (r4, 0x0)
	destaddr = dataregx + (imm5 << 2);
    6c94:	1b08      	addi      	r3, sp, 32
    6c96:	9360      	ld.w      	r3, (r3, 0x0)
    6c98:	4322      	lsli      	r1, r3, 2
    6c9a:	1b06      	addi      	r3, sp, 24
    6c9c:	1a07      	addi      	r2, sp, 28
    6c9e:	9240      	ld.w      	r2, (r2, 0x0)
    6ca0:	5948      	addu      	r2, r1, r2
    6ca2:	b340      	st.w      	r2, (r3, 0x0)
	get32_unaligned_check(tmpval32, destaddr);
    6ca4:	1b05      	addi      	r3, sp, 20
    6ca6:	3200      	movi      	r2, 0      	//0x0
    6ca8:	b340      	st.w      	r2, (r3, 0x0)
    6caa:	1b04      	addi      	r3, sp, 16
    6cac:	1a06      	addi      	r2, sp, 24
    6cae:	9240      	ld.w      	r2, (r2, 0x0)
    6cb0:	b340      	st.w      	r2, (r3, 0x0)
    6cb2:	1b05      	addi      	r3, sp, 20
    6cb4:	9340      	ld.w      	r2, (r3, 0x0)
    6cb6:	1b04      	addi      	r3, sp, 16
    6cb8:	9360      	ld.w      	r3, (r3, 0x0)
    6cba:	6d4b      	mov      	r5, r2
    6cbc:	6d0f      	mov      	r4, r3
    6cbe:	84c0      	ld.b      	r6, (r4, 0x0)
    6cc0:	2400      	addi      	r4, 1      	//0x1
    6cc2:	0407      	br      	0x6cd0	//6cd0 <handle_ldw_16+0x84>
    6cc4:	3501      	movi      	r5, 1      	//0x1
    6cc6:	0405      	br      	0x6cd0	//6cd0 <handle_ldw_16+0x84>
    6cc8:	00006ad4 	.long	0x00006ad4
    6ccc:	00006a78 	.long	0x00006a78
    6cd0:	1b05      	addi      	r3, sp, 20
    6cd2:	b3a0      	st.w      	r5, (r3, 0x0)
    6cd4:	1b03      	addi      	r3, sp, 12
    6cd6:	b3c0      	st.w      	r6, (r3, 0x0)
    6cd8:	1b04      	addi      	r3, sp, 16
    6cda:	b380      	st.w      	r4, (r3, 0x0)
    6cdc:	1b02      	addi      	r3, sp, 8
    6cde:	1a03      	addi      	r2, sp, 12
    6ce0:	9240      	ld.w      	r2, (r2, 0x0)
    6ce2:	b340      	st.w      	r2, (r3, 0x0)
    6ce4:	1b05      	addi      	r3, sp, 20
    6ce6:	9340      	ld.w      	r2, (r3, 0x0)
    6ce8:	1b04      	addi      	r3, sp, 16
    6cea:	9360      	ld.w      	r3, (r3, 0x0)
    6cec:	6d4b      	mov      	r5, r2
    6cee:	6d0f      	mov      	r4, r3
    6cf0:	84c0      	ld.b      	r6, (r4, 0x0)
    6cf2:	2400      	addi      	r4, 1      	//0x1
    6cf4:	0403      	br      	0x6cfa	//6cfa <handle_ldw_16+0xae>
    6cf6:	3501      	movi      	r5, 1      	//0x1
    6cf8:	0401      	br      	0x6cfa	//6cfa <handle_ldw_16+0xae>
    6cfa:	1b05      	addi      	r3, sp, 20
    6cfc:	b3a0      	st.w      	r5, (r3, 0x0)
    6cfe:	1b03      	addi      	r3, sp, 12
    6d00:	b3c0      	st.w      	r6, (r3, 0x0)
    6d02:	1b04      	addi      	r3, sp, 16
    6d04:	b380      	st.w      	r4, (r3, 0x0)
    6d06:	1b03      	addi      	r3, sp, 12
    6d08:	9360      	ld.w      	r3, (r3, 0x0)
    6d0a:	4328      	lsli      	r1, r3, 8
    6d0c:	1b02      	addi      	r3, sp, 8
    6d0e:	1a02      	addi      	r2, sp, 8
    6d10:	9240      	ld.w      	r2, (r2, 0x0)
    6d12:	6c84      	or      	r2, r1
    6d14:	b340      	st.w      	r2, (r3, 0x0)
    6d16:	1b05      	addi      	r3, sp, 20
    6d18:	9340      	ld.w      	r2, (r3, 0x0)
    6d1a:	1b04      	addi      	r3, sp, 16
    6d1c:	9360      	ld.w      	r3, (r3, 0x0)
    6d1e:	6d4b      	mov      	r5, r2
    6d20:	6d0f      	mov      	r4, r3
    6d22:	84c0      	ld.b      	r6, (r4, 0x0)
    6d24:	2400      	addi      	r4, 1      	//0x1
    6d26:	0403      	br      	0x6d2c	//6d2c <handle_ldw_16+0xe0>
    6d28:	3501      	movi      	r5, 1      	//0x1
    6d2a:	0401      	br      	0x6d2c	//6d2c <handle_ldw_16+0xe0>
    6d2c:	1b05      	addi      	r3, sp, 20
    6d2e:	b3a0      	st.w      	r5, (r3, 0x0)
    6d30:	1b03      	addi      	r3, sp, 12
    6d32:	b3c0      	st.w      	r6, (r3, 0x0)
    6d34:	1b04      	addi      	r3, sp, 16
    6d36:	b380      	st.w      	r4, (r3, 0x0)
    6d38:	1b03      	addi      	r3, sp, 12
    6d3a:	9360      	ld.w      	r3, (r3, 0x0)
    6d3c:	4330      	lsli      	r1, r3, 16
    6d3e:	1b02      	addi      	r3, sp, 8
    6d40:	1a02      	addi      	r2, sp, 8
    6d42:	9240      	ld.w      	r2, (r2, 0x0)
    6d44:	6c84      	or      	r2, r1
    6d46:	b340      	st.w      	r2, (r3, 0x0)
    6d48:	1b05      	addi      	r3, sp, 20
    6d4a:	9340      	ld.w      	r2, (r3, 0x0)
    6d4c:	1b04      	addi      	r3, sp, 16
    6d4e:	9360      	ld.w      	r3, (r3, 0x0)
    6d50:	6d4b      	mov      	r5, r2
    6d52:	6d0f      	mov      	r4, r3
    6d54:	84c0      	ld.b      	r6, (r4, 0x0)
    6d56:	2400      	addi      	r4, 1      	//0x1
    6d58:	0403      	br      	0x6d5e	//6d5e <handle_ldw_16+0x112>
    6d5a:	3501      	movi      	r5, 1      	//0x1
    6d5c:	0401      	br      	0x6d5e	//6d5e <handle_ldw_16+0x112>
    6d5e:	1b05      	addi      	r3, sp, 20
    6d60:	b3a0      	st.w      	r5, (r3, 0x0)
    6d62:	1b03      	addi      	r3, sp, 12
    6d64:	b3c0      	st.w      	r6, (r3, 0x0)
    6d66:	1b04      	addi      	r3, sp, 16
    6d68:	b380      	st.w      	r4, (r3, 0x0)
    6d6a:	1b03      	addi      	r3, sp, 12
    6d6c:	9360      	ld.w      	r3, (r3, 0x0)
    6d6e:	4338      	lsli      	r1, r3, 24
    6d70:	1b02      	addi      	r3, sp, 8
    6d72:	1a02      	addi      	r2, sp, 8
    6d74:	9240      	ld.w      	r2, (r2, 0x0)
    6d76:	6c84      	or      	r2, r1
    6d78:	b340      	st.w      	r2, (r3, 0x0)
    6d7a:	1b05      	addi      	r3, sp, 20
    6d7c:	9360      	ld.w      	r3, (r3, 0x0)
    6d7e:	e9230012 	bnez      	r3, 0x6da2	//6da2 <handle_ldw_16+0x156>
	if(put_regs_value(tmpval32, regz, regs) != 0){
    6d82:	1902      	addi      	r1, sp, 8
    6d84:	1a09      	addi      	r2, sp, 36
    6d86:	6cfb      	mov      	r3, sp
    6d88:	9100      	ld.w      	r0, (r1, 0x0)
    6d8a:	9220      	ld.w      	r1, (r2, 0x0)
    6d8c:	9340      	ld.w      	r2, (r3, 0x0)
    6d8e:	e3fffea3 	bsr      	0x6ad4	//6ad4 <put_regs_value>
    6d92:	c4004820 	lsli      	r0, r0, 0
    6d96:	6cc3      	mov      	r3, r0
    6d98:	e9230004 	bnez      	r3, 0x6da0	//6da0 <handle_ldw_16+0x154>
		goto fault;
	}

	return HANDLER_SUCCESS;
    6d9c:	3300      	movi      	r3, 0      	//0x0
    6d9e:	0403      	br      	0x6da4	//6da4 <handle_ldw_16+0x158>

	dataregx = get_regs_value(regx, regs);
	destaddr = dataregx + (imm5 << 2);
	get32_unaligned_check(tmpval32, destaddr);
	if(put_regs_value(tmpval32, regz, regs) != 0){
		goto fault;
    6da0:	6c00      	or      	r0, r0
	}

	return HANDLER_SUCCESS;
fault:
	return HANDLER_FAILURE;	
    6da2:	3301      	movi      	r3, 1      	//0x1
}
    6da4:	6c0f      	mov      	r0, r3
    6da6:	140b      	addi      	sp, sp, 44
    6da8:	1493      	pop      	r4-r6, r15
	...

00006dac <handle_ldw_sp_16>:

static int 
handle_ldw_sp_16(unsigned long instr, Ckcore_SavedRegisters *regs){
    6dac:	14d3      	push      	r4-r6, r15
    6dae:	142b      	subi      	sp, sp, 44
    6db0:	1b01      	addi      	r3, sp, 4
    6db2:	b300      	st.w      	r0, (r3, 0x0)
    6db4:	6cfb      	mov      	r3, sp
    6db6:	b320      	st.w      	r1, (r3, 0x0)
	unsigned int regz = (instr >> 5) & 0x7;
    6db8:	1b01      	addi      	r3, sp, 4
    6dba:	9360      	ld.w      	r3, (r3, 0x0)
    6dbc:	4b45      	lsri      	r2, r3, 5
    6dbe:	1b0a      	addi      	r3, sp, 40
    6dc0:	e4422007 	andi      	r2, r2, 7
    6dc4:	b340      	st.w      	r2, (r3, 0x0)
	unsigned int imm5 = instr & 0x1f;
    6dc6:	1b09      	addi      	r3, sp, 36
    6dc8:	1a01      	addi      	r2, sp, 4
    6dca:	9240      	ld.w      	r2, (r2, 0x0)
    6dcc:	e442201f 	andi      	r2, r2, 31
    6dd0:	b340      	st.w      	r2, (r3, 0x0)
	unsigned int imm3 = (instr >> 8) & 0x7;
    6dd2:	1b01      	addi      	r3, sp, 4
    6dd4:	9360      	ld.w      	r3, (r3, 0x0)
    6dd6:	4b48      	lsri      	r2, r3, 8
    6dd8:	1b08      	addi      	r3, sp, 32
    6dda:	e4422007 	andi      	r2, r2, 7
    6dde:	b340      	st.w      	r2, (r3, 0x0)
	unsigned int destaddr,tmpval32;
	unsigned int datasp;

	datasp = get_regs_value(SP_NUM, regs);
    6de0:	1c07      	addi      	r4, sp, 28
    6de2:	6cfb      	mov      	r3, sp
    6de4:	300e      	movi      	r0, 14      	//0xe
    6de6:	9320      	ld.w      	r1, (r3, 0x0)
    6de8:	e3fffe48 	bsr      	0x6a78	//6a78 <get_regs_value>
    6dec:	c4004820 	lsli      	r0, r0, 0
    6df0:	b400      	st.w      	r0, (r4, 0x0)
	destaddr = datasp + (((imm3 << 5) | imm5) << 2);
    6df2:	1b08      	addi      	r3, sp, 32
    6df4:	9360      	ld.w      	r3, (r3, 0x0)
    6df6:	4345      	lsli      	r2, r3, 5
    6df8:	1b09      	addi      	r3, sp, 36
    6dfa:	9360      	ld.w      	r3, (r3, 0x0)
    6dfc:	6cc8      	or      	r3, r2
    6dfe:	4322      	lsli      	r1, r3, 2
    6e00:	1b06      	addi      	r3, sp, 24
    6e02:	1a07      	addi      	r2, sp, 28
    6e04:	9240      	ld.w      	r2, (r2, 0x0)
    6e06:	5948      	addu      	r2, r1, r2
    6e08:	b340      	st.w      	r2, (r3, 0x0)
	get32_unaligned_check(tmpval32, destaddr);
    6e0a:	1b05      	addi      	r3, sp, 20
    6e0c:	3200      	movi      	r2, 0      	//0x0
    6e0e:	b340      	st.w      	r2, (r3, 0x0)
    6e10:	1b04      	addi      	r3, sp, 16
    6e12:	1a06      	addi      	r2, sp, 24
    6e14:	9240      	ld.w      	r2, (r2, 0x0)
    6e16:	b340      	st.w      	r2, (r3, 0x0)
    6e18:	1b05      	addi      	r3, sp, 20
    6e1a:	9340      	ld.w      	r2, (r3, 0x0)
    6e1c:	1b04      	addi      	r3, sp, 16
    6e1e:	9360      	ld.w      	r3, (r3, 0x0)
    6e20:	6d4b      	mov      	r5, r2
    6e22:	6d0f      	mov      	r4, r3
    6e24:	84c0      	ld.b      	r6, (r4, 0x0)
    6e26:	2400      	addi      	r4, 1      	//0x1
    6e28:	0408      	br      	0x6e38	//6e38 <handle_ldw_sp_16+0x8c>
    6e2a:	3501      	movi      	r5, 1      	//0x1
    6e2c:	0406      	br      	0x6e38	//6e38 <handle_ldw_sp_16+0x8c>
    6e2e:	0000      	.short	0x0000
    6e30:	00006ad4 	.long	0x00006ad4
    6e34:	00006a78 	.long	0x00006a78
    6e38:	1b05      	addi      	r3, sp, 20
    6e3a:	b3a0      	st.w      	r5, (r3, 0x0)
    6e3c:	1b03      	addi      	r3, sp, 12
    6e3e:	b3c0      	st.w      	r6, (r3, 0x0)
    6e40:	1b04      	addi      	r3, sp, 16
    6e42:	b380      	st.w      	r4, (r3, 0x0)
    6e44:	1b02      	addi      	r3, sp, 8
    6e46:	1a03      	addi      	r2, sp, 12
    6e48:	9240      	ld.w      	r2, (r2, 0x0)
    6e4a:	b340      	st.w      	r2, (r3, 0x0)
    6e4c:	1b05      	addi      	r3, sp, 20
    6e4e:	9340      	ld.w      	r2, (r3, 0x0)
    6e50:	1b04      	addi      	r3, sp, 16
    6e52:	9360      	ld.w      	r3, (r3, 0x0)
    6e54:	6d4b      	mov      	r5, r2
    6e56:	6d0f      	mov      	r4, r3
    6e58:	84c0      	ld.b      	r6, (r4, 0x0)
    6e5a:	2400      	addi      	r4, 1      	//0x1
    6e5c:	0403      	br      	0x6e62	//6e62 <handle_ldw_sp_16+0xb6>
    6e5e:	3501      	movi      	r5, 1      	//0x1
    6e60:	0401      	br      	0x6e62	//6e62 <handle_ldw_sp_16+0xb6>
    6e62:	1b05      	addi      	r3, sp, 20
    6e64:	b3a0      	st.w      	r5, (r3, 0x0)
    6e66:	1b03      	addi      	r3, sp, 12
    6e68:	b3c0      	st.w      	r6, (r3, 0x0)
    6e6a:	1b04      	addi      	r3, sp, 16
    6e6c:	b380      	st.w      	r4, (r3, 0x0)
    6e6e:	1b03      	addi      	r3, sp, 12
    6e70:	9360      	ld.w      	r3, (r3, 0x0)
    6e72:	4328      	lsli      	r1, r3, 8
    6e74:	1b02      	addi      	r3, sp, 8
    6e76:	1a02      	addi      	r2, sp, 8
    6e78:	9240      	ld.w      	r2, (r2, 0x0)
    6e7a:	6c84      	or      	r2, r1
    6e7c:	b340      	st.w      	r2, (r3, 0x0)
    6e7e:	1b05      	addi      	r3, sp, 20
    6e80:	9340      	ld.w      	r2, (r3, 0x0)
    6e82:	1b04      	addi      	r3, sp, 16
    6e84:	9360      	ld.w      	r3, (r3, 0x0)
    6e86:	6d4b      	mov      	r5, r2
    6e88:	6d0f      	mov      	r4, r3
    6e8a:	84c0      	ld.b      	r6, (r4, 0x0)
    6e8c:	2400      	addi      	r4, 1      	//0x1
    6e8e:	0403      	br      	0x6e94	//6e94 <handle_ldw_sp_16+0xe8>
    6e90:	3501      	movi      	r5, 1      	//0x1
    6e92:	0401      	br      	0x6e94	//6e94 <handle_ldw_sp_16+0xe8>
    6e94:	1b05      	addi      	r3, sp, 20
    6e96:	b3a0      	st.w      	r5, (r3, 0x0)
    6e98:	1b03      	addi      	r3, sp, 12
    6e9a:	b3c0      	st.w      	r6, (r3, 0x0)
    6e9c:	1b04      	addi      	r3, sp, 16
    6e9e:	b380      	st.w      	r4, (r3, 0x0)
    6ea0:	1b03      	addi      	r3, sp, 12
    6ea2:	9360      	ld.w      	r3, (r3, 0x0)
    6ea4:	4330      	lsli      	r1, r3, 16
    6ea6:	1b02      	addi      	r3, sp, 8
    6ea8:	1a02      	addi      	r2, sp, 8
    6eaa:	9240      	ld.w      	r2, (r2, 0x0)
    6eac:	6c84      	or      	r2, r1
    6eae:	b340      	st.w      	r2, (r3, 0x0)
    6eb0:	1b05      	addi      	r3, sp, 20
    6eb2:	9340      	ld.w      	r2, (r3, 0x0)
    6eb4:	1b04      	addi      	r3, sp, 16
    6eb6:	9360      	ld.w      	r3, (r3, 0x0)
    6eb8:	6d4b      	mov      	r5, r2
    6eba:	6d0f      	mov      	r4, r3
    6ebc:	84c0      	ld.b      	r6, (r4, 0x0)
    6ebe:	2400      	addi      	r4, 1      	//0x1
    6ec0:	0403      	br      	0x6ec6	//6ec6 <handle_ldw_sp_16+0x11a>
    6ec2:	3501      	movi      	r5, 1      	//0x1
    6ec4:	0401      	br      	0x6ec6	//6ec6 <handle_ldw_sp_16+0x11a>
    6ec6:	1b05      	addi      	r3, sp, 20
    6ec8:	b3a0      	st.w      	r5, (r3, 0x0)
    6eca:	1b03      	addi      	r3, sp, 12
    6ecc:	b3c0      	st.w      	r6, (r3, 0x0)
    6ece:	1b04      	addi      	r3, sp, 16
    6ed0:	b380      	st.w      	r4, (r3, 0x0)
    6ed2:	1b03      	addi      	r3, sp, 12
    6ed4:	9360      	ld.w      	r3, (r3, 0x0)
    6ed6:	4338      	lsli      	r1, r3, 24
    6ed8:	1b02      	addi      	r3, sp, 8
    6eda:	1a02      	addi      	r2, sp, 8
    6edc:	9240      	ld.w      	r2, (r2, 0x0)
    6ede:	6c84      	or      	r2, r1
    6ee0:	b340      	st.w      	r2, (r3, 0x0)
    6ee2:	1b05      	addi      	r3, sp, 20
    6ee4:	9360      	ld.w      	r3, (r3, 0x0)
    6ee6:	e9230012 	bnez      	r3, 0x6f0a	//6f0a <handle_ldw_sp_16+0x15e>
	if(put_regs_value(tmpval32, regz, regs) != 0){
    6eea:	1902      	addi      	r1, sp, 8
    6eec:	1a0a      	addi      	r2, sp, 40
    6eee:	6cfb      	mov      	r3, sp
    6ef0:	9100      	ld.w      	r0, (r1, 0x0)
    6ef2:	9220      	ld.w      	r1, (r2, 0x0)
    6ef4:	9340      	ld.w      	r2, (r3, 0x0)
    6ef6:	e3fffdef 	bsr      	0x6ad4	//6ad4 <put_regs_value>
    6efa:	c4004820 	lsli      	r0, r0, 0
    6efe:	6cc3      	mov      	r3, r0
    6f00:	e9230004 	bnez      	r3, 0x6f08	//6f08 <handle_ldw_sp_16+0x15c>
		goto fault;
	}
	
	return HANDLER_SUCCESS;
    6f04:	3300      	movi      	r3, 0      	//0x0
    6f06:	0403      	br      	0x6f0c	//6f0c <handle_ldw_sp_16+0x160>

	datasp = get_regs_value(SP_NUM, regs);
	destaddr = datasp + (((imm3 << 5) | imm5) << 2);
	get32_unaligned_check(tmpval32, destaddr);
	if(put_regs_value(tmpval32, regz, regs) != 0){
		goto fault;
    6f08:	6c00      	or      	r0, r0
	}
	
	return HANDLER_SUCCESS;
fault:
	return HANDLER_FAILURE;	
    6f0a:	3301      	movi      	r3, 1      	//0x1
}
    6f0c:	6c0f      	mov      	r0, r3
    6f0e:	140b      	addi      	sp, sp, 44
    6f10:	1493      	pop      	r4-r6, r15
	...

00006f14 <handle_sth_16>:

static int 
handle_sth_16(unsigned long instr, Ckcore_SavedRegisters *regs){
    6f14:	14d3      	push      	r4-r6, r15
    6f16:	142b      	subi      	sp, sp, 44
    6f18:	1b01      	addi      	r3, sp, 4
    6f1a:	b300      	st.w      	r0, (r3, 0x0)
    6f1c:	6cfb      	mov      	r3, sp
    6f1e:	b320      	st.w      	r1, (r3, 0x0)
	unsigned int regx = (instr >> 8) & 0x7;
    6f20:	1b01      	addi      	r3, sp, 4
    6f22:	9360      	ld.w      	r3, (r3, 0x0)
    6f24:	4b48      	lsri      	r2, r3, 8
    6f26:	1b0a      	addi      	r3, sp, 40
    6f28:	e4422007 	andi      	r2, r2, 7
    6f2c:	b340      	st.w      	r2, (r3, 0x0)
	unsigned int regz = (instr >> 5) & 0x7;
    6f2e:	1b01      	addi      	r3, sp, 4
    6f30:	9360      	ld.w      	r3, (r3, 0x0)
    6f32:	4b45      	lsri      	r2, r3, 5
    6f34:	1b09      	addi      	r3, sp, 36
    6f36:	e4422007 	andi      	r2, r2, 7
    6f3a:	b340      	st.w      	r2, (r3, 0x0)
	unsigned int imm5 = instr & 0x1f;
    6f3c:	1b08      	addi      	r3, sp, 32
    6f3e:	1a01      	addi      	r2, sp, 4
    6f40:	9240      	ld.w      	r2, (r2, 0x0)
    6f42:	e442201f 	andi      	r2, r2, 31
    6f46:	b340      	st.w      	r2, (r3, 0x0)
	unsigned int destaddr;
	unsigned int dataregx,dataregz;

	dataregx = get_regs_value(regx, regs);
    6f48:	1c07      	addi      	r4, sp, 28
    6f4a:	1a0a      	addi      	r2, sp, 40
    6f4c:	6cfb      	mov      	r3, sp
    6f4e:	9200      	ld.w      	r0, (r2, 0x0)
    6f50:	9320      	ld.w      	r1, (r3, 0x0)
    6f52:	e3fffd93 	bsr      	0x6a78	//6a78 <get_regs_value>
    6f56:	c4004820 	lsli      	r0, r0, 0
    6f5a:	b400      	st.w      	r0, (r4, 0x0)
	destaddr = dataregx + (imm5 << 1);
    6f5c:	1b08      	addi      	r3, sp, 32
    6f5e:	9360      	ld.w      	r3, (r3, 0x0)
    6f60:	5b6c      	addu      	r3, r3, r3
    6f62:	6c4f      	mov      	r1, r3
    6f64:	1b06      	addi      	r3, sp, 24
    6f66:	1a07      	addi      	r2, sp, 28
    6f68:	9240      	ld.w      	r2, (r2, 0x0)
    6f6a:	5948      	addu      	r2, r1, r2
    6f6c:	b340      	st.w      	r2, (r3, 0x0)
	dataregz = get_regs_value(regz, regs);
    6f6e:	1c05      	addi      	r4, sp, 20
    6f70:	1a09      	addi      	r2, sp, 36
    6f72:	6cfb      	mov      	r3, sp
    6f74:	9200      	ld.w      	r0, (r2, 0x0)
    6f76:	9320      	ld.w      	r1, (r3, 0x0)
    6f78:	e3fffd80 	bsr      	0x6a78	//6a78 <get_regs_value>
    6f7c:	c4004820 	lsli      	r0, r0, 0
    6f80:	b400      	st.w      	r0, (r4, 0x0)
	put16_unaligned_check(dataregz, destaddr);
    6f82:	1b04      	addi      	r3, sp, 16
    6f84:	3200      	movi      	r2, 0      	//0x0
    6f86:	b340      	st.w      	r2, (r3, 0x0)
    6f88:	1b03      	addi      	r3, sp, 12
    6f8a:	1a05      	addi      	r2, sp, 20
    6f8c:	9240      	ld.w      	r2, (r2, 0x0)
    6f8e:	b340      	st.w      	r2, (r3, 0x0)
    6f90:	1b02      	addi      	r3, sp, 8
    6f92:	1a06      	addi      	r2, sp, 24
    6f94:	9240      	ld.w      	r2, (r2, 0x0)
    6f96:	b340      	st.w      	r2, (r3, 0x0)
    6f98:	1b04      	addi      	r3, sp, 16
    6f9a:	9320      	ld.w      	r1, (r3, 0x0)
    6f9c:	1b03      	addi      	r3, sp, 12
    6f9e:	9340      	ld.w      	r2, (r3, 0x0)
    6fa0:	1b02      	addi      	r3, sp, 8
    6fa2:	9360      	ld.w      	r3, (r3, 0x0)
    6fa4:	6d87      	mov      	r6, r1
    6fa6:	6d4b      	mov      	r5, r2
    6fa8:	6d0f      	mov      	r4, r3
    6faa:	a4a0      	st.b      	r5, (r4, 0x0)
    6fac:	2400      	addi      	r4, 1      	//0x1
    6fae:	4da8      	lsri      	r5, r5, 8
    6fb0:	a4a0      	st.b      	r5, (r4, 0x0)
    6fb2:	0407      	br      	0x6fc0	//6fc0 <handle_sth_16+0xac>
    6fb4:	3601      	movi      	r6, 1      	//0x1
    6fb6:	0405      	br      	0x6fc0	//6fc0 <handle_sth_16+0xac>
    6fb8:	00006ad4 	.long	0x00006ad4
    6fbc:	00006a78 	.long	0x00006a78
    6fc0:	1b04      	addi      	r3, sp, 16
    6fc2:	b3c0      	st.w      	r6, (r3, 0x0)
    6fc4:	1b03      	addi      	r3, sp, 12
    6fc6:	b3a0      	st.w      	r5, (r3, 0x0)
    6fc8:	1b02      	addi      	r3, sp, 8
    6fca:	b380      	st.w      	r4, (r3, 0x0)
    6fcc:	1b04      	addi      	r3, sp, 16
    6fce:	9360      	ld.w      	r3, (r3, 0x0)
    6fd0:	e9230004 	bnez      	r3, 0x6fd8	//6fd8 <handle_sth_16+0xc4>
	
	return HANDLER_SUCCESS;
    6fd4:	3300      	movi      	r3, 0      	//0x0
    6fd6:	0402      	br      	0x6fda	//6fda <handle_sth_16+0xc6>
fault:
	return HANDLER_FAILURE;	
    6fd8:	3301      	movi      	r3, 1      	//0x1
}
    6fda:	6c0f      	mov      	r0, r3
    6fdc:	140b      	addi      	sp, sp, 44
    6fde:	1493      	pop      	r4-r6, r15

00006fe0 <handle_stw_16>:

static int 
handle_stw_16(unsigned long instr, Ckcore_SavedRegisters *regs){
    6fe0:	14d3      	push      	r4-r6, r15
    6fe2:	142b      	subi      	sp, sp, 44
    6fe4:	1b01      	addi      	r3, sp, 4
    6fe6:	b300      	st.w      	r0, (r3, 0x0)
    6fe8:	6cfb      	mov      	r3, sp
    6fea:	b320      	st.w      	r1, (r3, 0x0)
	unsigned int regx = (instr >> 8) & 0x7;
    6fec:	1b01      	addi      	r3, sp, 4
    6fee:	9360      	ld.w      	r3, (r3, 0x0)
    6ff0:	4b48      	lsri      	r2, r3, 8
    6ff2:	1b0a      	addi      	r3, sp, 40
    6ff4:	e4422007 	andi      	r2, r2, 7
    6ff8:	b340      	st.w      	r2, (r3, 0x0)
	unsigned int regz = (instr >> 5) & 0x7;
    6ffa:	1b01      	addi      	r3, sp, 4
    6ffc:	9360      	ld.w      	r3, (r3, 0x0)
    6ffe:	4b45      	lsri      	r2, r3, 5
    7000:	1b09      	addi      	r3, sp, 36
    7002:	e4422007 	andi      	r2, r2, 7
    7006:	b340      	st.w      	r2, (r3, 0x0)
	unsigned int imm5 = instr & 0x1f;
    7008:	1b08      	addi      	r3, sp, 32
    700a:	1a01      	addi      	r2, sp, 4
    700c:	9240      	ld.w      	r2, (r2, 0x0)
    700e:	e442201f 	andi      	r2, r2, 31
    7012:	b340      	st.w      	r2, (r3, 0x0)
	unsigned int destaddr;
	unsigned int dataregx,dataregz;

	dataregx = get_regs_value(regx, regs);
    7014:	1c07      	addi      	r4, sp, 28
    7016:	1a0a      	addi      	r2, sp, 40
    7018:	6cfb      	mov      	r3, sp
    701a:	9200      	ld.w      	r0, (r2, 0x0)
    701c:	9320      	ld.w      	r1, (r3, 0x0)
    701e:	e3fffd2d 	bsr      	0x6a78	//6a78 <get_regs_value>
    7022:	c4004820 	lsli      	r0, r0, 0
    7026:	b400      	st.w      	r0, (r4, 0x0)
	destaddr = dataregx + (imm5 << 2);
    7028:	1b08      	addi      	r3, sp, 32
    702a:	9360      	ld.w      	r3, (r3, 0x0)
    702c:	4322      	lsli      	r1, r3, 2
    702e:	1b06      	addi      	r3, sp, 24
    7030:	1a07      	addi      	r2, sp, 28
    7032:	9240      	ld.w      	r2, (r2, 0x0)
    7034:	5948      	addu      	r2, r1, r2
    7036:	b340      	st.w      	r2, (r3, 0x0)
	dataregz = get_regs_value(regz, regs);
    7038:	1c05      	addi      	r4, sp, 20
    703a:	1a09      	addi      	r2, sp, 36
    703c:	6cfb      	mov      	r3, sp
    703e:	9200      	ld.w      	r0, (r2, 0x0)
    7040:	9320      	ld.w      	r1, (r3, 0x0)
    7042:	e3fffd1b 	bsr      	0x6a78	//6a78 <get_regs_value>
    7046:	c4004820 	lsli      	r0, r0, 0
    704a:	b400      	st.w      	r0, (r4, 0x0)
	put32_unaligned_check(dataregz, destaddr);
    704c:	1b04      	addi      	r3, sp, 16
    704e:	3200      	movi      	r2, 0      	//0x0
    7050:	b340      	st.w      	r2, (r3, 0x0)
    7052:	1b03      	addi      	r3, sp, 12
    7054:	1a05      	addi      	r2, sp, 20
    7056:	9240      	ld.w      	r2, (r2, 0x0)
    7058:	b340      	st.w      	r2, (r3, 0x0)
    705a:	1b02      	addi      	r3, sp, 8
    705c:	1a06      	addi      	r2, sp, 24
    705e:	9240      	ld.w      	r2, (r2, 0x0)
    7060:	b340      	st.w      	r2, (r3, 0x0)
    7062:	1b04      	addi      	r3, sp, 16
    7064:	9320      	ld.w      	r1, (r3, 0x0)
    7066:	1b03      	addi      	r3, sp, 12
    7068:	9340      	ld.w      	r2, (r3, 0x0)
    706a:	1b02      	addi      	r3, sp, 8
    706c:	9360      	ld.w      	r3, (r3, 0x0)
    706e:	6d87      	mov      	r6, r1
    7070:	6d4b      	mov      	r5, r2
    7072:	6d0f      	mov      	r4, r3
    7074:	a4a0      	st.b      	r5, (r4, 0x0)
    7076:	2400      	addi      	r4, 1      	//0x1
    7078:	4da8      	lsri      	r5, r5, 8
    707a:	a4a0      	st.b      	r5, (r4, 0x0)
    707c:	2400      	addi      	r4, 1      	//0x1
    707e:	4da8      	lsri      	r5, r5, 8
    7080:	a4a0      	st.b      	r5, (r4, 0x0)
    7082:	2400      	addi      	r4, 1      	//0x1
    7084:	4da8      	lsri      	r5, r5, 8
    7086:	a4a0      	st.b      	r5, (r4, 0x0)
    7088:	0406      	br      	0x7094	//7094 <handle_stw_16+0xb4>
    708a:	3601      	movi      	r6, 1      	//0x1
    708c:	0404      	br      	0x7094	//7094 <handle_stw_16+0xb4>
    708e:	0000      	.short	0x0000
    7090:	00006a78 	.long	0x00006a78
    7094:	1b04      	addi      	r3, sp, 16
    7096:	b3c0      	st.w      	r6, (r3, 0x0)
    7098:	1b03      	addi      	r3, sp, 12
    709a:	b3a0      	st.w      	r5, (r3, 0x0)
    709c:	1b02      	addi      	r3, sp, 8
    709e:	b380      	st.w      	r4, (r3, 0x0)
    70a0:	1b04      	addi      	r3, sp, 16
    70a2:	9360      	ld.w      	r3, (r3, 0x0)
    70a4:	e9230004 	bnez      	r3, 0x70ac	//70ac <handle_stw_16+0xcc>
	
	return HANDLER_SUCCESS;
    70a8:	3300      	movi      	r3, 0      	//0x0
    70aa:	0402      	br      	0x70ae	//70ae <handle_stw_16+0xce>
fault:
	return HANDLER_FAILURE;	
    70ac:	3301      	movi      	r3, 1      	//0x1
}
    70ae:	6c0f      	mov      	r0, r3
    70b0:	140b      	addi      	sp, sp, 44
    70b2:	1493      	pop      	r4-r6, r15

000070b4 <handle_stw_sp_16>:

static int 
handle_stw_sp_16(unsigned long instr, Ckcore_SavedRegisters *regs){
    70b4:	14d3      	push      	r4-r6, r15
    70b6:	142b      	subi      	sp, sp, 44
    70b8:	1b01      	addi      	r3, sp, 4
    70ba:	b300      	st.w      	r0, (r3, 0x0)
    70bc:	6cfb      	mov      	r3, sp
    70be:	b320      	st.w      	r1, (r3, 0x0)
	unsigned int regz = (instr >> 5) & 0x7;
    70c0:	1b01      	addi      	r3, sp, 4
    70c2:	9360      	ld.w      	r3, (r3, 0x0)
    70c4:	4b45      	lsri      	r2, r3, 5
    70c6:	1b0a      	addi      	r3, sp, 40
    70c8:	e4422007 	andi      	r2, r2, 7
    70cc:	b340      	st.w      	r2, (r3, 0x0)
	unsigned int imm5 = instr & 0x1f;
    70ce:	1b09      	addi      	r3, sp, 36
    70d0:	1a01      	addi      	r2, sp, 4
    70d2:	9240      	ld.w      	r2, (r2, 0x0)
    70d4:	e442201f 	andi      	r2, r2, 31
    70d8:	b340      	st.w      	r2, (r3, 0x0)
	unsigned int imm3 = (instr >> 8) & 0x7;
    70da:	1b01      	addi      	r3, sp, 4
    70dc:	9360      	ld.w      	r3, (r3, 0x0)
    70de:	4b48      	lsri      	r2, r3, 8
    70e0:	1b08      	addi      	r3, sp, 32
    70e2:	e4422007 	andi      	r2, r2, 7
    70e6:	b340      	st.w      	r2, (r3, 0x0)
	unsigned int destaddr;
	unsigned int datasp,dataregz;

	datasp = get_regs_value(SP_NUM, regs);
    70e8:	1c07      	addi      	r4, sp, 28
    70ea:	6cfb      	mov      	r3, sp
    70ec:	300e      	movi      	r0, 14      	//0xe
    70ee:	9320      	ld.w      	r1, (r3, 0x0)
    70f0:	e3fffcc4 	bsr      	0x6a78	//6a78 <get_regs_value>
    70f4:	c4004820 	lsli      	r0, r0, 0
    70f8:	b400      	st.w      	r0, (r4, 0x0)
	destaddr = datasp + (((imm3 << 5) | imm5) << 2);
    70fa:	1b08      	addi      	r3, sp, 32
    70fc:	9360      	ld.w      	r3, (r3, 0x0)
    70fe:	4345      	lsli      	r2, r3, 5
    7100:	1b09      	addi      	r3, sp, 36
    7102:	9360      	ld.w      	r3, (r3, 0x0)
    7104:	6cc8      	or      	r3, r2
    7106:	4322      	lsli      	r1, r3, 2
    7108:	1b06      	addi      	r3, sp, 24
    710a:	1a07      	addi      	r2, sp, 28
    710c:	9240      	ld.w      	r2, (r2, 0x0)
    710e:	5948      	addu      	r2, r1, r2
    7110:	b340      	st.w      	r2, (r3, 0x0)
	dataregz = get_regs_value(regz, regs);
    7112:	1c05      	addi      	r4, sp, 20
    7114:	1a0a      	addi      	r2, sp, 40
    7116:	6cfb      	mov      	r3, sp
    7118:	9200      	ld.w      	r0, (r2, 0x0)
    711a:	9320      	ld.w      	r1, (r3, 0x0)
    711c:	e3fffcae 	bsr      	0x6a78	//6a78 <get_regs_value>
    7120:	c4004820 	lsli      	r0, r0, 0
    7124:	b400      	st.w      	r0, (r4, 0x0)
	put32_unaligned_check(dataregz, destaddr);
    7126:	1b04      	addi      	r3, sp, 16
    7128:	3200      	movi      	r2, 0      	//0x0
    712a:	b340      	st.w      	r2, (r3, 0x0)
    712c:	1b03      	addi      	r3, sp, 12
    712e:	1a05      	addi      	r2, sp, 20
    7130:	9240      	ld.w      	r2, (r2, 0x0)
    7132:	b340      	st.w      	r2, (r3, 0x0)
    7134:	1b02      	addi      	r3, sp, 8
    7136:	1a06      	addi      	r2, sp, 24
    7138:	9240      	ld.w      	r2, (r2, 0x0)
    713a:	b340      	st.w      	r2, (r3, 0x0)
    713c:	1b04      	addi      	r3, sp, 16
    713e:	9320      	ld.w      	r1, (r3, 0x0)
    7140:	1b03      	addi      	r3, sp, 12
    7142:	9340      	ld.w      	r2, (r3, 0x0)
    7144:	1b02      	addi      	r3, sp, 8
    7146:	9360      	ld.w      	r3, (r3, 0x0)
    7148:	6d87      	mov      	r6, r1
    714a:	6d4b      	mov      	r5, r2
    714c:	6d0f      	mov      	r4, r3
    714e:	a4a0      	st.b      	r5, (r4, 0x0)
    7150:	2400      	addi      	r4, 1      	//0x1
    7152:	4da8      	lsri      	r5, r5, 8
    7154:	a4a0      	st.b      	r5, (r4, 0x0)
    7156:	2400      	addi      	r4, 1      	//0x1
    7158:	4da8      	lsri      	r5, r5, 8
    715a:	a4a0      	st.b      	r5, (r4, 0x0)
    715c:	2400      	addi      	r4, 1      	//0x1
    715e:	4da8      	lsri      	r5, r5, 8
    7160:	a4a0      	st.b      	r5, (r4, 0x0)
    7162:	0405      	br      	0x716c	//716c <handle_stw_sp_16+0xb8>
    7164:	3601      	movi      	r6, 1      	//0x1
    7166:	0403      	br      	0x716c	//716c <handle_stw_sp_16+0xb8>
    7168:	00006a78 	.long	0x00006a78
    716c:	1b04      	addi      	r3, sp, 16
    716e:	b3c0      	st.w      	r6, (r3, 0x0)
    7170:	1b03      	addi      	r3, sp, 12
    7172:	b3a0      	st.w      	r5, (r3, 0x0)
    7174:	1b02      	addi      	r3, sp, 8
    7176:	b380      	st.w      	r4, (r3, 0x0)
    7178:	1b04      	addi      	r3, sp, 16
    717a:	9360      	ld.w      	r3, (r3, 0x0)
    717c:	e9230004 	bnez      	r3, 0x7184	//7184 <handle_stw_sp_16+0xd0>
	
	return HANDLER_SUCCESS;
    7180:	3300      	movi      	r3, 0      	//0x0
    7182:	0402      	br      	0x7186	//7186 <handle_stw_sp_16+0xd2>
fault:
	return HANDLER_FAILURE;	
    7184:	3301      	movi      	r3, 1      	//0x1
}
    7186:	6c0f      	mov      	r0, r3
    7188:	140b      	addi      	sp, sp, 44
    718a:	1493      	pop      	r4-r6, r15

0000718c <handle_push_pop_16>:

static int 
handle_push_pop_16(unsigned long instr, Ckcore_SavedRegisters *regs){
    718c:	14d3      	push      	r4-r6, r15
    718e:	1434      	subi      	sp, sp, 80
    7190:	1b01      	addi      	r3, sp, 4
    7192:	b300      	st.w      	r0, (r3, 0x0)
    7194:	6cfb      	mov      	r3, sp
    7196:	b320      	st.w      	r1, (r3, 0x0)
	unsigned int push_pop = instr & 0xffe0;
    7198:	1b12      	addi      	r3, sp, 72
    719a:	1a01      	addi      	r2, sp, 4
    719c:	9220      	ld.w      	r1, (r2, 0x0)
    719e:	ea02ffe0 	movi      	r2, 65504      	//0xffe0
    71a2:	6884      	and      	r2, r1
    71a4:	b340      	st.w      	r2, (r3, 0x0)
	unsigned int list1 = instr & 0xf;
    71a6:	1b11      	addi      	r3, sp, 68
    71a8:	1a01      	addi      	r2, sp, 4
    71aa:	9240      	ld.w      	r2, (r2, 0x0)
    71ac:	e442200f 	andi      	r2, r2, 15
    71b0:	b340      	st.w      	r2, (r3, 0x0)
	unsigned int has_r15 = (instr & 0x0010) >> 4;
    71b2:	1b01      	addi      	r3, sp, 4
    71b4:	9360      	ld.w      	r3, (r3, 0x0)
    71b6:	e4432010 	andi      	r2, r3, 16
    71ba:	1b10      	addi      	r3, sp, 64
    71bc:	4a44      	lsri      	r2, r2, 4
    71be:	b340      	st.w      	r2, (r3, 0x0)
	unsigned int datasp, tmpval32, i;

	datasp = get_regs_value(SP_NUM, regs);
    71c0:	1c0f      	addi      	r4, sp, 60
    71c2:	6cfb      	mov      	r3, sp
    71c4:	300e      	movi      	r0, 14      	//0xe
    71c6:	9320      	ld.w      	r1, (r3, 0x0)
    71c8:	e3fffc58 	bsr      	0x6a78	//6a78 <get_regs_value>
    71cc:	c4004820 	lsli      	r0, r0, 0
    71d0:	b400      	st.w      	r0, (r4, 0x0)

	if(push_pop == 0x1480){ // pop
    71d2:	1b12      	addi      	r3, sp, 72
    71d4:	9360      	ld.w      	r3, (r3, 0x0)
    71d6:	eb431480 	cmpnei      	r3, 5248      	//0x1480
    71da:	092a      	bt      	0x742e	//742e <handle_push_pop_16+0x2a2>
		for(i = 0; i < list1; i++){
    71dc:	1b13      	addi      	r3, sp, 76
    71de:	3200      	movi      	r2, 0      	//0x0
    71e0:	b340      	st.w      	r2, (r3, 0x0)
    71e2:	0486      	br      	0x72ee	//72ee <handle_push_pop_16+0x162>
			get32_unaligned_check(tmpval32, datasp + i * 4);
    71e4:	1b0e      	addi      	r3, sp, 56
    71e6:	3200      	movi      	r2, 0      	//0x0
    71e8:	b340      	st.w      	r2, (r3, 0x0)
    71ea:	1b13      	addi      	r3, sp, 76
    71ec:	9360      	ld.w      	r3, (r3, 0x0)
    71ee:	4322      	lsli      	r1, r3, 2
    71f0:	1b0d      	addi      	r3, sp, 52
    71f2:	1a0f      	addi      	r2, sp, 60
    71f4:	9240      	ld.w      	r2, (r2, 0x0)
    71f6:	5948      	addu      	r2, r1, r2
    71f8:	b340      	st.w      	r2, (r3, 0x0)
    71fa:	1b0e      	addi      	r3, sp, 56
    71fc:	9340      	ld.w      	r2, (r3, 0x0)
    71fe:	1b0d      	addi      	r3, sp, 52
    7200:	9360      	ld.w      	r3, (r3, 0x0)
    7202:	6d4b      	mov      	r5, r2
    7204:	6d0f      	mov      	r4, r3
    7206:	84c0      	ld.b      	r6, (r4, 0x0)
    7208:	2400      	addi      	r4, 1      	//0x1
    720a:	0405      	br      	0x7214	//7214 <handle_push_pop_16+0x88>
    720c:	3501      	movi      	r5, 1      	//0x1
    720e:	0403      	br      	0x7214	//7214 <handle_push_pop_16+0x88>
    7210:	00006a78 	.long	0x00006a78
    7214:	1b0e      	addi      	r3, sp, 56
    7216:	b3a0      	st.w      	r5, (r3, 0x0)
    7218:	1b0c      	addi      	r3, sp, 48
    721a:	b3c0      	st.w      	r6, (r3, 0x0)
    721c:	1b0d      	addi      	r3, sp, 52
    721e:	b380      	st.w      	r4, (r3, 0x0)
    7220:	1b0b      	addi      	r3, sp, 44
    7222:	1a0c      	addi      	r2, sp, 48
    7224:	9240      	ld.w      	r2, (r2, 0x0)
    7226:	b340      	st.w      	r2, (r3, 0x0)
    7228:	1b0e      	addi      	r3, sp, 56
    722a:	9340      	ld.w      	r2, (r3, 0x0)
    722c:	1b0d      	addi      	r3, sp, 52
    722e:	9360      	ld.w      	r3, (r3, 0x0)
    7230:	6d4b      	mov      	r5, r2
    7232:	6d0f      	mov      	r4, r3
    7234:	84c0      	ld.b      	r6, (r4, 0x0)
    7236:	2400      	addi      	r4, 1      	//0x1
    7238:	0403      	br      	0x723e	//723e <handle_push_pop_16+0xb2>
    723a:	3501      	movi      	r5, 1      	//0x1
    723c:	0401      	br      	0x723e	//723e <handle_push_pop_16+0xb2>
    723e:	1b0e      	addi      	r3, sp, 56
    7240:	b3a0      	st.w      	r5, (r3, 0x0)
    7242:	1b0c      	addi      	r3, sp, 48
    7244:	b3c0      	st.w      	r6, (r3, 0x0)
    7246:	1b0d      	addi      	r3, sp, 52
    7248:	b380      	st.w      	r4, (r3, 0x0)
    724a:	1b0c      	addi      	r3, sp, 48
    724c:	9360      	ld.w      	r3, (r3, 0x0)
    724e:	4328      	lsli      	r1, r3, 8
    7250:	1b0b      	addi      	r3, sp, 44
    7252:	1a0b      	addi      	r2, sp, 44
    7254:	9240      	ld.w      	r2, (r2, 0x0)
    7256:	6c84      	or      	r2, r1
    7258:	b340      	st.w      	r2, (r3, 0x0)
    725a:	1b0e      	addi      	r3, sp, 56
    725c:	9340      	ld.w      	r2, (r3, 0x0)
    725e:	1b0d      	addi      	r3, sp, 52
    7260:	9360      	ld.w      	r3, (r3, 0x0)
    7262:	6d4b      	mov      	r5, r2
    7264:	6d0f      	mov      	r4, r3
    7266:	84c0      	ld.b      	r6, (r4, 0x0)
    7268:	2400      	addi      	r4, 1      	//0x1
    726a:	0403      	br      	0x7270	//7270 <handle_push_pop_16+0xe4>
    726c:	3501      	movi      	r5, 1      	//0x1
    726e:	0401      	br      	0x7270	//7270 <handle_push_pop_16+0xe4>
    7270:	1b0e      	addi      	r3, sp, 56
    7272:	b3a0      	st.w      	r5, (r3, 0x0)
    7274:	1b0c      	addi      	r3, sp, 48
    7276:	b3c0      	st.w      	r6, (r3, 0x0)
    7278:	1b0d      	addi      	r3, sp, 52
    727a:	b380      	st.w      	r4, (r3, 0x0)
    727c:	1b0c      	addi      	r3, sp, 48
    727e:	9360      	ld.w      	r3, (r3, 0x0)
    7280:	4330      	lsli      	r1, r3, 16
    7282:	1b0b      	addi      	r3, sp, 44
    7284:	1a0b      	addi      	r2, sp, 44
    7286:	9240      	ld.w      	r2, (r2, 0x0)
    7288:	6c84      	or      	r2, r1
    728a:	b340      	st.w      	r2, (r3, 0x0)
    728c:	1b0e      	addi      	r3, sp, 56
    728e:	9340      	ld.w      	r2, (r3, 0x0)
    7290:	1b0d      	addi      	r3, sp, 52
    7292:	9360      	ld.w      	r3, (r3, 0x0)
    7294:	6d4b      	mov      	r5, r2
    7296:	6d0f      	mov      	r4, r3
    7298:	84c0      	ld.b      	r6, (r4, 0x0)
    729a:	2400      	addi      	r4, 1      	//0x1
    729c:	0403      	br      	0x72a2	//72a2 <handle_push_pop_16+0x116>
    729e:	3501      	movi      	r5, 1      	//0x1
    72a0:	0401      	br      	0x72a2	//72a2 <handle_push_pop_16+0x116>
    72a2:	1b0e      	addi      	r3, sp, 56
    72a4:	b3a0      	st.w      	r5, (r3, 0x0)
    72a6:	1b0c      	addi      	r3, sp, 48
    72a8:	b3c0      	st.w      	r6, (r3, 0x0)
    72aa:	1b0d      	addi      	r3, sp, 52
    72ac:	b380      	st.w      	r4, (r3, 0x0)
    72ae:	1b0c      	addi      	r3, sp, 48
    72b0:	9360      	ld.w      	r3, (r3, 0x0)
    72b2:	4338      	lsli      	r1, r3, 24
    72b4:	1b0b      	addi      	r3, sp, 44
    72b6:	1a0b      	addi      	r2, sp, 44
    72b8:	9240      	ld.w      	r2, (r2, 0x0)
    72ba:	6c84      	or      	r2, r1
    72bc:	b340      	st.w      	r2, (r3, 0x0)
    72be:	1b0e      	addi      	r3, sp, 56
    72c0:	9360      	ld.w      	r3, (r3, 0x0)
    72c2:	e9230168 	bnez      	r3, 0x7592	//7592 <handle_push_pop_16+0x406>
			if(put_regs_value(tmpval32, R4_NUM + i, regs) != 0){
    72c6:	1b13      	addi      	r3, sp, 76
    72c8:	9360      	ld.w      	r3, (r3, 0x0)
    72ca:	5b4e      	addi      	r2, r3, 4      	//0x4
    72cc:	190b      	addi      	r1, sp, 44
    72ce:	6cfb      	mov      	r3, sp
    72d0:	9100      	ld.w      	r0, (r1, 0x0)
    72d2:	6c4b      	mov      	r1, r2
    72d4:	9340      	ld.w      	r2, (r3, 0x0)
    72d6:	e3fffbff 	bsr      	0x6ad4	//6ad4 <put_regs_value>
    72da:	c4004820 	lsli      	r0, r0, 0
    72de:	6cc3      	mov      	r3, r0
    72e0:	e9230152 	bnez      	r3, 0x7584	//7584 <handle_push_pop_16+0x3f8>
	unsigned int datasp, tmpval32, i;

	datasp = get_regs_value(SP_NUM, regs);

	if(push_pop == 0x1480){ // pop
		for(i = 0; i < list1; i++){
    72e4:	1b13      	addi      	r3, sp, 76
    72e6:	1a13      	addi      	r2, sp, 76
    72e8:	9240      	ld.w      	r2, (r2, 0x0)
    72ea:	2200      	addi      	r2, 1      	//0x1
    72ec:	b340      	st.w      	r2, (r3, 0x0)
    72ee:	1a13      	addi      	r2, sp, 76
    72f0:	1b11      	addi      	r3, sp, 68
    72f2:	9240      	ld.w      	r2, (r2, 0x0)
    72f4:	9360      	ld.w      	r3, (r3, 0x0)
    72f6:	64c8      	cmphs      	r2, r3
    72f8:	0f76      	bf      	0x71e4	//71e4 <handle_push_pop_16+0x58>
			get32_unaligned_check(tmpval32, datasp + i * 4);
			if(put_regs_value(tmpval32, R4_NUM + i, regs) != 0){
				goto fault;
			}
		}
		if(has_r15){
    72fa:	1b10      	addi      	r3, sp, 64
    72fc:	9360      	ld.w      	r3, (r3, 0x0)
    72fe:	e9030080 	bez      	r3, 0x73fe	//73fe <handle_push_pop_16+0x272>
			get32_unaligned_check(tmpval32, datasp + list1 * 4);
    7302:	1b0a      	addi      	r3, sp, 40
    7304:	3200      	movi      	r2, 0      	//0x0
    7306:	b340      	st.w      	r2, (r3, 0x0)
    7308:	1b11      	addi      	r3, sp, 68
    730a:	9360      	ld.w      	r3, (r3, 0x0)
    730c:	4322      	lsli      	r1, r3, 2
    730e:	1b09      	addi      	r3, sp, 36
    7310:	1a0f      	addi      	r2, sp, 60
    7312:	9240      	ld.w      	r2, (r2, 0x0)
    7314:	5948      	addu      	r2, r1, r2
    7316:	b340      	st.w      	r2, (r3, 0x0)
    7318:	1b0a      	addi      	r3, sp, 40
    731a:	9340      	ld.w      	r2, (r3, 0x0)
    731c:	1b09      	addi      	r3, sp, 36
    731e:	9360      	ld.w      	r3, (r3, 0x0)
    7320:	6d4b      	mov      	r5, r2
    7322:	6d0f      	mov      	r4, r3
    7324:	84c0      	ld.b      	r6, (r4, 0x0)
    7326:	2400      	addi      	r4, 1      	//0x1
    7328:	0406      	br      	0x7334	//7334 <handle_push_pop_16+0x1a8>
    732a:	3501      	movi      	r5, 1      	//0x1
    732c:	0404      	br      	0x7334	//7334 <handle_push_pop_16+0x1a8>
    732e:	0000      	.short	0x0000
    7330:	00006ad4 	.long	0x00006ad4
    7334:	1b0a      	addi      	r3, sp, 40
    7336:	b3a0      	st.w      	r5, (r3, 0x0)
    7338:	1b08      	addi      	r3, sp, 32
    733a:	b3c0      	st.w      	r6, (r3, 0x0)
    733c:	1b09      	addi      	r3, sp, 36
    733e:	b380      	st.w      	r4, (r3, 0x0)
    7340:	1b0b      	addi      	r3, sp, 44
    7342:	1a08      	addi      	r2, sp, 32
    7344:	9240      	ld.w      	r2, (r2, 0x0)
    7346:	b340      	st.w      	r2, (r3, 0x0)
    7348:	1b0a      	addi      	r3, sp, 40
    734a:	9340      	ld.w      	r2, (r3, 0x0)
    734c:	1b09      	addi      	r3, sp, 36
    734e:	9360      	ld.w      	r3, (r3, 0x0)
    7350:	6d4b      	mov      	r5, r2
    7352:	6d0f      	mov      	r4, r3
    7354:	84c0      	ld.b      	r6, (r4, 0x0)
    7356:	2400      	addi      	r4, 1      	//0x1
    7358:	0403      	br      	0x735e	//735e <handle_push_pop_16+0x1d2>
    735a:	3501      	movi      	r5, 1      	//0x1
    735c:	0401      	br      	0x735e	//735e <handle_push_pop_16+0x1d2>
    735e:	1b0a      	addi      	r3, sp, 40
    7360:	b3a0      	st.w      	r5, (r3, 0x0)
    7362:	1b08      	addi      	r3, sp, 32
    7364:	b3c0      	st.w      	r6, (r3, 0x0)
    7366:	1b09      	addi      	r3, sp, 36
    7368:	b380      	st.w      	r4, (r3, 0x0)
    736a:	1b08      	addi      	r3, sp, 32
    736c:	9360      	ld.w      	r3, (r3, 0x0)
    736e:	4328      	lsli      	r1, r3, 8
    7370:	1b0b      	addi      	r3, sp, 44
    7372:	1a0b      	addi      	r2, sp, 44
    7374:	9240      	ld.w      	r2, (r2, 0x0)
    7376:	6c84      	or      	r2, r1
    7378:	b340      	st.w      	r2, (r3, 0x0)
    737a:	1b0a      	addi      	r3, sp, 40
    737c:	9340      	ld.w      	r2, (r3, 0x0)
    737e:	1b09      	addi      	r3, sp, 36
    7380:	9360      	ld.w      	r3, (r3, 0x0)
    7382:	6d4b      	mov      	r5, r2
    7384:	6d0f      	mov      	r4, r3
    7386:	84c0      	ld.b      	r6, (r4, 0x0)
    7388:	2400      	addi      	r4, 1      	//0x1
    738a:	0403      	br      	0x7390	//7390 <handle_push_pop_16+0x204>
    738c:	3501      	movi      	r5, 1      	//0x1
    738e:	0401      	br      	0x7390	//7390 <handle_push_pop_16+0x204>
    7390:	1b0a      	addi      	r3, sp, 40
    7392:	b3a0      	st.w      	r5, (r3, 0x0)
    7394:	1b08      	addi      	r3, sp, 32
    7396:	b3c0      	st.w      	r6, (r3, 0x0)
    7398:	1b09      	addi      	r3, sp, 36
    739a:	b380      	st.w      	r4, (r3, 0x0)
    739c:	1b08      	addi      	r3, sp, 32
    739e:	9360      	ld.w      	r3, (r3, 0x0)
    73a0:	4330      	lsli      	r1, r3, 16
    73a2:	1b0b      	addi      	r3, sp, 44
    73a4:	1a0b      	addi      	r2, sp, 44
    73a6:	9240      	ld.w      	r2, (r2, 0x0)
    73a8:	6c84      	or      	r2, r1
    73aa:	b340      	st.w      	r2, (r3, 0x0)
    73ac:	1b0a      	addi      	r3, sp, 40
    73ae:	9340      	ld.w      	r2, (r3, 0x0)
    73b0:	1b09      	addi      	r3, sp, 36
    73b2:	9360      	ld.w      	r3, (r3, 0x0)
    73b4:	6d4b      	mov      	r5, r2
    73b6:	6d0f      	mov      	r4, r3
    73b8:	84c0      	ld.b      	r6, (r4, 0x0)
    73ba:	2400      	addi      	r4, 1      	//0x1
    73bc:	0403      	br      	0x73c2	//73c2 <handle_push_pop_16+0x236>
    73be:	3501      	movi      	r5, 1      	//0x1
    73c0:	0401      	br      	0x73c2	//73c2 <handle_push_pop_16+0x236>
    73c2:	1b0a      	addi      	r3, sp, 40
    73c4:	b3a0      	st.w      	r5, (r3, 0x0)
    73c6:	1b08      	addi      	r3, sp, 32
    73c8:	b3c0      	st.w      	r6, (r3, 0x0)
    73ca:	1b09      	addi      	r3, sp, 36
    73cc:	b380      	st.w      	r4, (r3, 0x0)
    73ce:	1b08      	addi      	r3, sp, 32
    73d0:	9360      	ld.w      	r3, (r3, 0x0)
    73d2:	4338      	lsli      	r1, r3, 24
    73d4:	1b0b      	addi      	r3, sp, 44
    73d6:	1a0b      	addi      	r2, sp, 44
    73d8:	9240      	ld.w      	r2, (r2, 0x0)
    73da:	6c84      	or      	r2, r1
    73dc:	b340      	st.w      	r2, (r3, 0x0)
    73de:	1b0a      	addi      	r3, sp, 40
    73e0:	9360      	ld.w      	r3, (r3, 0x0)
    73e2:	e92300d8 	bnez      	r3, 0x7592	//7592 <handle_push_pop_16+0x406>
			if(put_regs_value(tmpval32, R15_NUM, regs) != 0){
    73e6:	1a0b      	addi      	r2, sp, 44
    73e8:	6cfb      	mov      	r3, sp
    73ea:	9200      	ld.w      	r0, (r2, 0x0)
    73ec:	3104      	movi      	r1, 4      	//0x4
    73ee:	9340      	ld.w      	r2, (r3, 0x0)
    73f0:	e3fffb72 	bsr      	0x6ad4	//6ad4 <put_regs_value>
    73f4:	c4004820 	lsli      	r0, r0, 0
    73f8:	6cc3      	mov      	r3, r0
    73fa:	e92300c7 	bnez      	r3, 0x7588	//7588 <handle_push_pop_16+0x3fc>
				goto fault;
			}
		}
		datasp += (list1 + has_r15) * 4;
    73fe:	1a11      	addi      	r2, sp, 68
    7400:	1b10      	addi      	r3, sp, 64
    7402:	9240      	ld.w      	r2, (r2, 0x0)
    7404:	9360      	ld.w      	r3, (r3, 0x0)
    7406:	5a6c      	addu      	r3, r2, r3
    7408:	4322      	lsli      	r1, r3, 2
    740a:	1b0f      	addi      	r3, sp, 60
    740c:	1a0f      	addi      	r2, sp, 60
    740e:	9240      	ld.w      	r2, (r2, 0x0)
    7410:	5948      	addu      	r2, r1, r2
    7412:	b340      	st.w      	r2, (r3, 0x0)
		if(put_regs_value(datasp, SP_NUM, regs) != 0){
    7414:	1a0f      	addi      	r2, sp, 60
    7416:	6cfb      	mov      	r3, sp
    7418:	9200      	ld.w      	r0, (r2, 0x0)
    741a:	310e      	movi      	r1, 14      	//0xe
    741c:	9340      	ld.w      	r2, (r3, 0x0)
    741e:	e3fffb5b 	bsr      	0x6ad4	//6ad4 <put_regs_value>
    7422:	c4004820 	lsli      	r0, r0, 0
    7426:	6cc3      	mov      	r3, r0
    7428:	e90300ac 	bez      	r3, 0x7580	//7580 <handle_push_pop_16+0x3f4>
			goto fault;
    742c:	04b3      	br      	0x7592	//7592 <handle_push_pop_16+0x406>
		}
	}else if(push_pop == 0x14c0){ // push
    742e:	1b12      	addi      	r3, sp, 72
    7430:	9360      	ld.w      	r3, (r3, 0x0)
    7432:	eb4314c0 	cmpnei      	r3, 5312      	//0x14c0
    7436:	08ab      	bt      	0x758c	//758c <handle_push_pop_16+0x400>
		datasp -= (list1 + has_r15) * 4;
    7438:	1a11      	addi      	r2, sp, 68
    743a:	1b10      	addi      	r3, sp, 64
    743c:	9240      	ld.w      	r2, (r2, 0x0)
    743e:	9360      	ld.w      	r3, (r3, 0x0)
    7440:	5a6c      	addu      	r3, r2, r3
    7442:	4342      	lsli      	r2, r3, 2
    7444:	1b0f      	addi      	r3, sp, 60
    7446:	190f      	addi      	r1, sp, 60
    7448:	9120      	ld.w      	r1, (r1, 0x0)
    744a:	5949      	subu      	r2, r1, r2
    744c:	b340      	st.w      	r2, (r3, 0x0)
		if(put_regs_value(datasp, SP_NUM, regs) != 0){
    744e:	1a0f      	addi      	r2, sp, 60
    7450:	6cfb      	mov      	r3, sp
    7452:	9200      	ld.w      	r0, (r2, 0x0)
    7454:	310e      	movi      	r1, 14      	//0xe
    7456:	9340      	ld.w      	r2, (r3, 0x0)
    7458:	e3fffb3e 	bsr      	0x6ad4	//6ad4 <put_regs_value>
    745c:	c4004820 	lsli      	r0, r0, 0
    7460:	6cc3      	mov      	r3, r0
    7462:	e9230097 	bnez      	r3, 0x7590	//7590 <handle_push_pop_16+0x404>
			goto fault;
		}
		for(i = 0; i < list1; i++){
    7466:	1b13      	addi      	r3, sp, 76
    7468:	3200      	movi      	r2, 0      	//0x0
    746a:	b340      	st.w      	r2, (r3, 0x0)
    746c:	0445      	br      	0x74f6	//74f6 <handle_push_pop_16+0x36a>
			tmpval32 = get_regs_value(R4_NUM + i, regs);
    746e:	1b13      	addi      	r3, sp, 76
    7470:	9360      	ld.w      	r3, (r3, 0x0)
    7472:	5b4e      	addi      	r2, r3, 4      	//0x4
    7474:	1c0b      	addi      	r4, sp, 44
    7476:	6cfb      	mov      	r3, sp
    7478:	6c0b      	mov      	r0, r2
    747a:	9320      	ld.w      	r1, (r3, 0x0)
    747c:	e3fffafe 	bsr      	0x6a78	//6a78 <get_regs_value>
    7480:	c4004820 	lsli      	r0, r0, 0
    7484:	b400      	st.w      	r0, (r4, 0x0)
			put32_unaligned_check(tmpval32, datasp + i * 4);
    7486:	1b07      	addi      	r3, sp, 28
    7488:	3200      	movi      	r2, 0      	//0x0
    748a:	b340      	st.w      	r2, (r3, 0x0)
    748c:	1b06      	addi      	r3, sp, 24
    748e:	1a0b      	addi      	r2, sp, 44
    7490:	9240      	ld.w      	r2, (r2, 0x0)
    7492:	b340      	st.w      	r2, (r3, 0x0)
    7494:	1b13      	addi      	r3, sp, 76
    7496:	9360      	ld.w      	r3, (r3, 0x0)
    7498:	4322      	lsli      	r1, r3, 2
    749a:	1b05      	addi      	r3, sp, 20
    749c:	1a0f      	addi      	r2, sp, 60
    749e:	9240      	ld.w      	r2, (r2, 0x0)
    74a0:	5948      	addu      	r2, r1, r2
    74a2:	b340      	st.w      	r2, (r3, 0x0)
    74a4:	1b07      	addi      	r3, sp, 28
    74a6:	9320      	ld.w      	r1, (r3, 0x0)
    74a8:	1b06      	addi      	r3, sp, 24
    74aa:	9340      	ld.w      	r2, (r3, 0x0)
    74ac:	1b05      	addi      	r3, sp, 20
    74ae:	9360      	ld.w      	r3, (r3, 0x0)
    74b0:	6d87      	mov      	r6, r1
    74b2:	6d4b      	mov      	r5, r2
    74b4:	6d0f      	mov      	r4, r3
    74b6:	a4a0      	st.b      	r5, (r4, 0x0)
    74b8:	2400      	addi      	r4, 1      	//0x1
    74ba:	4da8      	lsri      	r5, r5, 8
    74bc:	a4a0      	st.b      	r5, (r4, 0x0)
    74be:	2400      	addi      	r4, 1      	//0x1
    74c0:	4da8      	lsri      	r5, r5, 8
    74c2:	a4a0      	st.b      	r5, (r4, 0x0)
    74c4:	2400      	addi      	r4, 1      	//0x1
    74c6:	4da8      	lsri      	r5, r5, 8
    74c8:	a4a0      	st.b      	r5, (r4, 0x0)
    74ca:	0407      	br      	0x74d8	//74d8 <handle_push_pop_16+0x34c>
    74cc:	3601      	movi      	r6, 1      	//0x1
    74ce:	0405      	br      	0x74d8	//74d8 <handle_push_pop_16+0x34c>
    74d0:	00006ad4 	.long	0x00006ad4
    74d4:	00006a78 	.long	0x00006a78
    74d8:	1b07      	addi      	r3, sp, 28
    74da:	b3c0      	st.w      	r6, (r3, 0x0)
    74dc:	1b06      	addi      	r3, sp, 24
    74de:	b3a0      	st.w      	r5, (r3, 0x0)
    74e0:	1b05      	addi      	r3, sp, 20
    74e2:	b380      	st.w      	r4, (r3, 0x0)
    74e4:	1b07      	addi      	r3, sp, 28
    74e6:	9360      	ld.w      	r3, (r3, 0x0)
    74e8:	e9230055 	bnez      	r3, 0x7592	//7592 <handle_push_pop_16+0x406>
	}else if(push_pop == 0x14c0){ // push
		datasp -= (list1 + has_r15) * 4;
		if(put_regs_value(datasp, SP_NUM, regs) != 0){
			goto fault;
		}
		for(i = 0; i < list1; i++){
    74ec:	1b13      	addi      	r3, sp, 76
    74ee:	1a13      	addi      	r2, sp, 76
    74f0:	9240      	ld.w      	r2, (r2, 0x0)
    74f2:	2200      	addi      	r2, 1      	//0x1
    74f4:	b340      	st.w      	r2, (r3, 0x0)
    74f6:	1a13      	addi      	r2, sp, 76
    74f8:	1b11      	addi      	r3, sp, 68
    74fa:	9240      	ld.w      	r2, (r2, 0x0)
    74fc:	9360      	ld.w      	r3, (r3, 0x0)
    74fe:	64c8      	cmphs      	r2, r3
    7500:	0fb7      	bf      	0x746e	//746e <handle_push_pop_16+0x2e2>
			tmpval32 = get_regs_value(R4_NUM + i, regs);
			put32_unaligned_check(tmpval32, datasp + i * 4);
		}
		if(has_r15){
    7502:	1b10      	addi      	r3, sp, 64
    7504:	9360      	ld.w      	r3, (r3, 0x0)
    7506:	e903003d 	bez      	r3, 0x7580	//7580 <handle_push_pop_16+0x3f4>
			tmpval32 = get_regs_value(R15_NUM, regs);
    750a:	1c0b      	addi      	r4, sp, 44
    750c:	6cfb      	mov      	r3, sp
    750e:	3004      	movi      	r0, 4      	//0x4
    7510:	9320      	ld.w      	r1, (r3, 0x0)
    7512:	e3fffab3 	bsr      	0x6a78	//6a78 <get_regs_value>
    7516:	c4004820 	lsli      	r0, r0, 0
    751a:	b400      	st.w      	r0, (r4, 0x0)
			put32_unaligned_check(tmpval32, datasp + list1 * 4);
    751c:	1b04      	addi      	r3, sp, 16
    751e:	3200      	movi      	r2, 0      	//0x0
    7520:	b340      	st.w      	r2, (r3, 0x0)
    7522:	1b03      	addi      	r3, sp, 12
    7524:	1a0b      	addi      	r2, sp, 44
    7526:	9240      	ld.w      	r2, (r2, 0x0)
    7528:	b340      	st.w      	r2, (r3, 0x0)
    752a:	1b11      	addi      	r3, sp, 68
    752c:	9360      	ld.w      	r3, (r3, 0x0)
    752e:	4322      	lsli      	r1, r3, 2
    7530:	1b02      	addi      	r3, sp, 8
    7532:	1a0f      	addi      	r2, sp, 60
    7534:	9240      	ld.w      	r2, (r2, 0x0)
    7536:	5948      	addu      	r2, r1, r2
    7538:	b340      	st.w      	r2, (r3, 0x0)
    753a:	1b04      	addi      	r3, sp, 16
    753c:	9320      	ld.w      	r1, (r3, 0x0)
    753e:	1b03      	addi      	r3, sp, 12
    7540:	9340      	ld.w      	r2, (r3, 0x0)
    7542:	1b02      	addi      	r3, sp, 8
    7544:	9360      	ld.w      	r3, (r3, 0x0)
    7546:	6d87      	mov      	r6, r1
    7548:	6d4b      	mov      	r5, r2
    754a:	6d0f      	mov      	r4, r3
    754c:	a4a0      	st.b      	r5, (r4, 0x0)
    754e:	2400      	addi      	r4, 1      	//0x1
    7550:	4da8      	lsri      	r5, r5, 8
    7552:	a4a0      	st.b      	r5, (r4, 0x0)
    7554:	2400      	addi      	r4, 1      	//0x1
    7556:	4da8      	lsri      	r5, r5, 8
    7558:	a4a0      	st.b      	r5, (r4, 0x0)
    755a:	2400      	addi      	r4, 1      	//0x1
    755c:	4da8      	lsri      	r5, r5, 8
    755e:	a4a0      	st.b      	r5, (r4, 0x0)
    7560:	0406      	br      	0x756c	//756c <handle_push_pop_16+0x3e0>
    7562:	3601      	movi      	r6, 1      	//0x1
    7564:	0404      	br      	0x756c	//756c <handle_push_pop_16+0x3e0>
    7566:	0000      	.short	0x0000
    7568:	00006a78 	.long	0x00006a78
    756c:	1b04      	addi      	r3, sp, 16
    756e:	b3c0      	st.w      	r6, (r3, 0x0)
    7570:	1b03      	addi      	r3, sp, 12
    7572:	b3a0      	st.w      	r5, (r3, 0x0)
    7574:	1b02      	addi      	r3, sp, 8
    7576:	b380      	st.w      	r4, (r3, 0x0)
    7578:	1b04      	addi      	r3, sp, 16
    757a:	9360      	ld.w      	r3, (r3, 0x0)
    757c:	e923000b 	bnez      	r3, 0x7592	//7592 <handle_push_pop_16+0x406>
		}
	}else{
		goto fault;
	}

	return HANDLER_SUCCESS;
    7580:	3300      	movi      	r3, 0      	//0x0
    7582:	0409      	br      	0x7594	//7594 <handle_push_pop_16+0x408>

	if(push_pop == 0x1480){ // pop
		for(i = 0; i < list1; i++){
			get32_unaligned_check(tmpval32, datasp + i * 4);
			if(put_regs_value(tmpval32, R4_NUM + i, regs) != 0){
				goto fault;
    7584:	6c00      	or      	r0, r0
    7586:	0406      	br      	0x7592	//7592 <handle_push_pop_16+0x406>
			}
		}
		if(has_r15){
			get32_unaligned_check(tmpval32, datasp + list1 * 4);
			if(put_regs_value(tmpval32, R15_NUM, regs) != 0){
				goto fault;
    7588:	6c00      	or      	r0, r0
    758a:	0404      	br      	0x7592	//7592 <handle_push_pop_16+0x406>
		if(has_r15){
			tmpval32 = get_regs_value(R15_NUM, regs);
			put32_unaligned_check(tmpval32, datasp + list1 * 4);
		}
	}else{
		goto fault;
    758c:	6c00      	or      	r0, r0
    758e:	0402      	br      	0x7592	//7592 <handle_push_pop_16+0x406>
			goto fault;
		}
	}else if(push_pop == 0x14c0){ // push
		datasp -= (list1 + has_r15) * 4;
		if(put_regs_value(datasp, SP_NUM, regs) != 0){
			goto fault;
    7590:	6c00      	or      	r0, r0
		goto fault;
	}

	return HANDLER_SUCCESS;
fault:
	return HANDLER_FAILURE;	
    7592:	3301      	movi      	r3, 1      	//0x1
}
    7594:	6c0f      	mov      	r0, r3
    7596:	1414      	addi      	sp, sp, 80
    7598:	1493      	pop      	r4-r6, r15
	...

0000759c <handle_push_pop>:

static int 
handle_push_pop(unsigned long instr, Ckcore_SavedRegisters *regs){
    759c:	14d3      	push      	r4-r6, r15
    759e:	1522      	subi      	sp, sp, 136
    75a0:	1b01      	addi      	r3, sp, 4
    75a2:	b300      	st.w      	r0, (r3, 0x0)
    75a4:	6cfb      	mov      	r3, sp
    75a6:	b320      	st.w      	r1, (r3, 0x0)
	unsigned int push_pop = instr & 0xfffffe00;
    75a8:	1b20      	addi      	r3, sp, 128
    75aa:	1a01      	addi      	r2, sp, 4
    75ac:	9240      	ld.w      	r2, (r2, 0x0)
    75ae:	e44231ff 	andni      	r2, r2, 511
    75b2:	b340      	st.w      	r2, (r3, 0x0)
	unsigned int list1 = instr & 0xf;
    75b4:	1b1f      	addi      	r3, sp, 124
    75b6:	1a01      	addi      	r2, sp, 4
    75b8:	9240      	ld.w      	r2, (r2, 0x0)
    75ba:	e442200f 	andi      	r2, r2, 15
    75be:	b340      	st.w      	r2, (r3, 0x0)
	unsigned int list2 = (instr >> 5) & 0x7;
    75c0:	1b01      	addi      	r3, sp, 4
    75c2:	9360      	ld.w      	r3, (r3, 0x0)
    75c4:	4b45      	lsri      	r2, r3, 5
    75c6:	1b1e      	addi      	r3, sp, 120
    75c8:	e4422007 	andi      	r2, r2, 7
    75cc:	b340      	st.w      	r2, (r3, 0x0)
	unsigned int has_r15 = (instr >> 4) & 0x1;
    75ce:	1b01      	addi      	r3, sp, 4
    75d0:	9360      	ld.w      	r3, (r3, 0x0)
    75d2:	4b44      	lsri      	r2, r3, 4
    75d4:	1b1d      	addi      	r3, sp, 116
    75d6:	e4422001 	andi      	r2, r2, 1
    75da:	b340      	st.w      	r2, (r3, 0x0)
	unsigned int has_r28 = (instr >> 8) & 0x1;
    75dc:	1b01      	addi      	r3, sp, 4
    75de:	9360      	ld.w      	r3, (r3, 0x0)
    75e0:	4b48      	lsri      	r2, r3, 8
    75e2:	1b1c      	addi      	r3, sp, 112
    75e4:	e4422001 	andi      	r2, r2, 1
    75e8:	b340      	st.w      	r2, (r3, 0x0)
	unsigned int datasp, tmpval32, i;

	datasp = get_regs_value(SP_NUM, regs);
    75ea:	1c1b      	addi      	r4, sp, 108
    75ec:	6cfb      	mov      	r3, sp
    75ee:	300e      	movi      	r0, 14      	//0xe
    75f0:	9320      	ld.w      	r1, (r3, 0x0)
    75f2:	e3fffa43 	bsr      	0x6a78	//6a78 <get_regs_value>
    75f6:	c4004820 	lsli      	r0, r0, 0
    75fa:	b400      	st.w      	r0, (r4, 0x0)

	if(push_pop == 0x1480){ // pop
    75fc:	1b20      	addi      	r3, sp, 128
    75fe:	9360      	ld.w      	r3, (r3, 0x0)
    7600:	eb431480 	cmpnei      	r3, 5248      	//0x1480
    7604:	e860024f 	bt      	0x7aa2	//7aa2 <handle_push_pop+0x506>
		for(i = 0; i < list1; i++){
    7608:	1b21      	addi      	r3, sp, 132
    760a:	3200      	movi      	r2, 0      	//0x0
    760c:	b340      	st.w      	r2, (r3, 0x0)
    760e:	0486      	br      	0x771a	//771a <handle_push_pop+0x17e>
			get32_unaligned_check(tmpval32, datasp + i * 4);
    7610:	1b1a      	addi      	r3, sp, 104
    7612:	3200      	movi      	r2, 0      	//0x0
    7614:	b340      	st.w      	r2, (r3, 0x0)
    7616:	1b21      	addi      	r3, sp, 132
    7618:	9360      	ld.w      	r3, (r3, 0x0)
    761a:	4322      	lsli      	r1, r3, 2
    761c:	1b19      	addi      	r3, sp, 100
    761e:	1a1b      	addi      	r2, sp, 108
    7620:	9240      	ld.w      	r2, (r2, 0x0)
    7622:	5948      	addu      	r2, r1, r2
    7624:	b340      	st.w      	r2, (r3, 0x0)
    7626:	1b1a      	addi      	r3, sp, 104
    7628:	9340      	ld.w      	r2, (r3, 0x0)
    762a:	1b19      	addi      	r3, sp, 100
    762c:	9360      	ld.w      	r3, (r3, 0x0)
    762e:	6d4b      	mov      	r5, r2
    7630:	6d0f      	mov      	r4, r3
    7632:	84c0      	ld.b      	r6, (r4, 0x0)
    7634:	2400      	addi      	r4, 1      	//0x1
    7636:	0405      	br      	0x7640	//7640 <handle_push_pop+0xa4>
    7638:	3501      	movi      	r5, 1      	//0x1
    763a:	0403      	br      	0x7640	//7640 <handle_push_pop+0xa4>
    763c:	00006a78 	.long	0x00006a78
    7640:	1b1a      	addi      	r3, sp, 104
    7642:	b3a0      	st.w      	r5, (r3, 0x0)
    7644:	1b18      	addi      	r3, sp, 96
    7646:	b3c0      	st.w      	r6, (r3, 0x0)
    7648:	1b19      	addi      	r3, sp, 100
    764a:	b380      	st.w      	r4, (r3, 0x0)
    764c:	1b17      	addi      	r3, sp, 92
    764e:	1a18      	addi      	r2, sp, 96
    7650:	9240      	ld.w      	r2, (r2, 0x0)
    7652:	b340      	st.w      	r2, (r3, 0x0)
    7654:	1b1a      	addi      	r3, sp, 104
    7656:	9340      	ld.w      	r2, (r3, 0x0)
    7658:	1b19      	addi      	r3, sp, 100
    765a:	9360      	ld.w      	r3, (r3, 0x0)
    765c:	6d4b      	mov      	r5, r2
    765e:	6d0f      	mov      	r4, r3
    7660:	84c0      	ld.b      	r6, (r4, 0x0)
    7662:	2400      	addi      	r4, 1      	//0x1
    7664:	0403      	br      	0x766a	//766a <handle_push_pop+0xce>
    7666:	3501      	movi      	r5, 1      	//0x1
    7668:	0401      	br      	0x766a	//766a <handle_push_pop+0xce>
    766a:	1b1a      	addi      	r3, sp, 104
    766c:	b3a0      	st.w      	r5, (r3, 0x0)
    766e:	1b18      	addi      	r3, sp, 96
    7670:	b3c0      	st.w      	r6, (r3, 0x0)
    7672:	1b19      	addi      	r3, sp, 100
    7674:	b380      	st.w      	r4, (r3, 0x0)
    7676:	1b18      	addi      	r3, sp, 96
    7678:	9360      	ld.w      	r3, (r3, 0x0)
    767a:	4328      	lsli      	r1, r3, 8
    767c:	1b17      	addi      	r3, sp, 92
    767e:	1a17      	addi      	r2, sp, 92
    7680:	9240      	ld.w      	r2, (r2, 0x0)
    7682:	6c84      	or      	r2, r1
    7684:	b340      	st.w      	r2, (r3, 0x0)
    7686:	1b1a      	addi      	r3, sp, 104
    7688:	9340      	ld.w      	r2, (r3, 0x0)
    768a:	1b19      	addi      	r3, sp, 100
    768c:	9360      	ld.w      	r3, (r3, 0x0)
    768e:	6d4b      	mov      	r5, r2
    7690:	6d0f      	mov      	r4, r3
    7692:	84c0      	ld.b      	r6, (r4, 0x0)
    7694:	2400      	addi      	r4, 1      	//0x1
    7696:	0403      	br      	0x769c	//769c <handle_push_pop+0x100>
    7698:	3501      	movi      	r5, 1      	//0x1
    769a:	0401      	br      	0x769c	//769c <handle_push_pop+0x100>
    769c:	1b1a      	addi      	r3, sp, 104
    769e:	b3a0      	st.w      	r5, (r3, 0x0)
    76a0:	1b18      	addi      	r3, sp, 96
    76a2:	b3c0      	st.w      	r6, (r3, 0x0)
    76a4:	1b19      	addi      	r3, sp, 100
    76a6:	b380      	st.w      	r4, (r3, 0x0)
    76a8:	1b18      	addi      	r3, sp, 96
    76aa:	9360      	ld.w      	r3, (r3, 0x0)
    76ac:	4330      	lsli      	r1, r3, 16
    76ae:	1b17      	addi      	r3, sp, 92
    76b0:	1a17      	addi      	r2, sp, 92
    76b2:	9240      	ld.w      	r2, (r2, 0x0)
    76b4:	6c84      	or      	r2, r1
    76b6:	b340      	st.w      	r2, (r3, 0x0)
    76b8:	1b1a      	addi      	r3, sp, 104
    76ba:	9340      	ld.w      	r2, (r3, 0x0)
    76bc:	1b19      	addi      	r3, sp, 100
    76be:	9360      	ld.w      	r3, (r3, 0x0)
    76c0:	6d4b      	mov      	r5, r2
    76c2:	6d0f      	mov      	r4, r3
    76c4:	84c0      	ld.b      	r6, (r4, 0x0)
    76c6:	2400      	addi      	r4, 1      	//0x1
    76c8:	0403      	br      	0x76ce	//76ce <handle_push_pop+0x132>
    76ca:	3501      	movi      	r5, 1      	//0x1
    76cc:	0401      	br      	0x76ce	//76ce <handle_push_pop+0x132>
    76ce:	1b1a      	addi      	r3, sp, 104
    76d0:	b3a0      	st.w      	r5, (r3, 0x0)
    76d2:	1b18      	addi      	r3, sp, 96
    76d4:	b3c0      	st.w      	r6, (r3, 0x0)
    76d6:	1b19      	addi      	r3, sp, 100
    76d8:	b380      	st.w      	r4, (r3, 0x0)
    76da:	1b18      	addi      	r3, sp, 96
    76dc:	9360      	ld.w      	r3, (r3, 0x0)
    76de:	4338      	lsli      	r1, r3, 24
    76e0:	1b17      	addi      	r3, sp, 92
    76e2:	1a17      	addi      	r2, sp, 92
    76e4:	9240      	ld.w      	r2, (r2, 0x0)
    76e6:	6c84      	or      	r2, r1
    76e8:	b340      	st.w      	r2, (r3, 0x0)
    76ea:	1b1a      	addi      	r3, sp, 104
    76ec:	9360      	ld.w      	r3, (r3, 0x0)
    76ee:	e923032e 	bnez      	r3, 0x7d4a	//7d4a <handle_push_pop+0x7ae>
			if(put_regs_value(tmpval32, R4_NUM + i, regs) != 0){
    76f2:	1b21      	addi      	r3, sp, 132
    76f4:	9360      	ld.w      	r3, (r3, 0x0)
    76f6:	5b4e      	addi      	r2, r3, 4      	//0x4
    76f8:	1917      	addi      	r1, sp, 92
    76fa:	6cfb      	mov      	r3, sp
    76fc:	9100      	ld.w      	r0, (r1, 0x0)
    76fe:	6c4b      	mov      	r1, r2
    7700:	9340      	ld.w      	r2, (r3, 0x0)
    7702:	e3fff9e9 	bsr      	0x6ad4	//6ad4 <put_regs_value>
    7706:	c4004820 	lsli      	r0, r0, 0
    770a:	6cc3      	mov      	r3, r0
    770c:	e9230314 	bnez      	r3, 0x7d34	//7d34 <handle_push_pop+0x798>
	unsigned int datasp, tmpval32, i;

	datasp = get_regs_value(SP_NUM, regs);

	if(push_pop == 0x1480){ // pop
		for(i = 0; i < list1; i++){
    7710:	1b21      	addi      	r3, sp, 132
    7712:	1a21      	addi      	r2, sp, 132
    7714:	9240      	ld.w      	r2, (r2, 0x0)
    7716:	2200      	addi      	r2, 1      	//0x1
    7718:	b340      	st.w      	r2, (r3, 0x0)
    771a:	1a21      	addi      	r2, sp, 132
    771c:	1b1f      	addi      	r3, sp, 124
    771e:	9240      	ld.w      	r2, (r2, 0x0)
    7720:	9360      	ld.w      	r3, (r3, 0x0)
    7722:	64c8      	cmphs      	r2, r3
    7724:	0f76      	bf      	0x7610	//7610 <handle_push_pop+0x74>
			get32_unaligned_check(tmpval32, datasp + i * 4);
			if(put_regs_value(tmpval32, R4_NUM + i, regs) != 0){
				goto fault;
			}
		}
		if(has_r15 == 0x1){
    7726:	1b1d      	addi      	r3, sp, 116
    7728:	9360      	ld.w      	r3, (r3, 0x0)
    772a:	3b41      	cmpnei      	r3, 1
    772c:	087f      	bt      	0x782a	//782a <handle_push_pop+0x28e>
			get32_unaligned_check(tmpval32, datasp + list1 * 4);
    772e:	1b16      	addi      	r3, sp, 88
    7730:	3200      	movi      	r2, 0      	//0x0
    7732:	b340      	st.w      	r2, (r3, 0x0)
    7734:	1b1f      	addi      	r3, sp, 124
    7736:	9360      	ld.w      	r3, (r3, 0x0)
    7738:	4322      	lsli      	r1, r3, 2
    773a:	1b15      	addi      	r3, sp, 84
    773c:	1a1b      	addi      	r2, sp, 108
    773e:	9240      	ld.w      	r2, (r2, 0x0)
    7740:	5948      	addu      	r2, r1, r2
    7742:	b340      	st.w      	r2, (r3, 0x0)
    7744:	1b16      	addi      	r3, sp, 88
    7746:	9340      	ld.w      	r2, (r3, 0x0)
    7748:	1b15      	addi      	r3, sp, 84
    774a:	9360      	ld.w      	r3, (r3, 0x0)
    774c:	6d4b      	mov      	r5, r2
    774e:	6d0f      	mov      	r4, r3
    7750:	84c0      	ld.b      	r6, (r4, 0x0)
    7752:	2400      	addi      	r4, 1      	//0x1
    7754:	0406      	br      	0x7760	//7760 <handle_push_pop+0x1c4>
    7756:	3501      	movi      	r5, 1      	//0x1
    7758:	0404      	br      	0x7760	//7760 <handle_push_pop+0x1c4>
    775a:	0000      	.short	0x0000
    775c:	00006ad4 	.long	0x00006ad4
    7760:	1b16      	addi      	r3, sp, 88
    7762:	b3a0      	st.w      	r5, (r3, 0x0)
    7764:	1b14      	addi      	r3, sp, 80
    7766:	b3c0      	st.w      	r6, (r3, 0x0)
    7768:	1b15      	addi      	r3, sp, 84
    776a:	b380      	st.w      	r4, (r3, 0x0)
    776c:	1b17      	addi      	r3, sp, 92
    776e:	1a14      	addi      	r2, sp, 80
    7770:	9240      	ld.w      	r2, (r2, 0x0)
    7772:	b340      	st.w      	r2, (r3, 0x0)
    7774:	1b16      	addi      	r3, sp, 88
    7776:	9340      	ld.w      	r2, (r3, 0x0)
    7778:	1b15      	addi      	r3, sp, 84
    777a:	9360      	ld.w      	r3, (r3, 0x0)
    777c:	6d4b      	mov      	r5, r2
    777e:	6d0f      	mov      	r4, r3
    7780:	84c0      	ld.b      	r6, (r4, 0x0)
    7782:	2400      	addi      	r4, 1      	//0x1
    7784:	0403      	br      	0x778a	//778a <handle_push_pop+0x1ee>
    7786:	3501      	movi      	r5, 1      	//0x1
    7788:	0401      	br      	0x778a	//778a <handle_push_pop+0x1ee>
    778a:	1b16      	addi      	r3, sp, 88
    778c:	b3a0      	st.w      	r5, (r3, 0x0)
    778e:	1b14      	addi      	r3, sp, 80
    7790:	b3c0      	st.w      	r6, (r3, 0x0)
    7792:	1b15      	addi      	r3, sp, 84
    7794:	b380      	st.w      	r4, (r3, 0x0)
    7796:	1b14      	addi      	r3, sp, 80
    7798:	9360      	ld.w      	r3, (r3, 0x0)
    779a:	4328      	lsli      	r1, r3, 8
    779c:	1b17      	addi      	r3, sp, 92
    779e:	1a17      	addi      	r2, sp, 92
    77a0:	9240      	ld.w      	r2, (r2, 0x0)
    77a2:	6c84      	or      	r2, r1
    77a4:	b340      	st.w      	r2, (r3, 0x0)
    77a6:	1b16      	addi      	r3, sp, 88
    77a8:	9340      	ld.w      	r2, (r3, 0x0)
    77aa:	1b15      	addi      	r3, sp, 84
    77ac:	9360      	ld.w      	r3, (r3, 0x0)
    77ae:	6d4b      	mov      	r5, r2
    77b0:	6d0f      	mov      	r4, r3
    77b2:	84c0      	ld.b      	r6, (r4, 0x0)
    77b4:	2400      	addi      	r4, 1      	//0x1
    77b6:	0403      	br      	0x77bc	//77bc <handle_push_pop+0x220>
    77b8:	3501      	movi      	r5, 1      	//0x1
    77ba:	0401      	br      	0x77bc	//77bc <handle_push_pop+0x220>
    77bc:	1b16      	addi      	r3, sp, 88
    77be:	b3a0      	st.w      	r5, (r3, 0x0)
    77c0:	1b14      	addi      	r3, sp, 80
    77c2:	b3c0      	st.w      	r6, (r3, 0x0)
    77c4:	1b15      	addi      	r3, sp, 84
    77c6:	b380      	st.w      	r4, (r3, 0x0)
    77c8:	1b14      	addi      	r3, sp, 80
    77ca:	9360      	ld.w      	r3, (r3, 0x0)
    77cc:	4330      	lsli      	r1, r3, 16
    77ce:	1b17      	addi      	r3, sp, 92
    77d0:	1a17      	addi      	r2, sp, 92
    77d2:	9240      	ld.w      	r2, (r2, 0x0)
    77d4:	6c84      	or      	r2, r1
    77d6:	b340      	st.w      	r2, (r3, 0x0)
    77d8:	1b16      	addi      	r3, sp, 88
    77da:	9340      	ld.w      	r2, (r3, 0x0)
    77dc:	1b15      	addi      	r3, sp, 84
    77de:	9360      	ld.w      	r3, (r3, 0x0)
    77e0:	6d4b      	mov      	r5, r2
    77e2:	6d0f      	mov      	r4, r3
    77e4:	84c0      	ld.b      	r6, (r4, 0x0)
    77e6:	2400      	addi      	r4, 1      	//0x1
    77e8:	0403      	br      	0x77ee	//77ee <handle_push_pop+0x252>
    77ea:	3501      	movi      	r5, 1      	//0x1
    77ec:	0401      	br      	0x77ee	//77ee <handle_push_pop+0x252>
    77ee:	1b16      	addi      	r3, sp, 88
    77f0:	b3a0      	st.w      	r5, (r3, 0x0)
    77f2:	1b14      	addi      	r3, sp, 80
    77f4:	b3c0      	st.w      	r6, (r3, 0x0)
    77f6:	1b15      	addi      	r3, sp, 84
    77f8:	b380      	st.w      	r4, (r3, 0x0)
    77fa:	1b14      	addi      	r3, sp, 80
    77fc:	9360      	ld.w      	r3, (r3, 0x0)
    77fe:	4338      	lsli      	r1, r3, 24
    7800:	1b17      	addi      	r3, sp, 92
    7802:	1a17      	addi      	r2, sp, 92
    7804:	9240      	ld.w      	r2, (r2, 0x0)
    7806:	6c84      	or      	r2, r1
    7808:	b340      	st.w      	r2, (r3, 0x0)
    780a:	1b16      	addi      	r3, sp, 88
    780c:	9360      	ld.w      	r3, (r3, 0x0)
    780e:	e923029e 	bnez      	r3, 0x7d4a	//7d4a <handle_push_pop+0x7ae>
			if(put_regs_value(tmpval32, R15_NUM, regs) != 0){
    7812:	1a17      	addi      	r2, sp, 92
    7814:	6cfb      	mov      	r3, sp
    7816:	9200      	ld.w      	r0, (r2, 0x0)
    7818:	3104      	movi      	r1, 4      	//0x4
    781a:	9340      	ld.w      	r2, (r3, 0x0)
    781c:	e3fff95c 	bsr      	0x6ad4	//6ad4 <put_regs_value>
    7820:	c4004820 	lsli      	r0, r0, 0
    7824:	6cc3      	mov      	r3, r0
    7826:	e9230289 	bnez      	r3, 0x7d38	//7d38 <handle_push_pop+0x79c>
				goto fault;
			}
		}
		for(i = 0; i < list2; i++){
    782a:	1b21      	addi      	r3, sp, 132
    782c:	3200      	movi      	r2, 0      	//0x0
    782e:	b340      	st.w      	r2, (r3, 0x0)
    7830:	048e      	br      	0x794c	//794c <handle_push_pop+0x3b0>
			get32_unaligned_check(tmpval32, datasp + (i + list1 + has_r15) * 4);
    7832:	1b13      	addi      	r3, sp, 76
    7834:	3200      	movi      	r2, 0      	//0x0
    7836:	b340      	st.w      	r2, (r3, 0x0)
    7838:	1a21      	addi      	r2, sp, 132
    783a:	1b1f      	addi      	r3, sp, 124
    783c:	9240      	ld.w      	r2, (r2, 0x0)
    783e:	9360      	ld.w      	r3, (r3, 0x0)
    7840:	5a4c      	addu      	r2, r2, r3
    7842:	1b1d      	addi      	r3, sp, 116
    7844:	9360      	ld.w      	r3, (r3, 0x0)
    7846:	5a6c      	addu      	r3, r2, r3
    7848:	4322      	lsli      	r1, r3, 2
    784a:	1b12      	addi      	r3, sp, 72
    784c:	1a1b      	addi      	r2, sp, 108
    784e:	9240      	ld.w      	r2, (r2, 0x0)
    7850:	5948      	addu      	r2, r1, r2
    7852:	b340      	st.w      	r2, (r3, 0x0)
    7854:	1b13      	addi      	r3, sp, 76
    7856:	9340      	ld.w      	r2, (r3, 0x0)
    7858:	1b12      	addi      	r3, sp, 72
    785a:	9360      	ld.w      	r3, (r3, 0x0)
    785c:	6d4b      	mov      	r5, r2
    785e:	6d0f      	mov      	r4, r3
    7860:	84c0      	ld.b      	r6, (r4, 0x0)
    7862:	2400      	addi      	r4, 1      	//0x1
    7864:	0406      	br      	0x7870	//7870 <handle_push_pop+0x2d4>
    7866:	3501      	movi      	r5, 1      	//0x1
    7868:	0404      	br      	0x7870	//7870 <handle_push_pop+0x2d4>
    786a:	0000      	.short	0x0000
    786c:	00006ad4 	.long	0x00006ad4
    7870:	1b13      	addi      	r3, sp, 76
    7872:	b3a0      	st.w      	r5, (r3, 0x0)
    7874:	1b11      	addi      	r3, sp, 68
    7876:	b3c0      	st.w      	r6, (r3, 0x0)
    7878:	1b12      	addi      	r3, sp, 72
    787a:	b380      	st.w      	r4, (r3, 0x0)
    787c:	1b17      	addi      	r3, sp, 92
    787e:	1a11      	addi      	r2, sp, 68
    7880:	9240      	ld.w      	r2, (r2, 0x0)
    7882:	b340      	st.w      	r2, (r3, 0x0)
    7884:	1b13      	addi      	r3, sp, 76
    7886:	9340      	ld.w      	r2, (r3, 0x0)
    7888:	1b12      	addi      	r3, sp, 72
    788a:	9360      	ld.w      	r3, (r3, 0x0)
    788c:	6d4b      	mov      	r5, r2
    788e:	6d0f      	mov      	r4, r3
    7890:	84c0      	ld.b      	r6, (r4, 0x0)
    7892:	2400      	addi      	r4, 1      	//0x1
    7894:	0403      	br      	0x789a	//789a <handle_push_pop+0x2fe>
    7896:	3501      	movi      	r5, 1      	//0x1
    7898:	0401      	br      	0x789a	//789a <handle_push_pop+0x2fe>
    789a:	1b13      	addi      	r3, sp, 76
    789c:	b3a0      	st.w      	r5, (r3, 0x0)
    789e:	1b11      	addi      	r3, sp, 68
    78a0:	b3c0      	st.w      	r6, (r3, 0x0)
    78a2:	1b12      	addi      	r3, sp, 72
    78a4:	b380      	st.w      	r4, (r3, 0x0)
    78a6:	1b11      	addi      	r3, sp, 68
    78a8:	9360      	ld.w      	r3, (r3, 0x0)
    78aa:	4328      	lsli      	r1, r3, 8
    78ac:	1b17      	addi      	r3, sp, 92
    78ae:	1a17      	addi      	r2, sp, 92
    78b0:	9240      	ld.w      	r2, (r2, 0x0)
    78b2:	6c84      	or      	r2, r1
    78b4:	b340      	st.w      	r2, (r3, 0x0)
    78b6:	1b13      	addi      	r3, sp, 76
    78b8:	9340      	ld.w      	r2, (r3, 0x0)
    78ba:	1b12      	addi      	r3, sp, 72
    78bc:	9360      	ld.w      	r3, (r3, 0x0)
    78be:	6d4b      	mov      	r5, r2
    78c0:	6d0f      	mov      	r4, r3
    78c2:	84c0      	ld.b      	r6, (r4, 0x0)
    78c4:	2400      	addi      	r4, 1      	//0x1
    78c6:	0403      	br      	0x78cc	//78cc <handle_push_pop+0x330>
    78c8:	3501      	movi      	r5, 1      	//0x1
    78ca:	0401      	br      	0x78cc	//78cc <handle_push_pop+0x330>
    78cc:	1b13      	addi      	r3, sp, 76
    78ce:	b3a0      	st.w      	r5, (r3, 0x0)
    78d0:	1b11      	addi      	r3, sp, 68
    78d2:	b3c0      	st.w      	r6, (r3, 0x0)
    78d4:	1b12      	addi      	r3, sp, 72
    78d6:	b380      	st.w      	r4, (r3, 0x0)
    78d8:	1b11      	addi      	r3, sp, 68
    78da:	9360      	ld.w      	r3, (r3, 0x0)
    78dc:	4330      	lsli      	r1, r3, 16
    78de:	1b17      	addi      	r3, sp, 92
    78e0:	1a17      	addi      	r2, sp, 92
    78e2:	9240      	ld.w      	r2, (r2, 0x0)
    78e4:	6c84      	or      	r2, r1
    78e6:	b340      	st.w      	r2, (r3, 0x0)
    78e8:	1b13      	addi      	r3, sp, 76
    78ea:	9340      	ld.w      	r2, (r3, 0x0)
    78ec:	1b12      	addi      	r3, sp, 72
    78ee:	9360      	ld.w      	r3, (r3, 0x0)
    78f0:	6d4b      	mov      	r5, r2
    78f2:	6d0f      	mov      	r4, r3
    78f4:	84c0      	ld.b      	r6, (r4, 0x0)
    78f6:	2400      	addi      	r4, 1      	//0x1
    78f8:	0403      	br      	0x78fe	//78fe <handle_push_pop+0x362>
    78fa:	3501      	movi      	r5, 1      	//0x1
    78fc:	0401      	br      	0x78fe	//78fe <handle_push_pop+0x362>
    78fe:	1b13      	addi      	r3, sp, 76
    7900:	b3a0      	st.w      	r5, (r3, 0x0)
    7902:	1b11      	addi      	r3, sp, 68
    7904:	b3c0      	st.w      	r6, (r3, 0x0)
    7906:	1b12      	addi      	r3, sp, 72
    7908:	b380      	st.w      	r4, (r3, 0x0)
    790a:	1b11      	addi      	r3, sp, 68
    790c:	9360      	ld.w      	r3, (r3, 0x0)
    790e:	4338      	lsli      	r1, r3, 24
    7910:	1b17      	addi      	r3, sp, 92
    7912:	1a17      	addi      	r2, sp, 92
    7914:	9240      	ld.w      	r2, (r2, 0x0)
    7916:	6c84      	or      	r2, r1
    7918:	b340      	st.w      	r2, (r3, 0x0)
    791a:	1b13      	addi      	r3, sp, 76
    791c:	9360      	ld.w      	r3, (r3, 0x0)
    791e:	e9230216 	bnez      	r3, 0x7d4a	//7d4a <handle_push_pop+0x7ae>
			if(put_regs_value(tmpval32, R16_NUM + i, regs) != 0){
    7922:	1b21      	addi      	r3, sp, 132
    7924:	9360      	ld.w      	r3, (r3, 0x0)
    7926:	e443000f 	addi      	r2, r3, 16      	//0x10
    792a:	1917      	addi      	r1, sp, 92
    792c:	6cfb      	mov      	r3, sp
    792e:	9100      	ld.w      	r0, (r1, 0x0)
    7930:	6c4b      	mov      	r1, r2
    7932:	9340      	ld.w      	r2, (r3, 0x0)
    7934:	e3fff8d0 	bsr      	0x6ad4	//6ad4 <put_regs_value>
    7938:	c4004820 	lsli      	r0, r0, 0
    793c:	6cc3      	mov      	r3, r0
    793e:	e92301ff 	bnez      	r3, 0x7d3c	//7d3c <handle_push_pop+0x7a0>
			get32_unaligned_check(tmpval32, datasp + list1 * 4);
			if(put_regs_value(tmpval32, R15_NUM, regs) != 0){
				goto fault;
			}
		}
		for(i = 0; i < list2; i++){
    7942:	1b21      	addi      	r3, sp, 132
    7944:	1a21      	addi      	r2, sp, 132
    7946:	9240      	ld.w      	r2, (r2, 0x0)
    7948:	2200      	addi      	r2, 1      	//0x1
    794a:	b340      	st.w      	r2, (r3, 0x0)
    794c:	1a21      	addi      	r2, sp, 132
    794e:	1b1e      	addi      	r3, sp, 120
    7950:	9240      	ld.w      	r2, (r2, 0x0)
    7952:	9360      	ld.w      	r3, (r3, 0x0)
    7954:	64c8      	cmphs      	r2, r3
    7956:	0f6e      	bf      	0x7832	//7832 <handle_push_pop+0x296>
			get32_unaligned_check(tmpval32, datasp + (i + list1 + has_r15) * 4);
			if(put_regs_value(tmpval32, R16_NUM + i, regs) != 0){
				goto fault;
			}
		}
		if(has_r28 == 0x1){
    7958:	1b1c      	addi      	r3, sp, 112
    795a:	9360      	ld.w      	r3, (r3, 0x0)
    795c:	3b41      	cmpnei      	r3, 1
    795e:	0884      	bt      	0x7a66	//7a66 <handle_push_pop+0x4ca>
			get32_unaligned_check(tmpval32, datasp + (list1 + list2 + has_r15) * 4);
    7960:	1b10      	addi      	r3, sp, 64
    7962:	3200      	movi      	r2, 0      	//0x0
    7964:	b340      	st.w      	r2, (r3, 0x0)
    7966:	1a1f      	addi      	r2, sp, 124
    7968:	1b1e      	addi      	r3, sp, 120
    796a:	9240      	ld.w      	r2, (r2, 0x0)
    796c:	9360      	ld.w      	r3, (r3, 0x0)
    796e:	5a4c      	addu      	r2, r2, r3
    7970:	1b1d      	addi      	r3, sp, 116
    7972:	9360      	ld.w      	r3, (r3, 0x0)
    7974:	5a6c      	addu      	r3, r2, r3
    7976:	4322      	lsli      	r1, r3, 2
    7978:	1b0f      	addi      	r3, sp, 60
    797a:	1a1b      	addi      	r2, sp, 108
    797c:	9240      	ld.w      	r2, (r2, 0x0)
    797e:	5948      	addu      	r2, r1, r2
    7980:	b340      	st.w      	r2, (r3, 0x0)
    7982:	1b10      	addi      	r3, sp, 64
    7984:	9340      	ld.w      	r2, (r3, 0x0)
    7986:	1b0f      	addi      	r3, sp, 60
    7988:	9360      	ld.w      	r3, (r3, 0x0)
    798a:	6d4b      	mov      	r5, r2
    798c:	6d0f      	mov      	r4, r3
    798e:	84c0      	ld.b      	r6, (r4, 0x0)
    7990:	2400      	addi      	r4, 1      	//0x1
    7992:	0405      	br      	0x799c	//799c <handle_push_pop+0x400>
    7994:	3501      	movi      	r5, 1      	//0x1
    7996:	0403      	br      	0x799c	//799c <handle_push_pop+0x400>
    7998:	00006ad4 	.long	0x00006ad4
    799c:	1b10      	addi      	r3, sp, 64
    799e:	b3a0      	st.w      	r5, (r3, 0x0)
    79a0:	1b0e      	addi      	r3, sp, 56
    79a2:	b3c0      	st.w      	r6, (r3, 0x0)
    79a4:	1b0f      	addi      	r3, sp, 60
    79a6:	b380      	st.w      	r4, (r3, 0x0)
    79a8:	1b17      	addi      	r3, sp, 92
    79aa:	1a0e      	addi      	r2, sp, 56
    79ac:	9240      	ld.w      	r2, (r2, 0x0)
    79ae:	b340      	st.w      	r2, (r3, 0x0)
    79b0:	1b10      	addi      	r3, sp, 64
    79b2:	9340      	ld.w      	r2, (r3, 0x0)
    79b4:	1b0f      	addi      	r3, sp, 60
    79b6:	9360      	ld.w      	r3, (r3, 0x0)
    79b8:	6d4b      	mov      	r5, r2
    79ba:	6d0f      	mov      	r4, r3
    79bc:	84c0      	ld.b      	r6, (r4, 0x0)
    79be:	2400      	addi      	r4, 1      	//0x1
    79c0:	0403      	br      	0x79c6	//79c6 <handle_push_pop+0x42a>
    79c2:	3501      	movi      	r5, 1      	//0x1
    79c4:	0401      	br      	0x79c6	//79c6 <handle_push_pop+0x42a>
    79c6:	1b10      	addi      	r3, sp, 64
    79c8:	b3a0      	st.w      	r5, (r3, 0x0)
    79ca:	1b0e      	addi      	r3, sp, 56
    79cc:	b3c0      	st.w      	r6, (r3, 0x0)
    79ce:	1b0f      	addi      	r3, sp, 60
    79d0:	b380      	st.w      	r4, (r3, 0x0)
    79d2:	1b0e      	addi      	r3, sp, 56
    79d4:	9360      	ld.w      	r3, (r3, 0x0)
    79d6:	4328      	lsli      	r1, r3, 8
    79d8:	1b17      	addi      	r3, sp, 92
    79da:	1a17      	addi      	r2, sp, 92
    79dc:	9240      	ld.w      	r2, (r2, 0x0)
    79de:	6c84      	or      	r2, r1
    79e0:	b340      	st.w      	r2, (r3, 0x0)
    79e2:	1b10      	addi      	r3, sp, 64
    79e4:	9340      	ld.w      	r2, (r3, 0x0)
    79e6:	1b0f      	addi      	r3, sp, 60
    79e8:	9360      	ld.w      	r3, (r3, 0x0)
    79ea:	6d4b      	mov      	r5, r2
    79ec:	6d0f      	mov      	r4, r3
    79ee:	84c0      	ld.b      	r6, (r4, 0x0)
    79f0:	2400      	addi      	r4, 1      	//0x1
    79f2:	0403      	br      	0x79f8	//79f8 <handle_push_pop+0x45c>
    79f4:	3501      	movi      	r5, 1      	//0x1
    79f6:	0401      	br      	0x79f8	//79f8 <handle_push_pop+0x45c>
    79f8:	1b10      	addi      	r3, sp, 64
    79fa:	b3a0      	st.w      	r5, (r3, 0x0)
    79fc:	1b0e      	addi      	r3, sp, 56
    79fe:	b3c0      	st.w      	r6, (r3, 0x0)
    7a00:	1b0f      	addi      	r3, sp, 60
    7a02:	b380      	st.w      	r4, (r3, 0x0)
    7a04:	1b0e      	addi      	r3, sp, 56
    7a06:	9360      	ld.w      	r3, (r3, 0x0)
    7a08:	4330      	lsli      	r1, r3, 16
    7a0a:	1b17      	addi      	r3, sp, 92
    7a0c:	1a17      	addi      	r2, sp, 92
    7a0e:	9240      	ld.w      	r2, (r2, 0x0)
    7a10:	6c84      	or      	r2, r1
    7a12:	b340      	st.w      	r2, (r3, 0x0)
    7a14:	1b10      	addi      	r3, sp, 64
    7a16:	9340      	ld.w      	r2, (r3, 0x0)
    7a18:	1b0f      	addi      	r3, sp, 60
    7a1a:	9360      	ld.w      	r3, (r3, 0x0)
    7a1c:	6d4b      	mov      	r5, r2
    7a1e:	6d0f      	mov      	r4, r3
    7a20:	84c0      	ld.b      	r6, (r4, 0x0)
    7a22:	2400      	addi      	r4, 1      	//0x1
    7a24:	0403      	br      	0x7a2a	//7a2a <handle_push_pop+0x48e>
    7a26:	3501      	movi      	r5, 1      	//0x1
    7a28:	0401      	br      	0x7a2a	//7a2a <handle_push_pop+0x48e>
    7a2a:	1b10      	addi      	r3, sp, 64
    7a2c:	b3a0      	st.w      	r5, (r3, 0x0)
    7a2e:	1b0e      	addi      	r3, sp, 56
    7a30:	b3c0      	st.w      	r6, (r3, 0x0)
    7a32:	1b0f      	addi      	r3, sp, 60
    7a34:	b380      	st.w      	r4, (r3, 0x0)
    7a36:	1b0e      	addi      	r3, sp, 56
    7a38:	9360      	ld.w      	r3, (r3, 0x0)
    7a3a:	4338      	lsli      	r1, r3, 24
    7a3c:	1b17      	addi      	r3, sp, 92
    7a3e:	1a17      	addi      	r2, sp, 92
    7a40:	9240      	ld.w      	r2, (r2, 0x0)
    7a42:	6c84      	or      	r2, r1
    7a44:	b340      	st.w      	r2, (r3, 0x0)
    7a46:	1b10      	addi      	r3, sp, 64
    7a48:	9360      	ld.w      	r3, (r3, 0x0)
    7a4a:	e9230180 	bnez      	r3, 0x7d4a	//7d4a <handle_push_pop+0x7ae>
			if(put_regs_value(tmpval32, R28_NUM, regs) != 0){
    7a4e:	1a17      	addi      	r2, sp, 92
    7a50:	6cfb      	mov      	r3, sp
    7a52:	9200      	ld.w      	r0, (r2, 0x0)
    7a54:	311c      	movi      	r1, 28      	//0x1c
    7a56:	9340      	ld.w      	r2, (r3, 0x0)
    7a58:	e3fff83e 	bsr      	0x6ad4	//6ad4 <put_regs_value>
    7a5c:	c4004820 	lsli      	r0, r0, 0
    7a60:	6cc3      	mov      	r3, r0
    7a62:	e923016f 	bnez      	r3, 0x7d40	//7d40 <handle_push_pop+0x7a4>
				goto fault;
			}
		}
		datasp += (list1 + list2 + has_r15 + has_r28) * 4;
    7a66:	1a1f      	addi      	r2, sp, 124
    7a68:	1b1e      	addi      	r3, sp, 120
    7a6a:	9240      	ld.w      	r2, (r2, 0x0)
    7a6c:	9360      	ld.w      	r3, (r3, 0x0)
    7a6e:	5a4c      	addu      	r2, r2, r3
    7a70:	1b1d      	addi      	r3, sp, 116
    7a72:	9360      	ld.w      	r3, (r3, 0x0)
    7a74:	5a4c      	addu      	r2, r2, r3
    7a76:	1b1c      	addi      	r3, sp, 112
    7a78:	9360      	ld.w      	r3, (r3, 0x0)
    7a7a:	5a6c      	addu      	r3, r2, r3
    7a7c:	4322      	lsli      	r1, r3, 2
    7a7e:	1b1b      	addi      	r3, sp, 108
    7a80:	1a1b      	addi      	r2, sp, 108
    7a82:	9240      	ld.w      	r2, (r2, 0x0)
    7a84:	5948      	addu      	r2, r1, r2
    7a86:	b340      	st.w      	r2, (r3, 0x0)
		if(put_regs_value(datasp, SP_NUM, regs) != 0){
    7a88:	1a1b      	addi      	r2, sp, 108
    7a8a:	6cfb      	mov      	r3, sp
    7a8c:	9200      	ld.w      	r0, (r2, 0x0)
    7a8e:	310e      	movi      	r1, 14      	//0xe
    7a90:	9340      	ld.w      	r2, (r3, 0x0)
    7a92:	e3fff821 	bsr      	0x6ad4	//6ad4 <put_regs_value>
    7a96:	c4004820 	lsli      	r0, r0, 0
    7a9a:	6cc3      	mov      	r3, r0
    7a9c:	e903014a 	bez      	r3, 0x7d30	//7d30 <handle_push_pop+0x794>
			goto fault;
    7aa0:	0555      	br      	0x7d4a	//7d4a <handle_push_pop+0x7ae>
		}
	}else if(push_pop == 0x14c0){ // push
    7aa2:	1b20      	addi      	r3, sp, 128
    7aa4:	9360      	ld.w      	r3, (r3, 0x0)
    7aa6:	eb4314c0 	cmpnei      	r3, 5312      	//0x14c0
    7aaa:	094d      	bt      	0x7d44	//7d44 <handle_push_pop+0x7a8>
		datasp -= (list1 + list2 + has_r15 + has_r28) * 4;
    7aac:	1a1f      	addi      	r2, sp, 124
    7aae:	1b1e      	addi      	r3, sp, 120
    7ab0:	9240      	ld.w      	r2, (r2, 0x0)
    7ab2:	9360      	ld.w      	r3, (r3, 0x0)
    7ab4:	5a4c      	addu      	r2, r2, r3
    7ab6:	1b1d      	addi      	r3, sp, 116
    7ab8:	9360      	ld.w      	r3, (r3, 0x0)
    7aba:	5a4c      	addu      	r2, r2, r3
    7abc:	1b1c      	addi      	r3, sp, 112
    7abe:	9360      	ld.w      	r3, (r3, 0x0)
    7ac0:	5a6c      	addu      	r3, r2, r3
    7ac2:	4342      	lsli      	r2, r3, 2
    7ac4:	1b1b      	addi      	r3, sp, 108
    7ac6:	191b      	addi      	r1, sp, 108
    7ac8:	9120      	ld.w      	r1, (r1, 0x0)
    7aca:	5949      	subu      	r2, r1, r2
    7acc:	b340      	st.w      	r2, (r3, 0x0)
		if(put_regs_value(datasp, SP_NUM, regs) != 0){
    7ace:	1a1b      	addi      	r2, sp, 108
    7ad0:	6cfb      	mov      	r3, sp
    7ad2:	9200      	ld.w      	r0, (r2, 0x0)
    7ad4:	310e      	movi      	r1, 14      	//0xe
    7ad6:	9340      	ld.w      	r2, (r3, 0x0)
    7ad8:	e3fff7fe 	bsr      	0x6ad4	//6ad4 <put_regs_value>
    7adc:	c4004820 	lsli      	r0, r0, 0
    7ae0:	6cc3      	mov      	r3, r0
    7ae2:	e9230133 	bnez      	r3, 0x7d48	//7d48 <handle_push_pop+0x7ac>
			goto fault;
		}
		for(i = 0; i < list1; i++){
    7ae6:	1b21      	addi      	r3, sp, 132
    7ae8:	3200      	movi      	r2, 0      	//0x0
    7aea:	b340      	st.w      	r2, (r3, 0x0)
    7aec:	0445      	br      	0x7b76	//7b76 <handle_push_pop+0x5da>
			tmpval32 = get_regs_value(R4_NUM + i, regs);
    7aee:	1b21      	addi      	r3, sp, 132
    7af0:	9360      	ld.w      	r3, (r3, 0x0)
    7af2:	5b4e      	addi      	r2, r3, 4      	//0x4
    7af4:	1c17      	addi      	r4, sp, 92
    7af6:	6cfb      	mov      	r3, sp
    7af8:	6c0b      	mov      	r0, r2
    7afa:	9320      	ld.w      	r1, (r3, 0x0)
    7afc:	e3fff7be 	bsr      	0x6a78	//6a78 <get_regs_value>
    7b00:	c4004820 	lsli      	r0, r0, 0
    7b04:	b400      	st.w      	r0, (r4, 0x0)
			put32_unaligned_check(tmpval32, datasp + i * 4);
    7b06:	1b0d      	addi      	r3, sp, 52
    7b08:	3200      	movi      	r2, 0      	//0x0
    7b0a:	b340      	st.w      	r2, (r3, 0x0)
    7b0c:	1b0c      	addi      	r3, sp, 48
    7b0e:	1a17      	addi      	r2, sp, 92
    7b10:	9240      	ld.w      	r2, (r2, 0x0)
    7b12:	b340      	st.w      	r2, (r3, 0x0)
    7b14:	1b21      	addi      	r3, sp, 132
    7b16:	9360      	ld.w      	r3, (r3, 0x0)
    7b18:	4322      	lsli      	r1, r3, 2
    7b1a:	1b0b      	addi      	r3, sp, 44
    7b1c:	1a1b      	addi      	r2, sp, 108
    7b1e:	9240      	ld.w      	r2, (r2, 0x0)
    7b20:	5948      	addu      	r2, r1, r2
    7b22:	b340      	st.w      	r2, (r3, 0x0)
    7b24:	1b0d      	addi      	r3, sp, 52
    7b26:	9320      	ld.w      	r1, (r3, 0x0)
    7b28:	1b0c      	addi      	r3, sp, 48
    7b2a:	9340      	ld.w      	r2, (r3, 0x0)
    7b2c:	1b0b      	addi      	r3, sp, 44
    7b2e:	9360      	ld.w      	r3, (r3, 0x0)
    7b30:	6d87      	mov      	r6, r1
    7b32:	6d4b      	mov      	r5, r2
    7b34:	6d0f      	mov      	r4, r3
    7b36:	a4a0      	st.b      	r5, (r4, 0x0)
    7b38:	2400      	addi      	r4, 1      	//0x1
    7b3a:	4da8      	lsri      	r5, r5, 8
    7b3c:	a4a0      	st.b      	r5, (r4, 0x0)
    7b3e:	2400      	addi      	r4, 1      	//0x1
    7b40:	4da8      	lsri      	r5, r5, 8
    7b42:	a4a0      	st.b      	r5, (r4, 0x0)
    7b44:	2400      	addi      	r4, 1      	//0x1
    7b46:	4da8      	lsri      	r5, r5, 8
    7b48:	a4a0      	st.b      	r5, (r4, 0x0)
    7b4a:	0407      	br      	0x7b58	//7b58 <handle_push_pop+0x5bc>
    7b4c:	3601      	movi      	r6, 1      	//0x1
    7b4e:	0405      	br      	0x7b58	//7b58 <handle_push_pop+0x5bc>
    7b50:	00006ad4 	.long	0x00006ad4
    7b54:	00006a78 	.long	0x00006a78
    7b58:	1b0d      	addi      	r3, sp, 52
    7b5a:	b3c0      	st.w      	r6, (r3, 0x0)
    7b5c:	1b0c      	addi      	r3, sp, 48
    7b5e:	b3a0      	st.w      	r5, (r3, 0x0)
    7b60:	1b0b      	addi      	r3, sp, 44
    7b62:	b380      	st.w      	r4, (r3, 0x0)
    7b64:	1b0d      	addi      	r3, sp, 52
    7b66:	9360      	ld.w      	r3, (r3, 0x0)
    7b68:	e92300f1 	bnez      	r3, 0x7d4a	//7d4a <handle_push_pop+0x7ae>
	}else if(push_pop == 0x14c0){ // push
		datasp -= (list1 + list2 + has_r15 + has_r28) * 4;
		if(put_regs_value(datasp, SP_NUM, regs) != 0){
			goto fault;
		}
		for(i = 0; i < list1; i++){
    7b6c:	1b21      	addi      	r3, sp, 132
    7b6e:	1a21      	addi      	r2, sp, 132
    7b70:	9240      	ld.w      	r2, (r2, 0x0)
    7b72:	2200      	addi      	r2, 1      	//0x1
    7b74:	b340      	st.w      	r2, (r3, 0x0)
    7b76:	1a21      	addi      	r2, sp, 132
    7b78:	1b1f      	addi      	r3, sp, 124
    7b7a:	9240      	ld.w      	r2, (r2, 0x0)
    7b7c:	9360      	ld.w      	r3, (r3, 0x0)
    7b7e:	64c8      	cmphs      	r2, r3
    7b80:	0fb7      	bf      	0x7aee	//7aee <handle_push_pop+0x552>
			tmpval32 = get_regs_value(R4_NUM + i, regs);
			put32_unaligned_check(tmpval32, datasp + i * 4);
		}
		if(has_r15 == 0x1){
    7b82:	1b1d      	addi      	r3, sp, 116
    7b84:	9360      	ld.w      	r3, (r3, 0x0)
    7b86:	3b41      	cmpnei      	r3, 1
    7b88:	083c      	bt      	0x7c00	//7c00 <handle_push_pop+0x664>
			tmpval32 = get_regs_value(R15_NUM, regs);
    7b8a:	1c17      	addi      	r4, sp, 92
    7b8c:	6cfb      	mov      	r3, sp
    7b8e:	3004      	movi      	r0, 4      	//0x4
    7b90:	9320      	ld.w      	r1, (r3, 0x0)
    7b92:	e3fff773 	bsr      	0x6a78	//6a78 <get_regs_value>
    7b96:	c4004820 	lsli      	r0, r0, 0
    7b9a:	b400      	st.w      	r0, (r4, 0x0)
			put32_unaligned_check(tmpval32, datasp + list1 * 4);
    7b9c:	1b0a      	addi      	r3, sp, 40
    7b9e:	3200      	movi      	r2, 0      	//0x0
    7ba0:	b340      	st.w      	r2, (r3, 0x0)
    7ba2:	1b09      	addi      	r3, sp, 36
    7ba4:	1a17      	addi      	r2, sp, 92
    7ba6:	9240      	ld.w      	r2, (r2, 0x0)
    7ba8:	b340      	st.w      	r2, (r3, 0x0)
    7baa:	1b1f      	addi      	r3, sp, 124
    7bac:	9360      	ld.w      	r3, (r3, 0x0)
    7bae:	4322      	lsli      	r1, r3, 2
    7bb0:	1b08      	addi      	r3, sp, 32
    7bb2:	1a1b      	addi      	r2, sp, 108
    7bb4:	9240      	ld.w      	r2, (r2, 0x0)
    7bb6:	5948      	addu      	r2, r1, r2
    7bb8:	b340      	st.w      	r2, (r3, 0x0)
    7bba:	1b0a      	addi      	r3, sp, 40
    7bbc:	9320      	ld.w      	r1, (r3, 0x0)
    7bbe:	1b09      	addi      	r3, sp, 36
    7bc0:	9340      	ld.w      	r2, (r3, 0x0)
    7bc2:	1b08      	addi      	r3, sp, 32
    7bc4:	9360      	ld.w      	r3, (r3, 0x0)
    7bc6:	6d87      	mov      	r6, r1
    7bc8:	6d4b      	mov      	r5, r2
    7bca:	6d0f      	mov      	r4, r3
    7bcc:	a4a0      	st.b      	r5, (r4, 0x0)
    7bce:	2400      	addi      	r4, 1      	//0x1
    7bd0:	4da8      	lsri      	r5, r5, 8
    7bd2:	a4a0      	st.b      	r5, (r4, 0x0)
    7bd4:	2400      	addi      	r4, 1      	//0x1
    7bd6:	4da8      	lsri      	r5, r5, 8
    7bd8:	a4a0      	st.b      	r5, (r4, 0x0)
    7bda:	2400      	addi      	r4, 1      	//0x1
    7bdc:	4da8      	lsri      	r5, r5, 8
    7bde:	a4a0      	st.b      	r5, (r4, 0x0)
    7be0:	0406      	br      	0x7bec	//7bec <handle_push_pop+0x650>
    7be2:	3601      	movi      	r6, 1      	//0x1
    7be4:	0404      	br      	0x7bec	//7bec <handle_push_pop+0x650>
    7be6:	0000      	.short	0x0000
    7be8:	00006a78 	.long	0x00006a78
    7bec:	1b0a      	addi      	r3, sp, 40
    7bee:	b3c0      	st.w      	r6, (r3, 0x0)
    7bf0:	1b09      	addi      	r3, sp, 36
    7bf2:	b3a0      	st.w      	r5, (r3, 0x0)
    7bf4:	1b08      	addi      	r3, sp, 32
    7bf6:	b380      	st.w      	r4, (r3, 0x0)
    7bf8:	1b0a      	addi      	r3, sp, 40
    7bfa:	9360      	ld.w      	r3, (r3, 0x0)
    7bfc:	e92300a7 	bnez      	r3, 0x7d4a	//7d4a <handle_push_pop+0x7ae>
		}
		for(i = 0; i < list2; i++){
    7c00:	1b21      	addi      	r3, sp, 132
    7c02:	3200      	movi      	r2, 0      	//0x0
    7c04:	b340      	st.w      	r2, (r3, 0x0)
    7c06:	044a      	br      	0x7c9a	//7c9a <handle_push_pop+0x6fe>
			tmpval32 = get_regs_value(R16_NUM + i, regs);
    7c08:	1b21      	addi      	r3, sp, 132
    7c0a:	9360      	ld.w      	r3, (r3, 0x0)
    7c0c:	e443000f 	addi      	r2, r3, 16      	//0x10
    7c10:	1c17      	addi      	r4, sp, 92
    7c12:	6cfb      	mov      	r3, sp
    7c14:	6c0b      	mov      	r0, r2
    7c16:	9320      	ld.w      	r1, (r3, 0x0)
    7c18:	e3fff730 	bsr      	0x6a78	//6a78 <get_regs_value>
    7c1c:	c4004820 	lsli      	r0, r0, 0
    7c20:	b400      	st.w      	r0, (r4, 0x0)
			put32_unaligned_check(tmpval32, datasp + (i + list1 + has_r15) * 4);
    7c22:	1b07      	addi      	r3, sp, 28
    7c24:	3200      	movi      	r2, 0      	//0x0
    7c26:	b340      	st.w      	r2, (r3, 0x0)
    7c28:	1b06      	addi      	r3, sp, 24
    7c2a:	1a17      	addi      	r2, sp, 92
    7c2c:	9240      	ld.w      	r2, (r2, 0x0)
    7c2e:	b340      	st.w      	r2, (r3, 0x0)
    7c30:	1a21      	addi      	r2, sp, 132
    7c32:	1b1f      	addi      	r3, sp, 124
    7c34:	9240      	ld.w      	r2, (r2, 0x0)
    7c36:	9360      	ld.w      	r3, (r3, 0x0)
    7c38:	5a4c      	addu      	r2, r2, r3
    7c3a:	1b1d      	addi      	r3, sp, 116
    7c3c:	9360      	ld.w      	r3, (r3, 0x0)
    7c3e:	5a6c      	addu      	r3, r2, r3
    7c40:	4322      	lsli      	r1, r3, 2
    7c42:	1b05      	addi      	r3, sp, 20
    7c44:	1a1b      	addi      	r2, sp, 108
    7c46:	9240      	ld.w      	r2, (r2, 0x0)
    7c48:	5948      	addu      	r2, r1, r2
    7c4a:	b340      	st.w      	r2, (r3, 0x0)
    7c4c:	1b07      	addi      	r3, sp, 28
    7c4e:	9320      	ld.w      	r1, (r3, 0x0)
    7c50:	1b06      	addi      	r3, sp, 24
    7c52:	9340      	ld.w      	r2, (r3, 0x0)
    7c54:	1b05      	addi      	r3, sp, 20
    7c56:	9360      	ld.w      	r3, (r3, 0x0)
    7c58:	6d87      	mov      	r6, r1
    7c5a:	6d4b      	mov      	r5, r2
    7c5c:	6d0f      	mov      	r4, r3
    7c5e:	a4a0      	st.b      	r5, (r4, 0x0)
    7c60:	2400      	addi      	r4, 1      	//0x1
    7c62:	4da8      	lsri      	r5, r5, 8
    7c64:	a4a0      	st.b      	r5, (r4, 0x0)
    7c66:	2400      	addi      	r4, 1      	//0x1
    7c68:	4da8      	lsri      	r5, r5, 8
    7c6a:	a4a0      	st.b      	r5, (r4, 0x0)
    7c6c:	2400      	addi      	r4, 1      	//0x1
    7c6e:	4da8      	lsri      	r5, r5, 8
    7c70:	a4a0      	st.b      	r5, (r4, 0x0)
    7c72:	0405      	br      	0x7c7c	//7c7c <handle_push_pop+0x6e0>
    7c74:	3601      	movi      	r6, 1      	//0x1
    7c76:	0403      	br      	0x7c7c	//7c7c <handle_push_pop+0x6e0>
    7c78:	00006a78 	.long	0x00006a78
    7c7c:	1b07      	addi      	r3, sp, 28
    7c7e:	b3c0      	st.w      	r6, (r3, 0x0)
    7c80:	1b06      	addi      	r3, sp, 24
    7c82:	b3a0      	st.w      	r5, (r3, 0x0)
    7c84:	1b05      	addi      	r3, sp, 20
    7c86:	b380      	st.w      	r4, (r3, 0x0)
    7c88:	1b07      	addi      	r3, sp, 28
    7c8a:	9360      	ld.w      	r3, (r3, 0x0)
    7c8c:	e923005f 	bnez      	r3, 0x7d4a	//7d4a <handle_push_pop+0x7ae>
		}
		if(has_r15 == 0x1){
			tmpval32 = get_regs_value(R15_NUM, regs);
			put32_unaligned_check(tmpval32, datasp + list1 * 4);
		}
		for(i = 0; i < list2; i++){
    7c90:	1b21      	addi      	r3, sp, 132
    7c92:	1a21      	addi      	r2, sp, 132
    7c94:	9240      	ld.w      	r2, (r2, 0x0)
    7c96:	2200      	addi      	r2, 1      	//0x1
    7c98:	b340      	st.w      	r2, (r3, 0x0)
    7c9a:	1a21      	addi      	r2, sp, 132
    7c9c:	1b1e      	addi      	r3, sp, 120
    7c9e:	9240      	ld.w      	r2, (r2, 0x0)
    7ca0:	9360      	ld.w      	r3, (r3, 0x0)
    7ca2:	64c8      	cmphs      	r2, r3
    7ca4:	0fb2      	bf      	0x7c08	//7c08 <handle_push_pop+0x66c>
			tmpval32 = get_regs_value(R16_NUM + i, regs);
			put32_unaligned_check(tmpval32, datasp + (i + list1 + has_r15) * 4);
		}
		if(has_r28 == 0x1){
    7ca6:	1b1c      	addi      	r3, sp, 112
    7ca8:	9360      	ld.w      	r3, (r3, 0x0)
    7caa:	3b41      	cmpnei      	r3, 1
    7cac:	0842      	bt      	0x7d30	//7d30 <handle_push_pop+0x794>
			tmpval32 = get_regs_value(R28_NUM, regs);
    7cae:	1c17      	addi      	r4, sp, 92
    7cb0:	6cfb      	mov      	r3, sp
    7cb2:	301c      	movi      	r0, 28      	//0x1c
    7cb4:	9320      	ld.w      	r1, (r3, 0x0)
    7cb6:	e3fff6e1 	bsr      	0x6a78	//6a78 <get_regs_value>
    7cba:	c4004820 	lsli      	r0, r0, 0
    7cbe:	b400      	st.w      	r0, (r4, 0x0)
			put32_unaligned_check(tmpval32, datasp + (list1 + list2 + has_r15) * 4);
    7cc0:	1b04      	addi      	r3, sp, 16
    7cc2:	3200      	movi      	r2, 0      	//0x0
    7cc4:	b340      	st.w      	r2, (r3, 0x0)
    7cc6:	1b03      	addi      	r3, sp, 12
    7cc8:	1a17      	addi      	r2, sp, 92
    7cca:	9240      	ld.w      	r2, (r2, 0x0)
    7ccc:	b340      	st.w      	r2, (r3, 0x0)
    7cce:	1a1f      	addi      	r2, sp, 124
    7cd0:	1b1e      	addi      	r3, sp, 120
    7cd2:	9240      	ld.w      	r2, (r2, 0x0)
    7cd4:	9360      	ld.w      	r3, (r3, 0x0)
    7cd6:	5a4c      	addu      	r2, r2, r3
    7cd8:	1b1d      	addi      	r3, sp, 116
    7cda:	9360      	ld.w      	r3, (r3, 0x0)
    7cdc:	5a6c      	addu      	r3, r2, r3
    7cde:	4322      	lsli      	r1, r3, 2
    7ce0:	1b02      	addi      	r3, sp, 8
    7ce2:	1a1b      	addi      	r2, sp, 108
    7ce4:	9240      	ld.w      	r2, (r2, 0x0)
    7ce6:	5948      	addu      	r2, r1, r2
    7ce8:	b340      	st.w      	r2, (r3, 0x0)
    7cea:	1b04      	addi      	r3, sp, 16
    7cec:	9320      	ld.w      	r1, (r3, 0x0)
    7cee:	1b03      	addi      	r3, sp, 12
    7cf0:	9340      	ld.w      	r2, (r3, 0x0)
    7cf2:	1b02      	addi      	r3, sp, 8
    7cf4:	9360      	ld.w      	r3, (r3, 0x0)
    7cf6:	6d87      	mov      	r6, r1
    7cf8:	6d4b      	mov      	r5, r2
    7cfa:	6d0f      	mov      	r4, r3
    7cfc:	a4a0      	st.b      	r5, (r4, 0x0)
    7cfe:	2400      	addi      	r4, 1      	//0x1
    7d00:	4da8      	lsri      	r5, r5, 8
    7d02:	a4a0      	st.b      	r5, (r4, 0x0)
    7d04:	2400      	addi      	r4, 1      	//0x1
    7d06:	4da8      	lsri      	r5, r5, 8
    7d08:	a4a0      	st.b      	r5, (r4, 0x0)
    7d0a:	2400      	addi      	r4, 1      	//0x1
    7d0c:	4da8      	lsri      	r5, r5, 8
    7d0e:	a4a0      	st.b      	r5, (r4, 0x0)
    7d10:	0406      	br      	0x7d1c	//7d1c <handle_push_pop+0x780>
    7d12:	3601      	movi      	r6, 1      	//0x1
    7d14:	0404      	br      	0x7d1c	//7d1c <handle_push_pop+0x780>
    7d16:	0000      	.short	0x0000
    7d18:	00006a78 	.long	0x00006a78
    7d1c:	1b04      	addi      	r3, sp, 16
    7d1e:	b3c0      	st.w      	r6, (r3, 0x0)
    7d20:	1b03      	addi      	r3, sp, 12
    7d22:	b3a0      	st.w      	r5, (r3, 0x0)
    7d24:	1b02      	addi      	r3, sp, 8
    7d26:	b380      	st.w      	r4, (r3, 0x0)
    7d28:	1b04      	addi      	r3, sp, 16
    7d2a:	9360      	ld.w      	r3, (r3, 0x0)
    7d2c:	e923000f 	bnez      	r3, 0x7d4a	//7d4a <handle_push_pop+0x7ae>
		}
	}else{
		goto fault;
	}

	return HANDLER_SUCCESS;
    7d30:	3300      	movi      	r3, 0      	//0x0
    7d32:	040d      	br      	0x7d4c	//7d4c <handle_push_pop+0x7b0>

	if(push_pop == 0x1480){ // pop
		for(i = 0; i < list1; i++){
			get32_unaligned_check(tmpval32, datasp + i * 4);
			if(put_regs_value(tmpval32, R4_NUM + i, regs) != 0){
				goto fault;
    7d34:	6c00      	or      	r0, r0
    7d36:	040a      	br      	0x7d4a	//7d4a <handle_push_pop+0x7ae>
			}
		}
		if(has_r15 == 0x1){
			get32_unaligned_check(tmpval32, datasp + list1 * 4);
			if(put_regs_value(tmpval32, R15_NUM, regs) != 0){
				goto fault;
    7d38:	6c00      	or      	r0, r0
    7d3a:	0408      	br      	0x7d4a	//7d4a <handle_push_pop+0x7ae>
			}
		}
		for(i = 0; i < list2; i++){
			get32_unaligned_check(tmpval32, datasp + (i + list1 + has_r15) * 4);
			if(put_regs_value(tmpval32, R16_NUM + i, regs) != 0){
				goto fault;
    7d3c:	6c00      	or      	r0, r0
    7d3e:	0406      	br      	0x7d4a	//7d4a <handle_push_pop+0x7ae>
			}
		}
		if(has_r28 == 0x1){
			get32_unaligned_check(tmpval32, datasp + (list1 + list2 + has_r15) * 4);
			if(put_regs_value(tmpval32, R28_NUM, regs) != 0){
				goto fault;
    7d40:	6c00      	or      	r0, r0
    7d42:	0404      	br      	0x7d4a	//7d4a <handle_push_pop+0x7ae>
		if(has_r28 == 0x1){
			tmpval32 = get_regs_value(R28_NUM, regs);
			put32_unaligned_check(tmpval32, datasp + (list1 + list2 + has_r15) * 4);
		}
	}else{
		goto fault;
    7d44:	6c00      	or      	r0, r0
    7d46:	0402      	br      	0x7d4a	//7d4a <handle_push_pop+0x7ae>
			goto fault;
		}
	}else if(push_pop == 0x14c0){ // push
		datasp -= (list1 + list2 + has_r15 + has_r28) * 4;
		if(put_regs_value(datasp, SP_NUM, regs) != 0){
			goto fault;
    7d48:	6c00      	or      	r0, r0
		goto fault;
	}

	return HANDLER_SUCCESS;
fault:
	return HANDLER_FAILURE;	
    7d4a:	3301      	movi      	r3, 1      	//0x1
}
    7d4c:	6c0f      	mov      	r0, r3
    7d4e:	1502      	addi      	sp, sp, 136
    7d50:	1493      	pop      	r4-r6, r15
	...

00007d54 <handle_ldh_ldhs_ldw_ldd>:

static int 
handle_ldh_ldhs_ldw_ldd(unsigned long instr, Ckcore_SavedRegisters *regs){
    7d54:	14d3      	push      	r4-r6, r15
    7d56:	1438      	subi      	sp, sp, 96
    7d58:	1b01      	addi      	r3, sp, 4
    7d5a:	b300      	st.w      	r0, (r3, 0x0)
    7d5c:	6cfb      	mov      	r3, sp
    7d5e:	b320      	st.w      	r1, (r3, 0x0)
	unsigned int regx = (instr >> 16) & 0x1f;
    7d60:	1b01      	addi      	r3, sp, 4
    7d62:	9360      	ld.w      	r3, (r3, 0x0)
    7d64:	4b50      	lsri      	r2, r3, 16
    7d66:	1b17      	addi      	r3, sp, 92
    7d68:	e442201f 	andi      	r2, r2, 31
    7d6c:	b340      	st.w      	r2, (r3, 0x0)
	unsigned int regz = (instr >> 21) & 0x1f;
    7d6e:	1b01      	addi      	r3, sp, 4
    7d70:	9360      	ld.w      	r3, (r3, 0x0)
    7d72:	4b55      	lsri      	r2, r3, 21
    7d74:	1b16      	addi      	r3, sp, 88
    7d76:	e442201f 	andi      	r2, r2, 31
    7d7a:	b340      	st.w      	r2, (r3, 0x0)
	unsigned int offset = instr & 0xfff;
    7d7c:	1b15      	addi      	r3, sp, 84
    7d7e:	1a01      	addi      	r2, sp, 4
    7d80:	9240      	ld.w      	r2, (r2, 0x0)
    7d82:	e4422fff 	andi      	r2, r2, 4095
    7d86:	b340      	st.w      	r2, (r3, 0x0)
	unsigned int destaddr, tmpval32;
	unsigned int dataregx;
	unsigned short tmpval16;

	dataregx = get_regs_value(regx, regs);
    7d88:	1c14      	addi      	r4, sp, 80
    7d8a:	1a17      	addi      	r2, sp, 92
    7d8c:	6cfb      	mov      	r3, sp
    7d8e:	9200      	ld.w      	r0, (r2, 0x0)
    7d90:	9320      	ld.w      	r1, (r3, 0x0)
    7d92:	e3fff673 	bsr      	0x6a78	//6a78 <get_regs_value>
    7d96:	c4004820 	lsli      	r0, r0, 0
    7d9a:	b400      	st.w      	r0, (r4, 0x0)

	switch((instr >> 12) & 0xf){
    7d9c:	1b01      	addi      	r3, sp, 4
    7d9e:	9360      	ld.w      	r3, (r3, 0x0)
    7da0:	4b6c      	lsri      	r3, r3, 12
    7da2:	e463200f 	andi      	r3, r3, 15
    7da6:	3b42      	cmpnei      	r3, 2
    7da8:	0dc4      	bf      	0x8130	//8130 <handle_ldh_ldhs_ldw_ldd+0x3dc>
    7daa:	3b02      	cmphsi      	r3, 3      	//0x3
    7dac:	0805      	bt      	0x7db6	//7db6 <handle_ldh_ldhs_ldw_ldd+0x62>
    7dae:	3b41      	cmpnei      	r3, 1
    7db0:	0c09      	bf      	0x7dc2	//7dc2 <handle_ldh_ldhs_ldw_ldd+0x6e>
		if(put_regs_value(tmpval32, regz, regs) != 0){
			goto fault;
		}
		break;
	default:
		goto fault;
    7db2:	e800024c 	br      	0x824a	//824a <handle_ldh_ldhs_ldw_ldd+0x4f6>
	unsigned int dataregx;
	unsigned short tmpval16;

	dataregx = get_regs_value(regx, regs);

	switch((instr >> 12) & 0xf){
    7db6:	3b43      	cmpnei      	r3, 3
    7db8:	0c5f      	bf      	0x7e76	//7e76 <handle_ldh_ldhs_ldw_ldd+0x122>
    7dba:	3b45      	cmpnei      	r3, 5
    7dbc:	0d5f      	bf      	0x807a	//807a <handle_ldh_ldhs_ldw_ldd+0x326>
		if(put_regs_value(tmpval32, regz, regs) != 0){
			goto fault;
		}
		break;
	default:
		goto fault;
    7dbe:	e8000246 	br      	0x824a	//824a <handle_ldh_ldhs_ldw_ldd+0x4f6>

	dataregx = get_regs_value(regx, regs);

	switch((instr >> 12) & 0xf){
	case 1: // ldh
		destaddr = dataregx + (offset << 1);
    7dc2:	1b15      	addi      	r3, sp, 84
    7dc4:	9360      	ld.w      	r3, (r3, 0x0)
    7dc6:	5b6c      	addu      	r3, r3, r3
    7dc8:	6c4f      	mov      	r1, r3
    7dca:	1b13      	addi      	r3, sp, 76
    7dcc:	1a14      	addi      	r2, sp, 80
    7dce:	9240      	ld.w      	r2, (r2, 0x0)
    7dd0:	5948      	addu      	r2, r1, r2
    7dd2:	b340      	st.w      	r2, (r3, 0x0)
		get16_unaligned_check(tmpval16, destaddr);
    7dd4:	1b12      	addi      	r3, sp, 72
    7dd6:	3200      	movi      	r2, 0      	//0x0
    7dd8:	b340      	st.w      	r2, (r3, 0x0)
    7dda:	1b11      	addi      	r3, sp, 68
    7ddc:	1a13      	addi      	r2, sp, 76
    7dde:	9240      	ld.w      	r2, (r2, 0x0)
    7de0:	b340      	st.w      	r2, (r3, 0x0)
    7de2:	1b12      	addi      	r3, sp, 72
    7de4:	9340      	ld.w      	r2, (r3, 0x0)
    7de6:	1b11      	addi      	r3, sp, 68
    7de8:	9360      	ld.w      	r3, (r3, 0x0)
    7dea:	6d4b      	mov      	r5, r2
    7dec:	6d0f      	mov      	r4, r3
    7dee:	84c0      	ld.b      	r6, (r4, 0x0)
    7df0:	2400      	addi      	r4, 1      	//0x1
    7df2:	0405      	br      	0x7dfc	//7dfc <handle_ldh_ldhs_ldw_ldd+0xa8>
    7df4:	3501      	movi      	r5, 1      	//0x1
    7df6:	0403      	br      	0x7dfc	//7dfc <handle_ldh_ldhs_ldw_ldd+0xa8>
    7df8:	00006a78 	.long	0x00006a78
    7dfc:	1b12      	addi      	r3, sp, 72
    7dfe:	b3a0      	st.w      	r5, (r3, 0x0)
    7e00:	1b10      	addi      	r3, sp, 64
    7e02:	b3c0      	st.w      	r6, (r3, 0x0)
    7e04:	1b11      	addi      	r3, sp, 68
    7e06:	b380      	st.w      	r4, (r3, 0x0)
    7e08:	e46e003d 	addi      	r3, sp, 62      	//0x3e
    7e0c:	1a10      	addi      	r2, sp, 64
    7e0e:	9240      	ld.w      	r2, (r2, 0x0)
    7e10:	ab40      	st.h      	r2, (r3, 0x0)
    7e12:	1b12      	addi      	r3, sp, 72
    7e14:	9340      	ld.w      	r2, (r3, 0x0)
    7e16:	1b11      	addi      	r3, sp, 68
    7e18:	9360      	ld.w      	r3, (r3, 0x0)
    7e1a:	6d4b      	mov      	r5, r2
    7e1c:	6d0f      	mov      	r4, r3
    7e1e:	84c0      	ld.b      	r6, (r4, 0x0)
    7e20:	2400      	addi      	r4, 1      	//0x1
    7e22:	0403      	br      	0x7e28	//7e28 <handle_ldh_ldhs_ldw_ldd+0xd4>
    7e24:	3501      	movi      	r5, 1      	//0x1
    7e26:	0401      	br      	0x7e28	//7e28 <handle_ldh_ldhs_ldw_ldd+0xd4>
    7e28:	1b12      	addi      	r3, sp, 72
    7e2a:	b3a0      	st.w      	r5, (r3, 0x0)
    7e2c:	1b10      	addi      	r3, sp, 64
    7e2e:	b3c0      	st.w      	r6, (r3, 0x0)
    7e30:	1b11      	addi      	r3, sp, 68
    7e32:	b380      	st.w      	r4, (r3, 0x0)
    7e34:	1b10      	addi      	r3, sp, 64
    7e36:	9360      	ld.w      	r3, (r3, 0x0)
    7e38:	74cd      	zexth      	r3, r3
    7e3a:	4368      	lsli      	r3, r3, 8
    7e3c:	744d      	zexth      	r1, r3
    7e3e:	e46e003d 	addi      	r3, sp, 62      	//0x3e
    7e42:	e44e003d 	addi      	r2, sp, 62      	//0x3e
    7e46:	8a40      	ld.h      	r2, (r2, 0x0)
    7e48:	6c84      	or      	r2, r1
    7e4a:	ab40      	st.h      	r2, (r3, 0x0)
    7e4c:	1b12      	addi      	r3, sp, 72
    7e4e:	9360      	ld.w      	r3, (r3, 0x0)
    7e50:	e92301fd 	bnez      	r3, 0x824a	//824a <handle_ldh_ldhs_ldw_ldd+0x4f6>
		if(put_regs_value((unsigned int)tmpval16, regz, regs) != 0){
    7e54:	e46e003d 	addi      	r3, sp, 62      	//0x3e
    7e58:	8b60      	ld.h      	r3, (r3, 0x0)
    7e5a:	744d      	zexth      	r1, r3
    7e5c:	1a16      	addi      	r2, sp, 88
    7e5e:	6cfb      	mov      	r3, sp
    7e60:	6c07      	mov      	r0, r1
    7e62:	9220      	ld.w      	r1, (r2, 0x0)
    7e64:	9340      	ld.w      	r2, (r3, 0x0)
    7e66:	e3fff637 	bsr      	0x6ad4	//6ad4 <put_regs_value>
    7e6a:	c4004820 	lsli      	r0, r0, 0
    7e6e:	6cc3      	mov      	r3, r0
    7e70:	e90301e3 	bez      	r3, 0x8236	//8236 <handle_ldh_ldhs_ldw_ldd+0x4e2>
			goto fault;
    7e74:	05eb      	br      	0x824a	//824a <handle_ldh_ldhs_ldw_ldd+0x4f6>
		}
		break;
	case 3: // ldd
		destaddr = dataregx + (offset << 2);
    7e76:	1b15      	addi      	r3, sp, 84
    7e78:	9360      	ld.w      	r3, (r3, 0x0)
    7e7a:	4322      	lsli      	r1, r3, 2
    7e7c:	1b13      	addi      	r3, sp, 76
    7e7e:	1a14      	addi      	r2, sp, 80
    7e80:	9240      	ld.w      	r2, (r2, 0x0)
    7e82:	5948      	addu      	r2, r1, r2
    7e84:	b340      	st.w      	r2, (r3, 0x0)
		get32_unaligned_check(tmpval32, destaddr);
    7e86:	1b0e      	addi      	r3, sp, 56
    7e88:	3200      	movi      	r2, 0      	//0x0
    7e8a:	b340      	st.w      	r2, (r3, 0x0)
    7e8c:	1b0d      	addi      	r3, sp, 52
    7e8e:	1a13      	addi      	r2, sp, 76
    7e90:	9240      	ld.w      	r2, (r2, 0x0)
    7e92:	b340      	st.w      	r2, (r3, 0x0)
    7e94:	1b0e      	addi      	r3, sp, 56
    7e96:	9340      	ld.w      	r2, (r3, 0x0)
    7e98:	1b0d      	addi      	r3, sp, 52
    7e9a:	9360      	ld.w      	r3, (r3, 0x0)
    7e9c:	6d4b      	mov      	r5, r2
    7e9e:	6d0f      	mov      	r4, r3
    7ea0:	84c0      	ld.b      	r6, (r4, 0x0)
    7ea2:	2400      	addi      	r4, 1      	//0x1
    7ea4:	0406      	br      	0x7eb0	//7eb0 <handle_ldh_ldhs_ldw_ldd+0x15c>
    7ea6:	3501      	movi      	r5, 1      	//0x1
    7ea8:	0404      	br      	0x7eb0	//7eb0 <handle_ldh_ldhs_ldw_ldd+0x15c>
    7eaa:	0000      	.short	0x0000
    7eac:	00006ad4 	.long	0x00006ad4
    7eb0:	1b0e      	addi      	r3, sp, 56
    7eb2:	b3a0      	st.w      	r5, (r3, 0x0)
    7eb4:	1b0c      	addi      	r3, sp, 48
    7eb6:	b3c0      	st.w      	r6, (r3, 0x0)
    7eb8:	1b0d      	addi      	r3, sp, 52
    7eba:	b380      	st.w      	r4, (r3, 0x0)
    7ebc:	1b0b      	addi      	r3, sp, 44
    7ebe:	1a0c      	addi      	r2, sp, 48
    7ec0:	9240      	ld.w      	r2, (r2, 0x0)
    7ec2:	b340      	st.w      	r2, (r3, 0x0)
    7ec4:	1b0e      	addi      	r3, sp, 56
    7ec6:	9340      	ld.w      	r2, (r3, 0x0)
    7ec8:	1b0d      	addi      	r3, sp, 52
    7eca:	9360      	ld.w      	r3, (r3, 0x0)
    7ecc:	6d4b      	mov      	r5, r2
    7ece:	6d0f      	mov      	r4, r3
    7ed0:	84c0      	ld.b      	r6, (r4, 0x0)
    7ed2:	2400      	addi      	r4, 1      	//0x1
    7ed4:	0403      	br      	0x7eda	//7eda <handle_ldh_ldhs_ldw_ldd+0x186>
    7ed6:	3501      	movi      	r5, 1      	//0x1
    7ed8:	0401      	br      	0x7eda	//7eda <handle_ldh_ldhs_ldw_ldd+0x186>
    7eda:	1b0e      	addi      	r3, sp, 56
    7edc:	b3a0      	st.w      	r5, (r3, 0x0)
    7ede:	1b0c      	addi      	r3, sp, 48
    7ee0:	b3c0      	st.w      	r6, (r3, 0x0)
    7ee2:	1b0d      	addi      	r3, sp, 52
    7ee4:	b380      	st.w      	r4, (r3, 0x0)
    7ee6:	1b0c      	addi      	r3, sp, 48
    7ee8:	9360      	ld.w      	r3, (r3, 0x0)
    7eea:	4328      	lsli      	r1, r3, 8
    7eec:	1b0b      	addi      	r3, sp, 44
    7eee:	1a0b      	addi      	r2, sp, 44
    7ef0:	9240      	ld.w      	r2, (r2, 0x0)
    7ef2:	6c84      	or      	r2, r1
    7ef4:	b340      	st.w      	r2, (r3, 0x0)
    7ef6:	1b0e      	addi      	r3, sp, 56
    7ef8:	9340      	ld.w      	r2, (r3, 0x0)
    7efa:	1b0d      	addi      	r3, sp, 52
    7efc:	9360      	ld.w      	r3, (r3, 0x0)
    7efe:	6d4b      	mov      	r5, r2
    7f00:	6d0f      	mov      	r4, r3
    7f02:	84c0      	ld.b      	r6, (r4, 0x0)
    7f04:	2400      	addi      	r4, 1      	//0x1
    7f06:	0403      	br      	0x7f0c	//7f0c <handle_ldh_ldhs_ldw_ldd+0x1b8>
    7f08:	3501      	movi      	r5, 1      	//0x1
    7f0a:	0401      	br      	0x7f0c	//7f0c <handle_ldh_ldhs_ldw_ldd+0x1b8>
    7f0c:	1b0e      	addi      	r3, sp, 56
    7f0e:	b3a0      	st.w      	r5, (r3, 0x0)
    7f10:	1b0c      	addi      	r3, sp, 48
    7f12:	b3c0      	st.w      	r6, (r3, 0x0)
    7f14:	1b0d      	addi      	r3, sp, 52
    7f16:	b380      	st.w      	r4, (r3, 0x0)
    7f18:	1b0c      	addi      	r3, sp, 48
    7f1a:	9360      	ld.w      	r3, (r3, 0x0)
    7f1c:	4330      	lsli      	r1, r3, 16
    7f1e:	1b0b      	addi      	r3, sp, 44
    7f20:	1a0b      	addi      	r2, sp, 44
    7f22:	9240      	ld.w      	r2, (r2, 0x0)
    7f24:	6c84      	or      	r2, r1
    7f26:	b340      	st.w      	r2, (r3, 0x0)
    7f28:	1b0e      	addi      	r3, sp, 56
    7f2a:	9340      	ld.w      	r2, (r3, 0x0)
    7f2c:	1b0d      	addi      	r3, sp, 52
    7f2e:	9360      	ld.w      	r3, (r3, 0x0)
    7f30:	6d4b      	mov      	r5, r2
    7f32:	6d0f      	mov      	r4, r3
    7f34:	84c0      	ld.b      	r6, (r4, 0x0)
    7f36:	2400      	addi      	r4, 1      	//0x1
    7f38:	0403      	br      	0x7f3e	//7f3e <handle_ldh_ldhs_ldw_ldd+0x1ea>
    7f3a:	3501      	movi      	r5, 1      	//0x1
    7f3c:	0401      	br      	0x7f3e	//7f3e <handle_ldh_ldhs_ldw_ldd+0x1ea>
    7f3e:	1b0e      	addi      	r3, sp, 56
    7f40:	b3a0      	st.w      	r5, (r3, 0x0)
    7f42:	1b0c      	addi      	r3, sp, 48
    7f44:	b3c0      	st.w      	r6, (r3, 0x0)
    7f46:	1b0d      	addi      	r3, sp, 52
    7f48:	b380      	st.w      	r4, (r3, 0x0)
    7f4a:	1b0c      	addi      	r3, sp, 48
    7f4c:	9360      	ld.w      	r3, (r3, 0x0)
    7f4e:	4338      	lsli      	r1, r3, 24
    7f50:	1b0b      	addi      	r3, sp, 44
    7f52:	1a0b      	addi      	r2, sp, 44
    7f54:	9240      	ld.w      	r2, (r2, 0x0)
    7f56:	6c84      	or      	r2, r1
    7f58:	b340      	st.w      	r2, (r3, 0x0)
    7f5a:	1b0e      	addi      	r3, sp, 56
    7f5c:	9360      	ld.w      	r3, (r3, 0x0)
    7f5e:	e9230176 	bnez      	r3, 0x824a	//824a <handle_ldh_ldhs_ldw_ldd+0x4f6>
		if(put_regs_value(tmpval32, regz, regs) != 0){
    7f62:	190b      	addi      	r1, sp, 44
    7f64:	1a16      	addi      	r2, sp, 88
    7f66:	6cfb      	mov      	r3, sp
    7f68:	9100      	ld.w      	r0, (r1, 0x0)
    7f6a:	9220      	ld.w      	r1, (r2, 0x0)
    7f6c:	9340      	ld.w      	r2, (r3, 0x0)
    7f6e:	e3fff5b3 	bsr      	0x6ad4	//6ad4 <put_regs_value>
    7f72:	c4004820 	lsli      	r0, r0, 0
    7f76:	6cc3      	mov      	r3, r0
    7f78:	e9230166 	bnez      	r3, 0x8244	//8244 <handle_ldh_ldhs_ldw_ldd+0x4f0>
			goto fault;
		}
		get32_unaligned_check(tmpval32, destaddr + 4);
    7f7c:	1b0a      	addi      	r3, sp, 40
    7f7e:	3200      	movi      	r2, 0      	//0x0
    7f80:	b340      	st.w      	r2, (r3, 0x0)
    7f82:	1b09      	addi      	r3, sp, 36
    7f84:	1a13      	addi      	r2, sp, 76
    7f86:	9240      	ld.w      	r2, (r2, 0x0)
    7f88:	2203      	addi      	r2, 4      	//0x4
    7f8a:	b340      	st.w      	r2, (r3, 0x0)
    7f8c:	1b0a      	addi      	r3, sp, 40
    7f8e:	9340      	ld.w      	r2, (r3, 0x0)
    7f90:	1b09      	addi      	r3, sp, 36
    7f92:	9360      	ld.w      	r3, (r3, 0x0)
    7f94:	6d4b      	mov      	r5, r2
    7f96:	6d0f      	mov      	r4, r3
    7f98:	84c0      	ld.b      	r6, (r4, 0x0)
    7f9a:	2400      	addi      	r4, 1      	//0x1
    7f9c:	0406      	br      	0x7fa8	//7fa8 <handle_ldh_ldhs_ldw_ldd+0x254>
    7f9e:	3501      	movi      	r5, 1      	//0x1
    7fa0:	0404      	br      	0x7fa8	//7fa8 <handle_ldh_ldhs_ldw_ldd+0x254>
    7fa2:	0000      	.short	0x0000
    7fa4:	00006ad4 	.long	0x00006ad4
    7fa8:	1b0a      	addi      	r3, sp, 40
    7faa:	b3a0      	st.w      	r5, (r3, 0x0)
    7fac:	1b08      	addi      	r3, sp, 32
    7fae:	b3c0      	st.w      	r6, (r3, 0x0)
    7fb0:	1b09      	addi      	r3, sp, 36
    7fb2:	b380      	st.w      	r4, (r3, 0x0)
    7fb4:	1b0b      	addi      	r3, sp, 44
    7fb6:	1a08      	addi      	r2, sp, 32
    7fb8:	9240      	ld.w      	r2, (r2, 0x0)
    7fba:	b340      	st.w      	r2, (r3, 0x0)
    7fbc:	1b0a      	addi      	r3, sp, 40
    7fbe:	9340      	ld.w      	r2, (r3, 0x0)
    7fc0:	1b09      	addi      	r3, sp, 36
    7fc2:	9360      	ld.w      	r3, (r3, 0x0)
    7fc4:	6d4b      	mov      	r5, r2
    7fc6:	6d0f      	mov      	r4, r3
    7fc8:	84c0      	ld.b      	r6, (r4, 0x0)
    7fca:	2400      	addi      	r4, 1      	//0x1
    7fcc:	0403      	br      	0x7fd2	//7fd2 <handle_ldh_ldhs_ldw_ldd+0x27e>
    7fce:	3501      	movi      	r5, 1      	//0x1
    7fd0:	0401      	br      	0x7fd2	//7fd2 <handle_ldh_ldhs_ldw_ldd+0x27e>
    7fd2:	1b0a      	addi      	r3, sp, 40
    7fd4:	b3a0      	st.w      	r5, (r3, 0x0)
    7fd6:	1b08      	addi      	r3, sp, 32
    7fd8:	b3c0      	st.w      	r6, (r3, 0x0)
    7fda:	1b09      	addi      	r3, sp, 36
    7fdc:	b380      	st.w      	r4, (r3, 0x0)
    7fde:	1b08      	addi      	r3, sp, 32
    7fe0:	9360      	ld.w      	r3, (r3, 0x0)
    7fe2:	4328      	lsli      	r1, r3, 8
    7fe4:	1b0b      	addi      	r3, sp, 44
    7fe6:	1a0b      	addi      	r2, sp, 44
    7fe8:	9240      	ld.w      	r2, (r2, 0x0)
    7fea:	6c84      	or      	r2, r1
    7fec:	b340      	st.w      	r2, (r3, 0x0)
    7fee:	1b0a      	addi      	r3, sp, 40
    7ff0:	9340      	ld.w      	r2, (r3, 0x0)
    7ff2:	1b09      	addi      	r3, sp, 36
    7ff4:	9360      	ld.w      	r3, (r3, 0x0)
    7ff6:	6d4b      	mov      	r5, r2
    7ff8:	6d0f      	mov      	r4, r3
    7ffa:	84c0      	ld.b      	r6, (r4, 0x0)
    7ffc:	2400      	addi      	r4, 1      	//0x1
    7ffe:	0403      	br      	0x8004	//8004 <handle_ldh_ldhs_ldw_ldd+0x2b0>
    8000:	3501      	movi      	r5, 1      	//0x1
    8002:	0401      	br      	0x8004	//8004 <handle_ldh_ldhs_ldw_ldd+0x2b0>
    8004:	1b0a      	addi      	r3, sp, 40
    8006:	b3a0      	st.w      	r5, (r3, 0x0)
    8008:	1b08      	addi      	r3, sp, 32
    800a:	b3c0      	st.w      	r6, (r3, 0x0)
    800c:	1b09      	addi      	r3, sp, 36
    800e:	b380      	st.w      	r4, (r3, 0x0)
    8010:	1b08      	addi      	r3, sp, 32
    8012:	9360      	ld.w      	r3, (r3, 0x0)
    8014:	4330      	lsli      	r1, r3, 16
    8016:	1b0b      	addi      	r3, sp, 44
    8018:	1a0b      	addi      	r2, sp, 44
    801a:	9240      	ld.w      	r2, (r2, 0x0)
    801c:	6c84      	or      	r2, r1
    801e:	b340      	st.w      	r2, (r3, 0x0)
    8020:	1b0a      	addi      	r3, sp, 40
    8022:	9340      	ld.w      	r2, (r3, 0x0)
    8024:	1b09      	addi      	r3, sp, 36
    8026:	9360      	ld.w      	r3, (r3, 0x0)
    8028:	6d4b      	mov      	r5, r2
    802a:	6d0f      	mov      	r4, r3
    802c:	84c0      	ld.b      	r6, (r4, 0x0)
    802e:	2400      	addi      	r4, 1      	//0x1
    8030:	0403      	br      	0x8036	//8036 <handle_ldh_ldhs_ldw_ldd+0x2e2>
    8032:	3501      	movi      	r5, 1      	//0x1
    8034:	0401      	br      	0x8036	//8036 <handle_ldh_ldhs_ldw_ldd+0x2e2>
    8036:	1b0a      	addi      	r3, sp, 40
    8038:	b3a0      	st.w      	r5, (r3, 0x0)
    803a:	1b08      	addi      	r3, sp, 32
    803c:	b3c0      	st.w      	r6, (r3, 0x0)
    803e:	1b09      	addi      	r3, sp, 36
    8040:	b380      	st.w      	r4, (r3, 0x0)
    8042:	1b08      	addi      	r3, sp, 32
    8044:	9360      	ld.w      	r3, (r3, 0x0)
    8046:	4338      	lsli      	r1, r3, 24
    8048:	1b0b      	addi      	r3, sp, 44
    804a:	1a0b      	addi      	r2, sp, 44
    804c:	9240      	ld.w      	r2, (r2, 0x0)
    804e:	6c84      	or      	r2, r1
    8050:	b340      	st.w      	r2, (r3, 0x0)
    8052:	1b0a      	addi      	r3, sp, 40
    8054:	9360      	ld.w      	r3, (r3, 0x0)
    8056:	e92300fa 	bnez      	r3, 0x824a	//824a <handle_ldh_ldhs_ldw_ldd+0x4f6>
		if(put_regs_value(tmpval32, regz + 1, regs) != 0){
    805a:	1b16      	addi      	r3, sp, 88
    805c:	9360      	ld.w      	r3, (r3, 0x0)
    805e:	5b42      	addi      	r2, r3, 1      	//0x1
    8060:	190b      	addi      	r1, sp, 44
    8062:	6cfb      	mov      	r3, sp
    8064:	9100      	ld.w      	r0, (r1, 0x0)
    8066:	6c4b      	mov      	r1, r2
    8068:	9340      	ld.w      	r2, (r3, 0x0)
    806a:	e3fff535 	bsr      	0x6ad4	//6ad4 <put_regs_value>
    806e:	c4004820 	lsli      	r0, r0, 0
    8072:	6cc3      	mov      	r3, r0
    8074:	e90300e3 	bez      	r3, 0x823a	//823a <handle_ldh_ldhs_ldw_ldd+0x4e6>
			goto fault;
    8078:	04e9      	br      	0x824a	//824a <handle_ldh_ldhs_ldw_ldd+0x4f6>
		}
		break;
	case 5: // ldhs
		destaddr = dataregx + (offset << 1);
    807a:	1b15      	addi      	r3, sp, 84
    807c:	9360      	ld.w      	r3, (r3, 0x0)
    807e:	5b6c      	addu      	r3, r3, r3
    8080:	6c4f      	mov      	r1, r3
    8082:	1b13      	addi      	r3, sp, 76
    8084:	1a14      	addi      	r2, sp, 80
    8086:	9240      	ld.w      	r2, (r2, 0x0)
    8088:	5948      	addu      	r2, r1, r2
    808a:	b340      	st.w      	r2, (r3, 0x0)
		get16_unaligned_check(tmpval16, destaddr);
    808c:	1b07      	addi      	r3, sp, 28
    808e:	3200      	movi      	r2, 0      	//0x0
    8090:	b340      	st.w      	r2, (r3, 0x0)
    8092:	1b06      	addi      	r3, sp, 24
    8094:	1a13      	addi      	r2, sp, 76
    8096:	9240      	ld.w      	r2, (r2, 0x0)
    8098:	b340      	st.w      	r2, (r3, 0x0)
    809a:	1b07      	addi      	r3, sp, 28
    809c:	9340      	ld.w      	r2, (r3, 0x0)
    809e:	1b06      	addi      	r3, sp, 24
    80a0:	9360      	ld.w      	r3, (r3, 0x0)
    80a2:	6d4b      	mov      	r5, r2
    80a4:	6d0f      	mov      	r4, r3
    80a6:	84c0      	ld.b      	r6, (r4, 0x0)
    80a8:	2400      	addi      	r4, 1      	//0x1
    80aa:	0405      	br      	0x80b4	//80b4 <handle_ldh_ldhs_ldw_ldd+0x360>
    80ac:	3501      	movi      	r5, 1      	//0x1
    80ae:	0403      	br      	0x80b4	//80b4 <handle_ldh_ldhs_ldw_ldd+0x360>
    80b0:	00006ad4 	.long	0x00006ad4
    80b4:	1b07      	addi      	r3, sp, 28
    80b6:	b3a0      	st.w      	r5, (r3, 0x0)
    80b8:	1b05      	addi      	r3, sp, 20
    80ba:	b3c0      	st.w      	r6, (r3, 0x0)
    80bc:	1b06      	addi      	r3, sp, 24
    80be:	b380      	st.w      	r4, (r3, 0x0)
    80c0:	e46e003d 	addi      	r3, sp, 62      	//0x3e
    80c4:	1a05      	addi      	r2, sp, 20
    80c6:	9240      	ld.w      	r2, (r2, 0x0)
    80c8:	ab40      	st.h      	r2, (r3, 0x0)
    80ca:	1b07      	addi      	r3, sp, 28
    80cc:	9340      	ld.w      	r2, (r3, 0x0)
    80ce:	1b06      	addi      	r3, sp, 24
    80d0:	9360      	ld.w      	r3, (r3, 0x0)
    80d2:	6d4b      	mov      	r5, r2
    80d4:	6d0f      	mov      	r4, r3
    80d6:	84c0      	ld.b      	r6, (r4, 0x0)
    80d8:	2400      	addi      	r4, 1      	//0x1
    80da:	0403      	br      	0x80e0	//80e0 <handle_ldh_ldhs_ldw_ldd+0x38c>
    80dc:	3501      	movi      	r5, 1      	//0x1
    80de:	0401      	br      	0x80e0	//80e0 <handle_ldh_ldhs_ldw_ldd+0x38c>
    80e0:	1b07      	addi      	r3, sp, 28
    80e2:	b3a0      	st.w      	r5, (r3, 0x0)
    80e4:	1b05      	addi      	r3, sp, 20
    80e6:	b3c0      	st.w      	r6, (r3, 0x0)
    80e8:	1b06      	addi      	r3, sp, 24
    80ea:	b380      	st.w      	r4, (r3, 0x0)
    80ec:	1b05      	addi      	r3, sp, 20
    80ee:	9360      	ld.w      	r3, (r3, 0x0)
    80f0:	74cd      	zexth      	r3, r3
    80f2:	4368      	lsli      	r3, r3, 8
    80f4:	744d      	zexth      	r1, r3
    80f6:	e46e003d 	addi      	r3, sp, 62      	//0x3e
    80fa:	e44e003d 	addi      	r2, sp, 62      	//0x3e
    80fe:	8a40      	ld.h      	r2, (r2, 0x0)
    8100:	6c84      	or      	r2, r1
    8102:	ab40      	st.h      	r2, (r3, 0x0)
    8104:	1b07      	addi      	r3, sp, 28
    8106:	9360      	ld.w      	r3, (r3, 0x0)
    8108:	e92300a1 	bnez      	r3, 0x824a	//824a <handle_ldh_ldhs_ldw_ldd+0x4f6>
		if(put_regs_value((unsigned int)((short)tmpval16), regz, regs) != 0){
    810c:	e46e003d 	addi      	r3, sp, 62      	//0x3e
    8110:	8b60      	ld.h      	r3, (r3, 0x0)
    8112:	74cd      	zexth      	r3, r3
    8114:	744f      	sexth      	r1, r3
    8116:	1a16      	addi      	r2, sp, 88
    8118:	6cfb      	mov      	r3, sp
    811a:	6c07      	mov      	r0, r1
    811c:	9220      	ld.w      	r1, (r2, 0x0)
    811e:	9340      	ld.w      	r2, (r3, 0x0)
    8120:	e3fff4da 	bsr      	0x6ad4	//6ad4 <put_regs_value>
    8124:	c4004820 	lsli      	r0, r0, 0
    8128:	6cc3      	mov      	r3, r0
    812a:	e903008a 	bez      	r3, 0x823e	//823e <handle_ldh_ldhs_ldw_ldd+0x4ea>
			goto fault;
    812e:	048e      	br      	0x824a	//824a <handle_ldh_ldhs_ldw_ldd+0x4f6>
		}
		break; 
	case 2: // ldw
		destaddr = dataregx + (offset << 2);
    8130:	1b15      	addi      	r3, sp, 84
    8132:	9360      	ld.w      	r3, (r3, 0x0)
    8134:	4322      	lsli      	r1, r3, 2
    8136:	1b13      	addi      	r3, sp, 76
    8138:	1a14      	addi      	r2, sp, 80
    813a:	9240      	ld.w      	r2, (r2, 0x0)
    813c:	5948      	addu      	r2, r1, r2
    813e:	b340      	st.w      	r2, (r3, 0x0)
		get32_unaligned_check(tmpval32, destaddr);
    8140:	1b04      	addi      	r3, sp, 16
    8142:	3200      	movi      	r2, 0      	//0x0
    8144:	b340      	st.w      	r2, (r3, 0x0)
    8146:	1b03      	addi      	r3, sp, 12
    8148:	1a13      	addi      	r2, sp, 76
    814a:	9240      	ld.w      	r2, (r2, 0x0)
    814c:	b340      	st.w      	r2, (r3, 0x0)
    814e:	1b04      	addi      	r3, sp, 16
    8150:	9340      	ld.w      	r2, (r3, 0x0)
    8152:	1b03      	addi      	r3, sp, 12
    8154:	9360      	ld.w      	r3, (r3, 0x0)
    8156:	6d4b      	mov      	r5, r2
    8158:	6d0f      	mov      	r4, r3
    815a:	84c0      	ld.b      	r6, (r4, 0x0)
    815c:	2400      	addi      	r4, 1      	//0x1
    815e:	0405      	br      	0x8168	//8168 <handle_ldh_ldhs_ldw_ldd+0x414>
    8160:	3501      	movi      	r5, 1      	//0x1
    8162:	0403      	br      	0x8168	//8168 <handle_ldh_ldhs_ldw_ldd+0x414>
    8164:	00006ad4 	.long	0x00006ad4
    8168:	1b04      	addi      	r3, sp, 16
    816a:	b3a0      	st.w      	r5, (r3, 0x0)
    816c:	1b02      	addi      	r3, sp, 8
    816e:	b3c0      	st.w      	r6, (r3, 0x0)
    8170:	1b03      	addi      	r3, sp, 12
    8172:	b380      	st.w      	r4, (r3, 0x0)
    8174:	1b0b      	addi      	r3, sp, 44
    8176:	1a02      	addi      	r2, sp, 8
    8178:	9240      	ld.w      	r2, (r2, 0x0)
    817a:	b340      	st.w      	r2, (r3, 0x0)
    817c:	1b04      	addi      	r3, sp, 16
    817e:	9340      	ld.w      	r2, (r3, 0x0)
    8180:	1b03      	addi      	r3, sp, 12
    8182:	9360      	ld.w      	r3, (r3, 0x0)
    8184:	6d4b      	mov      	r5, r2
    8186:	6d0f      	mov      	r4, r3
    8188:	84c0      	ld.b      	r6, (r4, 0x0)
    818a:	2400      	addi      	r4, 1      	//0x1
    818c:	0403      	br      	0x8192	//8192 <handle_ldh_ldhs_ldw_ldd+0x43e>
    818e:	3501      	movi      	r5, 1      	//0x1
    8190:	0401      	br      	0x8192	//8192 <handle_ldh_ldhs_ldw_ldd+0x43e>
    8192:	1b04      	addi      	r3, sp, 16
    8194:	b3a0      	st.w      	r5, (r3, 0x0)
    8196:	1b02      	addi      	r3, sp, 8
    8198:	b3c0      	st.w      	r6, (r3, 0x0)
    819a:	1b03      	addi      	r3, sp, 12
    819c:	b380      	st.w      	r4, (r3, 0x0)
    819e:	1b02      	addi      	r3, sp, 8
    81a0:	9360      	ld.w      	r3, (r3, 0x0)
    81a2:	4328      	lsli      	r1, r3, 8
    81a4:	1b0b      	addi      	r3, sp, 44
    81a6:	1a0b      	addi      	r2, sp, 44
    81a8:	9240      	ld.w      	r2, (r2, 0x0)
    81aa:	6c84      	or      	r2, r1
    81ac:	b340      	st.w      	r2, (r3, 0x0)
    81ae:	1b04      	addi      	r3, sp, 16
    81b0:	9340      	ld.w      	r2, (r3, 0x0)
    81b2:	1b03      	addi      	r3, sp, 12
    81b4:	9360      	ld.w      	r3, (r3, 0x0)
    81b6:	6d4b      	mov      	r5, r2
    81b8:	6d0f      	mov      	r4, r3
    81ba:	84c0      	ld.b      	r6, (r4, 0x0)
    81bc:	2400      	addi      	r4, 1      	//0x1
    81be:	0403      	br      	0x81c4	//81c4 <handle_ldh_ldhs_ldw_ldd+0x470>
    81c0:	3501      	movi      	r5, 1      	//0x1
    81c2:	0401      	br      	0x81c4	//81c4 <handle_ldh_ldhs_ldw_ldd+0x470>
    81c4:	1b04      	addi      	r3, sp, 16
    81c6:	b3a0      	st.w      	r5, (r3, 0x0)
    81c8:	1b02      	addi      	r3, sp, 8
    81ca:	b3c0      	st.w      	r6, (r3, 0x0)
    81cc:	1b03      	addi      	r3, sp, 12
    81ce:	b380      	st.w      	r4, (r3, 0x0)
    81d0:	1b02      	addi      	r3, sp, 8
    81d2:	9360      	ld.w      	r3, (r3, 0x0)
    81d4:	4330      	lsli      	r1, r3, 16
    81d6:	1b0b      	addi      	r3, sp, 44
    81d8:	1a0b      	addi      	r2, sp, 44
    81da:	9240      	ld.w      	r2, (r2, 0x0)
    81dc:	6c84      	or      	r2, r1
    81de:	b340      	st.w      	r2, (r3, 0x0)
    81e0:	1b04      	addi      	r3, sp, 16
    81e2:	9340      	ld.w      	r2, (r3, 0x0)
    81e4:	1b03      	addi      	r3, sp, 12
    81e6:	9360      	ld.w      	r3, (r3, 0x0)
    81e8:	6d4b      	mov      	r5, r2
    81ea:	6d0f      	mov      	r4, r3
    81ec:	84c0      	ld.b      	r6, (r4, 0x0)
    81ee:	2400      	addi      	r4, 1      	//0x1
    81f0:	0403      	br      	0x81f6	//81f6 <handle_ldh_ldhs_ldw_ldd+0x4a2>
    81f2:	3501      	movi      	r5, 1      	//0x1
    81f4:	0401      	br      	0x81f6	//81f6 <handle_ldh_ldhs_ldw_ldd+0x4a2>
    81f6:	1b04      	addi      	r3, sp, 16
    81f8:	b3a0      	st.w      	r5, (r3, 0x0)
    81fa:	1b02      	addi      	r3, sp, 8
    81fc:	b3c0      	st.w      	r6, (r3, 0x0)
    81fe:	1b03      	addi      	r3, sp, 12
    8200:	b380      	st.w      	r4, (r3, 0x0)
    8202:	1b02      	addi      	r3, sp, 8
    8204:	9360      	ld.w      	r3, (r3, 0x0)
    8206:	4338      	lsli      	r1, r3, 24
    8208:	1b0b      	addi      	r3, sp, 44
    820a:	1a0b      	addi      	r2, sp, 44
    820c:	9240      	ld.w      	r2, (r2, 0x0)
    820e:	6c84      	or      	r2, r1
    8210:	b340      	st.w      	r2, (r3, 0x0)
    8212:	1b04      	addi      	r3, sp, 16
    8214:	9360      	ld.w      	r3, (r3, 0x0)
    8216:	e923001a 	bnez      	r3, 0x824a	//824a <handle_ldh_ldhs_ldw_ldd+0x4f6>
		if(put_regs_value(tmpval32, regz, regs) != 0){
    821a:	190b      	addi      	r1, sp, 44
    821c:	1a16      	addi      	r2, sp, 88
    821e:	6cfb      	mov      	r3, sp
    8220:	9100      	ld.w      	r0, (r1, 0x0)
    8222:	9220      	ld.w      	r1, (r2, 0x0)
    8224:	9340      	ld.w      	r2, (r3, 0x0)
    8226:	e3fff457 	bsr      	0x6ad4	//6ad4 <put_regs_value>
    822a:	c4004820 	lsli      	r0, r0, 0
    822e:	6cc3      	mov      	r3, r0
    8230:	e923000c 	bnez      	r3, 0x8248	//8248 <handle_ldh_ldhs_ldw_ldd+0x4f4>
			goto fault;
		}
		break;
    8234:	0406      	br      	0x8240	//8240 <handle_ldh_ldhs_ldw_ldd+0x4ec>
		destaddr = dataregx + (offset << 1);
		get16_unaligned_check(tmpval16, destaddr);
		if(put_regs_value((unsigned int)tmpval16, regz, regs) != 0){
			goto fault;
		}
		break;
    8236:	6c00      	or      	r0, r0
    8238:	0404      	br      	0x8240	//8240 <handle_ldh_ldhs_ldw_ldd+0x4ec>
		}
		get32_unaligned_check(tmpval32, destaddr + 4);
		if(put_regs_value(tmpval32, regz + 1, regs) != 0){
			goto fault;
		}
		break;
    823a:	6c00      	or      	r0, r0
    823c:	0402      	br      	0x8240	//8240 <handle_ldh_ldhs_ldw_ldd+0x4ec>
		destaddr = dataregx + (offset << 1);
		get16_unaligned_check(tmpval16, destaddr);
		if(put_regs_value((unsigned int)((short)tmpval16), regz, regs) != 0){
			goto fault;
		}
		break; 
    823e:	6c00      	or      	r0, r0
		break;
	default:
		goto fault;
	}

	return HANDLER_SUCCESS;
    8240:	3300      	movi      	r3, 0      	//0x0
    8242:	0405      	br      	0x824c	//824c <handle_ldh_ldhs_ldw_ldd+0x4f8>
		break;
	case 3: // ldd
		destaddr = dataregx + (offset << 2);
		get32_unaligned_check(tmpval32, destaddr);
		if(put_regs_value(tmpval32, regz, regs) != 0){
			goto fault;
    8244:	6c00      	or      	r0, r0
    8246:	0402      	br      	0x824a	//824a <handle_ldh_ldhs_ldw_ldd+0x4f6>
		break; 
	case 2: // ldw
		destaddr = dataregx + (offset << 2);
		get32_unaligned_check(tmpval32, destaddr);
		if(put_regs_value(tmpval32, regz, regs) != 0){
			goto fault;
    8248:	6c00      	or      	r0, r0
		goto fault;
	}

	return HANDLER_SUCCESS;
fault:
	return HANDLER_FAILURE;	
    824a:	3301      	movi      	r3, 1      	//0x1
}
    824c:	6c0f      	mov      	r0, r3
    824e:	1418      	addi      	sp, sp, 96
    8250:	1493      	pop      	r4-r6, r15
	...

00008254 <handle_sth_stw_std>:

static int 
handle_sth_stw_std(unsigned long instr, Ckcore_SavedRegisters *regs){
    8254:	14d3      	push      	r4-r6, r15
    8256:	1434      	subi      	sp, sp, 80
    8258:	1b01      	addi      	r3, sp, 4
    825a:	b300      	st.w      	r0, (r3, 0x0)
    825c:	6cfb      	mov      	r3, sp
    825e:	b320      	st.w      	r1, (r3, 0x0)
	unsigned int regx = (instr >> 16) & 0x1f;
    8260:	1b01      	addi      	r3, sp, 4
    8262:	9360      	ld.w      	r3, (r3, 0x0)
    8264:	4b50      	lsri      	r2, r3, 16
    8266:	1b13      	addi      	r3, sp, 76
    8268:	e442201f 	andi      	r2, r2, 31
    826c:	b340      	st.w      	r2, (r3, 0x0)
	unsigned int regz = (instr >> 21) & 0x1f;
    826e:	1b01      	addi      	r3, sp, 4
    8270:	9360      	ld.w      	r3, (r3, 0x0)
    8272:	4b55      	lsri      	r2, r3, 21
    8274:	1b12      	addi      	r3, sp, 72
    8276:	e442201f 	andi      	r2, r2, 31
    827a:	b340      	st.w      	r2, (r3, 0x0)
	unsigned int offset = instr & 0xfff;
    827c:	1b11      	addi      	r3, sp, 68
    827e:	1a01      	addi      	r2, sp, 4
    8280:	9240      	ld.w      	r2, (r2, 0x0)
    8282:	e4422fff 	andi      	r2, r2, 4095
    8286:	b340      	st.w      	r2, (r3, 0x0)
	unsigned int destaddr;
	unsigned int dataregx, dataregz;

	dataregx = get_regs_value(regx, regs);
    8288:	1c10      	addi      	r4, sp, 64
    828a:	1a13      	addi      	r2, sp, 76
    828c:	6cfb      	mov      	r3, sp
    828e:	9200      	ld.w      	r0, (r2, 0x0)
    8290:	9320      	ld.w      	r1, (r3, 0x0)
    8292:	e3fff3f3 	bsr      	0x6a78	//6a78 <get_regs_value>
    8296:	c4004820 	lsli      	r0, r0, 0
    829a:	b400      	st.w      	r0, (r4, 0x0)

	switch((instr >> 12) & 0xf){
    829c:	1b01      	addi      	r3, sp, 4
    829e:	9360      	ld.w      	r3, (r3, 0x0)
    82a0:	4b6c      	lsri      	r3, r3, 12
    82a2:	e463200f 	andi      	r3, r3, 15
    82a6:	3b42      	cmpnei      	r3, 2
    82a8:	0cbd      	bf      	0x8422	//8422 <handle_sth_stw_std+0x1ce>
    82aa:	3b43      	cmpnei      	r3, 3
    82ac:	0c41      	bf      	0x832e	//832e <handle_sth_stw_std+0xda>
    82ae:	3b41      	cmpnei      	r3, 1
    82b0:	08fb      	bt      	0x84a6	//84a6 <handle_sth_stw_std+0x252>
	case 1: // sth
		destaddr = dataregx + (offset << 1);
    82b2:	1b11      	addi      	r3, sp, 68
    82b4:	9360      	ld.w      	r3, (r3, 0x0)
    82b6:	5b6c      	addu      	r3, r3, r3
    82b8:	6c4f      	mov      	r1, r3
    82ba:	1b0f      	addi      	r3, sp, 60
    82bc:	1a10      	addi      	r2, sp, 64
    82be:	9240      	ld.w      	r2, (r2, 0x0)
    82c0:	5948      	addu      	r2, r1, r2
    82c2:	b340      	st.w      	r2, (r3, 0x0)
		dataregz = get_regs_value(regz, regs);
    82c4:	1c0e      	addi      	r4, sp, 56
    82c6:	1a12      	addi      	r2, sp, 72
    82c8:	6cfb      	mov      	r3, sp
    82ca:	9200      	ld.w      	r0, (r2, 0x0)
    82cc:	9320      	ld.w      	r1, (r3, 0x0)
    82ce:	e3fff3d5 	bsr      	0x6a78	//6a78 <get_regs_value>
    82d2:	c4004820 	lsli      	r0, r0, 0
    82d6:	b400      	st.w      	r0, (r4, 0x0)
		put16_unaligned_check(dataregz, destaddr);
    82d8:	1b0d      	addi      	r3, sp, 52
    82da:	3200      	movi      	r2, 0      	//0x0
    82dc:	b340      	st.w      	r2, (r3, 0x0)
    82de:	1b0c      	addi      	r3, sp, 48
    82e0:	1a0e      	addi      	r2, sp, 56
    82e2:	9240      	ld.w      	r2, (r2, 0x0)
    82e4:	b340      	st.w      	r2, (r3, 0x0)
    82e6:	1b0b      	addi      	r3, sp, 44
    82e8:	1a0f      	addi      	r2, sp, 60
    82ea:	9240      	ld.w      	r2, (r2, 0x0)
    82ec:	b340      	st.w      	r2, (r3, 0x0)
    82ee:	1b0d      	addi      	r3, sp, 52
    82f0:	9320      	ld.w      	r1, (r3, 0x0)
    82f2:	1b0c      	addi      	r3, sp, 48
    82f4:	9340      	ld.w      	r2, (r3, 0x0)
    82f6:	1b0b      	addi      	r3, sp, 44
    82f8:	9360      	ld.w      	r3, (r3, 0x0)
    82fa:	6d87      	mov      	r6, r1
    82fc:	6d4b      	mov      	r5, r2
    82fe:	6d0f      	mov      	r4, r3
    8300:	a4a0      	st.b      	r5, (r4, 0x0)
    8302:	2400      	addi      	r4, 1      	//0x1
    8304:	4da8      	lsri      	r5, r5, 8
    8306:	a4a0      	st.b      	r5, (r4, 0x0)
    8308:	0408      	br      	0x8318	//8318 <handle_sth_stw_std+0xc4>
    830a:	3601      	movi      	r6, 1      	//0x1
    830c:	0406      	br      	0x8318	//8318 <handle_sth_stw_std+0xc4>
    830e:	0000      	.short	0x0000
    8310:	00006ad4 	.long	0x00006ad4
    8314:	00006a78 	.long	0x00006a78
    8318:	1b0d      	addi      	r3, sp, 52
    831a:	b3c0      	st.w      	r6, (r3, 0x0)
    831c:	1b0c      	addi      	r3, sp, 48
    831e:	b3a0      	st.w      	r5, (r3, 0x0)
    8320:	1b0b      	addi      	r3, sp, 44
    8322:	b380      	st.w      	r4, (r3, 0x0)
    8324:	1b0d      	addi      	r3, sp, 52
    8326:	9360      	ld.w      	r3, (r3, 0x0)
    8328:	e92300c0 	bnez      	r3, 0x84a8	//84a8 <handle_sth_stw_std+0x254>
		break;
    832c:	04bb      	br      	0x84a2	//84a2 <handle_sth_stw_std+0x24e>
	case 3: // std
		destaddr = dataregx + (offset << 2);
    832e:	1b11      	addi      	r3, sp, 68
    8330:	9360      	ld.w      	r3, (r3, 0x0)
    8332:	4322      	lsli      	r1, r3, 2
    8334:	1b0f      	addi      	r3, sp, 60
    8336:	1a10      	addi      	r2, sp, 64
    8338:	9240      	ld.w      	r2, (r2, 0x0)
    833a:	5948      	addu      	r2, r1, r2
    833c:	b340      	st.w      	r2, (r3, 0x0)
		dataregz = get_regs_value(regz, regs);
    833e:	1c0e      	addi      	r4, sp, 56
    8340:	1a12      	addi      	r2, sp, 72
    8342:	6cfb      	mov      	r3, sp
    8344:	9200      	ld.w      	r0, (r2, 0x0)
    8346:	9320      	ld.w      	r1, (r3, 0x0)
    8348:	e3fff398 	bsr      	0x6a78	//6a78 <get_regs_value>
    834c:	c4004820 	lsli      	r0, r0, 0
    8350:	b400      	st.w      	r0, (r4, 0x0)
		put32_unaligned_check(dataregz, destaddr);
    8352:	1b0a      	addi      	r3, sp, 40
    8354:	3200      	movi      	r2, 0      	//0x0
    8356:	b340      	st.w      	r2, (r3, 0x0)
    8358:	1b09      	addi      	r3, sp, 36
    835a:	1a0e      	addi      	r2, sp, 56
    835c:	9240      	ld.w      	r2, (r2, 0x0)
    835e:	b340      	st.w      	r2, (r3, 0x0)
    8360:	1b08      	addi      	r3, sp, 32
    8362:	1a0f      	addi      	r2, sp, 60
    8364:	9240      	ld.w      	r2, (r2, 0x0)
    8366:	b340      	st.w      	r2, (r3, 0x0)
    8368:	1b0a      	addi      	r3, sp, 40
    836a:	9320      	ld.w      	r1, (r3, 0x0)
    836c:	1b09      	addi      	r3, sp, 36
    836e:	9340      	ld.w      	r2, (r3, 0x0)
    8370:	1b08      	addi      	r3, sp, 32
    8372:	9360      	ld.w      	r3, (r3, 0x0)
    8374:	6d87      	mov      	r6, r1
    8376:	6d4b      	mov      	r5, r2
    8378:	6d0f      	mov      	r4, r3
    837a:	a4a0      	st.b      	r5, (r4, 0x0)
    837c:	2400      	addi      	r4, 1      	//0x1
    837e:	4da8      	lsri      	r5, r5, 8
    8380:	a4a0      	st.b      	r5, (r4, 0x0)
    8382:	2400      	addi      	r4, 1      	//0x1
    8384:	4da8      	lsri      	r5, r5, 8
    8386:	a4a0      	st.b      	r5, (r4, 0x0)
    8388:	2400      	addi      	r4, 1      	//0x1
    838a:	4da8      	lsri      	r5, r5, 8
    838c:	a4a0      	st.b      	r5, (r4, 0x0)
    838e:	0405      	br      	0x8398	//8398 <handle_sth_stw_std+0x144>
    8390:	3601      	movi      	r6, 1      	//0x1
    8392:	0403      	br      	0x8398	//8398 <handle_sth_stw_std+0x144>
    8394:	00006a78 	.long	0x00006a78
    8398:	1b0a      	addi      	r3, sp, 40
    839a:	b3c0      	st.w      	r6, (r3, 0x0)
    839c:	1b09      	addi      	r3, sp, 36
    839e:	b3a0      	st.w      	r5, (r3, 0x0)
    83a0:	1b08      	addi      	r3, sp, 32
    83a2:	b380      	st.w      	r4, (r3, 0x0)
    83a4:	1b0a      	addi      	r3, sp, 40
    83a6:	9360      	ld.w      	r3, (r3, 0x0)
    83a8:	e9230080 	bnez      	r3, 0x84a8	//84a8 <handle_sth_stw_std+0x254>
		dataregz = get_regs_value(regz + 1, regs);
    83ac:	1b12      	addi      	r3, sp, 72
    83ae:	9360      	ld.w      	r3, (r3, 0x0)
    83b0:	5b42      	addi      	r2, r3, 1      	//0x1
    83b2:	1c0e      	addi      	r4, sp, 56
    83b4:	6cfb      	mov      	r3, sp
    83b6:	6c0b      	mov      	r0, r2
    83b8:	9320      	ld.w      	r1, (r3, 0x0)
    83ba:	e3fff35f 	bsr      	0x6a78	//6a78 <get_regs_value>
    83be:	c4004820 	lsli      	r0, r0, 0
    83c2:	b400      	st.w      	r0, (r4, 0x0)
		put32_unaligned_check(dataregz, destaddr + 4);
    83c4:	1b07      	addi      	r3, sp, 28
    83c6:	3200      	movi      	r2, 0      	//0x0
    83c8:	b340      	st.w      	r2, (r3, 0x0)
    83ca:	1b06      	addi      	r3, sp, 24
    83cc:	1a0e      	addi      	r2, sp, 56
    83ce:	9240      	ld.w      	r2, (r2, 0x0)
    83d0:	b340      	st.w      	r2, (r3, 0x0)
    83d2:	1b05      	addi      	r3, sp, 20
    83d4:	1a0f      	addi      	r2, sp, 60
    83d6:	9240      	ld.w      	r2, (r2, 0x0)
    83d8:	2203      	addi      	r2, 4      	//0x4
    83da:	b340      	st.w      	r2, (r3, 0x0)
    83dc:	1b07      	addi      	r3, sp, 28
    83de:	9320      	ld.w      	r1, (r3, 0x0)
    83e0:	1b06      	addi      	r3, sp, 24
    83e2:	9340      	ld.w      	r2, (r3, 0x0)
    83e4:	1b05      	addi      	r3, sp, 20
    83e6:	9360      	ld.w      	r3, (r3, 0x0)
    83e8:	6d87      	mov      	r6, r1
    83ea:	6d4b      	mov      	r5, r2
    83ec:	6d0f      	mov      	r4, r3
    83ee:	a4a0      	st.b      	r5, (r4, 0x0)
    83f0:	2400      	addi      	r4, 1      	//0x1
    83f2:	4da8      	lsri      	r5, r5, 8
    83f4:	a4a0      	st.b      	r5, (r4, 0x0)
    83f6:	2400      	addi      	r4, 1      	//0x1
    83f8:	4da8      	lsri      	r5, r5, 8
    83fa:	a4a0      	st.b      	r5, (r4, 0x0)
    83fc:	2400      	addi      	r4, 1      	//0x1
    83fe:	4da8      	lsri      	r5, r5, 8
    8400:	a4a0      	st.b      	r5, (r4, 0x0)
    8402:	0405      	br      	0x840c	//840c <handle_sth_stw_std+0x1b8>
    8404:	3601      	movi      	r6, 1      	//0x1
    8406:	0403      	br      	0x840c	//840c <handle_sth_stw_std+0x1b8>
    8408:	00006a78 	.long	0x00006a78
    840c:	1b07      	addi      	r3, sp, 28
    840e:	b3c0      	st.w      	r6, (r3, 0x0)
    8410:	1b06      	addi      	r3, sp, 24
    8412:	b3a0      	st.w      	r5, (r3, 0x0)
    8414:	1b05      	addi      	r3, sp, 20
    8416:	b380      	st.w      	r4, (r3, 0x0)
    8418:	1b07      	addi      	r3, sp, 28
    841a:	9360      	ld.w      	r3, (r3, 0x0)
    841c:	e9230046 	bnez      	r3, 0x84a8	//84a8 <handle_sth_stw_std+0x254>
		break;
    8420:	0441      	br      	0x84a2	//84a2 <handle_sth_stw_std+0x24e>
	case 2: // stw
		destaddr = dataregx + (offset << 2);
    8422:	1b11      	addi      	r3, sp, 68
    8424:	9360      	ld.w      	r3, (r3, 0x0)
    8426:	4322      	lsli      	r1, r3, 2
    8428:	1b0f      	addi      	r3, sp, 60
    842a:	1a10      	addi      	r2, sp, 64
    842c:	9240      	ld.w      	r2, (r2, 0x0)
    842e:	5948      	addu      	r2, r1, r2
    8430:	b340      	st.w      	r2, (r3, 0x0)
		dataregz = get_regs_value(regz, regs);
    8432:	1c0e      	addi      	r4, sp, 56
    8434:	1a12      	addi      	r2, sp, 72
    8436:	6cfb      	mov      	r3, sp
    8438:	9200      	ld.w      	r0, (r2, 0x0)
    843a:	9320      	ld.w      	r1, (r3, 0x0)
    843c:	e3fff31e 	bsr      	0x6a78	//6a78 <get_regs_value>
    8440:	c4004820 	lsli      	r0, r0, 0
    8444:	b400      	st.w      	r0, (r4, 0x0)
		put32_unaligned_check(dataregz, destaddr);
    8446:	1b04      	addi      	r3, sp, 16
    8448:	3200      	movi      	r2, 0      	//0x0
    844a:	b340      	st.w      	r2, (r3, 0x0)
    844c:	1b03      	addi      	r3, sp, 12
    844e:	1a0e      	addi      	r2, sp, 56
    8450:	9240      	ld.w      	r2, (r2, 0x0)
    8452:	b340      	st.w      	r2, (r3, 0x0)
    8454:	1b02      	addi      	r3, sp, 8
    8456:	1a0f      	addi      	r2, sp, 60
    8458:	9240      	ld.w      	r2, (r2, 0x0)
    845a:	b340      	st.w      	r2, (r3, 0x0)
    845c:	1b04      	addi      	r3, sp, 16
    845e:	9320      	ld.w      	r1, (r3, 0x0)
    8460:	1b03      	addi      	r3, sp, 12
    8462:	9340      	ld.w      	r2, (r3, 0x0)
    8464:	1b02      	addi      	r3, sp, 8
    8466:	9360      	ld.w      	r3, (r3, 0x0)
    8468:	6d87      	mov      	r6, r1
    846a:	6d4b      	mov      	r5, r2
    846c:	6d0f      	mov      	r4, r3
    846e:	a4a0      	st.b      	r5, (r4, 0x0)
    8470:	2400      	addi      	r4, 1      	//0x1
    8472:	4da8      	lsri      	r5, r5, 8
    8474:	a4a0      	st.b      	r5, (r4, 0x0)
    8476:	2400      	addi      	r4, 1      	//0x1
    8478:	4da8      	lsri      	r5, r5, 8
    847a:	a4a0      	st.b      	r5, (r4, 0x0)
    847c:	2400      	addi      	r4, 1      	//0x1
    847e:	4da8      	lsri      	r5, r5, 8
    8480:	a4a0      	st.b      	r5, (r4, 0x0)
    8482:	0405      	br      	0x848c	//848c <handle_sth_stw_std+0x238>
    8484:	3601      	movi      	r6, 1      	//0x1
    8486:	0403      	br      	0x848c	//848c <handle_sth_stw_std+0x238>
    8488:	00006a78 	.long	0x00006a78
    848c:	1b04      	addi      	r3, sp, 16
    848e:	b3c0      	st.w      	r6, (r3, 0x0)
    8490:	1b03      	addi      	r3, sp, 12
    8492:	b3a0      	st.w      	r5, (r3, 0x0)
    8494:	1b02      	addi      	r3, sp, 8
    8496:	b380      	st.w      	r4, (r3, 0x0)
    8498:	1b04      	addi      	r3, sp, 16
    849a:	9360      	ld.w      	r3, (r3, 0x0)
    849c:	e9230006 	bnez      	r3, 0x84a8	//84a8 <handle_sth_stw_std+0x254>
		break;
    84a0:	6c00      	or      	r0, r0
	default:
		goto fault;
	}

	return HANDLER_SUCCESS;
    84a2:	3300      	movi      	r3, 0      	//0x0
    84a4:	0403      	br      	0x84aa	//84aa <handle_sth_stw_std+0x256>
		destaddr = dataregx + (offset << 2);
		dataregz = get_regs_value(regz, regs);
		put32_unaligned_check(dataregz, destaddr);
		break;
	default:
		goto fault;
    84a6:	6c00      	or      	r0, r0
	}

	return HANDLER_SUCCESS;
fault:
	return HANDLER_FAILURE;	
    84a8:	3301      	movi      	r3, 1      	//0x1
}
    84aa:	6c0f      	mov      	r0, r3
    84ac:	1414      	addi      	sp, sp, 80
    84ae:	1493      	pop      	r4-r6, r15

000084b0 <handle_ldrh_ldrhs_ldrw_ldm>:

static int 
handle_ldrh_ldrhs_ldrw_ldm(unsigned long instr, Ckcore_SavedRegisters *regs){
    84b0:	14d3      	push      	r4-r6, r15
    84b2:	1437      	subi      	sp, sp, 92
    84b4:	1b01      	addi      	r3, sp, 4
    84b6:	b300      	st.w      	r0, (r3, 0x0)
    84b8:	6cfb      	mov      	r3, sp
    84ba:	b320      	st.w      	r1, (r3, 0x0)
	unsigned int regx = (instr >> 16) & 0x1f;
    84bc:	1b01      	addi      	r3, sp, 4
    84be:	9360      	ld.w      	r3, (r3, 0x0)
    84c0:	4b50      	lsri      	r2, r3, 16
    84c2:	1b15      	addi      	r3, sp, 84
    84c4:	e442201f 	andi      	r2, r2, 31
    84c8:	b340      	st.w      	r2, (r3, 0x0)
	unsigned int regy = (instr >> 21) & 0x1f;
    84ca:	1b01      	addi      	r3, sp, 4
    84cc:	9360      	ld.w      	r3, (r3, 0x0)
    84ce:	4b55      	lsri      	r2, r3, 21
    84d0:	1b14      	addi      	r3, sp, 80
    84d2:	e442201f 	andi      	r2, r2, 31
    84d6:	b340      	st.w      	r2, (r3, 0x0)
	unsigned int regz = instr & 0x1f;
    84d8:	1b13      	addi      	r3, sp, 76
    84da:	1a01      	addi      	r2, sp, 4
    84dc:	9240      	ld.w      	r2, (r2, 0x0)
    84de:	e442201f 	andi      	r2, r2, 31
    84e2:	b340      	st.w      	r2, (r3, 0x0)
	unsigned int dataregx, dataregy;
	unsigned int destaddr, tmpval32, i;
	unsigned short tmpval16;

	dataregx = get_regs_value(regx, regs);
    84e4:	1c12      	addi      	r4, sp, 72
    84e6:	1a15      	addi      	r2, sp, 84
    84e8:	6cfb      	mov      	r3, sp
    84ea:	9200      	ld.w      	r0, (r2, 0x0)
    84ec:	9320      	ld.w      	r1, (r3, 0x0)
    84ee:	e3fff2c5 	bsr      	0x6a78	//6a78 <get_regs_value>
    84f2:	c4004820 	lsli      	r0, r0, 0
    84f6:	b400      	st.w      	r0, (r4, 0x0)
	dataregy = get_regs_value(regy, regs);
    84f8:	1c11      	addi      	r4, sp, 68
    84fa:	1a14      	addi      	r2, sp, 80
    84fc:	6cfb      	mov      	r3, sp
    84fe:	9200      	ld.w      	r0, (r2, 0x0)
    8500:	9320      	ld.w      	r1, (r3, 0x0)
    8502:	e3fff2bb 	bsr      	0x6a78	//6a78 <get_regs_value>
    8506:	c4004820 	lsli      	r0, r0, 0
    850a:	b400      	st.w      	r0, (r4, 0x0)

	destaddr = dataregx + dataregy * ((instr >> 5) & 0x1f);
    850c:	1b01      	addi      	r3, sp, 4
    850e:	9360      	ld.w      	r3, (r3, 0x0)
    8510:	4b65      	lsri      	r3, r3, 5
    8512:	e443201f 	andi      	r2, r3, 31
    8516:	1b11      	addi      	r3, sp, 68
    8518:	9360      	ld.w      	r3, (r3, 0x0)
    851a:	c4628421 	mult      	r1, r2, r3
    851e:	1b10      	addi      	r3, sp, 64
    8520:	1a12      	addi      	r2, sp, 72
    8522:	9240      	ld.w      	r2, (r2, 0x0)
    8524:	5948      	addu      	r2, r1, r2
    8526:	b340      	st.w      	r2, (r3, 0x0)

	switch((instr >> 10) & 0x3f){
    8528:	1b01      	addi      	r3, sp, 4
    852a:	9360      	ld.w      	r3, (r3, 0x0)
    852c:	4b6a      	lsri      	r3, r3, 10
    852e:	e463203f 	andi      	r3, r3, 63
    8532:	3b42      	cmpnei      	r3, 2
    8534:	0cb0      	bf      	0x8694	//8694 <handle_ldrh_ldrhs_ldrw_ldm+0x1e4>
    8536:	3b02      	cmphsi      	r3, 3      	//0x3
    8538:	0804      	bt      	0x8540	//8540 <handle_ldrh_ldrhs_ldrw_ldm+0x90>
    853a:	3b41      	cmpnei      	r3, 1
    853c:	0c07      	bf      	0x854a	//854a <handle_ldrh_ldrhs_ldrw_ldm+0x9a>
				goto fault;
			}
		}
		return HANDLER_SUCCESS;
	default:
		goto fault;
    853e:	05c4      	br      	0x88c6	//88c6 <handle_ldrh_ldrhs_ldrw_ldm+0x416>
	dataregx = get_regs_value(regx, regs);
	dataregy = get_regs_value(regy, regs);

	destaddr = dataregx + dataregy * ((instr >> 5) & 0x1f);

	switch((instr >> 10) & 0x3f){
    8540:	3b45      	cmpnei      	r3, 5
    8542:	0c56      	bf      	0x85ee	//85ee <handle_ldrh_ldrhs_ldrw_ldm+0x13e>
    8544:	3b47      	cmpnei      	r3, 7
    8546:	0d22      	bf      	0x878a	//878a <handle_ldrh_ldrhs_ldrw_ldm+0x2da>
				goto fault;
			}
		}
		return HANDLER_SUCCESS;
	default:
		goto fault;
    8548:	05bf      	br      	0x88c6	//88c6 <handle_ldrh_ldrhs_ldrw_ldm+0x416>

	destaddr = dataregx + dataregy * ((instr >> 5) & 0x1f);

	switch((instr >> 10) & 0x3f){
	case 1: // ldrh
		get16_unaligned_check(tmpval16, destaddr);
    854a:	1b0f      	addi      	r3, sp, 60
    854c:	3200      	movi      	r2, 0      	//0x0
    854e:	b340      	st.w      	r2, (r3, 0x0)
    8550:	1b0e      	addi      	r3, sp, 56
    8552:	1a10      	addi      	r2, sp, 64
    8554:	9240      	ld.w      	r2, (r2, 0x0)
    8556:	b340      	st.w      	r2, (r3, 0x0)
    8558:	1b0f      	addi      	r3, sp, 60
    855a:	9340      	ld.w      	r2, (r3, 0x0)
    855c:	1b0e      	addi      	r3, sp, 56
    855e:	9360      	ld.w      	r3, (r3, 0x0)
    8560:	6d4b      	mov      	r5, r2
    8562:	6d0f      	mov      	r4, r3
    8564:	84c0      	ld.b      	r6, (r4, 0x0)
    8566:	2400      	addi      	r4, 1      	//0x1
    8568:	0406      	br      	0x8574	//8574 <handle_ldrh_ldrhs_ldrw_ldm+0xc4>
    856a:	3501      	movi      	r5, 1      	//0x1
    856c:	0404      	br      	0x8574	//8574 <handle_ldrh_ldrhs_ldrw_ldm+0xc4>
    856e:	0000      	.short	0x0000
    8570:	00006a78 	.long	0x00006a78
    8574:	1b0f      	addi      	r3, sp, 60
    8576:	b3a0      	st.w      	r5, (r3, 0x0)
    8578:	1b0d      	addi      	r3, sp, 52
    857a:	b3c0      	st.w      	r6, (r3, 0x0)
    857c:	1b0e      	addi      	r3, sp, 56
    857e:	b380      	st.w      	r4, (r3, 0x0)
    8580:	e46e0031 	addi      	r3, sp, 50      	//0x32
    8584:	1a0d      	addi      	r2, sp, 52
    8586:	9240      	ld.w      	r2, (r2, 0x0)
    8588:	ab40      	st.h      	r2, (r3, 0x0)
    858a:	1b0f      	addi      	r3, sp, 60
    858c:	9340      	ld.w      	r2, (r3, 0x0)
    858e:	1b0e      	addi      	r3, sp, 56
    8590:	9360      	ld.w      	r3, (r3, 0x0)
    8592:	6d4b      	mov      	r5, r2
    8594:	6d0f      	mov      	r4, r3
    8596:	84c0      	ld.b      	r6, (r4, 0x0)
    8598:	2400      	addi      	r4, 1      	//0x1
    859a:	0403      	br      	0x85a0	//85a0 <handle_ldrh_ldrhs_ldrw_ldm+0xf0>
    859c:	3501      	movi      	r5, 1      	//0x1
    859e:	0401      	br      	0x85a0	//85a0 <handle_ldrh_ldrhs_ldrw_ldm+0xf0>
    85a0:	1b0f      	addi      	r3, sp, 60
    85a2:	b3a0      	st.w      	r5, (r3, 0x0)
    85a4:	1b0d      	addi      	r3, sp, 52
    85a6:	b3c0      	st.w      	r6, (r3, 0x0)
    85a8:	1b0e      	addi      	r3, sp, 56
    85aa:	b380      	st.w      	r4, (r3, 0x0)
    85ac:	1b0d      	addi      	r3, sp, 52
    85ae:	9360      	ld.w      	r3, (r3, 0x0)
    85b0:	74cd      	zexth      	r3, r3
    85b2:	4368      	lsli      	r3, r3, 8
    85b4:	744d      	zexth      	r1, r3
    85b6:	e46e0031 	addi      	r3, sp, 50      	//0x32
    85ba:	e44e0031 	addi      	r2, sp, 50      	//0x32
    85be:	8a40      	ld.h      	r2, (r2, 0x0)
    85c0:	6c84      	or      	r2, r1
    85c2:	ab40      	st.h      	r2, (r3, 0x0)
    85c4:	1b0f      	addi      	r3, sp, 60
    85c6:	9360      	ld.w      	r3, (r3, 0x0)
    85c8:	e923017f 	bnez      	r3, 0x88c6	//88c6 <handle_ldrh_ldrhs_ldrw_ldm+0x416>
		if(put_regs_value((unsigned int)tmpval16, regz, regs) != 0){
    85cc:	e46e0031 	addi      	r3, sp, 50      	//0x32
    85d0:	8b60      	ld.h      	r3, (r3, 0x0)
    85d2:	744d      	zexth      	r1, r3
    85d4:	1a13      	addi      	r2, sp, 76
    85d6:	6cfb      	mov      	r3, sp
    85d8:	6c07      	mov      	r0, r1
    85da:	9220      	ld.w      	r1, (r2, 0x0)
    85dc:	9340      	ld.w      	r2, (r3, 0x0)
    85de:	e3fff27b 	bsr      	0x6ad4	//6ad4 <put_regs_value>
    85e2:	c4004820 	lsli      	r0, r0, 0
    85e6:	6cc3      	mov      	r3, r0
    85e8:	e9030167 	bez      	r3, 0x88b6	//88b6 <handle_ldrh_ldrhs_ldrw_ldm+0x406>
			goto fault;
    85ec:	056d      	br      	0x88c6	//88c6 <handle_ldrh_ldrhs_ldrw_ldm+0x416>
		}
		break;
	case 5: // ldrhs
		get16_unaligned_check(tmpval16, destaddr);
    85ee:	1b0b      	addi      	r3, sp, 44
    85f0:	3200      	movi      	r2, 0      	//0x0
    85f2:	b340      	st.w      	r2, (r3, 0x0)
    85f4:	1b0a      	addi      	r3, sp, 40
    85f6:	1a10      	addi      	r2, sp, 64
    85f8:	9240      	ld.w      	r2, (r2, 0x0)
    85fa:	b340      	st.w      	r2, (r3, 0x0)
    85fc:	1b0b      	addi      	r3, sp, 44
    85fe:	9340      	ld.w      	r2, (r3, 0x0)
    8600:	1b0a      	addi      	r3, sp, 40
    8602:	9360      	ld.w      	r3, (r3, 0x0)
    8604:	6d4b      	mov      	r5, r2
    8606:	6d0f      	mov      	r4, r3
    8608:	84c0      	ld.b      	r6, (r4, 0x0)
    860a:	2400      	addi      	r4, 1      	//0x1
    860c:	0406      	br      	0x8618	//8618 <handle_ldrh_ldrhs_ldrw_ldm+0x168>
    860e:	3501      	movi      	r5, 1      	//0x1
    8610:	0404      	br      	0x8618	//8618 <handle_ldrh_ldrhs_ldrw_ldm+0x168>
    8612:	0000      	.short	0x0000
    8614:	00006ad4 	.long	0x00006ad4
    8618:	1b0b      	addi      	r3, sp, 44
    861a:	b3a0      	st.w      	r5, (r3, 0x0)
    861c:	1b09      	addi      	r3, sp, 36
    861e:	b3c0      	st.w      	r6, (r3, 0x0)
    8620:	1b0a      	addi      	r3, sp, 40
    8622:	b380      	st.w      	r4, (r3, 0x0)
    8624:	e46e0031 	addi      	r3, sp, 50      	//0x32
    8628:	1a09      	addi      	r2, sp, 36
    862a:	9240      	ld.w      	r2, (r2, 0x0)
    862c:	ab40      	st.h      	r2, (r3, 0x0)
    862e:	1b0b      	addi      	r3, sp, 44
    8630:	9340      	ld.w      	r2, (r3, 0x0)
    8632:	1b0a      	addi      	r3, sp, 40
    8634:	9360      	ld.w      	r3, (r3, 0x0)
    8636:	6d4b      	mov      	r5, r2
    8638:	6d0f      	mov      	r4, r3
    863a:	84c0      	ld.b      	r6, (r4, 0x0)
    863c:	2400      	addi      	r4, 1      	//0x1
    863e:	0403      	br      	0x8644	//8644 <handle_ldrh_ldrhs_ldrw_ldm+0x194>
    8640:	3501      	movi      	r5, 1      	//0x1
    8642:	0401      	br      	0x8644	//8644 <handle_ldrh_ldrhs_ldrw_ldm+0x194>
    8644:	1b0b      	addi      	r3, sp, 44
    8646:	b3a0      	st.w      	r5, (r3, 0x0)
    8648:	1b09      	addi      	r3, sp, 36
    864a:	b3c0      	st.w      	r6, (r3, 0x0)
    864c:	1b0a      	addi      	r3, sp, 40
    864e:	b380      	st.w      	r4, (r3, 0x0)
    8650:	1b09      	addi      	r3, sp, 36
    8652:	9360      	ld.w      	r3, (r3, 0x0)
    8654:	74cd      	zexth      	r3, r3
    8656:	4368      	lsli      	r3, r3, 8
    8658:	744d      	zexth      	r1, r3
    865a:	e46e0031 	addi      	r3, sp, 50      	//0x32
    865e:	e44e0031 	addi      	r2, sp, 50      	//0x32
    8662:	8a40      	ld.h      	r2, (r2, 0x0)
    8664:	6c84      	or      	r2, r1
    8666:	ab40      	st.h      	r2, (r3, 0x0)
    8668:	1b0b      	addi      	r3, sp, 44
    866a:	9360      	ld.w      	r3, (r3, 0x0)
    866c:	e923012d 	bnez      	r3, 0x88c6	//88c6 <handle_ldrh_ldrhs_ldrw_ldm+0x416>
		if(put_regs_value((unsigned int)((short)tmpval16), regz, regs) != 0){
    8670:	e46e0031 	addi      	r3, sp, 50      	//0x32
    8674:	8b60      	ld.h      	r3, (r3, 0x0)
    8676:	74cd      	zexth      	r3, r3
    8678:	744f      	sexth      	r1, r3
    867a:	1a13      	addi      	r2, sp, 76
    867c:	6cfb      	mov      	r3, sp
    867e:	6c07      	mov      	r0, r1
    8680:	9220      	ld.w      	r1, (r2, 0x0)
    8682:	9340      	ld.w      	r2, (r3, 0x0)
    8684:	e3fff228 	bsr      	0x6ad4	//6ad4 <put_regs_value>
    8688:	c4004820 	lsli      	r0, r0, 0
    868c:	6cc3      	mov      	r3, r0
    868e:	e9030116 	bez      	r3, 0x88ba	//88ba <handle_ldrh_ldrhs_ldrw_ldm+0x40a>
			goto fault;
    8692:	051a      	br      	0x88c6	//88c6 <handle_ldrh_ldrhs_ldrw_ldm+0x416>
		}
		break;
	case 2: // ldrw
		get32_unaligned_check(tmpval32, destaddr);
    8694:	1b08      	addi      	r3, sp, 32
    8696:	3200      	movi      	r2, 0      	//0x0
    8698:	b340      	st.w      	r2, (r3, 0x0)
    869a:	1b07      	addi      	r3, sp, 28
    869c:	1a10      	addi      	r2, sp, 64
    869e:	9240      	ld.w      	r2, (r2, 0x0)
    86a0:	b340      	st.w      	r2, (r3, 0x0)
    86a2:	1b08      	addi      	r3, sp, 32
    86a4:	9340      	ld.w      	r2, (r3, 0x0)
    86a6:	1b07      	addi      	r3, sp, 28
    86a8:	9360      	ld.w      	r3, (r3, 0x0)
    86aa:	6d4b      	mov      	r5, r2
    86ac:	6d0f      	mov      	r4, r3
    86ae:	84c0      	ld.b      	r6, (r4, 0x0)
    86b0:	2400      	addi      	r4, 1      	//0x1
    86b2:	0405      	br      	0x86bc	//86bc <handle_ldrh_ldrhs_ldrw_ldm+0x20c>
    86b4:	3501      	movi      	r5, 1      	//0x1
    86b6:	0403      	br      	0x86bc	//86bc <handle_ldrh_ldrhs_ldrw_ldm+0x20c>
    86b8:	00006ad4 	.long	0x00006ad4
    86bc:	1b08      	addi      	r3, sp, 32
    86be:	b3a0      	st.w      	r5, (r3, 0x0)
    86c0:	1b06      	addi      	r3, sp, 24
    86c2:	b3c0      	st.w      	r6, (r3, 0x0)
    86c4:	1b07      	addi      	r3, sp, 28
    86c6:	b380      	st.w      	r4, (r3, 0x0)
    86c8:	1b05      	addi      	r3, sp, 20
    86ca:	1a06      	addi      	r2, sp, 24
    86cc:	9240      	ld.w      	r2, (r2, 0x0)
    86ce:	b340      	st.w      	r2, (r3, 0x0)
    86d0:	1b08      	addi      	r3, sp, 32
    86d2:	9340      	ld.w      	r2, (r3, 0x0)
    86d4:	1b07      	addi      	r3, sp, 28
    86d6:	9360      	ld.w      	r3, (r3, 0x0)
    86d8:	6d4b      	mov      	r5, r2
    86da:	6d0f      	mov      	r4, r3
    86dc:	84c0      	ld.b      	r6, (r4, 0x0)
    86de:	2400      	addi      	r4, 1      	//0x1
    86e0:	0403      	br      	0x86e6	//86e6 <handle_ldrh_ldrhs_ldrw_ldm+0x236>
    86e2:	3501      	movi      	r5, 1      	//0x1
    86e4:	0401      	br      	0x86e6	//86e6 <handle_ldrh_ldrhs_ldrw_ldm+0x236>
    86e6:	1b08      	addi      	r3, sp, 32
    86e8:	b3a0      	st.w      	r5, (r3, 0x0)
    86ea:	1b06      	addi      	r3, sp, 24
    86ec:	b3c0      	st.w      	r6, (r3, 0x0)
    86ee:	1b07      	addi      	r3, sp, 28
    86f0:	b380      	st.w      	r4, (r3, 0x0)
    86f2:	1b06      	addi      	r3, sp, 24
    86f4:	9360      	ld.w      	r3, (r3, 0x0)
    86f6:	4328      	lsli      	r1, r3, 8
    86f8:	1b05      	addi      	r3, sp, 20
    86fa:	1a05      	addi      	r2, sp, 20
    86fc:	9240      	ld.w      	r2, (r2, 0x0)
    86fe:	6c84      	or      	r2, r1
    8700:	b340      	st.w      	r2, (r3, 0x0)
    8702:	1b08      	addi      	r3, sp, 32
    8704:	9340      	ld.w      	r2, (r3, 0x0)
    8706:	1b07      	addi      	r3, sp, 28
    8708:	9360      	ld.w      	r3, (r3, 0x0)
    870a:	6d4b      	mov      	r5, r2
    870c:	6d0f      	mov      	r4, r3
    870e:	84c0      	ld.b      	r6, (r4, 0x0)
    8710:	2400      	addi      	r4, 1      	//0x1
    8712:	0403      	br      	0x8718	//8718 <handle_ldrh_ldrhs_ldrw_ldm+0x268>
    8714:	3501      	movi      	r5, 1      	//0x1
    8716:	0401      	br      	0x8718	//8718 <handle_ldrh_ldrhs_ldrw_ldm+0x268>
    8718:	1b08      	addi      	r3, sp, 32
    871a:	b3a0      	st.w      	r5, (r3, 0x0)
    871c:	1b06      	addi      	r3, sp, 24
    871e:	b3c0      	st.w      	r6, (r3, 0x0)
    8720:	1b07      	addi      	r3, sp, 28
    8722:	b380      	st.w      	r4, (r3, 0x0)
    8724:	1b06      	addi      	r3, sp, 24
    8726:	9360      	ld.w      	r3, (r3, 0x0)
    8728:	4330      	lsli      	r1, r3, 16
    872a:	1b05      	addi      	r3, sp, 20
    872c:	1a05      	addi      	r2, sp, 20
    872e:	9240      	ld.w      	r2, (r2, 0x0)
    8730:	6c84      	or      	r2, r1
    8732:	b340      	st.w      	r2, (r3, 0x0)
    8734:	1b08      	addi      	r3, sp, 32
    8736:	9340      	ld.w      	r2, (r3, 0x0)
    8738:	1b07      	addi      	r3, sp, 28
    873a:	9360      	ld.w      	r3, (r3, 0x0)
    873c:	6d4b      	mov      	r5, r2
    873e:	6d0f      	mov      	r4, r3
    8740:	84c0      	ld.b      	r6, (r4, 0x0)
    8742:	2400      	addi      	r4, 1      	//0x1
    8744:	0403      	br      	0x874a	//874a <handle_ldrh_ldrhs_ldrw_ldm+0x29a>
    8746:	3501      	movi      	r5, 1      	//0x1
    8748:	0401      	br      	0x874a	//874a <handle_ldrh_ldrhs_ldrw_ldm+0x29a>
    874a:	1b08      	addi      	r3, sp, 32
    874c:	b3a0      	st.w      	r5, (r3, 0x0)
    874e:	1b06      	addi      	r3, sp, 24
    8750:	b3c0      	st.w      	r6, (r3, 0x0)
    8752:	1b07      	addi      	r3, sp, 28
    8754:	b380      	st.w      	r4, (r3, 0x0)
    8756:	1b06      	addi      	r3, sp, 24
    8758:	9360      	ld.w      	r3, (r3, 0x0)
    875a:	4338      	lsli      	r1, r3, 24
    875c:	1b05      	addi      	r3, sp, 20
    875e:	1a05      	addi      	r2, sp, 20
    8760:	9240      	ld.w      	r2, (r2, 0x0)
    8762:	6c84      	or      	r2, r1
    8764:	b340      	st.w      	r2, (r3, 0x0)
    8766:	1b08      	addi      	r3, sp, 32
    8768:	9360      	ld.w      	r3, (r3, 0x0)
    876a:	e92300ae 	bnez      	r3, 0x88c6	//88c6 <handle_ldrh_ldrhs_ldrw_ldm+0x416>
		if(put_regs_value(tmpval32, regz, regs) != 0){
    876e:	1905      	addi      	r1, sp, 20
    8770:	1a13      	addi      	r2, sp, 76
    8772:	6cfb      	mov      	r3, sp
    8774:	9100      	ld.w      	r0, (r1, 0x0)
    8776:	9220      	ld.w      	r1, (r2, 0x0)
    8778:	9340      	ld.w      	r2, (r3, 0x0)
    877a:	e3fff1ad 	bsr      	0x6ad4	//6ad4 <put_regs_value>
    877e:	c4004820 	lsli      	r0, r0, 0
    8782:	6cc3      	mov      	r3, r0
    8784:	e903009d 	bez      	r3, 0x88be	//88be <handle_ldrh_ldrhs_ldrw_ldm+0x40e>
			goto fault;
    8788:	049f      	br      	0x88c6	//88c6 <handle_ldrh_ldrhs_ldrw_ldm+0x416>
		}
		break;
	case 7: // ldm	
		for(i = 0; i <= (instr & 0x1f); i++){
    878a:	1b16      	addi      	r3, sp, 88
    878c:	3200      	movi      	r2, 0      	//0x0
    878e:	b340      	st.w      	r2, (r3, 0x0)
    8790:	0489      	br      	0x88a2	//88a2 <handle_ldrh_ldrhs_ldrw_ldm+0x3f2>
			get32_unaligned_check(tmpval32, dataregx + i * 4);
    8792:	1b04      	addi      	r3, sp, 16
    8794:	3200      	movi      	r2, 0      	//0x0
    8796:	b340      	st.w      	r2, (r3, 0x0)
    8798:	1b16      	addi      	r3, sp, 88
    879a:	9360      	ld.w      	r3, (r3, 0x0)
    879c:	4322      	lsli      	r1, r3, 2
    879e:	1b03      	addi      	r3, sp, 12
    87a0:	1a12      	addi      	r2, sp, 72
    87a2:	9240      	ld.w      	r2, (r2, 0x0)
    87a4:	5948      	addu      	r2, r1, r2
    87a6:	b340      	st.w      	r2, (r3, 0x0)
    87a8:	1b04      	addi      	r3, sp, 16
    87aa:	9340      	ld.w      	r2, (r3, 0x0)
    87ac:	1b03      	addi      	r3, sp, 12
    87ae:	9360      	ld.w      	r3, (r3, 0x0)
    87b0:	6d4b      	mov      	r5, r2
    87b2:	6d0f      	mov      	r4, r3
    87b4:	84c0      	ld.b      	r6, (r4, 0x0)
    87b6:	2400      	addi      	r4, 1      	//0x1
    87b8:	0406      	br      	0x87c4	//87c4 <handle_ldrh_ldrhs_ldrw_ldm+0x314>
    87ba:	3501      	movi      	r5, 1      	//0x1
    87bc:	0404      	br      	0x87c4	//87c4 <handle_ldrh_ldrhs_ldrw_ldm+0x314>
    87be:	0000      	.short	0x0000
    87c0:	00006ad4 	.long	0x00006ad4
    87c4:	1b04      	addi      	r3, sp, 16
    87c6:	b3a0      	st.w      	r5, (r3, 0x0)
    87c8:	1b02      	addi      	r3, sp, 8
    87ca:	b3c0      	st.w      	r6, (r3, 0x0)
    87cc:	1b03      	addi      	r3, sp, 12
    87ce:	b380      	st.w      	r4, (r3, 0x0)
    87d0:	1b05      	addi      	r3, sp, 20
    87d2:	1a02      	addi      	r2, sp, 8
    87d4:	9240      	ld.w      	r2, (r2, 0x0)
    87d6:	b340      	st.w      	r2, (r3, 0x0)
    87d8:	1b04      	addi      	r3, sp, 16
    87da:	9340      	ld.w      	r2, (r3, 0x0)
    87dc:	1b03      	addi      	r3, sp, 12
    87de:	9360      	ld.w      	r3, (r3, 0x0)
    87e0:	6d4b      	mov      	r5, r2
    87e2:	6d0f      	mov      	r4, r3
    87e4:	84c0      	ld.b      	r6, (r4, 0x0)
    87e6:	2400      	addi      	r4, 1      	//0x1
    87e8:	0403      	br      	0x87ee	//87ee <handle_ldrh_ldrhs_ldrw_ldm+0x33e>
    87ea:	3501      	movi      	r5, 1      	//0x1
    87ec:	0401      	br      	0x87ee	//87ee <handle_ldrh_ldrhs_ldrw_ldm+0x33e>
    87ee:	1b04      	addi      	r3, sp, 16
    87f0:	b3a0      	st.w      	r5, (r3, 0x0)
    87f2:	1b02      	addi      	r3, sp, 8
    87f4:	b3c0      	st.w      	r6, (r3, 0x0)
    87f6:	1b03      	addi      	r3, sp, 12
    87f8:	b380      	st.w      	r4, (r3, 0x0)
    87fa:	1b02      	addi      	r3, sp, 8
    87fc:	9360      	ld.w      	r3, (r3, 0x0)
    87fe:	4328      	lsli      	r1, r3, 8
    8800:	1b05      	addi      	r3, sp, 20
    8802:	1a05      	addi      	r2, sp, 20
    8804:	9240      	ld.w      	r2, (r2, 0x0)
    8806:	6c84      	or      	r2, r1
    8808:	b340      	st.w      	r2, (r3, 0x0)
    880a:	1b04      	addi      	r3, sp, 16
    880c:	9340      	ld.w      	r2, (r3, 0x0)
    880e:	1b03      	addi      	r3, sp, 12
    8810:	9360      	ld.w      	r3, (r3, 0x0)
    8812:	6d4b      	mov      	r5, r2
    8814:	6d0f      	mov      	r4, r3
    8816:	84c0      	ld.b      	r6, (r4, 0x0)
    8818:	2400      	addi      	r4, 1      	//0x1
    881a:	0403      	br      	0x8820	//8820 <handle_ldrh_ldrhs_ldrw_ldm+0x370>
    881c:	3501      	movi      	r5, 1      	//0x1
    881e:	0401      	br      	0x8820	//8820 <handle_ldrh_ldrhs_ldrw_ldm+0x370>
    8820:	1b04      	addi      	r3, sp, 16
    8822:	b3a0      	st.w      	r5, (r3, 0x0)
    8824:	1b02      	addi      	r3, sp, 8
    8826:	b3c0      	st.w      	r6, (r3, 0x0)
    8828:	1b03      	addi      	r3, sp, 12
    882a:	b380      	st.w      	r4, (r3, 0x0)
    882c:	1b02      	addi      	r3, sp, 8
    882e:	9360      	ld.w      	r3, (r3, 0x0)
    8830:	4330      	lsli      	r1, r3, 16
    8832:	1b05      	addi      	r3, sp, 20
    8834:	1a05      	addi      	r2, sp, 20
    8836:	9240      	ld.w      	r2, (r2, 0x0)
    8838:	6c84      	or      	r2, r1
    883a:	b340      	st.w      	r2, (r3, 0x0)
    883c:	1b04      	addi      	r3, sp, 16
    883e:	9340      	ld.w      	r2, (r3, 0x0)
    8840:	1b03      	addi      	r3, sp, 12
    8842:	9360      	ld.w      	r3, (r3, 0x0)
    8844:	6d4b      	mov      	r5, r2
    8846:	6d0f      	mov      	r4, r3
    8848:	84c0      	ld.b      	r6, (r4, 0x0)
    884a:	2400      	addi      	r4, 1      	//0x1
    884c:	0403      	br      	0x8852	//8852 <handle_ldrh_ldrhs_ldrw_ldm+0x3a2>
    884e:	3501      	movi      	r5, 1      	//0x1
    8850:	0401      	br      	0x8852	//8852 <handle_ldrh_ldrhs_ldrw_ldm+0x3a2>
    8852:	1b04      	addi      	r3, sp, 16
    8854:	b3a0      	st.w      	r5, (r3, 0x0)
    8856:	1b02      	addi      	r3, sp, 8
    8858:	b3c0      	st.w      	r6, (r3, 0x0)
    885a:	1b03      	addi      	r3, sp, 12
    885c:	b380      	st.w      	r4, (r3, 0x0)
    885e:	1b02      	addi      	r3, sp, 8
    8860:	9360      	ld.w      	r3, (r3, 0x0)
    8862:	4338      	lsli      	r1, r3, 24
    8864:	1b05      	addi      	r3, sp, 20
    8866:	1a05      	addi      	r2, sp, 20
    8868:	9240      	ld.w      	r2, (r2, 0x0)
    886a:	6c84      	or      	r2, r1
    886c:	b340      	st.w      	r2, (r3, 0x0)
    886e:	1b04      	addi      	r3, sp, 16
    8870:	9360      	ld.w      	r3, (r3, 0x0)
    8872:	e923002a 	bnez      	r3, 0x88c6	//88c6 <handle_ldrh_ldrhs_ldrw_ldm+0x416>
			if(put_regs_value(tmpval32, regy + i, regs) != 0){
    8876:	1a14      	addi      	r2, sp, 80
    8878:	1b16      	addi      	r3, sp, 88
    887a:	9240      	ld.w      	r2, (r2, 0x0)
    887c:	9360      	ld.w      	r3, (r3, 0x0)
    887e:	5a4c      	addu      	r2, r2, r3
    8880:	1905      	addi      	r1, sp, 20
    8882:	6cfb      	mov      	r3, sp
    8884:	9100      	ld.w      	r0, (r1, 0x0)
    8886:	6c4b      	mov      	r1, r2
    8888:	9340      	ld.w      	r2, (r3, 0x0)
    888a:	e3fff125 	bsr      	0x6ad4	//6ad4 <put_regs_value>
    888e:	c4004820 	lsli      	r0, r0, 0
    8892:	6cc3      	mov      	r3, r0
    8894:	e9230018 	bnez      	r3, 0x88c4	//88c4 <handle_ldrh_ldrhs_ldrw_ldm+0x414>
		if(put_regs_value(tmpval32, regz, regs) != 0){
			goto fault;
		}
		break;
	case 7: // ldm	
		for(i = 0; i <= (instr & 0x1f); i++){
    8898:	1b16      	addi      	r3, sp, 88
    889a:	1a16      	addi      	r2, sp, 88
    889c:	9240      	ld.w      	r2, (r2, 0x0)
    889e:	2200      	addi      	r2, 1      	//0x1
    88a0:	b340      	st.w      	r2, (r3, 0x0)
    88a2:	1b01      	addi      	r3, sp, 4
    88a4:	9360      	ld.w      	r3, (r3, 0x0)
    88a6:	e443201f 	andi      	r2, r3, 31
    88aa:	1b16      	addi      	r3, sp, 88
    88ac:	9360      	ld.w      	r3, (r3, 0x0)
    88ae:	64c8      	cmphs      	r2, r3
    88b0:	0b71      	bt      	0x8792	//8792 <handle_ldrh_ldrhs_ldrw_ldm+0x2e2>
			get32_unaligned_check(tmpval32, dataregx + i * 4);
			if(put_regs_value(tmpval32, regy + i, regs) != 0){
				goto fault;
			}
		}
		return HANDLER_SUCCESS;
    88b2:	3300      	movi      	r3, 0      	//0x0
    88b4:	040a      	br      	0x88c8	//88c8 <handle_ldrh_ldrhs_ldrw_ldm+0x418>
	case 1: // ldrh
		get16_unaligned_check(tmpval16, destaddr);
		if(put_regs_value((unsigned int)tmpval16, regz, regs) != 0){
			goto fault;
		}
		break;
    88b6:	6c00      	or      	r0, r0
    88b8:	0404      	br      	0x88c0	//88c0 <handle_ldrh_ldrhs_ldrw_ldm+0x410>
	case 5: // ldrhs
		get16_unaligned_check(tmpval16, destaddr);
		if(put_regs_value((unsigned int)((short)tmpval16), regz, regs) != 0){
			goto fault;
		}
		break;
    88ba:	6c00      	or      	r0, r0
    88bc:	0402      	br      	0x88c0	//88c0 <handle_ldrh_ldrhs_ldrw_ldm+0x410>
	case 2: // ldrw
		get32_unaligned_check(tmpval32, destaddr);
		if(put_regs_value(tmpval32, regz, regs) != 0){
			goto fault;
		}
		break;
    88be:	6c00      	or      	r0, r0
		return HANDLER_SUCCESS;
	default:
		goto fault;
	}
	
	return HANDLER_SUCCESS;
    88c0:	3300      	movi      	r3, 0      	//0x0
    88c2:	0403      	br      	0x88c8	//88c8 <handle_ldrh_ldrhs_ldrw_ldm+0x418>
		break;
	case 7: // ldm	
		for(i = 0; i <= (instr & 0x1f); i++){
			get32_unaligned_check(tmpval32, dataregx + i * 4);
			if(put_regs_value(tmpval32, regy + i, regs) != 0){
				goto fault;
    88c4:	6c00      	or      	r0, r0
		goto fault;
	}
	
	return HANDLER_SUCCESS;
fault:
	return HANDLER_FAILURE;	
    88c6:	3301      	movi      	r3, 1      	//0x1
}
    88c8:	6c0f      	mov      	r0, r3
    88ca:	1417      	addi      	sp, sp, 92
    88cc:	1493      	pop      	r4-r6, r15
	...

000088d0 <handle_strh_strw_stm>:

static int 
handle_strh_strw_stm(unsigned long instr, Ckcore_SavedRegisters *regs){
    88d0:	14d3      	push      	r4-r6, r15
    88d2:	1434      	subi      	sp, sp, 80
    88d4:	1b01      	addi      	r3, sp, 4
    88d6:	b300      	st.w      	r0, (r3, 0x0)
    88d8:	6cfb      	mov      	r3, sp
    88da:	b320      	st.w      	r1, (r3, 0x0)
	unsigned int regx = (instr >> 16) & 0x1f;
    88dc:	1b01      	addi      	r3, sp, 4
    88de:	9360      	ld.w      	r3, (r3, 0x0)
    88e0:	4b50      	lsri      	r2, r3, 16
    88e2:	1b12      	addi      	r3, sp, 72
    88e4:	e442201f 	andi      	r2, r2, 31
    88e8:	b340      	st.w      	r2, (r3, 0x0)
	unsigned int regy = (instr >> 21) & 0x1f;
    88ea:	1b01      	addi      	r3, sp, 4
    88ec:	9360      	ld.w      	r3, (r3, 0x0)
    88ee:	4b55      	lsri      	r2, r3, 21
    88f0:	1b11      	addi      	r3, sp, 68
    88f2:	e442201f 	andi      	r2, r2, 31
    88f6:	b340      	st.w      	r2, (r3, 0x0)
	unsigned int regz = instr & 0x1f;
    88f8:	1b10      	addi      	r3, sp, 64
    88fa:	1a01      	addi      	r2, sp, 4
    88fc:	9240      	ld.w      	r2, (r2, 0x0)
    88fe:	e442201f 	andi      	r2, r2, 31
    8902:	b340      	st.w      	r2, (r3, 0x0)
	unsigned int dataregx, dataregy, dataregz;
	unsigned int destaddr, tmpval32, i;

	dataregx = get_regs_value(regx, regs);
    8904:	1c0f      	addi      	r4, sp, 60
    8906:	1a12      	addi      	r2, sp, 72
    8908:	6cfb      	mov      	r3, sp
    890a:	9200      	ld.w      	r0, (r2, 0x0)
    890c:	9320      	ld.w      	r1, (r3, 0x0)
    890e:	e3fff0b5 	bsr      	0x6a78	//6a78 <get_regs_value>
    8912:	c4004820 	lsli      	r0, r0, 0
    8916:	b400      	st.w      	r0, (r4, 0x0)
	dataregy = get_regs_value(regy, regs);
    8918:	1c0e      	addi      	r4, sp, 56
    891a:	1a11      	addi      	r2, sp, 68
    891c:	6cfb      	mov      	r3, sp
    891e:	9200      	ld.w      	r0, (r2, 0x0)
    8920:	9320      	ld.w      	r1, (r3, 0x0)
    8922:	e3fff0ab 	bsr      	0x6a78	//6a78 <get_regs_value>
    8926:	c4004820 	lsli      	r0, r0, 0
    892a:	b400      	st.w      	r0, (r4, 0x0)

	destaddr = dataregx + dataregy * ((instr >> 5) & 0x1f);
    892c:	1b01      	addi      	r3, sp, 4
    892e:	9360      	ld.w      	r3, (r3, 0x0)
    8930:	4b65      	lsri      	r3, r3, 5
    8932:	e443201f 	andi      	r2, r3, 31
    8936:	1b0e      	addi      	r3, sp, 56
    8938:	9360      	ld.w      	r3, (r3, 0x0)
    893a:	c4628421 	mult      	r1, r2, r3
    893e:	1b0d      	addi      	r3, sp, 52
    8940:	1a0f      	addi      	r2, sp, 60
    8942:	9240      	ld.w      	r2, (r2, 0x0)
    8944:	5948      	addu      	r2, r1, r2
    8946:	b340      	st.w      	r2, (r3, 0x0)

	switch((instr >> 10) & 0x3f){
    8948:	1b01      	addi      	r3, sp, 4
    894a:	9360      	ld.w      	r3, (r3, 0x0)
    894c:	4b6a      	lsri      	r3, r3, 10
    894e:	e463203f 	andi      	r3, r3, 63
    8952:	3b42      	cmpnei      	r3, 2
    8954:	0c39      	bf      	0x89c6	//89c6 <handle_strh_strw_stm+0xf6>
    8956:	3b47      	cmpnei      	r3, 7
    8958:	0c6f      	bf      	0x8a36	//8a36 <handle_strh_strw_stm+0x166>
    895a:	3b41      	cmpnei      	r3, 1
    895c:	08c0      	bt      	0x8adc	//8adc <handle_strh_strw_stm+0x20c>
	case 1: // strh
		dataregz = get_regs_value(regz, regs);
    895e:	1c0c      	addi      	r4, sp, 48
    8960:	1a10      	addi      	r2, sp, 64
    8962:	6cfb      	mov      	r3, sp
    8964:	9200      	ld.w      	r0, (r2, 0x0)
    8966:	9320      	ld.w      	r1, (r3, 0x0)
    8968:	e3fff088 	bsr      	0x6a78	//6a78 <get_regs_value>
    896c:	c4004820 	lsli      	r0, r0, 0
    8970:	b400      	st.w      	r0, (r4, 0x0)
		put16_unaligned_check(dataregz, destaddr);
    8972:	1b0b      	addi      	r3, sp, 44
    8974:	3200      	movi      	r2, 0      	//0x0
    8976:	b340      	st.w      	r2, (r3, 0x0)
    8978:	1b0a      	addi      	r3, sp, 40
    897a:	1a0c      	addi      	r2, sp, 48
    897c:	9240      	ld.w      	r2, (r2, 0x0)
    897e:	b340      	st.w      	r2, (r3, 0x0)
    8980:	1b09      	addi      	r3, sp, 36
    8982:	1a0d      	addi      	r2, sp, 52
    8984:	9240      	ld.w      	r2, (r2, 0x0)
    8986:	b340      	st.w      	r2, (r3, 0x0)
    8988:	1b0b      	addi      	r3, sp, 44
    898a:	9320      	ld.w      	r1, (r3, 0x0)
    898c:	1b0a      	addi      	r3, sp, 40
    898e:	9340      	ld.w      	r2, (r3, 0x0)
    8990:	1b09      	addi      	r3, sp, 36
    8992:	9360      	ld.w      	r3, (r3, 0x0)
    8994:	6d87      	mov      	r6, r1
    8996:	6d4b      	mov      	r5, r2
    8998:	6d0f      	mov      	r4, r3
    899a:	a4a0      	st.b      	r5, (r4, 0x0)
    899c:	2400      	addi      	r4, 1      	//0x1
    899e:	4da8      	lsri      	r5, r5, 8
    89a0:	a4a0      	st.b      	r5, (r4, 0x0)
    89a2:	0407      	br      	0x89b0	//89b0 <handle_strh_strw_stm+0xe0>
    89a4:	3601      	movi      	r6, 1      	//0x1
    89a6:	0405      	br      	0x89b0	//89b0 <handle_strh_strw_stm+0xe0>
    89a8:	00006ad4 	.long	0x00006ad4
    89ac:	00006a78 	.long	0x00006a78
    89b0:	1b0b      	addi      	r3, sp, 44
    89b2:	b3c0      	st.w      	r6, (r3, 0x0)
    89b4:	1b0a      	addi      	r3, sp, 40
    89b6:	b3a0      	st.w      	r5, (r3, 0x0)
    89b8:	1b09      	addi      	r3, sp, 36
    89ba:	b380      	st.w      	r4, (r3, 0x0)
    89bc:	1b0b      	addi      	r3, sp, 44
    89be:	9360      	ld.w      	r3, (r3, 0x0)
    89c0:	e923008f 	bnez      	r3, 0x8ade	//8ade <handle_strh_strw_stm+0x20e>
		break;
    89c4:	048a      	br      	0x8ad8	//8ad8 <handle_strh_strw_stm+0x208>
	case 2: // strw
		dataregz = get_regs_value(regz, regs);
    89c6:	1c0c      	addi      	r4, sp, 48
    89c8:	1a10      	addi      	r2, sp, 64
    89ca:	6cfb      	mov      	r3, sp
    89cc:	9200      	ld.w      	r0, (r2, 0x0)
    89ce:	9320      	ld.w      	r1, (r3, 0x0)
    89d0:	e3fff054 	bsr      	0x6a78	//6a78 <get_regs_value>
    89d4:	c4004820 	lsli      	r0, r0, 0
    89d8:	b400      	st.w      	r0, (r4, 0x0)
		put32_unaligned_check(dataregz, destaddr);
    89da:	1b08      	addi      	r3, sp, 32
    89dc:	3200      	movi      	r2, 0      	//0x0
    89de:	b340      	st.w      	r2, (r3, 0x0)
    89e0:	1b07      	addi      	r3, sp, 28
    89e2:	1a0c      	addi      	r2, sp, 48
    89e4:	9240      	ld.w      	r2, (r2, 0x0)
    89e6:	b340      	st.w      	r2, (r3, 0x0)
    89e8:	1b06      	addi      	r3, sp, 24
    89ea:	1a0d      	addi      	r2, sp, 52
    89ec:	9240      	ld.w      	r2, (r2, 0x0)
    89ee:	b340      	st.w      	r2, (r3, 0x0)
    89f0:	1b08      	addi      	r3, sp, 32
    89f2:	9320      	ld.w      	r1, (r3, 0x0)
    89f4:	1b07      	addi      	r3, sp, 28
    89f6:	9340      	ld.w      	r2, (r3, 0x0)
    89f8:	1b06      	addi      	r3, sp, 24
    89fa:	9360      	ld.w      	r3, (r3, 0x0)
    89fc:	6d87      	mov      	r6, r1
    89fe:	6d4b      	mov      	r5, r2
    8a00:	6d0f      	mov      	r4, r3
    8a02:	a4a0      	st.b      	r5, (r4, 0x0)
    8a04:	2400      	addi      	r4, 1      	//0x1
    8a06:	4da8      	lsri      	r5, r5, 8
    8a08:	a4a0      	st.b      	r5, (r4, 0x0)
    8a0a:	2400      	addi      	r4, 1      	//0x1
    8a0c:	4da8      	lsri      	r5, r5, 8
    8a0e:	a4a0      	st.b      	r5, (r4, 0x0)
    8a10:	2400      	addi      	r4, 1      	//0x1
    8a12:	4da8      	lsri      	r5, r5, 8
    8a14:	a4a0      	st.b      	r5, (r4, 0x0)
    8a16:	0405      	br      	0x8a20	//8a20 <handle_strh_strw_stm+0x150>
    8a18:	3601      	movi      	r6, 1      	//0x1
    8a1a:	0403      	br      	0x8a20	//8a20 <handle_strh_strw_stm+0x150>
    8a1c:	00006a78 	.long	0x00006a78
    8a20:	1b08      	addi      	r3, sp, 32
    8a22:	b3c0      	st.w      	r6, (r3, 0x0)
    8a24:	1b07      	addi      	r3, sp, 28
    8a26:	b3a0      	st.w      	r5, (r3, 0x0)
    8a28:	1b06      	addi      	r3, sp, 24
    8a2a:	b380      	st.w      	r4, (r3, 0x0)
    8a2c:	1b08      	addi      	r3, sp, 32
    8a2e:	9360      	ld.w      	r3, (r3, 0x0)
    8a30:	e9230057 	bnez      	r3, 0x8ade	//8ade <handle_strh_strw_stm+0x20e>
		break;
    8a34:	0452      	br      	0x8ad8	//8ad8 <handle_strh_strw_stm+0x208>
	case 7: //  stm
		for(i = 0; i <= (instr & 0x1f); i++){
    8a36:	1b13      	addi      	r3, sp, 76
    8a38:	3200      	movi      	r2, 0      	//0x0
    8a3a:	b340      	st.w      	r2, (r3, 0x0)
    8a3c:	0445      	br      	0x8ac6	//8ac6 <handle_strh_strw_stm+0x1f6>
			tmpval32 = get_regs_value(regy + i, regs);
    8a3e:	1a11      	addi      	r2, sp, 68
    8a40:	1b13      	addi      	r3, sp, 76
    8a42:	9240      	ld.w      	r2, (r2, 0x0)
    8a44:	9360      	ld.w      	r3, (r3, 0x0)
    8a46:	5a4c      	addu      	r2, r2, r3
    8a48:	1c05      	addi      	r4, sp, 20
    8a4a:	6cfb      	mov      	r3, sp
    8a4c:	6c0b      	mov      	r0, r2
    8a4e:	9320      	ld.w      	r1, (r3, 0x0)
    8a50:	e3fff014 	bsr      	0x6a78	//6a78 <get_regs_value>
    8a54:	c4004820 	lsli      	r0, r0, 0
    8a58:	b400      	st.w      	r0, (r4, 0x0)
			put32_unaligned_check(tmpval32, dataregx + 4 * i);
    8a5a:	1b04      	addi      	r3, sp, 16
    8a5c:	3200      	movi      	r2, 0      	//0x0
    8a5e:	b340      	st.w      	r2, (r3, 0x0)
    8a60:	1b03      	addi      	r3, sp, 12
    8a62:	1a05      	addi      	r2, sp, 20
    8a64:	9240      	ld.w      	r2, (r2, 0x0)
    8a66:	b340      	st.w      	r2, (r3, 0x0)
    8a68:	1b13      	addi      	r3, sp, 76
    8a6a:	9360      	ld.w      	r3, (r3, 0x0)
    8a6c:	4322      	lsli      	r1, r3, 2
    8a6e:	1b02      	addi      	r3, sp, 8
    8a70:	1a0f      	addi      	r2, sp, 60
    8a72:	9240      	ld.w      	r2, (r2, 0x0)
    8a74:	5948      	addu      	r2, r1, r2
    8a76:	b340      	st.w      	r2, (r3, 0x0)
    8a78:	1b04      	addi      	r3, sp, 16
    8a7a:	9320      	ld.w      	r1, (r3, 0x0)
    8a7c:	1b03      	addi      	r3, sp, 12
    8a7e:	9340      	ld.w      	r2, (r3, 0x0)
    8a80:	1b02      	addi      	r3, sp, 8
    8a82:	9360      	ld.w      	r3, (r3, 0x0)
    8a84:	6d87      	mov      	r6, r1
    8a86:	6d4b      	mov      	r5, r2
    8a88:	6d0f      	mov      	r4, r3
    8a8a:	a4a0      	st.b      	r5, (r4, 0x0)
    8a8c:	2400      	addi      	r4, 1      	//0x1
    8a8e:	4da8      	lsri      	r5, r5, 8
    8a90:	a4a0      	st.b      	r5, (r4, 0x0)
    8a92:	2400      	addi      	r4, 1      	//0x1
    8a94:	4da8      	lsri      	r5, r5, 8
    8a96:	a4a0      	st.b      	r5, (r4, 0x0)
    8a98:	2400      	addi      	r4, 1      	//0x1
    8a9a:	4da8      	lsri      	r5, r5, 8
    8a9c:	a4a0      	st.b      	r5, (r4, 0x0)
    8a9e:	0405      	br      	0x8aa8	//8aa8 <handle_strh_strw_stm+0x1d8>
    8aa0:	3601      	movi      	r6, 1      	//0x1
    8aa2:	0403      	br      	0x8aa8	//8aa8 <handle_strh_strw_stm+0x1d8>
    8aa4:	00006a78 	.long	0x00006a78
    8aa8:	1b04      	addi      	r3, sp, 16
    8aaa:	b3c0      	st.w      	r6, (r3, 0x0)
    8aac:	1b03      	addi      	r3, sp, 12
    8aae:	b3a0      	st.w      	r5, (r3, 0x0)
    8ab0:	1b02      	addi      	r3, sp, 8
    8ab2:	b380      	st.w      	r4, (r3, 0x0)
    8ab4:	1b04      	addi      	r3, sp, 16
    8ab6:	9360      	ld.w      	r3, (r3, 0x0)
    8ab8:	e9230013 	bnez      	r3, 0x8ade	//8ade <handle_strh_strw_stm+0x20e>
	case 2: // strw
		dataregz = get_regs_value(regz, regs);
		put32_unaligned_check(dataregz, destaddr);
		break;
	case 7: //  stm
		for(i = 0; i <= (instr & 0x1f); i++){
    8abc:	1b13      	addi      	r3, sp, 76
    8abe:	1a13      	addi      	r2, sp, 76
    8ac0:	9240      	ld.w      	r2, (r2, 0x0)
    8ac2:	2200      	addi      	r2, 1      	//0x1
    8ac4:	b340      	st.w      	r2, (r3, 0x0)
    8ac6:	1b01      	addi      	r3, sp, 4
    8ac8:	9360      	ld.w      	r3, (r3, 0x0)
    8aca:	e443201f 	andi      	r2, r3, 31
    8ace:	1b13      	addi      	r3, sp, 76
    8ad0:	9360      	ld.w      	r3, (r3, 0x0)
    8ad2:	64c8      	cmphs      	r2, r3
    8ad4:	0bb5      	bt      	0x8a3e	//8a3e <handle_strh_strw_stm+0x16e>
			tmpval32 = get_regs_value(regy + i, regs);
			put32_unaligned_check(tmpval32, dataregx + 4 * i);
		}
	default:
		goto fault;
    8ad6:	0404      	br      	0x8ade	//8ade <handle_strh_strw_stm+0x20e>
	}

	return HANDLER_SUCCESS;
    8ad8:	3300      	movi      	r3, 0      	//0x0
    8ada:	0403      	br      	0x8ae0	//8ae0 <handle_strh_strw_stm+0x210>
		for(i = 0; i <= (instr & 0x1f); i++){
			tmpval32 = get_regs_value(regy + i, regs);
			put32_unaligned_check(tmpval32, dataregx + 4 * i);
		}
	default:
		goto fault;
    8adc:	6c00      	or      	r0, r0
	}

	return HANDLER_SUCCESS;
fault:
	return HANDLER_FAILURE;	
    8ade:	3301      	movi      	r3, 1      	//0x1
}
    8ae0:	6c0f      	mov      	r0, r3
    8ae2:	1414      	addi      	sp, sp, 80
    8ae4:	1493      	pop      	r4-r6, r15
	...

00008ae8 <CK_INTC_AlignmentService>:

void CK_INTC_AlignmentService(int vector, Ckcore_SavedRegisters *regs)
{
    8ae8:	14d3      	push      	r4-r6, r15
    8aea:	142e      	subi      	sp, sp, 56
    8aec:	1b01      	addi      	r3, sp, 4
    8aee:	b300      	st.w      	r0, (r3, 0x0)
    8af0:	6cfb      	mov      	r3, sp
    8af2:	b320      	st.w      	r1, (r3, 0x0)
	int err;
	unsigned long instr = 0, instrptr;
    8af4:	1b0d      	addi      	r3, sp, 52
    8af6:	3200      	movi      	r2, 0      	//0x0
    8af8:	b340      	st.w      	r2, (r3, 0x0)
	unsigned int fault;
	unsigned short tinstr = 0;
    8afa:	e46e0025 	addi      	r3, sp, 38      	//0x26
    8afe:	3200      	movi      	r2, 0      	//0x0
    8b00:	ab40      	st.h      	r2, (r3, 0x0)
	int (*handler)(unsigned long inst, Ckcore_SavedRegisters *regs) = NULL;
    8b02:	1b0b      	addi      	r3, sp, 44
    8b04:	3200      	movi      	r2, 0      	//0x0
    8b06:	b340      	st.w      	r2, (r3, 0x0)
	int isize = 2;
    8b08:	1b0a      	addi      	r3, sp, 40
    8b0a:	3202      	movi      	r2, 2      	//0x2
    8b0c:	b340      	st.w      	r2, (r3, 0x0)
printf("....alignment!\n");
    8b0e:	1010      	lrw      	r0, 0x107a8	//107a8 <__etext+0xbf8>
    8b10:	e0002f20 	bsr      	0xe950	//e950 <printf>
    8b14:	c4004820 	lsli      	r0, r0, 0
    CK_INTC_UpdateExceptStatus(vector);
    8b18:	1b01      	addi      	r3, sp, 4
    8b1a:	9300      	ld.w      	r0, (r3, 0x0)
    8b1c:	e3ffee8c 	bsr      	0x6834	//6834 <CK_INTC_UpdateExceptStatus>
    8b20:	c4004820 	lsli      	r0, r0, 0

	instrptr = instruction_pointer(regs);
    8b24:	1b08      	addi      	r3, sp, 32
    8b26:	6cbb      	mov      	r2, sp
    8b28:	9240      	ld.w      	r2, (r2, 0x0)
    8b2a:	9240      	ld.w      	r2, (r2, 0x0)
    8b2c:	b340      	st.w      	r2, (r3, 0x0)

	fault = __get_user(tinstr, (unsigned short *)(instrptr & ~1));
    8b2e:	1b08      	addi      	r3, sp, 32
    8b30:	9360      	ld.w      	r3, (r3, 0x0)
    8b32:	3b80      	bclri      	r3, 0
    8b34:	6c8f      	mov      	r2, r3
    8b36:	3100      	movi      	r1, 0      	//0x0
    8b38:	3300      	movi      	r3, 0      	//0x0
    8b3a:	2b0d      	subi      	r3, 14      	//0xe
    8b3c:	6d47      	mov      	r5, r1
    8b3e:	6d0f      	mov      	r4, r3
    8b40:	8ac0      	ld.h      	r6, (r2, 0x0)
    8b42:	040b      	br      	0x8b58	//8b58 <CK_INTC_AlignmentService+0x70>
    8b44:	6d53      	mov      	r5, r4
    8b46:	3600      	movi      	r6, 0      	//0x0
    8b48:	0408      	br      	0x8b58	//8b58 <CK_INTC_AlignmentService+0x70>
    8b4a:	0000      	.short	0x0000
    8b4c:	000107a8 	.long	0x000107a8
    8b50:	0000e950 	.long	0x0000e950
    8b54:	00006834 	.long	0x00006834
    8b58:	1b07      	addi      	r3, sp, 28
    8b5a:	b3a0      	st.w      	r5, (r3, 0x0)
    8b5c:	e46e0025 	addi      	r3, sp, 38      	//0x26
    8b60:	abc0      	st.h      	r6, (r3, 0x0)
    8b62:	1b06      	addi      	r3, sp, 24
    8b64:	b380      	st.w      	r4, (r3, 0x0)
    8b66:	1b07      	addi      	r3, sp, 28
    8b68:	9340      	ld.w      	r2, (r3, 0x0)
    8b6a:	1b0c      	addi      	r3, sp, 48
    8b6c:	b340      	st.w      	r2, (r3, 0x0)
	instr = (unsigned long)tinstr;
    8b6e:	1b0d      	addi      	r3, sp, 52
    8b70:	e44e0025 	addi      	r2, sp, 38      	//0x26
    8b74:	8a40      	ld.h      	r2, (r2, 0x0)
    8b76:	7489      	zexth      	r2, r2
    8b78:	b340      	st.w      	r2, (r3, 0x0)

	if (!fault) {
    8b7a:	1b0c      	addi      	r3, sp, 48
    8b7c:	9360      	ld.w      	r3, (r3, 0x0)
    8b7e:	e9230038 	bnez      	r3, 0x8bee	//8bee <CK_INTC_AlignmentService+0x106>
		if (IS_T32(tinstr)) {
    8b82:	e46e0025 	addi      	r3, sp, 38      	//0x26
    8b86:	8b60      	ld.h      	r3, (r3, 0x0)
    8b88:	748d      	zexth      	r2, r3
    8b8a:	33c0      	movi      	r3, 192      	//0xc0
    8b8c:	4368      	lsli      	r3, r3, 8
    8b8e:	68c8      	and      	r3, r2
    8b90:	eb43c000 	cmpnei      	r3, 49152      	//0xc000
    8b94:	082d      	bt      	0x8bee	//8bee <CK_INTC_AlignmentService+0x106>
			unsigned short tinst2 = 0;
    8b96:	e46e0015 	addi      	r3, sp, 22      	//0x16
    8b9a:	3200      	movi      	r2, 0      	//0x0
    8b9c:	ab40      	st.h      	r2, (r3, 0x0)
			fault = __get_user(tinst2, (unsigned short *)(instrptr+2));
    8b9e:	1b08      	addi      	r3, sp, 32
    8ba0:	9360      	ld.w      	r3, (r3, 0x0)
    8ba2:	2301      	addi      	r3, 2      	//0x2
    8ba4:	6c8f      	mov      	r2, r3
    8ba6:	3100      	movi      	r1, 0      	//0x0
    8ba8:	3300      	movi      	r3, 0      	//0x0
    8baa:	2b0d      	subi      	r3, 14      	//0xe
    8bac:	6d47      	mov      	r5, r1
    8bae:	6d0f      	mov      	r4, r3
    8bb0:	8ac0      	ld.h      	r6, (r2, 0x0)
    8bb2:	0404      	br      	0x8bba	//8bba <CK_INTC_AlignmentService+0xd2>
    8bb4:	6d53      	mov      	r5, r4
    8bb6:	3600      	movi      	r6, 0      	//0x0
    8bb8:	0401      	br      	0x8bba	//8bba <CK_INTC_AlignmentService+0xd2>
    8bba:	1b04      	addi      	r3, sp, 16
    8bbc:	b3a0      	st.w      	r5, (r3, 0x0)
    8bbe:	e46e0015 	addi      	r3, sp, 22      	//0x16
    8bc2:	abc0      	st.h      	r6, (r3, 0x0)
    8bc4:	1b03      	addi      	r3, sp, 12
    8bc6:	b380      	st.w      	r4, (r3, 0x0)
    8bc8:	1b04      	addi      	r3, sp, 16
    8bca:	9340      	ld.w      	r2, (r3, 0x0)
    8bcc:	1b0c      	addi      	r3, sp, 48
    8bce:	b340      	st.w      	r2, (r3, 0x0)
			instr = (tinstr << 16) | tinst2;	
    8bd0:	e46e0025 	addi      	r3, sp, 38      	//0x26
    8bd4:	8b60      	ld.h      	r3, (r3, 0x0)
    8bd6:	74cd      	zexth      	r3, r3
    8bd8:	4350      	lsli      	r2, r3, 16
    8bda:	e46e0015 	addi      	r3, sp, 22      	//0x16
    8bde:	8b60      	ld.h      	r3, (r3, 0x0)
    8be0:	74cd      	zexth      	r3, r3
    8be2:	6c8c      	or      	r2, r3
    8be4:	1b0d      	addi      	r3, sp, 52
    8be6:	b340      	st.w      	r2, (r3, 0x0)
			isize = 4;
    8be8:	1b0a      	addi      	r3, sp, 40
    8bea:	3204      	movi      	r2, 4      	//0x4
    8bec:	b340      	st.w      	r2, (r3, 0x0)
		}
	}

	if (fault) {
    8bee:	1b0c      	addi      	r3, sp, 48
    8bf0:	9360      	ld.w      	r3, (r3, 0x0)
    8bf2:	e92300a0 	bnez      	r3, 0x8d32	//8d32 <CK_INTC_AlignmentService+0x24a>
		goto bad_or_fault;
	}

	regs->pc += isize;
    8bf6:	6cfb      	mov      	r3, sp
    8bf8:	9360      	ld.w      	r3, (r3, 0x0)
    8bfa:	9340      	ld.w      	r2, (r3, 0x0)
    8bfc:	1b0a      	addi      	r3, sp, 40
    8bfe:	9360      	ld.w      	r3, (r3, 0x0)
    8c00:	5a4c      	addu      	r2, r2, r3
    8c02:	6cfb      	mov      	r3, sp
    8c04:	9360      	ld.w      	r3, (r3, 0x0)
    8c06:	b340      	st.w      	r2, (r3, 0x0)

	if(2 == isize ) {
    8c08:	1b0a      	addi      	r3, sp, 40
    8c0a:	9360      	ld.w      	r3, (r3, 0x0)
    8c0c:	3b42      	cmpnei      	r3, 2
    8c0e:	0842      	bt      	0x8c92	//8c92 <CK_INTC_AlignmentService+0x1aa>
		switch(instr & 0xf800){
    8c10:	1b0d      	addi      	r3, sp, 52
    8c12:	9340      	ld.w      	r2, (r3, 0x0)
    8c14:	33f8      	movi      	r3, 248      	//0xf8
    8c16:	4368      	lsli      	r3, r3, 8
    8c18:	68c8      	and      	r3, r2
    8c1a:	eb439800 	cmpnei      	r3, 38912      	//0x9800
    8c1e:	0c1c      	bf      	0x8c56	//8c56 <CK_INTC_AlignmentService+0x16e>
    8c20:	eb039800 	cmphsi      	r3, 38913      	//0x9801
    8c24:	080b      	bt      	0x8c3a	//8c3a <CK_INTC_AlignmentService+0x152>
    8c26:	eb438800 	cmpnei      	r3, 34816      	//0x8800
    8c2a:	0c12      	bf      	0x8c4e	//8c4e <CK_INTC_AlignmentService+0x166>
    8c2c:	eb439000 	cmpnei      	r3, 36864      	//0x9000
    8c30:	0c17      	bf      	0x8c5e	//8c5e <CK_INTC_AlignmentService+0x176>
    8c32:	eb430100 	cmpnei      	r3, 256      	//0x100
    8c36:	0c24      	bf      	0x8c7e	//8c7e <CK_INTC_AlignmentService+0x196>
		case 0x0100:
			handler = handle_push_pop_16;
			printf("warnning: push/pop alignment.\n");
			break;
		default:
			goto bad_or_fault;
    8c38:	0480      	br      	0x8d38	//8d38 <CK_INTC_AlignmentService+0x250>
	}

	regs->pc += isize;

	if(2 == isize ) {
		switch(instr & 0xf800){
    8c3a:	eb43b000 	cmpnei      	r3, 45056      	//0xb000
    8c3e:	0c18      	bf      	0x8c6e	//8c6e <CK_INTC_AlignmentService+0x186>
    8c40:	eb43b800 	cmpnei      	r3, 47104      	//0xb800
    8c44:	0c19      	bf      	0x8c76	//8c76 <CK_INTC_AlignmentService+0x18e>
    8c46:	eb43a800 	cmpnei      	r3, 43008      	//0xa800
    8c4a:	0c0e      	bf      	0x8c66	//8c66 <CK_INTC_AlignmentService+0x17e>
		case 0x0100:
			handler = handle_push_pop_16;
			printf("warnning: push/pop alignment.\n");
			break;
		default:
			goto bad_or_fault;
    8c4c:	0476      	br      	0x8d38	//8d38 <CK_INTC_AlignmentService+0x250>
	regs->pc += isize;

	if(2 == isize ) {
		switch(instr & 0xf800){
		case 0x8800: // ldh
			handler = handle_ldh_16;
    8c4e:	1b0b      	addi      	r3, sp, 44
    8c50:	115d      	lrw      	r2, 0x6b38	//6b38 <handle_ldh_16>
    8c52:	b340      	st.w      	r2, (r3, 0x0)
			break;
    8c54:	0456      	br      	0x8d00	//8d00 <CK_INTC_AlignmentService+0x218>
		case 0x9800: // ldw sp
			handler = handle_ldw_sp_16;
    8c56:	1b0b      	addi      	r3, sp, 44
    8c58:	115c      	lrw      	r2, 0x6dac	//6dac <handle_ldw_sp_16>
    8c5a:	b340      	st.w      	r2, (r3, 0x0)
			break;
    8c5c:	0452      	br      	0x8d00	//8d00 <CK_INTC_AlignmentService+0x218>
		case 0x9000: // ldw 
			handler = handle_ldw_16;
    8c5e:	1b0b      	addi      	r3, sp, 44
    8c60:	115b      	lrw      	r2, 0x6c4c	//6c4c <handle_ldw_16>
    8c62:	b340      	st.w      	r2, (r3, 0x0)
			break;
    8c64:	044e      	br      	0x8d00	//8d00 <CK_INTC_AlignmentService+0x218>
		case 0xa800: // ld
			handler = handle_sth_16;
    8c66:	1b0b      	addi      	r3, sp, 44
    8c68:	115a      	lrw      	r2, 0x6f14	//6f14 <handle_sth_16>
    8c6a:	b340      	st.w      	r2, (r3, 0x0)
			break;
    8c6c:	044a      	br      	0x8d00	//8d00 <CK_INTC_AlignmentService+0x218>
		case 0xb000:
			handler = handle_stw_16;
    8c6e:	1b0b      	addi      	r3, sp, 44
    8c70:	1159      	lrw      	r2, 0x6fe0	//6fe0 <handle_stw_16>
    8c72:	b340      	st.w      	r2, (r3, 0x0)
			break;
    8c74:	0446      	br      	0x8d00	//8d00 <CK_INTC_AlignmentService+0x218>
		case 0xb800:
			handler = handle_stw_sp_16;
    8c76:	1b0b      	addi      	r3, sp, 44
    8c78:	1158      	lrw      	r2, 0x70b4	//70b4 <handle_stw_sp_16>
    8c7a:	b340      	st.w      	r2, (r3, 0x0)
			break;
    8c7c:	0442      	br      	0x8d00	//8d00 <CK_INTC_AlignmentService+0x218>
		case 0x0100:
			handler = handle_push_pop_16;
    8c7e:	1b0b      	addi      	r3, sp, 44
    8c80:	1157      	lrw      	r2, 0x718c	//718c <handle_push_pop_16>
    8c82:	b340      	st.w      	r2, (r3, 0x0)
			printf("warnning: push/pop alignment.\n");
    8c84:	1117      	lrw      	r0, 0x107b8	//107b8 <__etext+0xc08>
    8c86:	e0002e65 	bsr      	0xe950	//e950 <printf>
    8c8a:	c4004820 	lsli      	r0, r0, 0
			break;
    8c8e:	6c00      	or      	r0, r0
    8c90:	0438      	br      	0x8d00	//8d00 <CK_INTC_AlignmentService+0x218>
		default:
			goto bad_or_fault;
		}
	} 
	else {
		switch (CODING_BITS(instr)) {
    8c92:	1b0d      	addi      	r3, sp, 52
    8c94:	9360      	ld.w      	r3, (r3, 0x0)
    8c96:	4b7a      	lsri      	r3, r3, 26
    8c98:	437a      	lsli      	r3, r3, 26
    8c9a:	32d8      	movi      	r2, 216      	//0xd8
    8c9c:	4258      	lsli      	r2, r2, 24
    8c9e:	648e      	cmpne      	r3, r2
    8ca0:	0c17      	bf      	0x8cce	//8cce <CK_INTC_AlignmentService+0x1e6>
    8ca2:	32d8      	movi      	r2, 216      	//0xd8
    8ca4:	4258      	lsli      	r2, r2, 24
    8ca6:	64c8      	cmphs      	r2, r3
    8ca8:	0c0a      	bf      	0x8cbc	//8cbc <CK_INTC_AlignmentService+0x1d4>
    8caa:	32d0      	movi      	r2, 208      	//0xd0
    8cac:	4258      	lsli      	r2, r2, 24
    8cae:	648e      	cmpne      	r3, r2
    8cb0:	0c17      	bf      	0x8cde	//8cde <CK_INTC_AlignmentService+0x1f6>
    8cb2:	32d4      	movi      	r2, 212      	//0xd4
    8cb4:	4258      	lsli      	r2, r2, 24
    8cb6:	648e      	cmpne      	r3, r2
    8cb8:	0c17      	bf      	0x8ce6	//8ce6 <CK_INTC_AlignmentService+0x1fe>
			printf("warnning: push/pop alignment.\n");
			handler = handle_push_pop;
			break;
		default:
			// FIXME: stq/stq is pseudo instruction of stm/stm and now ignore.
			goto bad_or_fault;
    8cba:	043f      	br      	0x8d38	//8d38 <CK_INTC_AlignmentService+0x250>
		default:
			goto bad_or_fault;
		}
	} 
	else {
		switch (CODING_BITS(instr)) {
    8cbc:	32dc      	movi      	r2, 220      	//0xdc
    8cbe:	4258      	lsli      	r2, r2, 24
    8cc0:	648e      	cmpne      	r3, r2
    8cc2:	0c0a      	bf      	0x8cd6	//8cd6 <CK_INTC_AlignmentService+0x1ee>
    8cc4:	32e8      	movi      	r2, 232      	//0xe8
    8cc6:	4258      	lsli      	r2, r2, 24
    8cc8:	648e      	cmpne      	r3, r2
    8cca:	0c12      	bf      	0x8cee	//8cee <CK_INTC_AlignmentService+0x206>
			printf("warnning: push/pop alignment.\n");
			handler = handle_push_pop;
			break;
		default:
			// FIXME: stq/stq is pseudo instruction of stm/stm and now ignore.
			goto bad_or_fault;
    8ccc:	0436      	br      	0x8d38	//8d38 <CK_INTC_AlignmentService+0x250>
		}
	} 
	else {
		switch (CODING_BITS(instr)) {
		case 0xD8000000: // ld.h/ld.hs/ld.w/ld.d
			handler = handle_ldh_ldhs_ldw_ldd;
    8cce:	1b0b      	addi      	r3, sp, 44
    8cd0:	1146      	lrw      	r2, 0x7d54	//7d54 <handle_ldh_ldhs_ldw_ldd>
    8cd2:	b340      	st.w      	r2, (r3, 0x0)
			break;
    8cd4:	0416      	br      	0x8d00	//8d00 <CK_INTC_AlignmentService+0x218>
		case 0xDC000000: // st.h/st.w/st.d
			handler = handle_sth_stw_std;
    8cd6:	1b0b      	addi      	r3, sp, 44
    8cd8:	1145      	lrw      	r2, 0x8254	//8254 <handle_sth_stw_std>
    8cda:	b340      	st.w      	r2, (r3, 0x0)
			break;
    8cdc:	0412      	br      	0x8d00	//8d00 <CK_INTC_AlignmentService+0x218>
		case 0xD0000000: // ldr.w/ldr.h/ldr.hs/ldm
			handler = handle_ldrh_ldrhs_ldrw_ldm;
    8cde:	1b0b      	addi      	r3, sp, 44
    8ce0:	1144      	lrw      	r2, 0x84b0	//84b0 <handle_ldrh_ldrhs_ldrw_ldm>
    8ce2:	b340      	st.w      	r2, (r3, 0x0)
			break;
    8ce4:	040e      	br      	0x8d00	//8d00 <CK_INTC_AlignmentService+0x218>
		case 0xD4000000: // stm/str.h/str.w
			handler = handle_strh_strw_stm;
    8ce6:	1b0b      	addi      	r3, sp, 44
    8ce8:	1143      	lrw      	r2, 0x88d0	//88d0 <handle_strh_strw_stm>
    8cea:	b340      	st.w      	r2, (r3, 0x0)
			break;
    8cec:	040a      	br      	0x8d00	//8d00 <CK_INTC_AlignmentService+0x218>
		case 0xE8000000:  // push/pop instruction.
			printf("warnning: push/pop alignment.\n");
    8cee:	101d      	lrw      	r0, 0x107b8	//107b8 <__etext+0xc08>
    8cf0:	e0002e30 	bsr      	0xe950	//e950 <printf>
    8cf4:	c4004820 	lsli      	r0, r0, 0
			handler = handle_push_pop;
    8cf8:	1b0b      	addi      	r3, sp, 44
    8cfa:	1140      	lrw      	r2, 0x759c	//759c <handle_push_pop>
    8cfc:	b340      	st.w      	r2, (r3, 0x0)
			break;
    8cfe:	6c00      	or      	r0, r0
			// FIXME: stq/stq is pseudo instruction of stm/stm and now ignore.
			goto bad_or_fault;
		}
	}
	
	if (!handler)
    8d00:	1b0b      	addi      	r3, sp, 44
    8d02:	9360      	ld.w      	r3, (r3, 0x0)
    8d04:	e9030019 	bez      	r3, 0x8d36	//8d36 <CK_INTC_AlignmentService+0x24e>
		goto bad_or_fault;

	err = handler(instr, regs);
    8d08:	1c02      	addi      	r4, sp, 8
    8d0a:	1b0b      	addi      	r3, sp, 44
    8d0c:	190d      	addi      	r1, sp, 52
    8d0e:	6cbb      	mov      	r2, sp
    8d10:	9360      	ld.w      	r3, (r3, 0x0)
    8d12:	9100      	ld.w      	r0, (r1, 0x0)
    8d14:	9220      	ld.w      	r1, (r2, 0x0)
    8d16:	7bcd      	jsr      	r3
    8d18:	b400      	st.w      	r0, (r4, 0x0)
	if (err != HANDLER_SUCCESS)
    8d1a:	1b02      	addi      	r3, sp, 8
    8d1c:	9360      	ld.w      	r3, (r3, 0x0)
    8d1e:	e903000f 	bez      	r3, 0x8d3c	//8d3c <CK_INTC_AlignmentService+0x254>
	{
		regs->pc -=2;
    8d22:	6cfb      	mov      	r3, sp
    8d24:	9360      	ld.w      	r3, (r3, 0x0)
    8d26:	9360      	ld.w      	r3, (r3, 0x0)
    8d28:	5b47      	subi      	r2, r3, 2      	//0x2
    8d2a:	6cfb      	mov      	r3, sp
    8d2c:	9360      	ld.w      	r3, (r3, 0x0)
    8d2e:	b340      	st.w      	r2, (r3, 0x0)
		goto bad_or_fault;
    8d30:	0404      	br      	0x8d38	//8d38 <CK_INTC_AlignmentService+0x250>
			isize = 4;
		}
	}

	if (fault) {
		goto bad_or_fault;
    8d32:	6c00      	or      	r0, r0
    8d34:	0402      	br      	0x8d38	//8d38 <CK_INTC_AlignmentService+0x250>
			goto bad_or_fault;
		}
	}
	
	if (!handler)
		goto bad_or_fault;
    8d36:	6c00      	or      	r0, r0
//	if(fixup_exception(regs)) {
//	    return;
//	}
//	die_if_kernel("Alignment trap: not handle this instruction", regs, 0);

	return;
    8d38:	6c00      	or      	r0, r0
    8d3a:	0402      	br      	0x8d3e	//8d3e <CK_INTC_AlignmentService+0x256>
	{
		regs->pc -=2;
		goto bad_or_fault;
	}

	return;
    8d3c:	6c00      	or      	r0, r0
//	    return;
//	}
//	die_if_kernel("Alignment trap: not handle this instruction", regs, 0);

	return;
}
    8d3e:	140e      	addi      	sp, sp, 56
    8d40:	1493      	pop      	r4-r6, r15
    8d42:	0000      	.short	0x0000
    8d44:	00006b38 	.long	0x00006b38
    8d48:	00006dac 	.long	0x00006dac
    8d4c:	00006c4c 	.long	0x00006c4c
    8d50:	00006f14 	.long	0x00006f14
    8d54:	00006fe0 	.long	0x00006fe0
    8d58:	000070b4 	.long	0x000070b4
    8d5c:	0000718c 	.long	0x0000718c
    8d60:	000107b8 	.long	0x000107b8
    8d64:	0000e950 	.long	0x0000e950
    8d68:	00007d54 	.long	0x00007d54
    8d6c:	00008254 	.long	0x00008254
    8d70:	000084b0 	.long	0x000084b0
    8d74:	000088d0 	.long	0x000088d0
    8d78:	0000759c 	.long	0x0000759c

00008d7c <pcie_mem_write>:
#include "sim.h"

void pcie_mem_write(Bit64u addr, int len, void* data){};
    8d7c:	1424      	subi      	sp, sp, 16
    8d7e:	e58e0007 	addi      	r12, sp, 8      	//0x8
    8d82:	dc0c2000 	st.w      	r0, (r12, 0x0)
    8d86:	dc2c2001 	st.w      	r1, (r12, 0x4)
    8d8a:	1901      	addi      	r1, sp, 4
    8d8c:	b140      	st.w      	r2, (r1, 0x0)
    8d8e:	6cbb      	mov      	r2, sp
    8d90:	b260      	st.w      	r3, (r2, 0x0)
    8d92:	1404      	addi      	sp, sp, 16
    8d94:	783c      	rts
	...

00008d98 <pcie_mem_read>:
void pcie_mem_read(Bit64u addr, int len, void* data){};
    8d98:	1424      	subi      	sp, sp, 16
    8d9a:	e58e0007 	addi      	r12, sp, 8      	//0x8
    8d9e:	dc0c2000 	st.w      	r0, (r12, 0x0)
    8da2:	dc2c2001 	st.w      	r1, (r12, 0x4)
    8da6:	1901      	addi      	r1, sp, 4
    8da8:	b140      	st.w      	r2, (r1, 0x0)
    8daa:	6cbb      	mov      	r2, sp
    8dac:	b260      	st.w      	r3, (r2, 0x0)
    8dae:	1404      	addi      	sp, sp, 16
    8db0:	783c      	rts
	...

00008db4 <pcie_cfg_write>:
void pcie_cfg_write(int addr, void* data){};
    8db4:	1422      	subi      	sp, sp, 8
    8db6:	1b01      	addi      	r3, sp, 4
    8db8:	b300      	st.w      	r0, (r3, 0x0)
    8dba:	6cfb      	mov      	r3, sp
    8dbc:	b320      	st.w      	r1, (r3, 0x0)
    8dbe:	1402      	addi      	sp, sp, 8
    8dc0:	783c      	rts
	...

00008dc4 <pcie_cfg_read>:
void pcie_cfg_read(int addr, void* data){};
    8dc4:	1422      	subi      	sp, sp, 8
    8dc6:	1b01      	addi      	r3, sp, 4
    8dc8:	b300      	st.w      	r0, (r3, 0x0)
    8dca:	6cfb      	mov      	r3, sp
    8dcc:	b320      	st.w      	r1, (r3, 0x0)
    8dce:	1402      	addi      	sp, sp, 8
    8dd0:	783c      	rts
	...

00008dd4 <c_code_finish>:
    8dd4:	783c      	rts
	...

00008dd8 <ITR_WM_HTL_Access>:
#include "sim.h"
#include "itr.h"

/*HTL Functions*/
Bit32u ITR_WM_HTL_Access(Bit48u HPA_Address, Bit3u Access_Type, void* data_buf, void* Byte_valid)
{
    8dd8:	14d0      	push      	r15
    8dda:	1424      	subi      	sp, sp, 16
    8ddc:	e58e0007 	addi      	r12, sp, 8      	//0x8
    8de0:	dc0c2000 	st.w      	r0, (r12, 0x0)
    8de4:	dc2c2001 	st.w      	r1, (r12, 0x4)
    8de8:	6c7b      	mov      	r1, sp
    8dea:	b160      	st.w      	r3, (r1, 0x0)
    8dec:	1b01      	addi      	r3, sp, 4
    8dee:	a340      	st.b      	r2, (r3, 0x0)
	if(Access_Type == ITR_HTL_ACCESS_CTRL_WM_READ || Access_Type == ITR_HTL_ACCESS_CTRL_FM_READ)
    8df0:	1b01      	addi      	r3, sp, 4
    8df2:	8360      	ld.b      	r3, (r3, 0x0)
    8df4:	74cc      	zextb      	r3, r3
    8df6:	3b42      	cmpnei      	r3, 2
    8df8:	0c06      	bf      	0x8e04	//8e04 <ITR_WM_HTL_Access+0x2c>
    8dfa:	1b01      	addi      	r3, sp, 4
    8dfc:	8360      	ld.b      	r3, (r3, 0x0)
    8dfe:	74cc      	zextb      	r3, r3
    8e00:	3b44      	cmpnei      	r3, 4
    8e02:	0830      	bt      	0x8e62	//8e62 <ITR_WM_HTL_Access+0x8a>
	{
		pcie_mem_write(ITR_CSR_HTL_ACCESS_ADDR, 8, &HPA_Address);
    8e04:	1b02      	addi      	r3, sp, 8
    8e06:	ea008048 	movi      	r0, 32840      	//0x8048
    8e0a:	c7004900 	rotli      	r0, r0, 24
    8e0e:	3100      	movi      	r1, 0      	//0x0
    8e10:	3208      	movi      	r2, 8      	//0x8
    8e12:	e3ffffb5 	bsr      	0x8d7c	//8d7c <pcie_mem_write>
    8e16:	c4004820 	lsli      	r0, r0, 0
		pcie_mem_write(ITR_CSR_HTL_ACCESS_CTRL, 4, &Access_Type);
    8e1a:	1b01      	addi      	r3, sp, 4
    8e1c:	ea00a048 	movi      	r0, 41032      	//0xa048
    8e20:	c7004900 	rotli      	r0, r0, 24
    8e24:	3100      	movi      	r1, 0      	//0x0
    8e26:	3204      	movi      	r2, 4      	//0x4
    8e28:	e3ffffaa 	bsr      	0x8d7c	//8d7c <pcie_mem_write>
    8e2c:	c4004820 	lsli      	r0, r0, 0
		pcie_mem_read(ITR_CSR_HTL_BYTES_VALID, 8, Byte_valid);
    8e30:	ea00c090 	movi      	r0, 49296      	//0xc090
    8e34:	c6e04900 	rotli      	r0, r0, 23
    8e38:	3100      	movi      	r1, 0      	//0x0
    8e3a:	3208      	movi      	r2, 8      	//0x8
    8e3c:	9865      	ld.w      	r3, (sp, 0x14)
    8e3e:	e3ffffad 	bsr      	0x8d98	//8d98 <pcie_mem_read>
    8e42:	c4004820 	lsli      	r0, r0, 0
		pcie_mem_read(ITR_CSR_HTL_DATA_LOW, 64, data_buf);
    8e46:	6cfb      	mov      	r3, sp
    8e48:	ea008120 	movi      	r0, 33056      	//0x8120
    8e4c:	c6c04900 	rotli      	r0, r0, 22
    8e50:	3100      	movi      	r1, 0      	//0x0
    8e52:	3240      	movi      	r2, 64      	//0x40
    8e54:	9360      	ld.w      	r3, (r3, 0x0)
    8e56:	e3ffffa1 	bsr      	0x8d98	//8d98 <pcie_mem_read>
    8e5a:	c4004820 	lsli      	r0, r0, 0
		return 1;
    8e5e:	3301      	movi      	r3, 1      	//0x1
    8e60:	043b      	br      	0x8ed6	//8ed6 <ITR_WM_HTL_Access+0xfe>
	}
	else if(Access_Type == ITR_HTL_ACCESS_CTRL_WM_WRITE || Access_Type == ITR_HTL_ACCESS_CTRL_FILL_WRITE)
    8e62:	1b01      	addi      	r3, sp, 4
    8e64:	8360      	ld.b      	r3, (r3, 0x0)
    8e66:	74cc      	zextb      	r3, r3
    8e68:	3b43      	cmpnei      	r3, 3
    8e6a:	0c06      	bf      	0x8e76	//8e76 <ITR_WM_HTL_Access+0x9e>
    8e6c:	1b01      	addi      	r3, sp, 4
    8e6e:	8360      	ld.b      	r3, (r3, 0x0)
    8e70:	74cc      	zextb      	r3, r3
    8e72:	3b41      	cmpnei      	r3, 1
    8e74:	0830      	bt      	0x8ed4	//8ed4 <ITR_WM_HTL_Access+0xfc>
	{
		pcie_mem_write(ITR_CSR_HTL_BYTES_VALID, 8, Byte_valid);
    8e76:	ea00c090 	movi      	r0, 49296      	//0xc090
    8e7a:	c6e04900 	rotli      	r0, r0, 23
    8e7e:	3100      	movi      	r1, 0      	//0x0
    8e80:	3208      	movi      	r2, 8      	//0x8
    8e82:	9865      	ld.w      	r3, (sp, 0x14)
    8e84:	e3ffff7c 	bsr      	0x8d7c	//8d7c <pcie_mem_write>
    8e88:	c4004820 	lsli      	r0, r0, 0
		pcie_mem_write(ITR_CSR_HTL_DATA_LOW, 64, data_buf);
    8e8c:	6cfb      	mov      	r3, sp
    8e8e:	ea008120 	movi      	r0, 33056      	//0x8120
    8e92:	c6c04900 	rotli      	r0, r0, 22
    8e96:	3100      	movi      	r1, 0      	//0x0
    8e98:	3240      	movi      	r2, 64      	//0x40
    8e9a:	9360      	ld.w      	r3, (r3, 0x0)
    8e9c:	e3ffff70 	bsr      	0x8d7c	//8d7c <pcie_mem_write>
    8ea0:	c4004820 	lsli      	r0, r0, 0
		pcie_mem_write(ITR_CSR_HTL_ACCESS_ADDR, 8, &HPA_Address);
    8ea4:	1b02      	addi      	r3, sp, 8
    8ea6:	ea008048 	movi      	r0, 32840      	//0x8048
    8eaa:	c7004900 	rotli      	r0, r0, 24
    8eae:	3100      	movi      	r1, 0      	//0x0
    8eb0:	3208      	movi      	r2, 8      	//0x8
    8eb2:	e3ffff65 	bsr      	0x8d7c	//8d7c <pcie_mem_write>
    8eb6:	c4004820 	lsli      	r0, r0, 0
		pcie_mem_write(ITR_CSR_HTL_ACCESS_CTRL, 4, &Access_Type);
    8eba:	1b01      	addi      	r3, sp, 4
    8ebc:	ea00a048 	movi      	r0, 41032      	//0xa048
    8ec0:	c7004900 	rotli      	r0, r0, 24
    8ec4:	3100      	movi      	r1, 0      	//0x0
    8ec6:	3204      	movi      	r2, 4      	//0x4
    8ec8:	e3ffff5a 	bsr      	0x8d7c	//8d7c <pcie_mem_write>
    8ecc:	c4004820 	lsli      	r0, r0, 0
		return 1;
    8ed0:	3301      	movi      	r3, 1      	//0x1
    8ed2:	0402      	br      	0x8ed6	//8ed6 <ITR_WM_HTL_Access+0xfe>
	}
	else 
	{
		/*FIXME: Error*/
		return 0;
    8ed4:	3300      	movi      	r3, 0      	//0x0
	}
}
    8ed6:	6c0f      	mov      	r0, r3
    8ed8:	1404      	addi      	sp, sp, 16
    8eda:	1490      	pop      	r15

00008edc <ITR_Get_HTL_Alist_Count>:

Bit32u ITR_Get_HTL_Alist_Count(void)
{
    8edc:	14d0      	push      	r15
    8ede:	1421      	subi      	sp, sp, 4
	Bit32u alist_cnt = 0;
    8ee0:	6cfb      	mov      	r3, sp
    8ee2:	3200      	movi      	r2, 0      	//0x0
    8ee4:	b340      	st.w      	r2, (r3, 0x0)
	pcie_mem_read(ITR_CSR_HTL_ALIST_CNT, 4, &alist_cnt);
    8ee6:	6cfb      	mov      	r3, sp
    8ee8:	ea00c048 	movi      	r0, 49224      	//0xc048
    8eec:	c7004900 	rotli      	r0, r0, 24
    8ef0:	3100      	movi      	r1, 0      	//0x0
    8ef2:	3204      	movi      	r2, 4      	//0x4
    8ef4:	e3ffff52 	bsr      	0x8d98	//8d98 <pcie_mem_read>
    8ef8:	c4004820 	lsli      	r0, r0, 0
	return alist_cnt;
    8efc:	6cfb      	mov      	r3, sp
    8efe:	9360      	ld.w      	r3, (r3, 0x0)
}
    8f00:	6c0f      	mov      	r0, r3
    8f02:	1401      	addi      	sp, sp, 4
    8f04:	1490      	pop      	r15
	...

00008f08 <ITR_Get_HTL_Alist_Base>:

Bit32u ITR_Get_HTL_Alist_Base(void)
{
    8f08:	14d0      	push      	r15
    8f0a:	1421      	subi      	sp, sp, 4
	Bit32u alist_base = 0;
    8f0c:	6cfb      	mov      	r3, sp
    8f0e:	3200      	movi      	r2, 0      	//0x0
    8f10:	b340      	st.w      	r2, (r3, 0x0)
	pcie_mem_read(ITR_CSR_HTL_ALIST_BASE, 4, &alist_base);
    8f12:	6cfb      	mov      	r3, sp
    8f14:	ea008640 	movi      	r0, 34368      	//0x8640
    8f18:	c6a04900 	rotli      	r0, r0, 21
    8f1c:	3100      	movi      	r1, 0      	//0x0
    8f1e:	3204      	movi      	r2, 4      	//0x4
    8f20:	e3ffff3c 	bsr      	0x8d98	//8d98 <pcie_mem_read>
    8f24:	c4004820 	lsli      	r0, r0, 0
	return alist_base;
    8f28:	6cfb      	mov      	r3, sp
    8f2a:	9360      	ld.w      	r3, (r3, 0x0)
}
    8f2c:	6c0f      	mov      	r0, r3
    8f2e:	1401      	addi      	sp, sp, 4
    8f30:	1490      	pop      	r15
	...

00008f34 <ITR_HTL_Reinit>:

Bit32u ITR_HTL_Reinit(void)
{
	/*Waiting for ITR spec*/
	return 1;
    8f34:	3301      	movi      	r3, 1      	//0x1
}
    8f36:	6c0f      	mov      	r0, r3
    8f38:	783c      	rts
	...

00008f3c <ITR_TLP_Fetch>:

/*PTLD/PTLT Functions*/
Bit32u ITR_TLP_Fetch(Bit8u Socket, Bit8u group_id, Bit8u link_id, Bit8u buf_id, Bit32u len, void* tlp_buffer)
{
    8f3c:	14d4      	push      	r4-r7, r15
    8f3e:	142a      	subi      	sp, sp, 40
    8f40:	c4004834 	lsli      	r20, r0, 0
    8f44:	6c07      	mov      	r0, r1
    8f46:	6c4b      	mov      	r1, r2
    8f48:	6c8f      	mov      	r2, r3
    8f4a:	1b03      	addi      	r3, sp, 12
    8f4c:	de830000 	st.b      	r20, (r3, 0x0)
    8f50:	1b02      	addi      	r3, sp, 8
    8f52:	a300      	st.b      	r0, (r3, 0x0)
    8f54:	1b01      	addi      	r3, sp, 4
    8f56:	a320      	st.b      	r1, (r3, 0x0)
    8f58:	6cfb      	mov      	r3, sp
    8f5a:	a340      	st.b      	r2, (r3, 0x0)
	/*Waiting for PCM to give the mapping of BDF and link_id*/

	Bit32u len_left = len;
    8f5c:	1b09      	addi      	r3, sp, 36
    8f5e:	984f      	ld.w      	r2, (sp, 0x3c)
    8f60:	b340      	st.w      	r2, (r3, 0x0)
	Bit8u* buf_p = (Bit8u *)tlp_buffer;
    8f62:	1b08      	addi      	r3, sp, 32
    8f64:	9850      	ld.w      	r2, (sp, 0x40)
    8f66:	b340      	st.w      	r2, (r3, 0x0)

	Bit64u io_tlp_buffer_lo = ITR_CSR_PTLD_IO_BUFFER_BASE + group_id*0x8000000 + buf_id * 0x40 + (buf_id >> 2) * 0x10000;
    8f68:	1b02      	addi      	r3, sp, 8
    8f6a:	8360      	ld.b      	r3, (r3, 0x0)
    8f6c:	74cc      	zextb      	r3, r3
    8f6e:	4355      	lsli      	r2, r3, 21
    8f70:	6cfb      	mov      	r3, sp
    8f72:	8360      	ld.b      	r3, (r3, 0x0)
    8f74:	74cc      	zextb      	r3, r3
    8f76:	5a6c      	addu      	r3, r2, r3
    8f78:	30a0      	movi      	r0, 160      	//0xa0
    8f7a:	400f      	lsli      	r0, r0, 15
    8f7c:	5b40      	addu      	r2, r3, r0
    8f7e:	6cfb      	mov      	r3, sp
    8f80:	8360      	ld.b      	r3, (r3, 0x0)
    8f82:	74cc      	zextb      	r3, r3
    8f84:	4b62      	lsri      	r3, r3, 2
    8f86:	74cc      	zextb      	r3, r3
    8f88:	436a      	lsli      	r3, r3, 10
    8f8a:	5a6c      	addu      	r3, r2, r3
    8f8c:	4346      	lsli      	r2, r3, 6
    8f8e:	1b06      	addi      	r3, sp, 24
    8f90:	c4024832 	lsli      	r18, r2, 0
    8f94:	c7f24893 	asri      	r19, r18, 31
    8f98:	de432000 	st.w      	r18, (r3, 0x0)
    8f9c:	de632001 	st.w      	r19, (r3, 0x4)
	Bit64u io_tlp_buffer_hi = Socket << 1;
    8fa0:	1b03      	addi      	r3, sp, 12
    8fa2:	8360      	ld.b      	r3, (r3, 0x0)
    8fa4:	74cc      	zextb      	r3, r3
    8fa6:	5b6c      	addu      	r3, r3, r3
    8fa8:	6c8f      	mov      	r2, r3
    8faa:	1b04      	addi      	r3, sp, 16
    8fac:	6f0b      	mov      	r12, r2
    8fae:	c7ec488d 	asri      	r13, r12, 31
    8fb2:	dd832000 	st.w      	r12, (r3, 0x0)
    8fb6:	dda32001 	st.w      	r13, (r3, 0x4)

	while(len_left > 32)
    8fba:	0421      	br      	0x8ffc	//8ffc <ITR_TLP_Fetch+0xc0>
	{
		pcie_mem_read(io_tlp_buffer_hi<<32 | io_tlp_buffer_lo, 32, buf_p);
    8fbc:	1b04      	addi      	r3, sp, 16
    8fbe:	9360      	ld.w      	r3, (r3, 0x0)
    8fc0:	3100      	movi      	r1, 0      	//0x0
    8fc2:	c4234027 	lsl      	r7, r3, r1
    8fc6:	3600      	movi      	r6, 0      	//0x0
    8fc8:	1b06      	addi      	r3, sp, 24
    8fca:	9340      	ld.w      	r2, (r3, 0x0)
    8fcc:	9361      	ld.w      	r3, (r3, 0x4)
    8fce:	6c98      	or      	r2, r6
    8fd0:	6cdc      	or      	r3, r7
    8fd2:	e58e001f 	addi      	r12, sp, 32      	//0x20
    8fd6:	6c0b      	mov      	r0, r2
    8fd8:	6c4f      	mov      	r1, r3
    8fda:	3220      	movi      	r2, 32      	//0x20
    8fdc:	d86c2000 	ld.w      	r3, (r12, 0x0)
    8fe0:	e3fffedc 	bsr      	0x8d98	//8d98 <pcie_mem_read>
    8fe4:	c4004820 	lsli      	r0, r0, 0
		len_left -= 32;
    8fe8:	1b09      	addi      	r3, sp, 36
    8fea:	1a09      	addi      	r2, sp, 36
    8fec:	9240      	ld.w      	r2, (r2, 0x0)
    8fee:	2a1f      	subi      	r2, 32      	//0x20
    8ff0:	b340      	st.w      	r2, (r3, 0x0)
		buf_p += 32;
    8ff2:	1b08      	addi      	r3, sp, 32
    8ff4:	1a08      	addi      	r2, sp, 32
    8ff6:	9240      	ld.w      	r2, (r2, 0x0)
    8ff8:	221f      	addi      	r2, 32      	//0x20
    8ffa:	b340      	st.w      	r2, (r3, 0x0)
	Bit8u* buf_p = (Bit8u *)tlp_buffer;

	Bit64u io_tlp_buffer_lo = ITR_CSR_PTLD_IO_BUFFER_BASE + group_id*0x8000000 + buf_id * 0x40 + (buf_id >> 2) * 0x10000;
	Bit64u io_tlp_buffer_hi = Socket << 1;

	while(len_left > 32)
    8ffc:	1b09      	addi      	r3, sp, 36
    8ffe:	9360      	ld.w      	r3, (r3, 0x0)
    9000:	eb030020 	cmphsi      	r3, 33      	//0x21
    9004:	0bdc      	bt      	0x8fbc	//8fbc <ITR_TLP_Fetch+0x80>
	{
		pcie_mem_read(io_tlp_buffer_hi<<32 | io_tlp_buffer_lo, 32, buf_p);
		len_left -= 32;
		buf_p += 32;
	}
	pcie_mem_read(io_tlp_buffer_hi<<32 | io_tlp_buffer_lo, len_left, buf_p);
    9006:	1b04      	addi      	r3, sp, 16
    9008:	9360      	ld.w      	r3, (r3, 0x0)
    900a:	3200      	movi      	r2, 0      	//0x0
    900c:	c4434025 	lsl      	r5, r3, r2
    9010:	3400      	movi      	r4, 0      	//0x0
    9012:	1b06      	addi      	r3, sp, 24
    9014:	9340      	ld.w      	r2, (r3, 0x0)
    9016:	9361      	ld.w      	r3, (r3, 0x4)
    9018:	c4442420 	or      	r0, r4, r2
    901c:	c4652421 	or      	r1, r5, r3
    9020:	6cc3      	mov      	r3, r0
    9022:	6d07      	mov      	r4, r1
    9024:	1a09      	addi      	r2, sp, 36
    9026:	9240      	ld.w      	r2, (r2, 0x0)
    9028:	e58e001f 	addi      	r12, sp, 32      	//0x20
    902c:	6c0f      	mov      	r0, r3
    902e:	6c53      	mov      	r1, r4
    9030:	d86c2000 	ld.w      	r3, (r12, 0x0)
    9034:	e3fffeb2 	bsr      	0x8d98	//8d98 <pcie_mem_read>
    9038:	c4004820 	lsli      	r0, r0, 0
	return 1;
    903c:	3301      	movi      	r3, 1      	//0x1
}
    903e:	6c0f      	mov      	r0, r3
    9040:	140a      	addi      	sp, sp, 40
    9042:	1494      	pop      	r4-r7, r15
    9044:	00008d7c 	.long	0x00008d7c
    9048:	00008d98 	.long	0x00008d98

0000904c <ITR_Overflow_Check>:

/*ITR control & status*/
Bit32u ITR_Overflow_Check(void)
{
    904c:	14d0      	push      	r15
    904e:	1422      	subi      	sp, sp, 8
	Bit32u ctrl_val = 0;
    9050:	6cfb      	mov      	r3, sp
    9052:	3200      	movi      	r2, 0      	//0x0
    9054:	b340      	st.w      	r2, (r3, 0x0)
	Bit32u overflow = 0;
    9056:	1b01      	addi      	r3, sp, 4
    9058:	3200      	movi      	r2, 0      	//0x0
    905a:	b340      	st.w      	r2, (r3, 0x0)
	/*PTLD UP*/
	pcie_mem_read(ITR_CSR_PTLD_UP_CTRL, 4, &ctrl_val);
    905c:	6cfb      	mov      	r3, sp
    905e:	ea00c940 	movi      	r0, 51520      	//0xc940
    9062:	c6804900 	rotli      	r0, r0, 20
    9066:	3100      	movi      	r1, 0      	//0x0
    9068:	3204      	movi      	r2, 4      	//0x4
    906a:	e3fffe97 	bsr      	0x8d98	//8d98 <pcie_mem_read>
    906e:	c4004820 	lsli      	r0, r0, 0
	overflow |= ctrl_val;
    9072:	6cfb      	mov      	r3, sp
    9074:	9340      	ld.w      	r2, (r3, 0x0)
    9076:	1b01      	addi      	r3, sp, 4
    9078:	1901      	addi      	r1, sp, 4
    907a:	9120      	ld.w      	r1, (r1, 0x0)
    907c:	6c84      	or      	r2, r1
    907e:	b340      	st.w      	r2, (r3, 0x0)
	/*PTLD Down*/
	pcie_mem_read(ITR_CSR_PTLD_DOWN_CTRL, 4, &ctrl_val);
    9080:	6cfb      	mov      	r3, sp
    9082:	ea0084a0 	movi      	r0, 33952      	//0x84a0
    9086:	c6a04900 	rotli      	r0, r0, 21
    908a:	3100      	movi      	r1, 0      	//0x0
    908c:	3204      	movi      	r2, 4      	//0x4
    908e:	e3fffe85 	bsr      	0x8d98	//8d98 <pcie_mem_read>
    9092:	c4004820 	lsli      	r0, r0, 0
	overflow |= ctrl_val;
    9096:	6cfb      	mov      	r3, sp
    9098:	9340      	ld.w      	r2, (r3, 0x0)
    909a:	1b01      	addi      	r3, sp, 4
    909c:	1901      	addi      	r1, sp, 4
    909e:	9120      	ld.w      	r1, (r1, 0x0)
    90a0:	6c84      	or      	r2, r1
    90a2:	b340      	st.w      	r2, (r3, 0x0)
	/*PTLT0 UP*/
	pcie_mem_read(ITR_CSR_PTLT0_UP_CTRL, 4, &ctrl_val);
    90a4:	6cfb      	mov      	r3, sp
    90a6:	ea00ca00 	movi      	r0, 51712      	//0xca00
    90aa:	c6804900 	rotli      	r0, r0, 20
    90ae:	3100      	movi      	r1, 0      	//0x0
    90b0:	3204      	movi      	r2, 4      	//0x4
    90b2:	e3fffe73 	bsr      	0x8d98	//8d98 <pcie_mem_read>
    90b6:	c4004820 	lsli      	r0, r0, 0
	overflow |= ctrl_val;
    90ba:	6cfb      	mov      	r3, sp
    90bc:	9340      	ld.w      	r2, (r3, 0x0)
    90be:	1b01      	addi      	r3, sp, 4
    90c0:	1901      	addi      	r1, sp, 4
    90c2:	9120      	ld.w      	r1, (r1, 0x0)
    90c4:	6c84      	or      	r2, r1
    90c6:	b340      	st.w      	r2, (r3, 0x0)
	/*PTLT0 Down*/
	pcie_mem_read(ITR_CSR_PTLT0_DOWN_CTRL, 4, &ctrl_val);
    90c8:	6cfb      	mov      	r3, sp
    90ca:	ea008500 	movi      	r0, 34048      	//0x8500
    90ce:	c6a04900 	rotli      	r0, r0, 21
    90d2:	3100      	movi      	r1, 0      	//0x0
    90d4:	3204      	movi      	r2, 4      	//0x4
    90d6:	e3fffe61 	bsr      	0x8d98	//8d98 <pcie_mem_read>
    90da:	c4004820 	lsli      	r0, r0, 0
	overflow |= ctrl_val;
    90de:	6cfb      	mov      	r3, sp
    90e0:	9340      	ld.w      	r2, (r3, 0x0)
    90e2:	1b01      	addi      	r3, sp, 4
    90e4:	1901      	addi      	r1, sp, 4
    90e6:	9120      	ld.w      	r1, (r1, 0x0)
    90e8:	6c84      	or      	r2, r1
    90ea:	b340      	st.w      	r2, (r3, 0x0)

	/*PTLT1 UP*/
	pcie_mem_read(ITR_CSR_PTLT1_UP_CTRL, 4, &ctrl_val);
    90ec:	6cfb      	mov      	r3, sp
    90ee:	ea00cac0 	movi      	r0, 51904      	//0xcac0
    90f2:	c6804900 	rotli      	r0, r0, 20
    90f6:	3100      	movi      	r1, 0      	//0x0
    90f8:	3204      	movi      	r2, 4      	//0x4
    90fa:	e3fffe4f 	bsr      	0x8d98	//8d98 <pcie_mem_read>
    90fe:	c4004820 	lsli      	r0, r0, 0
	overflow |= ctrl_val;
    9102:	6cfb      	mov      	r3, sp
    9104:	9340      	ld.w      	r2, (r3, 0x0)
    9106:	1b01      	addi      	r3, sp, 4
    9108:	1901      	addi      	r1, sp, 4
    910a:	9120      	ld.w      	r1, (r1, 0x0)
    910c:	6c84      	or      	r2, r1
    910e:	b340      	st.w      	r2, (r3, 0x0)
	/*PTLT0 Down*/
	pcie_mem_read(ITR_CSR_PTLT1_DOWN_CTRL, 4, &ctrl_val);
    9110:	6cfb      	mov      	r3, sp
    9112:	ea008560 	movi      	r0, 34144      	//0x8560
    9116:	c6a04900 	rotli      	r0, r0, 21
    911a:	3100      	movi      	r1, 0      	//0x0
    911c:	3204      	movi      	r2, 4      	//0x4
    911e:	e3fffe3d 	bsr      	0x8d98	//8d98 <pcie_mem_read>
    9122:	c4004820 	lsli      	r0, r0, 0
	overflow |= ctrl_val;
    9126:	6cfb      	mov      	r3, sp
    9128:	9340      	ld.w      	r2, (r3, 0x0)
    912a:	1b01      	addi      	r3, sp, 4
    912c:	1901      	addi      	r1, sp, 4
    912e:	9120      	ld.w      	r1, (r1, 0x0)
    9130:	6c84      	or      	r2, r1
    9132:	b340      	st.w      	r2, (r3, 0x0)
	/*PTLT2 UP*/
	pcie_mem_read(ITR_CSR_PTLT2_UP_CTRL, 4, &ctrl_val);
    9134:	6cfb      	mov      	r3, sp
    9136:	ea00cb80 	movi      	r0, 52096      	//0xcb80
    913a:	c6804900 	rotli      	r0, r0, 20
    913e:	3100      	movi      	r1, 0      	//0x0
    9140:	3204      	movi      	r2, 4      	//0x4
    9142:	e3fffe2b 	bsr      	0x8d98	//8d98 <pcie_mem_read>
    9146:	c4004820 	lsli      	r0, r0, 0
	overflow |= ctrl_val;
    914a:	6cfb      	mov      	r3, sp
    914c:	9340      	ld.w      	r2, (r3, 0x0)
    914e:	1b01      	addi      	r3, sp, 4
    9150:	1901      	addi      	r1, sp, 4
    9152:	9120      	ld.w      	r1, (r1, 0x0)
    9154:	6c84      	or      	r2, r1
    9156:	b340      	st.w      	r2, (r3, 0x0)
	/*PTLT0 Down*/
	pcie_mem_read(ITR_CSR_PTLT2_DOWN_CTRL, 4, &ctrl_val);
    9158:	6cfb      	mov      	r3, sp
    915a:	ea0085c0 	movi      	r0, 34240      	//0x85c0
    915e:	c6a04900 	rotli      	r0, r0, 21
    9162:	3100      	movi      	r1, 0      	//0x0
    9164:	3204      	movi      	r2, 4      	//0x4
    9166:	e3fffe19 	bsr      	0x8d98	//8d98 <pcie_mem_read>
    916a:	c4004820 	lsli      	r0, r0, 0
	overflow |= ctrl_val;
    916e:	6cfb      	mov      	r3, sp
    9170:	9340      	ld.w      	r2, (r3, 0x0)
    9172:	1b01      	addi      	r3, sp, 4
    9174:	1901      	addi      	r1, sp, 4
    9176:	9120      	ld.w      	r1, (r1, 0x0)
    9178:	6c84      	or      	r2, r1
    917a:	b340      	st.w      	r2, (r3, 0x0)

	if(overflow & (1 << ITR_LINK_OVERFLOW_BIT))
    917c:	1b01      	addi      	r3, sp, 4
    917e:	9360      	ld.w      	r3, (r3, 0x0)
    9180:	e9a30004 	bhsz      	r3, 0x9188	//9188 <ITR_Overflow_Check+0x13c>
		return 1;
    9184:	3301      	movi      	r3, 1      	//0x1
    9186:	0402      	br      	0x918a	//918a <ITR_Overflow_Check+0x13e>
	else
		return 0;
    9188:	3300      	movi      	r3, 0      	//0x0

}
    918a:	6c0f      	mov      	r0, r3
    918c:	1402      	addi      	sp, sp, 8
    918e:	1490      	pop      	r15

00009190 <ITR_IO_Trace_Reinit>:
Bit32u ITR_IO_Trace_Reinit(void)
{
    9190:	14d0      	push      	r15
    9192:	1421      	subi      	sp, sp, 4
	Bit32u reinit = 0;
    9194:	6cfb      	mov      	r3, sp
    9196:	3200      	movi      	r2, 0      	//0x0
    9198:	b340      	st.w      	r2, (r3, 0x0)
	/*PTLD UP*/
	pcie_mem_read(ITR_CSR_PTLD_UP_CTRL, 4, &reinit);
    919a:	6cfb      	mov      	r3, sp
    919c:	ea00c940 	movi      	r0, 51520      	//0xc940
    91a0:	c6804900 	rotli      	r0, r0, 20
    91a4:	3100      	movi      	r1, 0      	//0x0
    91a6:	3204      	movi      	r2, 4      	//0x4
    91a8:	e3fffdf8 	bsr      	0x8d98	//8d98 <pcie_mem_read>
    91ac:	c4004820 	lsli      	r0, r0, 0
	reinit |= 1 << ITR_LINK_RE_INIT_BIT;
    91b0:	6cfb      	mov      	r3, sp
    91b2:	9360      	ld.w      	r3, (r3, 0x0)
    91b4:	c7832842 	bseti      	r2, r3, 28
    91b8:	6cfb      	mov      	r3, sp
    91ba:	b340      	st.w      	r2, (r3, 0x0)
	pcie_mem_write(ITR_CSR_PTLD_UP_CTRL, 4, &reinit);
    91bc:	6cfb      	mov      	r3, sp
    91be:	ea00c940 	movi      	r0, 51520      	//0xc940
    91c2:	c6804900 	rotli      	r0, r0, 20
    91c6:	3100      	movi      	r1, 0      	//0x0
    91c8:	3204      	movi      	r2, 4      	//0x4
    91ca:	e3fffdd9 	bsr      	0x8d7c	//8d7c <pcie_mem_write>
    91ce:	c4004820 	lsli      	r0, r0, 0
	/*PTLD Down*/
	pcie_mem_read(ITR_CSR_PTLD_DOWN_CTRL, 4, &reinit);
    91d2:	6cfb      	mov      	r3, sp
    91d4:	ea0084a0 	movi      	r0, 33952      	//0x84a0
    91d8:	c6a04900 	rotli      	r0, r0, 21
    91dc:	3100      	movi      	r1, 0      	//0x0
    91de:	3204      	movi      	r2, 4      	//0x4
    91e0:	e3fffddc 	bsr      	0x8d98	//8d98 <pcie_mem_read>
    91e4:	c4004820 	lsli      	r0, r0, 0
	reinit |= 1 << ITR_LINK_RE_INIT_BIT;
    91e8:	6cfb      	mov      	r3, sp
    91ea:	9360      	ld.w      	r3, (r3, 0x0)
    91ec:	c7832842 	bseti      	r2, r3, 28
    91f0:	6cfb      	mov      	r3, sp
    91f2:	b340      	st.w      	r2, (r3, 0x0)
	pcie_mem_write(ITR_CSR_PTLD_DOWN_CTRL, 4, &reinit);
    91f4:	6cfb      	mov      	r3, sp
    91f6:	ea0084a0 	movi      	r0, 33952      	//0x84a0
    91fa:	c6a04900 	rotli      	r0, r0, 21
    91fe:	3100      	movi      	r1, 0      	//0x0
    9200:	3204      	movi      	r2, 4      	//0x4
    9202:	e3fffdbd 	bsr      	0x8d7c	//8d7c <pcie_mem_write>
    9206:	c4004820 	lsli      	r0, r0, 0

	/*PTLT0 UP*/
	pcie_mem_read(ITR_CSR_PTLT0_UP_CTRL, 4, &reinit);
    920a:	6cfb      	mov      	r3, sp
    920c:	ea00ca00 	movi      	r0, 51712      	//0xca00
    9210:	c6804900 	rotli      	r0, r0, 20
    9214:	3100      	movi      	r1, 0      	//0x0
    9216:	3204      	movi      	r2, 4      	//0x4
    9218:	e3fffdc0 	bsr      	0x8d98	//8d98 <pcie_mem_read>
    921c:	c4004820 	lsli      	r0, r0, 0
	reinit |= 1 << ITR_LINK_RE_INIT_BIT;
    9220:	6cfb      	mov      	r3, sp
    9222:	9360      	ld.w      	r3, (r3, 0x0)
    9224:	c7832842 	bseti      	r2, r3, 28
    9228:	6cfb      	mov      	r3, sp
    922a:	b340      	st.w      	r2, (r3, 0x0)
	pcie_mem_write(ITR_CSR_PTLT0_UP_CTRL, 4, &reinit);
    922c:	6cfb      	mov      	r3, sp
    922e:	ea00ca00 	movi      	r0, 51712      	//0xca00
    9232:	c6804900 	rotli      	r0, r0, 20
    9236:	3100      	movi      	r1, 0      	//0x0
    9238:	3204      	movi      	r2, 4      	//0x4
    923a:	e3fffda1 	bsr      	0x8d7c	//8d7c <pcie_mem_write>
    923e:	c4004820 	lsli      	r0, r0, 0
	/*PTLT0 Down*/
	pcie_mem_read(ITR_CSR_PTLT0_DOWN_CTRL, 4, &reinit);
    9242:	6cfb      	mov      	r3, sp
    9244:	ea008500 	movi      	r0, 34048      	//0x8500
    9248:	c6a04900 	rotli      	r0, r0, 21
    924c:	3100      	movi      	r1, 0      	//0x0
    924e:	3204      	movi      	r2, 4      	//0x4
    9250:	e3fffda4 	bsr      	0x8d98	//8d98 <pcie_mem_read>
    9254:	c4004820 	lsli      	r0, r0, 0
	reinit |= 1 << ITR_LINK_RE_INIT_BIT;
    9258:	6cfb      	mov      	r3, sp
    925a:	9360      	ld.w      	r3, (r3, 0x0)
    925c:	c7832842 	bseti      	r2, r3, 28
    9260:	6cfb      	mov      	r3, sp
    9262:	b340      	st.w      	r2, (r3, 0x0)
	pcie_mem_write(ITR_CSR_PTLT0_DOWN_CTRL, 4, &reinit);
    9264:	6cfb      	mov      	r3, sp
    9266:	ea008500 	movi      	r0, 34048      	//0x8500
    926a:	c6a04900 	rotli      	r0, r0, 21
    926e:	3100      	movi      	r1, 0      	//0x0
    9270:	3204      	movi      	r2, 4      	//0x4
    9272:	e3fffd85 	bsr      	0x8d7c	//8d7c <pcie_mem_write>
    9276:	c4004820 	lsli      	r0, r0, 0

	/*PTLT1 UP*/
	pcie_mem_read(ITR_CSR_PTLT1_UP_CTRL, 4, &reinit);
    927a:	6cfb      	mov      	r3, sp
    927c:	ea00cac0 	movi      	r0, 51904      	//0xcac0
    9280:	c6804900 	rotli      	r0, r0, 20
    9284:	3100      	movi      	r1, 0      	//0x0
    9286:	3204      	movi      	r2, 4      	//0x4
    9288:	e3fffd88 	bsr      	0x8d98	//8d98 <pcie_mem_read>
    928c:	c4004820 	lsli      	r0, r0, 0
	reinit |= 1 << ITR_LINK_RE_INIT_BIT;
    9290:	6cfb      	mov      	r3, sp
    9292:	9360      	ld.w      	r3, (r3, 0x0)
    9294:	c7832842 	bseti      	r2, r3, 28
    9298:	6cfb      	mov      	r3, sp
    929a:	b340      	st.w      	r2, (r3, 0x0)
	pcie_mem_write(ITR_CSR_PTLT1_UP_CTRL, 4, &reinit);
    929c:	6cfb      	mov      	r3, sp
    929e:	ea00cac0 	movi      	r0, 51904      	//0xcac0
    92a2:	c6804900 	rotli      	r0, r0, 20
    92a6:	3100      	movi      	r1, 0      	//0x0
    92a8:	3204      	movi      	r2, 4      	//0x4
    92aa:	e3fffd69 	bsr      	0x8d7c	//8d7c <pcie_mem_write>
    92ae:	c4004820 	lsli      	r0, r0, 0
	/*PTLT0 Down*/
	pcie_mem_read(ITR_CSR_PTLT1_DOWN_CTRL, 4, &reinit);
    92b2:	6cfb      	mov      	r3, sp
    92b4:	ea008560 	movi      	r0, 34144      	//0x8560
    92b8:	c6a04900 	rotli      	r0, r0, 21
    92bc:	3100      	movi      	r1, 0      	//0x0
    92be:	3204      	movi      	r2, 4      	//0x4
    92c0:	e3fffd6c 	bsr      	0x8d98	//8d98 <pcie_mem_read>
    92c4:	c4004820 	lsli      	r0, r0, 0
	reinit |= 1 << ITR_LINK_RE_INIT_BIT;
    92c8:	6cfb      	mov      	r3, sp
    92ca:	9360      	ld.w      	r3, (r3, 0x0)
    92cc:	c7832842 	bseti      	r2, r3, 28
    92d0:	6cfb      	mov      	r3, sp
    92d2:	b340      	st.w      	r2, (r3, 0x0)
	pcie_mem_write(ITR_CSR_PTLT1_DOWN_CTRL, 4, &reinit);
    92d4:	6cfb      	mov      	r3, sp
    92d6:	ea008560 	movi      	r0, 34144      	//0x8560
    92da:	c6a04900 	rotli      	r0, r0, 21
    92de:	3100      	movi      	r1, 0      	//0x0
    92e0:	3204      	movi      	r2, 4      	//0x4
    92e2:	e3fffd4d 	bsr      	0x8d7c	//8d7c <pcie_mem_write>
    92e6:	c4004820 	lsli      	r0, r0, 0

	/*PTLT2 UP*/
	pcie_mem_read(ITR_CSR_PTLT2_UP_CTRL, 4, &reinit);
    92ea:	6cfb      	mov      	r3, sp
    92ec:	ea00cb80 	movi      	r0, 52096      	//0xcb80
    92f0:	c6804900 	rotli      	r0, r0, 20
    92f4:	3100      	movi      	r1, 0      	//0x0
    92f6:	3204      	movi      	r2, 4      	//0x4
    92f8:	e3fffd50 	bsr      	0x8d98	//8d98 <pcie_mem_read>
    92fc:	c4004820 	lsli      	r0, r0, 0
	reinit |= 1 << ITR_LINK_RE_INIT_BIT;
    9300:	6cfb      	mov      	r3, sp
    9302:	9360      	ld.w      	r3, (r3, 0x0)
    9304:	c7832842 	bseti      	r2, r3, 28
    9308:	6cfb      	mov      	r3, sp
    930a:	b340      	st.w      	r2, (r3, 0x0)
	pcie_mem_write(ITR_CSR_PTLT2_UP_CTRL, 4, &reinit);
    930c:	6cfb      	mov      	r3, sp
    930e:	ea00cb80 	movi      	r0, 52096      	//0xcb80
    9312:	c6804900 	rotli      	r0, r0, 20
    9316:	3100      	movi      	r1, 0      	//0x0
    9318:	3204      	movi      	r2, 4      	//0x4
    931a:	e3fffd31 	bsr      	0x8d7c	//8d7c <pcie_mem_write>
    931e:	c4004820 	lsli      	r0, r0, 0
	/*PTLT0 Down*/
	pcie_mem_read(ITR_CSR_PTLT2_DOWN_CTRL, 4, &reinit);
    9322:	6cfb      	mov      	r3, sp
    9324:	ea0085c0 	movi      	r0, 34240      	//0x85c0
    9328:	c6a04900 	rotli      	r0, r0, 21
    932c:	3100      	movi      	r1, 0      	//0x0
    932e:	3204      	movi      	r2, 4      	//0x4
    9330:	e3fffd34 	bsr      	0x8d98	//8d98 <pcie_mem_read>
    9334:	c4004820 	lsli      	r0, r0, 0
	reinit |= 1 << ITR_LINK_RE_INIT_BIT;
    9338:	6cfb      	mov      	r3, sp
    933a:	9360      	ld.w      	r3, (r3, 0x0)
    933c:	c7832842 	bseti      	r2, r3, 28
    9340:	6cfb      	mov      	r3, sp
    9342:	b340      	st.w      	r2, (r3, 0x0)
	pcie_mem_write(ITR_CSR_PTLT2_DOWN_CTRL, 4, &reinit);
    9344:	6cfb      	mov      	r3, sp
    9346:	ea0085c0 	movi      	r0, 34240      	//0x85c0
    934a:	c6a04900 	rotli      	r0, r0, 21
    934e:	3100      	movi      	r1, 0      	//0x0
    9350:	3204      	movi      	r2, 4      	//0x4
    9352:	e3fffd15 	bsr      	0x8d7c	//8d7c <pcie_mem_write>
    9356:	c4004820 	lsli      	r0, r0, 0

	return 1;
    935a:	3301      	movi      	r3, 1      	//0x1
}
    935c:	6c0f      	mov      	r0, r3
    935e:	1401      	addi      	sp, sp, 4
    9360:	1490      	pop      	r15
    9362:	0000      	.short	0x0000
    9364:	00008d98 	.long	0x00008d98
    9368:	00008d7c 	.long	0x00008d7c

0000936c <MTR_Init>:


Bit32u MTR_Init(void)
{

}
    936c:	6c0f      	mov      	r0, r3
    936e:	783c      	rts

00009370 <MTR_Trace_Start>:


/*MTR control & status*/
Bit32u MTR_Trace_Start(void)
{
    9370:	14d4      	push      	r4-r7, r15
    9372:	142a      	subi      	sp, sp, 40
	Bit8u hsdimma_num = 0, hsdimmb_num = 0;
    9374:	e46e0025 	addi      	r3, sp, 38      	//0x26
    9378:	3200      	movi      	r2, 0      	//0x0
    937a:	a340      	st.b      	r2, (r3, 0x0)
    937c:	e46e0024 	addi      	r3, sp, 37      	//0x25
    9380:	3200      	movi      	r2, 0      	//0x0
    9382:	a340      	st.b      	r2, (r3, 0x0)
	Bit8u hsdimma[12] = {0,0,0,0,0,0,0,0,0,0,0,0};
    9384:	1b06      	addi      	r3, sp, 24
    9386:	3200      	movi      	r2, 0      	//0x0
    9388:	a340      	st.b      	r2, (r3, 0x0)
    938a:	1b06      	addi      	r3, sp, 24
    938c:	3200      	movi      	r2, 0      	//0x0
    938e:	a341      	st.b      	r2, (r3, 0x1)
    9390:	1b06      	addi      	r3, sp, 24
    9392:	3200      	movi      	r2, 0      	//0x0
    9394:	a342      	st.b      	r2, (r3, 0x2)
    9396:	1b06      	addi      	r3, sp, 24
    9398:	3200      	movi      	r2, 0      	//0x0
    939a:	a343      	st.b      	r2, (r3, 0x3)
    939c:	1b06      	addi      	r3, sp, 24
    939e:	3200      	movi      	r2, 0      	//0x0
    93a0:	a344      	st.b      	r2, (r3, 0x4)
    93a2:	1b06      	addi      	r3, sp, 24
    93a4:	3200      	movi      	r2, 0      	//0x0
    93a6:	a345      	st.b      	r2, (r3, 0x5)
    93a8:	1b06      	addi      	r3, sp, 24
    93aa:	3200      	movi      	r2, 0      	//0x0
    93ac:	a346      	st.b      	r2, (r3, 0x6)
    93ae:	1b06      	addi      	r3, sp, 24
    93b0:	3200      	movi      	r2, 0      	//0x0
    93b2:	a347      	st.b      	r2, (r3, 0x7)
    93b4:	1b06      	addi      	r3, sp, 24
    93b6:	3200      	movi      	r2, 0      	//0x0
    93b8:	a348      	st.b      	r2, (r3, 0x8)
    93ba:	1b06      	addi      	r3, sp, 24
    93bc:	3200      	movi      	r2, 0      	//0x0
    93be:	a349      	st.b      	r2, (r3, 0x9)
    93c0:	1b06      	addi      	r3, sp, 24
    93c2:	3200      	movi      	r2, 0      	//0x0
    93c4:	a34a      	st.b      	r2, (r3, 0xa)
    93c6:	1b06      	addi      	r3, sp, 24
    93c8:	3200      	movi      	r2, 0      	//0x0
    93ca:	a34b      	st.b      	r2, (r3, 0xb)
	Bit8u hsdimmb[12] = {0,0,0,0,0,0,0,0,0,0,0,0};
    93cc:	1b03      	addi      	r3, sp, 12
    93ce:	3200      	movi      	r2, 0      	//0x0
    93d0:	a340      	st.b      	r2, (r3, 0x0)
    93d2:	1b03      	addi      	r3, sp, 12
    93d4:	3200      	movi      	r2, 0      	//0x0
    93d6:	a341      	st.b      	r2, (r3, 0x1)
    93d8:	1b03      	addi      	r3, sp, 12
    93da:	3200      	movi      	r2, 0      	//0x0
    93dc:	a342      	st.b      	r2, (r3, 0x2)
    93de:	1b03      	addi      	r3, sp, 12
    93e0:	3200      	movi      	r2, 0      	//0x0
    93e2:	a343      	st.b      	r2, (r3, 0x3)
    93e4:	1b03      	addi      	r3, sp, 12
    93e6:	3200      	movi      	r2, 0      	//0x0
    93e8:	a344      	st.b      	r2, (r3, 0x4)
    93ea:	1b03      	addi      	r3, sp, 12
    93ec:	3200      	movi      	r2, 0      	//0x0
    93ee:	a345      	st.b      	r2, (r3, 0x5)
    93f0:	1b03      	addi      	r3, sp, 12
    93f2:	3200      	movi      	r2, 0      	//0x0
    93f4:	a346      	st.b      	r2, (r3, 0x6)
    93f6:	1b03      	addi      	r3, sp, 12
    93f8:	3200      	movi      	r2, 0      	//0x0
    93fa:	a347      	st.b      	r2, (r3, 0x7)
    93fc:	1b03      	addi      	r3, sp, 12
    93fe:	3200      	movi      	r2, 0      	//0x0
    9400:	a348      	st.b      	r2, (r3, 0x8)
    9402:	1b03      	addi      	r3, sp, 12
    9404:	3200      	movi      	r2, 0      	//0x0
    9406:	a349      	st.b      	r2, (r3, 0x9)
    9408:	1b03      	addi      	r3, sp, 12
    940a:	3200      	movi      	r2, 0      	//0x0
    940c:	a34a      	st.b      	r2, (r3, 0xa)
    940e:	1b03      	addi      	r3, sp, 12
    9410:	3200      	movi      	r2, 0      	//0x0
    9412:	a34b      	st.b      	r2, (r3, 0xb)
	Bit8u index = 0;
    9414:	e46e0026 	addi      	r3, sp, 39      	//0x27
    9418:	3200      	movi      	r2, 0      	//0x0
    941a:	a340      	st.b      	r2, (r3, 0x0)
	Bit32u mtr_start = 0;
    941c:	1b02      	addi      	r3, sp, 8
    941e:	3200      	movi      	r2, 0      	//0x0
    9420:	b340      	st.w      	r2, (r3, 0x0)
	Bit32u mtr_trace = 0;
    9422:	1b01      	addi      	r3, sp, 4
    9424:	3200      	movi      	r2, 0      	//0x0
    9426:	b340      	st.w      	r2, (r3, 0x0)

	pcie_mem_read(ITR_CSR_MTRA_HSDIMM_NUM, 4, &hsdimma_num);
    9428:	e46e0025 	addi      	r3, sp, 38      	//0x26
    942c:	ea20bc24 	movih      	r0, 48164      	//0xbc24
    9430:	3100      	movi      	r1, 0      	//0x0
    9432:	3204      	movi      	r2, 4      	//0x4
    9434:	e3fffcb2 	bsr      	0x8d98	//8d98 <pcie_mem_read>
    9438:	c4004820 	lsli      	r0, r0, 0
	pcie_mem_read(ITR_CSR_MTRB_HSDIMM_NUM, 4, &hsdimmb_num);
    943c:	e46e0024 	addi      	r3, sp, 37      	//0x25
    9440:	ea20c024 	movih      	r0, 49188      	//0xc024
    9444:	3100      	movi      	r1, 0      	//0x0
    9446:	3204      	movi      	r2, 4      	//0x4
    9448:	e3fffca8 	bsr      	0x8d98	//8d98 <pcie_mem_read>
    944c:	c4004820 	lsli      	r0, r0, 0
	
	Bit32u hsdimm_idx;
    for(index = 0; index < ITR_CSR_MTR_PCIE_HSDIMM_NUM; index++)
    9450:	e46e0026 	addi      	r3, sp, 39      	//0x27
    9454:	3200      	movi      	r2, 0      	//0x0
    9456:	a340      	st.b      	r2, (r3, 0x0)
    9458:	0423      	br      	0x949e	//949e <MTR_Trace_Start+0x12e>
    {
    	pcie_mem_read(ITR_CSR_MTRA_PCIE_HSDIMM_ID + index * 4, 4, &hsdimm_idx);
    945a:	e46e0026 	addi      	r3, sp, 39      	//0x27
    945e:	8360      	ld.b      	r3, (r3, 0x0)
    9460:	74cc      	zextb      	r3, r3
    9462:	ea222f09 	movih      	r2, 12041      	//0x2f09
    9466:	3aa0      	bseti      	r2, 0
    9468:	5b68      	addu      	r3, r3, r2
    946a:	4362      	lsli      	r3, r3, 2
    946c:	6d8f      	mov      	r6, r3
    946e:	3700      	movi      	r7, 0      	//0x0
    9470:	6cfb      	mov      	r3, sp
    9472:	6c1b      	mov      	r0, r6
    9474:	6c5f      	mov      	r1, r7
    9476:	3204      	movi      	r2, 4      	//0x4
    9478:	e3fffc90 	bsr      	0x8d98	//8d98 <pcie_mem_read>
    947c:	c4004820 	lsli      	r0, r0, 0
    	hsdimma[hsdimm_idx & 0xF] = 1;
    9480:	6cfb      	mov      	r3, sp
    9482:	9360      	ld.w      	r3, (r3, 0x0)
    9484:	e463200f 	andi      	r3, r3, 15
    9488:	1a06      	addi      	r2, sp, 24
    948a:	3101      	movi      	r1, 1      	//0x1
    948c:	d4620021 	str.b      	r1, (r2, r3<<0)

	pcie_mem_read(ITR_CSR_MTRA_HSDIMM_NUM, 4, &hsdimma_num);
	pcie_mem_read(ITR_CSR_MTRB_HSDIMM_NUM, 4, &hsdimmb_num);
	
	Bit32u hsdimm_idx;
    for(index = 0; index < ITR_CSR_MTR_PCIE_HSDIMM_NUM; index++)
    9490:	e46e0026 	addi      	r3, sp, 39      	//0x27
    9494:	e44e0026 	addi      	r2, sp, 39      	//0x27
    9498:	8240      	ld.b      	r2, (r2, 0x0)
    949a:	2200      	addi      	r2, 1      	//0x1
    949c:	a340      	st.b      	r2, (r3, 0x0)
    949e:	e46e0026 	addi      	r3, sp, 39      	//0x27
    94a2:	8360      	ld.b      	r3, (r3, 0x0)
    94a4:	748c      	zextb      	r2, r3
    94a6:	3305      	movi      	r3, 5      	//0x5
    94a8:	648c      	cmphs      	r3, r2
    94aa:	0bd8      	bt      	0x945a	//945a <MTR_Trace_Start+0xea>
    {
    	pcie_mem_read(ITR_CSR_MTRA_PCIE_HSDIMM_ID + index * 4, 4, &hsdimm_idx);
    	hsdimma[hsdimm_idx & 0xF] = 1;
    }
    for(index = 0; index < ITR_CSR_MTR_PCIE_HSDIMM_NUM; index++)
    94ac:	e46e0026 	addi      	r3, sp, 39      	//0x27
    94b0:	3200      	movi      	r2, 0      	//0x0
    94b2:	a340      	st.b      	r2, (r3, 0x0)
    94b4:	0423      	br      	0x94fa	//94fa <MTR_Trace_Start+0x18a>
    {
    	pcie_mem_read(ITR_CSR_MTRB_PCIE_HSDIMM_ID + index * 4, 4, &hsdimm_idx);
    94b6:	e46e0026 	addi      	r3, sp, 39      	//0x27
    94ba:	8360      	ld.b      	r3, (r3, 0x0)
    94bc:	74cc      	zextb      	r3, r3
    94be:	ea223009 	movih      	r2, 12297      	//0x3009
    94c2:	3aa0      	bseti      	r2, 0
    94c4:	5b68      	addu      	r3, r3, r2
    94c6:	4362      	lsli      	r3, r3, 2
    94c8:	6d0f      	mov      	r4, r3
    94ca:	3500      	movi      	r5, 0      	//0x0
    94cc:	6cfb      	mov      	r3, sp
    94ce:	6c13      	mov      	r0, r4
    94d0:	6c57      	mov      	r1, r5
    94d2:	3204      	movi      	r2, 4      	//0x4
    94d4:	e3fffc62 	bsr      	0x8d98	//8d98 <pcie_mem_read>
    94d8:	c4004820 	lsli      	r0, r0, 0
    	hsdimmb[hsdimm_idx & 0xF] = 1;
    94dc:	6cfb      	mov      	r3, sp
    94de:	9360      	ld.w      	r3, (r3, 0x0)
    94e0:	e463200f 	andi      	r3, r3, 15
    94e4:	1a03      	addi      	r2, sp, 12
    94e6:	3101      	movi      	r1, 1      	//0x1
    94e8:	d4620021 	str.b      	r1, (r2, r3<<0)
    for(index = 0; index < ITR_CSR_MTR_PCIE_HSDIMM_NUM; index++)
    {
    	pcie_mem_read(ITR_CSR_MTRA_PCIE_HSDIMM_ID + index * 4, 4, &hsdimm_idx);
    	hsdimma[hsdimm_idx & 0xF] = 1;
    }
    for(index = 0; index < ITR_CSR_MTR_PCIE_HSDIMM_NUM; index++)
    94ec:	e46e0026 	addi      	r3, sp, 39      	//0x27
    94f0:	e44e0026 	addi      	r2, sp, 39      	//0x27
    94f4:	8240      	ld.b      	r2, (r2, 0x0)
    94f6:	2200      	addi      	r2, 1      	//0x1
    94f8:	a340      	st.b      	r2, (r3, 0x0)
    94fa:	e46e0026 	addi      	r3, sp, 39      	//0x27
    94fe:	8360      	ld.b      	r3, (r3, 0x0)
    9500:	748c      	zextb      	r2, r3
    9502:	3305      	movi      	r3, 5      	//0x5
    9504:	648c      	cmphs      	r3, r2
    9506:	0bd8      	bt      	0x94b6	//94b6 <MTR_Trace_Start+0x146>
    	pcie_mem_read(ITR_CSR_MTRB_PCIE_HSDIMM_ID + index * 4, 4, &hsdimm_idx);
    	hsdimmb[hsdimm_idx & 0xF] = 1;
    }


	for(index = 0; index < 12; index++)
    9508:	e46e0026 	addi      	r3, sp, 39      	//0x27
    950c:	3200      	movi      	r2, 0      	//0x0
    950e:	a340      	st.b      	r2, (r3, 0x0)
    9510:	0441      	br      	0x9592	//9592 <MTR_Trace_Start+0x222>
	{
		if(!hsdimma[index]) continue;
    9512:	e46e0026 	addi      	r3, sp, 39      	//0x27
    9516:	8360      	ld.b      	r3, (r3, 0x0)
    9518:	74cc      	zextb      	r3, r3
    951a:	1a06      	addi      	r2, sp, 24
    951c:	d0620023 	ldr.b      	r3, (r2, r3<<0)
    9520:	74cc      	zextb      	r3, r3
    9522:	e9030030 	bez      	r3, 0x9582	//9582 <MTR_Trace_Start+0x212>
		mtr_start = (1 << ITR_MTR_TRACE_START_READ) | (1 << ITR_MTR_TRACE_START_WRITE) | (index << ITR_MTR_TRACE_START_IDX_SHIFT);
    9526:	e46e0026 	addi      	r3, sp, 39      	//0x27
    952a:	8360      	ld.b      	r3, (r3, 0x0)
    952c:	74cc      	zextb      	r3, r3
    952e:	ec630300 	ori      	r3, r3, 768
    9532:	6c8f      	mov      	r2, r3
    9534:	1b02      	addi      	r3, sp, 8
    9536:	b340      	st.w      	r2, (r3, 0x0)
		pcie_mem_write(ITR_CSR_MTRA_TRACE_START, 4, &mtr_start);
    9538:	1b02      	addi      	r3, sp, 8
    953a:	ea00803c 	movi      	r0, 32828      	//0x803c
    953e:	c7004900 	rotli      	r0, r0, 24
    9542:	3100      	movi      	r1, 0      	//0x0
    9544:	3204      	movi      	r2, 4      	//0x4
    9546:	e3fffc1b 	bsr      	0x8d7c	//8d7c <pcie_mem_write>
    954a:	c4004820 	lsli      	r0, r0, 0
		mtr_trace = 0;
    954e:	1b01      	addi      	r3, sp, 4
    9550:	3200      	movi      	r2, 0      	//0x0
    9552:	b340      	st.w      	r2, (r3, 0x0)
		pcie_mem_read(ITR_CSR_MTRA_TRACING_VEC, 4, &mtr_trace);
    9554:	1b01      	addi      	r3, sp, 4
    9556:	1113      	lrw      	r0, 0xbc24002c	//bc24002c <__stack+0xbbe40034>
    9558:	3100      	movi      	r1, 0      	//0x0
    955a:	3204      	movi      	r2, 4      	//0x4
    955c:	e3fffc1e 	bsr      	0x8d98	//8d98 <pcie_mem_read>
    9560:	c4004820 	lsli      	r0, r0, 0
		while(!(mtr_trace & (1 << index)));
    9564:	6c00      	or      	r0, r0
    9566:	e46e0026 	addi      	r3, sp, 39      	//0x27
    956a:	8360      	ld.b      	r3, (r3, 0x0)
    956c:	74cc      	zextb      	r3, r3
    956e:	3201      	movi      	r2, 1      	//0x1
    9570:	c4624023 	lsl      	r3, r2, r3
    9574:	6c8f      	mov      	r2, r3
    9576:	1b01      	addi      	r3, sp, 4
    9578:	9360      	ld.w      	r3, (r3, 0x0)
    957a:	68c8      	and      	r3, r2
    957c:	e903fff5 	bez      	r3, 0x9566	//9566 <MTR_Trace_Start+0x1f6>
    9580:	0402      	br      	0x9584	//9584 <MTR_Trace_Start+0x214>
    }


	for(index = 0; index < 12; index++)
	{
		if(!hsdimma[index]) continue;
    9582:	6c00      	or      	r0, r0
    	pcie_mem_read(ITR_CSR_MTRB_PCIE_HSDIMM_ID + index * 4, 4, &hsdimm_idx);
    	hsdimmb[hsdimm_idx & 0xF] = 1;
    }


	for(index = 0; index < 12; index++)
    9584:	e46e0026 	addi      	r3, sp, 39      	//0x27
    9588:	e44e0026 	addi      	r2, sp, 39      	//0x27
    958c:	8240      	ld.b      	r2, (r2, 0x0)
    958e:	2200      	addi      	r2, 1      	//0x1
    9590:	a340      	st.b      	r2, (r3, 0x0)
    9592:	e46e0026 	addi      	r3, sp, 39      	//0x27
    9596:	8360      	ld.b      	r3, (r3, 0x0)
    9598:	748c      	zextb      	r2, r3
    959a:	330b      	movi      	r3, 11      	//0xb
    959c:	648c      	cmphs      	r3, r2
    959e:	0bba      	bt      	0x9512	//9512 <MTR_Trace_Start+0x1a2>
		pcie_mem_read(ITR_CSR_MTRA_TRACING_VEC, 4, &mtr_trace);
		while(!(mtr_trace & (1 << index)));
	}


	for(index = 0; index < 12; index++)
    95a0:	e46e0026 	addi      	r3, sp, 39      	//0x27
    95a4:	3200      	movi      	r2, 0      	//0x0
    95a6:	a340      	st.b      	r2, (r3, 0x0)
    95a8:	0448      	br      	0x9638	//9638 <MTR_Trace_Start+0x2c8>
	{
		if(!hsdimmb[index]) continue;
    95aa:	e46e0026 	addi      	r3, sp, 39      	//0x27
    95ae:	8360      	ld.b      	r3, (r3, 0x0)
    95b0:	74cc      	zextb      	r3, r3
    95b2:	1a03      	addi      	r2, sp, 12
    95b4:	d0620023 	ldr.b      	r3, (r2, r3<<0)
    95b8:	74cc      	zextb      	r3, r3
    95ba:	e9030037 	bez      	r3, 0x9628	//9628 <MTR_Trace_Start+0x2b8>
		mtr_start = (1 << ITR_MTR_TRACE_START_READ) | (1 << ITR_MTR_TRACE_START_WRITE) | (index << ITR_MTR_TRACE_START_IDX_SHIFT);
    95be:	e46e0026 	addi      	r3, sp, 39      	//0x27
    95c2:	8360      	ld.b      	r3, (r3, 0x0)
    95c4:	74cc      	zextb      	r3, r3
    95c6:	ec630300 	ori      	r3, r3, 768
    95ca:	6c8f      	mov      	r2, r3
    95cc:	1b02      	addi      	r3, sp, 8
    95ce:	b340      	st.w      	r2, (r3, 0x0)
		pcie_mem_write(ITR_CSR_MTRB_TRACE_START, 4, &mtr_start);
    95d0:	1b02      	addi      	r3, sp, 8
    95d2:	ea204000 	movih      	r0, 16384      	//0x4000
    95d6:	207f      	addi      	r0, 128      	//0x80
    95d8:	3100      	movi      	r1, 0      	//0x0
    95da:	3204      	movi      	r2, 4      	//0x4
    95dc:	e3fffbd0 	bsr      	0x8d7c	//8d7c <pcie_mem_write>
    95e0:	c4004820 	lsli      	r0, r0, 0
		mtr_trace = 0;
    95e4:	1b01      	addi      	r3, sp, 4
    95e6:	3200      	movi      	r2, 0      	//0x0
    95e8:	b340      	st.w      	r2, (r3, 0x0)
		pcie_mem_read(ITR_CSR_MTRB_TRACING_VEC, 4, &mtr_trace);
    95ea:	1b01      	addi      	r3, sp, 4
    95ec:	100e      	lrw      	r0, 0xc024002c	//c024002c <__stack+0xbfe40034>
    95ee:	3100      	movi      	r1, 0      	//0x0
    95f0:	3204      	movi      	r2, 4      	//0x4
    95f2:	e3fffbd3 	bsr      	0x8d98	//8d98 <pcie_mem_read>
    95f6:	c4004820 	lsli      	r0, r0, 0
		while(!(mtr_trace & (1 << index)));
    95fa:	6c00      	or      	r0, r0
    95fc:	e46e0026 	addi      	r3, sp, 39      	//0x27
    9600:	8360      	ld.b      	r3, (r3, 0x0)
    9602:	74cc      	zextb      	r3, r3
    9604:	3201      	movi      	r2, 1      	//0x1
    9606:	c4624023 	lsl      	r3, r2, r3
    960a:	6c8f      	mov      	r2, r3
    960c:	1b01      	addi      	r3, sp, 4
    960e:	9360      	ld.w      	r3, (r3, 0x0)
    9610:	68c8      	and      	r3, r2
    9612:	e903fff5 	bez      	r3, 0x95fc	//95fc <MTR_Trace_Start+0x28c>
    9616:	040a      	br      	0x962a	//962a <MTR_Trace_Start+0x2ba>
    9618:	00008d98 	.long	0x00008d98
    961c:	00008d7c 	.long	0x00008d7c
    9620:	bc24002c 	.long	0xbc24002c
    9624:	c024002c 	.long	0xc024002c
	}


	for(index = 0; index < 12; index++)
	{
		if(!hsdimmb[index]) continue;
    9628:	6c00      	or      	r0, r0
		pcie_mem_read(ITR_CSR_MTRA_TRACING_VEC, 4, &mtr_trace);
		while(!(mtr_trace & (1 << index)));
	}


	for(index = 0; index < 12; index++)
    962a:	e46e0026 	addi      	r3, sp, 39      	//0x27
    962e:	e44e0026 	addi      	r2, sp, 39      	//0x27
    9632:	8240      	ld.b      	r2, (r2, 0x0)
    9634:	2200      	addi      	r2, 1      	//0x1
    9636:	a340      	st.b      	r2, (r3, 0x0)
    9638:	e46e0026 	addi      	r3, sp, 39      	//0x27
    963c:	8360      	ld.b      	r3, (r3, 0x0)
    963e:	748c      	zextb      	r2, r3
    9640:	330b      	movi      	r3, 11      	//0xb
    9642:	648c      	cmphs      	r3, r2
    9644:	0bb3      	bt      	0x95aa	//95aa <MTR_Trace_Start+0x23a>
		pcie_mem_write(ITR_CSR_MTRB_TRACE_START, 4, &mtr_start);
		mtr_trace = 0;
		pcie_mem_read(ITR_CSR_MTRB_TRACING_VEC, 4, &mtr_trace);
		while(!(mtr_trace & (1 << index)));
	}
	return 1;
    9646:	3301      	movi      	r3, 1      	//0x1
}
    9648:	6c0f      	mov      	r0, r3
    964a:	140a      	addi      	sp, sp, 40
    964c:	1494      	pop      	r4-r7, r15
	...

00009650 <MTR_Trace_Stop>:
Bit32u MTR_Trace_Stop(void)
{
    9650:	14d4      	push      	r4-r7, r15
    9652:	142c      	subi      	sp, sp, 48
	Bit8u hsdimma_num = 0, hsdimmb_num = 0;
    9654:	e46e0026 	addi      	r3, sp, 39      	//0x27
    9658:	3200      	movi      	r2, 0      	//0x0
    965a:	a340      	st.b      	r2, (r3, 0x0)
    965c:	e46e0025 	addi      	r3, sp, 38      	//0x26
    9660:	3200      	movi      	r2, 0      	//0x0
    9662:	a340      	st.b      	r2, (r3, 0x0)
	Bit8u hsdimma[12] = {0,0,0,0,0,0,0,0,0,0,0,0};
    9664:	1b06      	addi      	r3, sp, 24
    9666:	3200      	movi      	r2, 0      	//0x0
    9668:	a340      	st.b      	r2, (r3, 0x0)
    966a:	1b06      	addi      	r3, sp, 24
    966c:	3200      	movi      	r2, 0      	//0x0
    966e:	a341      	st.b      	r2, (r3, 0x1)
    9670:	1b06      	addi      	r3, sp, 24
    9672:	3200      	movi      	r2, 0      	//0x0
    9674:	a342      	st.b      	r2, (r3, 0x2)
    9676:	1b06      	addi      	r3, sp, 24
    9678:	3200      	movi      	r2, 0      	//0x0
    967a:	a343      	st.b      	r2, (r3, 0x3)
    967c:	1b06      	addi      	r3, sp, 24
    967e:	3200      	movi      	r2, 0      	//0x0
    9680:	a344      	st.b      	r2, (r3, 0x4)
    9682:	1b06      	addi      	r3, sp, 24
    9684:	3200      	movi      	r2, 0      	//0x0
    9686:	a345      	st.b      	r2, (r3, 0x5)
    9688:	1b06      	addi      	r3, sp, 24
    968a:	3200      	movi      	r2, 0      	//0x0
    968c:	a346      	st.b      	r2, (r3, 0x6)
    968e:	1b06      	addi      	r3, sp, 24
    9690:	3200      	movi      	r2, 0      	//0x0
    9692:	a347      	st.b      	r2, (r3, 0x7)
    9694:	1b06      	addi      	r3, sp, 24
    9696:	3200      	movi      	r2, 0      	//0x0
    9698:	a348      	st.b      	r2, (r3, 0x8)
    969a:	1b06      	addi      	r3, sp, 24
    969c:	3200      	movi      	r2, 0      	//0x0
    969e:	a349      	st.b      	r2, (r3, 0x9)
    96a0:	1b06      	addi      	r3, sp, 24
    96a2:	3200      	movi      	r2, 0      	//0x0
    96a4:	a34a      	st.b      	r2, (r3, 0xa)
    96a6:	1b06      	addi      	r3, sp, 24
    96a8:	3200      	movi      	r2, 0      	//0x0
    96aa:	a34b      	st.b      	r2, (r3, 0xb)
	Bit8u hsdimmb[12] = {0,0,0,0,0,0,0,0,0,0,0,0};
    96ac:	1b03      	addi      	r3, sp, 12
    96ae:	3200      	movi      	r2, 0      	//0x0
    96b0:	a340      	st.b      	r2, (r3, 0x0)
    96b2:	1b03      	addi      	r3, sp, 12
    96b4:	3200      	movi      	r2, 0      	//0x0
    96b6:	a341      	st.b      	r2, (r3, 0x1)
    96b8:	1b03      	addi      	r3, sp, 12
    96ba:	3200      	movi      	r2, 0      	//0x0
    96bc:	a342      	st.b      	r2, (r3, 0x2)
    96be:	1b03      	addi      	r3, sp, 12
    96c0:	3200      	movi      	r2, 0      	//0x0
    96c2:	a343      	st.b      	r2, (r3, 0x3)
    96c4:	1b03      	addi      	r3, sp, 12
    96c6:	3200      	movi      	r2, 0      	//0x0
    96c8:	a344      	st.b      	r2, (r3, 0x4)
    96ca:	1b03      	addi      	r3, sp, 12
    96cc:	3200      	movi      	r2, 0      	//0x0
    96ce:	a345      	st.b      	r2, (r3, 0x5)
    96d0:	1b03      	addi      	r3, sp, 12
    96d2:	3200      	movi      	r2, 0      	//0x0
    96d4:	a346      	st.b      	r2, (r3, 0x6)
    96d6:	1b03      	addi      	r3, sp, 12
    96d8:	3200      	movi      	r2, 0      	//0x0
    96da:	a347      	st.b      	r2, (r3, 0x7)
    96dc:	1b03      	addi      	r3, sp, 12
    96de:	3200      	movi      	r2, 0      	//0x0
    96e0:	a348      	st.b      	r2, (r3, 0x8)
    96e2:	1b03      	addi      	r3, sp, 12
    96e4:	3200      	movi      	r2, 0      	//0x0
    96e6:	a349      	st.b      	r2, (r3, 0x9)
    96e8:	1b03      	addi      	r3, sp, 12
    96ea:	3200      	movi      	r2, 0      	//0x0
    96ec:	a34a      	st.b      	r2, (r3, 0xa)
    96ee:	1b03      	addi      	r3, sp, 12
    96f0:	3200      	movi      	r2, 0      	//0x0
    96f2:	a34b      	st.b      	r2, (r3, 0xb)
	Bit8u index = 0;
    96f4:	e46e002e 	addi      	r3, sp, 47      	//0x2f
    96f8:	3200      	movi      	r2, 0      	//0x0
    96fa:	a340      	st.b      	r2, (r3, 0x0)
	Bit32u mtr_start = 0;
    96fc:	1b0a      	addi      	r3, sp, 40
    96fe:	3200      	movi      	r2, 0      	//0x0
    9700:	b340      	st.w      	r2, (r3, 0x0)
	Bit32u mtr_end = 0;
    9702:	1b02      	addi      	r3, sp, 8
    9704:	3200      	movi      	r2, 0      	//0x0
    9706:	b340      	st.w      	r2, (r3, 0x0)
	Bit32u mtr_trace = 0;
    9708:	1b01      	addi      	r3, sp, 4
    970a:	3200      	movi      	r2, 0      	//0x0
    970c:	b340      	st.w      	r2, (r3, 0x0)

	pcie_mem_read(ITR_CSR_MTRA_HSDIMM_NUM, 4, &hsdimma_num);
    970e:	e46e0026 	addi      	r3, sp, 39      	//0x27
    9712:	ea20bc24 	movih      	r0, 48164      	//0xbc24
    9716:	3100      	movi      	r1, 0      	//0x0
    9718:	3204      	movi      	r2, 4      	//0x4
    971a:	e3fffb3f 	bsr      	0x8d98	//8d98 <pcie_mem_read>
    971e:	c4004820 	lsli      	r0, r0, 0
	pcie_mem_read(ITR_CSR_MTRB_HSDIMM_NUM, 4, &hsdimmb_num);
    9722:	e46e0025 	addi      	r3, sp, 38      	//0x26
    9726:	ea20c024 	movih      	r0, 49188      	//0xc024
    972a:	3100      	movi      	r1, 0      	//0x0
    972c:	3204      	movi      	r2, 4      	//0x4
    972e:	e3fffb35 	bsr      	0x8d98	//8d98 <pcie_mem_read>
    9732:	c4004820 	lsli      	r0, r0, 0

	Bit32u hsdimm_idx;
    for(index = 0; index < ITR_CSR_MTR_PCIE_HSDIMM_NUM; index++)
    9736:	e46e002e 	addi      	r3, sp, 47      	//0x2f
    973a:	3200      	movi      	r2, 0      	//0x0
    973c:	a340      	st.b      	r2, (r3, 0x0)
    973e:	0423      	br      	0x9784	//9784 <MTR_Trace_Stop+0x134>
    {
    	pcie_mem_read(ITR_CSR_MTRA_PCIE_HSDIMM_ID + index * 4, 4, &hsdimm_idx);
    9740:	e46e002e 	addi      	r3, sp, 47      	//0x2f
    9744:	8360      	ld.b      	r3, (r3, 0x0)
    9746:	74cc      	zextb      	r3, r3
    9748:	ea222f09 	movih      	r2, 12041      	//0x2f09
    974c:	3aa0      	bseti      	r2, 0
    974e:	5b68      	addu      	r3, r3, r2
    9750:	4362      	lsli      	r3, r3, 2
    9752:	6d8f      	mov      	r6, r3
    9754:	3700      	movi      	r7, 0      	//0x0
    9756:	6cfb      	mov      	r3, sp
    9758:	6c1b      	mov      	r0, r6
    975a:	6c5f      	mov      	r1, r7
    975c:	3204      	movi      	r2, 4      	//0x4
    975e:	e3fffb1d 	bsr      	0x8d98	//8d98 <pcie_mem_read>
    9762:	c4004820 	lsli      	r0, r0, 0
    	hsdimma[hsdimm_idx & 0xF] = 1;
    9766:	6cfb      	mov      	r3, sp
    9768:	9360      	ld.w      	r3, (r3, 0x0)
    976a:	e463200f 	andi      	r3, r3, 15
    976e:	1a06      	addi      	r2, sp, 24
    9770:	3101      	movi      	r1, 1      	//0x1
    9772:	d4620021 	str.b      	r1, (r2, r3<<0)

	pcie_mem_read(ITR_CSR_MTRA_HSDIMM_NUM, 4, &hsdimma_num);
	pcie_mem_read(ITR_CSR_MTRB_HSDIMM_NUM, 4, &hsdimmb_num);

	Bit32u hsdimm_idx;
    for(index = 0; index < ITR_CSR_MTR_PCIE_HSDIMM_NUM; index++)
    9776:	e46e002e 	addi      	r3, sp, 47      	//0x2f
    977a:	e44e002e 	addi      	r2, sp, 47      	//0x2f
    977e:	8240      	ld.b      	r2, (r2, 0x0)
    9780:	2200      	addi      	r2, 1      	//0x1
    9782:	a340      	st.b      	r2, (r3, 0x0)
    9784:	e46e002e 	addi      	r3, sp, 47      	//0x2f
    9788:	8360      	ld.b      	r3, (r3, 0x0)
    978a:	748c      	zextb      	r2, r3
    978c:	3305      	movi      	r3, 5      	//0x5
    978e:	648c      	cmphs      	r3, r2
    9790:	0bd8      	bt      	0x9740	//9740 <MTR_Trace_Stop+0xf0>
    {
    	pcie_mem_read(ITR_CSR_MTRA_PCIE_HSDIMM_ID + index * 4, 4, &hsdimm_idx);
    	hsdimma[hsdimm_idx & 0xF] = 1;
    }
    for(index = 0; index < ITR_CSR_MTR_PCIE_HSDIMM_NUM; index++)
    9792:	e46e002e 	addi      	r3, sp, 47      	//0x2f
    9796:	3200      	movi      	r2, 0      	//0x0
    9798:	a340      	st.b      	r2, (r3, 0x0)
    979a:	0423      	br      	0x97e0	//97e0 <MTR_Trace_Stop+0x190>
    {
    	pcie_mem_read(ITR_CSR_MTRB_PCIE_HSDIMM_ID + index * 4, 4, &hsdimm_idx);
    979c:	e46e002e 	addi      	r3, sp, 47      	//0x2f
    97a0:	8360      	ld.b      	r3, (r3, 0x0)
    97a2:	74cc      	zextb      	r3, r3
    97a4:	ea223009 	movih      	r2, 12297      	//0x3009
    97a8:	3aa0      	bseti      	r2, 0
    97aa:	5b68      	addu      	r3, r3, r2
    97ac:	4362      	lsli      	r3, r3, 2
    97ae:	6d0f      	mov      	r4, r3
    97b0:	3500      	movi      	r5, 0      	//0x0
    97b2:	6cfb      	mov      	r3, sp
    97b4:	6c13      	mov      	r0, r4
    97b6:	6c57      	mov      	r1, r5
    97b8:	3204      	movi      	r2, 4      	//0x4
    97ba:	e3fffaef 	bsr      	0x8d98	//8d98 <pcie_mem_read>
    97be:	c4004820 	lsli      	r0, r0, 0
    	hsdimmb[hsdimm_idx & 0xF] = 1;
    97c2:	6cfb      	mov      	r3, sp
    97c4:	9360      	ld.w      	r3, (r3, 0x0)
    97c6:	e463200f 	andi      	r3, r3, 15
    97ca:	1a03      	addi      	r2, sp, 12
    97cc:	3101      	movi      	r1, 1      	//0x1
    97ce:	d4620021 	str.b      	r1, (r2, r3<<0)
    for(index = 0; index < ITR_CSR_MTR_PCIE_HSDIMM_NUM; index++)
    {
    	pcie_mem_read(ITR_CSR_MTRA_PCIE_HSDIMM_ID + index * 4, 4, &hsdimm_idx);
    	hsdimma[hsdimm_idx & 0xF] = 1;
    }
    for(index = 0; index < ITR_CSR_MTR_PCIE_HSDIMM_NUM; index++)
    97d2:	e46e002e 	addi      	r3, sp, 47      	//0x2f
    97d6:	e44e002e 	addi      	r2, sp, 47      	//0x2f
    97da:	8240      	ld.b      	r2, (r2, 0x0)
    97dc:	2200      	addi      	r2, 1      	//0x1
    97de:	a340      	st.b      	r2, (r3, 0x0)
    97e0:	e46e002e 	addi      	r3, sp, 47      	//0x2f
    97e4:	8360      	ld.b      	r3, (r3, 0x0)
    97e6:	748c      	zextb      	r2, r3
    97e8:	3305      	movi      	r3, 5      	//0x5
    97ea:	648c      	cmphs      	r3, r2
    97ec:	0bd8      	bt      	0x979c	//979c <MTR_Trace_Stop+0x14c>
    {
    	pcie_mem_read(ITR_CSR_MTRB_PCIE_HSDIMM_ID + index * 4, 4, &hsdimm_idx);
    	hsdimmb[hsdimm_idx & 0xF] = 1;
    }

	for(index = 0; index < 12; index++)
    97ee:	e46e002e 	addi      	r3, sp, 47      	//0x2f
    97f2:	3200      	movi      	r2, 0      	//0x0
    97f4:	a340      	st.b      	r2, (r3, 0x0)
    97f6:	043f      	br      	0x9874	//9874 <MTR_Trace_Stop+0x224>
	{
		if(!hsdimmb[index]) continue;
    97f8:	e46e002e 	addi      	r3, sp, 47      	//0x2f
    97fc:	8360      	ld.b      	r3, (r3, 0x0)
    97fe:	74cc      	zextb      	r3, r3
    9800:	1a03      	addi      	r2, sp, 12
    9802:	d0620023 	ldr.b      	r3, (r2, r3<<0)
    9806:	74cc      	zextb      	r3, r3
    9808:	e903002e 	bez      	r3, 0x9864	//9864 <MTR_Trace_Stop+0x214>
		mtr_end = (index << ITR_MTR_TRACE_STOP_IDX_SHIFT);
    980c:	e46e002e 	addi      	r3, sp, 47      	//0x2f
    9810:	8360      	ld.b      	r3, (r3, 0x0)
    9812:	748c      	zextb      	r2, r3
    9814:	1b02      	addi      	r3, sp, 8
    9816:	b340      	st.w      	r2, (r3, 0x0)
		pcie_mem_write(ITR_CSR_MTRA_TRACE_STOP, 4, &mtr_end);
    9818:	1b02      	addi      	r3, sp, 8
    981a:	ea00a03c 	movi      	r0, 41020      	//0xa03c
    981e:	c7004900 	rotli      	r0, r0, 24
    9822:	3100      	movi      	r1, 0      	//0x0
    9824:	3204      	movi      	r2, 4      	//0x4
    9826:	e3fffaab 	bsr      	0x8d7c	//8d7c <pcie_mem_write>
    982a:	c4004820 	lsli      	r0, r0, 0
		mtr_trace = 0xFFF;
    982e:	1b01      	addi      	r3, sp, 4
    9830:	ea020fff 	movi      	r2, 4095      	//0xfff
    9834:	b340      	st.w      	r2, (r3, 0x0)
		pcie_mem_read(ITR_CSR_MTRA_TRACING_VEC, 4, &mtr_trace);
    9836:	1b01      	addi      	r3, sp, 4
    9838:	1112      	lrw      	r0, 0xbc24002c	//bc24002c <__stack+0xbbe40034>
    983a:	3100      	movi      	r1, 0      	//0x0
    983c:	3204      	movi      	r2, 4      	//0x4
    983e:	e3fffaad 	bsr      	0x8d98	//8d98 <pcie_mem_read>
    9842:	c4004820 	lsli      	r0, r0, 0
		while(mtr_trace & (1 << index));
    9846:	6c00      	or      	r0, r0
    9848:	e46e002e 	addi      	r3, sp, 47      	//0x2f
    984c:	8360      	ld.b      	r3, (r3, 0x0)
    984e:	74cc      	zextb      	r3, r3
    9850:	3201      	movi      	r2, 1      	//0x1
    9852:	c4624023 	lsl      	r3, r2, r3
    9856:	6c8f      	mov      	r2, r3
    9858:	1b01      	addi      	r3, sp, 4
    985a:	9360      	ld.w      	r3, (r3, 0x0)
    985c:	68c8      	and      	r3, r2
    985e:	e923fff5 	bnez      	r3, 0x9848	//9848 <MTR_Trace_Stop+0x1f8>
    9862:	0402      	br      	0x9866	//9866 <MTR_Trace_Stop+0x216>
    	hsdimmb[hsdimm_idx & 0xF] = 1;
    }

	for(index = 0; index < 12; index++)
	{
		if(!hsdimmb[index]) continue;
    9864:	6c00      	or      	r0, r0
    {
    	pcie_mem_read(ITR_CSR_MTRB_PCIE_HSDIMM_ID + index * 4, 4, &hsdimm_idx);
    	hsdimmb[hsdimm_idx & 0xF] = 1;
    }

	for(index = 0; index < 12; index++)
    9866:	e46e002e 	addi      	r3, sp, 47      	//0x2f
    986a:	e44e002e 	addi      	r2, sp, 47      	//0x2f
    986e:	8240      	ld.b      	r2, (r2, 0x0)
    9870:	2200      	addi      	r2, 1      	//0x1
    9872:	a340      	st.b      	r2, (r3, 0x0)
    9874:	e46e002e 	addi      	r3, sp, 47      	//0x2f
    9878:	8360      	ld.b      	r3, (r3, 0x0)
    987a:	748c      	zextb      	r2, r3
    987c:	330b      	movi      	r3, 11      	//0xb
    987e:	648c      	cmphs      	r3, r2
    9880:	0bbc      	bt      	0x97f8	//97f8 <MTR_Trace_Stop+0x1a8>
		mtr_trace = 0xFFF;
		pcie_mem_read(ITR_CSR_MTRA_TRACING_VEC, 4, &mtr_trace);
		while(mtr_trace & (1 << index));
	}

	for(index = 0; index < 12; index++)
    9882:	e46e002e 	addi      	r3, sp, 47      	//0x2f
    9886:	3200      	movi      	r2, 0      	//0x0
    9888:	a340      	st.b      	r2, (r3, 0x0)
    988a:	0447      	br      	0x9918	//9918 <MTR_Trace_Stop+0x2c8>
	{
		if(!hsdimmb[index]) continue;
    988c:	e46e002e 	addi      	r3, sp, 47      	//0x2f
    9890:	8360      	ld.b      	r3, (r3, 0x0)
    9892:	74cc      	zextb      	r3, r3
    9894:	1a03      	addi      	r2, sp, 12
    9896:	d0620023 	ldr.b      	r3, (r2, r3<<0)
    989a:	74cc      	zextb      	r3, r3
    989c:	e9030036 	bez      	r3, 0x9908	//9908 <MTR_Trace_Stop+0x2b8>
		mtr_end = (index << ITR_MTR_TRACE_STOP_IDX_SHIFT);
    98a0:	e46e002e 	addi      	r3, sp, 47      	//0x2f
    98a4:	8360      	ld.b      	r3, (r3, 0x0)
    98a6:	748c      	zextb      	r2, r3
    98a8:	1b02      	addi      	r3, sp, 8
    98aa:	b340      	st.w      	r2, (r3, 0x0)
		pcie_mem_write(ITR_CSR_MTRB_TRACE_STOP, 4, &mtr_end);
    98ac:	1b02      	addi      	r3, sp, 8
    98ae:	ea204000 	movih      	r0, 16384      	//0x4000
    98b2:	209f      	addi      	r0, 160      	//0xa0
    98b4:	3100      	movi      	r1, 0      	//0x0
    98b6:	3204      	movi      	r2, 4      	//0x4
    98b8:	e3fffa62 	bsr      	0x8d7c	//8d7c <pcie_mem_write>
    98bc:	c4004820 	lsli      	r0, r0, 0
		mtr_trace = 0xFFF;
    98c0:	1b01      	addi      	r3, sp, 4
    98c2:	ea020fff 	movi      	r2, 4095      	//0xfff
    98c6:	b340      	st.w      	r2, (r3, 0x0)
		pcie_mem_read(ITR_CSR_MTRB_TRACING_VEC, 4, &mtr_trace);
    98c8:	1b01      	addi      	r3, sp, 4
    98ca:	100f      	lrw      	r0, 0xc024002c	//c024002c <__stack+0xbfe40034>
    98cc:	3100      	movi      	r1, 0      	//0x0
    98ce:	3204      	movi      	r2, 4      	//0x4
    98d0:	e3fffa64 	bsr      	0x8d98	//8d98 <pcie_mem_read>
    98d4:	c4004820 	lsli      	r0, r0, 0
		while(mtr_trace & (1 << index));
    98d8:	6c00      	or      	r0, r0
    98da:	e46e002e 	addi      	r3, sp, 47      	//0x2f
    98de:	8360      	ld.b      	r3, (r3, 0x0)
    98e0:	74cc      	zextb      	r3, r3
    98e2:	3201      	movi      	r2, 1      	//0x1
    98e4:	c4624023 	lsl      	r3, r2, r3
    98e8:	6c8f      	mov      	r2, r3
    98ea:	1b01      	addi      	r3, sp, 4
    98ec:	9360      	ld.w      	r3, (r3, 0x0)
    98ee:	68c8      	and      	r3, r2
    98f0:	e923fff5 	bnez      	r3, 0x98da	//98da <MTR_Trace_Stop+0x28a>
    98f4:	040b      	br      	0x990a	//990a <MTR_Trace_Stop+0x2ba>
    98f6:	0000      	.short	0x0000
    98f8:	00008d98 	.long	0x00008d98
    98fc:	00008d7c 	.long	0x00008d7c
    9900:	bc24002c 	.long	0xbc24002c
    9904:	c024002c 	.long	0xc024002c
		while(mtr_trace & (1 << index));
	}

	for(index = 0; index < 12; index++)
	{
		if(!hsdimmb[index]) continue;
    9908:	6c00      	or      	r0, r0
		mtr_trace = 0xFFF;
		pcie_mem_read(ITR_CSR_MTRA_TRACING_VEC, 4, &mtr_trace);
		while(mtr_trace & (1 << index));
	}

	for(index = 0; index < 12; index++)
    990a:	e46e002e 	addi      	r3, sp, 47      	//0x2f
    990e:	e44e002e 	addi      	r2, sp, 47      	//0x2f
    9912:	8240      	ld.b      	r2, (r2, 0x0)
    9914:	2200      	addi      	r2, 1      	//0x1
    9916:	a340      	st.b      	r2, (r3, 0x0)
    9918:	e46e002e 	addi      	r3, sp, 47      	//0x2f
    991c:	8360      	ld.b      	r3, (r3, 0x0)
    991e:	748c      	zextb      	r2, r3
    9920:	330b      	movi      	r3, 11      	//0xb
    9922:	648c      	cmphs      	r3, r2
    9924:	0bb4      	bt      	0x988c	//988c <MTR_Trace_Stop+0x23c>
		pcie_mem_write(ITR_CSR_MTRB_TRACE_STOP, 4, &mtr_end);
		mtr_trace = 0xFFF;
		pcie_mem_read(ITR_CSR_MTRB_TRACING_VEC, 4, &mtr_trace);
		while(mtr_trace & (1 << index));
	}
	return 1;
    9926:	3301      	movi      	r3, 1      	//0x1
}
    9928:	6c0f      	mov      	r0, r3
    992a:	140c      	addi      	sp, sp, 48
    992c:	1494      	pop      	r4-r7, r15
	...

00009930 <MTR_Overflow_Check>:

Bit32u MTR_Overflow_Check(void)
{
	/*FIXME:Waiting for HSDIMM Spec*/
	return 1;
    9930:	3301      	movi      	r3, 1      	//0x1
}
    9932:	6c0f      	mov      	r0, r3
    9934:	783c      	rts
	...

00009938 <ITR_BIOS_Fetch>:
/*DMI control and BIOS fetch*/
Bit32u ITR_PCH_Link_Setup();
Bit32u ITR_PCH_Link_Release();

Bit32u ITR_BIOS_Fetch(Bit32u addr, Bit32u len, void* buffer)
{
    9938:	14d0      	push      	r15
    993a:	1426      	subi      	sp, sp, 24
    993c:	1b02      	addi      	r3, sp, 8
    993e:	b300      	st.w      	r0, (r3, 0x0)
    9940:	1b01      	addi      	r3, sp, 4
    9942:	b320      	st.w      	r1, (r3, 0x0)
    9944:	6cfb      	mov      	r3, sp
    9946:	b340      	st.w      	r2, (r3, 0x0)
	Bit32u len_left = len;
    9948:	1b05      	addi      	r3, sp, 20
    994a:	1a01      	addi      	r2, sp, 4
    994c:	9240      	ld.w      	r2, (r2, 0x0)
    994e:	b340      	st.w      	r2, (r3, 0x0)
	Bit8u* buf_p = (Bit8u *)buffer;
    9950:	1b04      	addi      	r3, sp, 16
    9952:	6cbb      	mov      	r2, sp
    9954:	9240      	ld.w      	r2, (r2, 0x0)
    9956:	b340      	st.w      	r2, (r3, 0x0)
	Bit32u addr_p = addr;
    9958:	1b03      	addi      	r3, sp, 12
    995a:	1a02      	addi      	r2, sp, 8
    995c:	9240      	ld.w      	r2, (r2, 0x0)
    995e:	b340      	st.w      	r2, (r3, 0x0)
	while(len_left > 32)
    9960:	0428      	br      	0x99b0	//99b0 <ITR_BIOS_Fetch+0x78>
	{
		pcie_mem_write(ITR_CSR_PCH_REQ_ADDR, 4, &addr_p);
    9962:	1b03      	addi      	r3, sp, 12
    9964:	ea008494 	movi      	r0, 33940      	//0x8494
    9968:	c7004900 	rotli      	r0, r0, 24
    996c:	3100      	movi      	r1, 0      	//0x0
    996e:	3204      	movi      	r2, 4      	//0x4
    9970:	e3fffa06 	bsr      	0x8d7c	//8d7c <pcie_mem_write>
    9974:	c4004820 	lsli      	r0, r0, 0
		pcie_mem_read(ITR_CSR_PCH_DATA, 32, buf_p);
    9978:	1b04      	addi      	r3, sp, 16
    997a:	ea00a00a 	movi      	r0, 40970      	//0xa00a
    997e:	c7204900 	rotli      	r0, r0, 25
    9982:	3100      	movi      	r1, 0      	//0x0
    9984:	3220      	movi      	r2, 32      	//0x20
    9986:	9360      	ld.w      	r3, (r3, 0x0)
    9988:	e3fffa08 	bsr      	0x8d98	//8d98 <pcie_mem_read>
    998c:	c4004820 	lsli      	r0, r0, 0
		len_left -= 32;
    9990:	1b05      	addi      	r3, sp, 20
    9992:	1a05      	addi      	r2, sp, 20
    9994:	9240      	ld.w      	r2, (r2, 0x0)
    9996:	2a1f      	subi      	r2, 32      	//0x20
    9998:	b340      	st.w      	r2, (r3, 0x0)
		buf_p += 32;
    999a:	1b04      	addi      	r3, sp, 16
    999c:	1a04      	addi      	r2, sp, 16
    999e:	9240      	ld.w      	r2, (r2, 0x0)
    99a0:	221f      	addi      	r2, 32      	//0x20
    99a2:	b340      	st.w      	r2, (r3, 0x0)
		addr_p += 32;
    99a4:	1b03      	addi      	r3, sp, 12
    99a6:	9360      	ld.w      	r3, (r3, 0x0)
    99a8:	e443001f 	addi      	r2, r3, 32      	//0x20
    99ac:	1b03      	addi      	r3, sp, 12
    99ae:	b340      	st.w      	r2, (r3, 0x0)
Bit32u ITR_BIOS_Fetch(Bit32u addr, Bit32u len, void* buffer)
{
	Bit32u len_left = len;
	Bit8u* buf_p = (Bit8u *)buffer;
	Bit32u addr_p = addr;
	while(len_left > 32)
    99b0:	1b05      	addi      	r3, sp, 20
    99b2:	9360      	ld.w      	r3, (r3, 0x0)
    99b4:	eb030020 	cmphsi      	r3, 33      	//0x21
    99b8:	0bd5      	bt      	0x9962	//9962 <ITR_BIOS_Fetch+0x2a>
		pcie_mem_read(ITR_CSR_PCH_DATA, 32, buf_p);
		len_left -= 32;
		buf_p += 32;
		addr_p += 32;
	}
	pcie_mem_write(ITR_CSR_PCH_REQ_ADDR, 4, &addr_p);
    99ba:	1b03      	addi      	r3, sp, 12
    99bc:	ea008494 	movi      	r0, 33940      	//0x8494
    99c0:	c7004900 	rotli      	r0, r0, 24
    99c4:	3100      	movi      	r1, 0      	//0x0
    99c6:	3204      	movi      	r2, 4      	//0x4
    99c8:	e3fff9da 	bsr      	0x8d7c	//8d7c <pcie_mem_write>
    99cc:	c4004820 	lsli      	r0, r0, 0
	pcie_mem_read(ITR_CSR_PCH_DATA, len_left, buf_p);
    99d0:	1b05      	addi      	r3, sp, 20
    99d2:	9340      	ld.w      	r2, (r3, 0x0)
    99d4:	1b04      	addi      	r3, sp, 16
    99d6:	ea00a00a 	movi      	r0, 40970      	//0xa00a
    99da:	c7204900 	rotli      	r0, r0, 25
    99de:	3100      	movi      	r1, 0      	//0x0
    99e0:	9360      	ld.w      	r3, (r3, 0x0)
    99e2:	e3fff9db 	bsr      	0x8d98	//8d98 <pcie_mem_read>
    99e6:	c4004820 	lsli      	r0, r0, 0
	return len;
    99ea:	1b01      	addi      	r3, sp, 4
    99ec:	9360      	ld.w      	r3, (r3, 0x0)
}
    99ee:	6c0f      	mov      	r0, r3
    99f0:	1406      	addi      	sp, sp, 24
    99f2:	1490      	pop      	r15
    99f4:	00008d7c 	.long	0x00008d7c
    99f8:	00008d98 	.long	0x00008d98

000099fc <readl>:
{
    *(volatile Bit16u *)addr = value;
}

static inline Bit32u readl(const volatile void *addr)
{
    99fc:	1421      	subi      	sp, sp, 4
    99fe:	6cfb      	mov      	r3, sp
    9a00:	b300      	st.w      	r0, (r3, 0x0)
    return *(const volatile Bit32u *)addr;
    9a02:	6cfb      	mov      	r3, sp
    9a04:	9360      	ld.w      	r3, (r3, 0x0)
    9a06:	9360      	ld.w      	r3, (r3, 0x0)
}
    9a08:	6c0f      	mov      	r0, r3
    9a0a:	1401      	addi      	sp, sp, 4
    9a0c:	783c      	rts
	...

00009a10 <writel>:

static inline void writel(Bit32u value, volatile void *addr)
{
    9a10:	1422      	subi      	sp, sp, 8
    9a12:	1b01      	addi      	r3, sp, 4
    9a14:	b300      	st.w      	r0, (r3, 0x0)
    9a16:	6cfb      	mov      	r3, sp
    9a18:	b320      	st.w      	r1, (r3, 0x0)
    *(volatile Bit32u *)addr = value;
    9a1a:	6cfb      	mov      	r3, sp
    9a1c:	9360      	ld.w      	r3, (r3, 0x0)
    9a1e:	1a01      	addi      	r2, sp, 4
    9a20:	9240      	ld.w      	r2, (r2, 0x0)
    9a22:	b340      	st.w      	r2, (r3, 0x0)
}
    9a24:	1402      	addi      	sp, sp, 8
    9a26:	783c      	rts

00009a28 <pci_altera_verify_id>:
#include "pci_cmdq.h"
#include "ck810.h"

#define PCI_EP_CONFIG_SPACE_BASE_ADDR CK_PCIE_EP_ADDRBASE

Bit32u pci_altera_verify_id(){
    9a28:	14d3      	push      	r4-r6, r15
    9a2a:	1421      	subi      	sp, sp, 4
	Bit32u val;

	val = readl((void *)(PCI_EP_CONFIG_SPACE_BASE_ADDR));
    9a2c:	6dbb      	mov      	r6, sp
    9a2e:	30d0      	movi      	r0, 208      	//0xd0
    9a30:	4015      	lsli      	r0, r0, 21
    9a32:	e3ffffe5 	bsr      	0x99fc	//99fc <readl>
    9a36:	c4004820 	lsli      	r0, r0, 0
    9a3a:	b600      	st.w      	r0, (r6, 0x0)
		printf("wrong device id:0x%o8x\n", (val >> 16)&0xFFFF);
		return -1;
	}
	*/

	printf("vendor id is:0x%x, device id is:0x%x\n", (val&0xFFFF), ((val >> 16)&0xFFFF));
    9a3c:	6c7b      	mov      	r1, sp
    9a3e:	9140      	ld.w      	r2, (r1, 0x0)
    9a40:	ea04ffff 	movi      	r4, 65535      	//0xffff
    9a44:	3500      	movi      	r5, 0      	//0x0
    9a46:	c4822020 	and      	r0, r2, r4
    9a4a:	c4a32021 	and      	r1, r3, r5
    9a4e:	6cc3      	mov      	r3, r0
    9a50:	6d07      	mov      	r4, r1
    9a52:	6c8f      	mov      	r2, r3
    9a54:	6cfb      	mov      	r3, sp
    9a56:	9360      	ld.w      	r3, (r3, 0x0)
    9a58:	4b70      	lsri      	r3, r3, 16
    9a5a:	1007      	lrw      	r0, 0x107d8	//107d8 <__etext+0xc28>
    9a5c:	6c4b      	mov      	r1, r2
    9a5e:	6c8f      	mov      	r2, r3
    9a60:	e0002778 	bsr      	0xe950	//e950 <printf>
    9a64:	c4004820 	lsli      	r0, r0, 0

	return 0;
    9a68:	3300      	movi      	r3, 0      	//0x0
}
    9a6a:	6c0f      	mov      	r0, r3
    9a6c:	1401      	addi      	sp, sp, 4
    9a6e:	1493      	pop      	r4-r6, r15
    9a70:	000099fc 	.long	0x000099fc
    9a74:	000107d8 	.long	0x000107d8
    9a78:	0000e950 	.long	0x0000e950

00009a7c <pci_altera_find_capabilities>:

Bit16u pci_altera_find_capabilities(){
    9a7c:	14d1      	push      	r4, r15
    9a7e:	1423      	subi      	sp, sp, 12
    Bit8u cap_id;
    Bit32u addr;    /* capbility list entry */
    Bit32u pcap;    /* capability pointer */
    Bit8u i;

    addr = PCI_EP_CONFIG_SPACE_BASE_ADDR + PCI_CAPABILITY_LIST;    /* pcie capbility list pointer */
    9a80:	1b02      	addi      	r3, sp, 8
    9a82:	ea02d01a 	movi      	r2, 53274      	//0xd01a
    9a86:	c7024902 	rotli      	r2, r2, 24
    9a8a:	b340      	st.w      	r2, (r3, 0x0)

    for(i=0; i< PCIE_CAP_SIZE; i++){
    9a8c:	e46e0006 	addi      	r3, sp, 7      	//0x7
    9a90:	3200      	movi      	r2, 0      	//0x0
    9a92:	a340      	st.b      	r2, (r3, 0x0)
    9a94:	0489      	br      	0x9ba6	//9ba6 <pci_altera_find_capabilities+0x12a>
        pcap = readl((void *)addr);
    9a96:	1b02      	addi      	r3, sp, 8
    9a98:	9360      	ld.w      	r3, (r3, 0x0)
    9a9a:	6d3b      	mov      	r4, sp
    9a9c:	6c0f      	mov      	r0, r3
    9a9e:	e3ffffaf 	bsr      	0x99fc	//99fc <readl>
    9aa2:	c4004820 	lsli      	r0, r0, 0
    9aa6:	b400      	st.w      	r0, (r4, 0x0)
        if(pcap == 0){
    9aa8:	6cfb      	mov      	r3, sp
    9aaa:	9360      	ld.w      	r3, (r3, 0x0)
    9aac:	e9230009 	bnez      	r3, 0x9abe	//9abe <pci_altera_find_capabilities+0x42>
            printf("Finished reading capabilities\n");
    9ab0:	1204      	lrw      	r0, 0x10800	//10800 <__etext+0xc50>
    9ab2:	e000274f 	bsr      	0xe950	//e950 <printf>
    9ab6:	c4004820 	lsli      	r0, r0, 0
            return 0;
    9aba:	3300      	movi      	r3, 0      	//0x0
    9abc:	047d      	br      	0x9bb6	//9bb6 <pci_altera_find_capabilities+0x13a>
        }

        pcie_all_cap[i].cap_addr = pcap;
    9abe:	e46e0006 	addi      	r3, sp, 7      	//0x7
    9ac2:	8360      	ld.b      	r3, (r3, 0x0)
    9ac4:	74cc      	zextb      	r3, r3
    9ac6:	1241      	lrw      	r2, 0x13a88	//13a88 <pcie_all_cap>
    9ac8:	4363      	lsli      	r3, r3, 3
    9aca:	5a6c      	addu      	r3, r2, r3
    9acc:	6cbb      	mov      	r2, sp
    9ace:	9240      	ld.w      	r2, (r2, 0x0)
    9ad0:	b341      	st.w      	r2, (r3, 0x4)
        pcie_all_cap[i].cap_id = readl((void *)pcap);
    9ad2:	e46e0006 	addi      	r3, sp, 7      	//0x7
    9ad6:	8360      	ld.b      	r3, (r3, 0x0)
    9ad8:	750c      	zextb      	r4, r3
    9ada:	6cfb      	mov      	r3, sp
    9adc:	9360      	ld.w      	r3, (r3, 0x0)
    9ade:	6c0f      	mov      	r0, r3
    9ae0:	e3ffff8e 	bsr      	0x99fc	//99fc <readl>
    9ae4:	c4004820 	lsli      	r0, r0, 0
    9ae8:	6c83      	mov      	r2, r0
    9aea:	1178      	lrw      	r3, 0x13a88	//13a88 <pcie_all_cap>
    9aec:	d4830902 	str.w      	r2, (r3, r4<<3)
        addr = pcap + 8;
    9af0:	1b02      	addi      	r3, sp, 8
    9af2:	6cbb      	mov      	r2, sp
    9af4:	9240      	ld.w      	r2, (r2, 0x0)
    9af6:	2207      	addi      	r2, 8      	//0x8
    9af8:	b340      	st.w      	r2, (r3, 0x0)

        /* Init capbility */
        switch(pcie_all_cap[i].cap_id){
    9afa:	e46e0006 	addi      	r3, sp, 7      	//0x7
    9afe:	8360      	ld.b      	r3, (r3, 0x0)
    9b00:	748c      	zextb      	r2, r3
    9b02:	1172      	lrw      	r3, 0x13a88	//13a88 <pcie_all_cap>
    9b04:	d0430903 	ldr.w      	r3, (r3, r2<<3)
    9b08:	3b45      	cmpnei      	r3, 5
    9b0a:	0c1a      	bf      	0x9b3e	//9b3e <pci_altera_find_capabilities+0xc2>
    9b0c:	3b05      	cmphsi      	r3, 6      	//0x6
    9b0e:	0804      	bt      	0x9b16	//9b16 <pci_altera_find_capabilities+0x9a>
    9b10:	3b41      	cmpnei      	r3, 1
    9b12:	0c07      	bf      	0x9b20	//9b20 <pci_altera_find_capabilities+0xa4>
                break;
            case PCI_CAP_ID_EXP:        /* PCI Express */
                printf("EXP addr:0x%04x\n", pcie_all_cap[i].cap_addr);
                break;
            default:
                break;
    9b14:	0442      	br      	0x9b98	//9b98 <pci_altera_find_capabilities+0x11c>
        pcie_all_cap[i].cap_addr = pcap;
        pcie_all_cap[i].cap_id = readl((void *)pcap);
        addr = pcap + 8;

        /* Init capbility */
        switch(pcie_all_cap[i].cap_id){
    9b16:	3b50      	cmpnei      	r3, 16
    9b18:	0c31      	bf      	0x9b7a	//9b7a <pci_altera_find_capabilities+0xfe>
    9b1a:	3b51      	cmpnei      	r3, 17
    9b1c:	0c20      	bf      	0x9b5c	//9b5c <pci_altera_find_capabilities+0xe0>
                break;
            case PCI_CAP_ID_EXP:        /* PCI Express */
                printf("EXP addr:0x%04x\n", pcie_all_cap[i].cap_addr);
                break;
            default:
                break;
    9b1e:	043d      	br      	0x9b98	//9b98 <pci_altera_find_capabilities+0x11c>
        addr = pcap + 8;

        /* Init capbility */
        switch(pcie_all_cap[i].cap_id){
            case PCI_CAP_ID_PM:         /* Power Management */
                printf("PM addr:0x%04x\n", pcie_all_cap[i].cap_addr);
    9b20:	e46e0006 	addi      	r3, sp, 7      	//0x7
    9b24:	8360      	ld.b      	r3, (r3, 0x0)
    9b26:	74cc      	zextb      	r3, r3
    9b28:	1148      	lrw      	r2, 0x13a88	//13a88 <pcie_all_cap>
    9b2a:	4363      	lsli      	r3, r3, 3
    9b2c:	5a6c      	addu      	r3, r2, r3
    9b2e:	9361      	ld.w      	r3, (r3, 0x4)
    9b30:	1107      	lrw      	r0, 0x10820	//10820 <__etext+0xc70>
    9b32:	6c4f      	mov      	r1, r3
    9b34:	e000270e 	bsr      	0xe950	//e950 <printf>
    9b38:	c4004820 	lsli      	r0, r0, 0
                break;
    9b3c:	042e      	br      	0x9b98	//9b98 <pci_altera_find_capabilities+0x11c>
            case PCI_CAP_ID_MSI:        /* MSI */
                printf("MSI addr:0x%04x\n", pcie_all_cap[i].cap_addr);
    9b3e:	e46e0006 	addi      	r3, sp, 7      	//0x7
    9b42:	8360      	ld.b      	r3, (r3, 0x0)
    9b44:	74cc      	zextb      	r3, r3
    9b46:	1141      	lrw      	r2, 0x13a88	//13a88 <pcie_all_cap>
    9b48:	4363      	lsli      	r3, r3, 3
    9b4a:	5a6c      	addu      	r3, r2, r3
    9b4c:	9361      	ld.w      	r3, (r3, 0x4)
    9b4e:	1101      	lrw      	r0, 0x10830	//10830 <__etext+0xc80>
    9b50:	6c4f      	mov      	r1, r3
    9b52:	e00026ff 	bsr      	0xe950	//e950 <printf>
    9b56:	c4004820 	lsli      	r0, r0, 0
                break;
    9b5a:	041f      	br      	0x9b98	//9b98 <pci_altera_find_capabilities+0x11c>
            case PCI_CAP_ID_MSIX:       /* MSI-X */
                printf("MSIX addr:0x%04x\n", pcie_all_cap[i].cap_addr);
    9b5c:	e46e0006 	addi      	r3, sp, 7      	//0x7
    9b60:	8360      	ld.b      	r3, (r3, 0x0)
    9b62:	74cc      	zextb      	r3, r3
    9b64:	1059      	lrw      	r2, 0x13a88	//13a88 <pcie_all_cap>
    9b66:	4363      	lsli      	r3, r3, 3
    9b68:	5a6c      	addu      	r3, r2, r3
    9b6a:	9361      	ld.w      	r3, (r3, 0x4)
    9b6c:	101a      	lrw      	r0, 0x10844	//10844 <__etext+0xc94>
    9b6e:	6c4f      	mov      	r1, r3
    9b70:	e00026f0 	bsr      	0xe950	//e950 <printf>
    9b74:	c4004820 	lsli      	r0, r0, 0
                break;
    9b78:	0410      	br      	0x9b98	//9b98 <pci_altera_find_capabilities+0x11c>
            case PCI_CAP_ID_EXP:        /* PCI Express */
                printf("EXP addr:0x%04x\n", pcie_all_cap[i].cap_addr);
    9b7a:	e46e0006 	addi      	r3, sp, 7      	//0x7
    9b7e:	8360      	ld.b      	r3, (r3, 0x0)
    9b80:	74cc      	zextb      	r3, r3
    9b82:	1052      	lrw      	r2, 0x13a88	//13a88 <pcie_all_cap>
    9b84:	4363      	lsli      	r3, r3, 3
    9b86:	5a6c      	addu      	r3, r2, r3
    9b88:	9361      	ld.w      	r3, (r3, 0x4)
    9b8a:	1014      	lrw      	r0, 0x10858	//10858 <__etext+0xca8>
    9b8c:	6c4f      	mov      	r1, r3
    9b8e:	e00026e1 	bsr      	0xe950	//e950 <printf>
    9b92:	c4004820 	lsli      	r0, r0, 0
                break;
    9b96:	6c00      	or      	r0, r0
    Bit32u pcap;    /* capability pointer */
    Bit8u i;

    addr = PCI_EP_CONFIG_SPACE_BASE_ADDR + PCI_CAPABILITY_LIST;    /* pcie capbility list pointer */

    for(i=0; i< PCIE_CAP_SIZE; i++){
    9b98:	e46e0006 	addi      	r3, sp, 7      	//0x7
    9b9c:	e44e0006 	addi      	r2, sp, 7      	//0x7
    9ba0:	8240      	ld.b      	r2, (r2, 0x0)
    9ba2:	2200      	addi      	r2, 1      	//0x1
    9ba4:	a340      	st.b      	r2, (r3, 0x0)
    9ba6:	e46e0006 	addi      	r3, sp, 7      	//0x7
    9baa:	8360      	ld.b      	r3, (r3, 0x0)
    9bac:	748c      	zextb      	r2, r3
    9bae:	3305      	movi      	r3, 5      	//0x5
    9bb0:	648c      	cmphs      	r3, r2
    9bb2:	0b72      	bt      	0x9a96	//9a96 <pci_altera_find_capabilities+0x1a>
            default:
                break;
        }
    }

    return 0;
    9bb4:	3300      	movi      	r3, 0      	//0x0

}
    9bb6:	6c0f      	mov      	r0, r3
    9bb8:	1403      	addi      	sp, sp, 12
    9bba:	1491      	pop      	r4, r15
    9bbc:	000099fc 	.long	0x000099fc
    9bc0:	00010800 	.long	0x00010800
    9bc4:	0000e950 	.long	0x0000e950
    9bc8:	00013a88 	.long	0x00013a88
    9bcc:	00010820 	.long	0x00010820
    9bd0:	00010830 	.long	0x00010830
    9bd4:	00010844 	.long	0x00010844
    9bd8:	00010858 	.long	0x00010858

00009bdc <pci_altera_get_capability>:

Bit16u pci_altera_get_capability(Bit16u cap_id){
    9bdc:	14d0      	push      	r15
    9bde:	1422      	subi      	sp, sp, 8
    9be0:	6c83      	mov      	r2, r0
    9be2:	6cfb      	mov      	r3, sp
    9be4:	ab40      	st.h      	r2, (r3, 0x0)
	Bit32u i;

	for(i=0; i< PCIE_CAP_SIZE; i++){
    9be6:	1b01      	addi      	r3, sp, 4
    9be8:	3200      	movi      	r2, 0      	//0x0
    9bea:	b340      	st.w      	r2, (r3, 0x0)
    9bec:	0424      	br      	0x9c34	//9c34 <pci_altera_get_capability+0x58>
		/* Init capbility */
		if(cap_id == pcie_all_cap[i].cap_id){
    9bee:	6cfb      	mov      	r3, sp
    9bf0:	8b60      	ld.h      	r3, (r3, 0x0)
    9bf2:	748d      	zexth      	r2, r3
    9bf4:	1075      	lrw      	r3, 0x13a88	//13a88 <pcie_all_cap>
    9bf6:	1901      	addi      	r1, sp, 4
    9bf8:	9120      	ld.w      	r1, (r1, 0x0)
    9bfa:	d0230903 	ldr.w      	r3, (r3, r1<<3)
    9bfe:	64ca      	cmpne      	r2, r3
    9c00:	0815      	bt      	0x9c2a	//9c2a <pci_altera_get_capability+0x4e>
			printf("find capability addr:0x%04x\n", pcie_all_cap[i].cap_addr);
    9c02:	1052      	lrw      	r2, 0x13a88	//13a88 <pcie_all_cap>
    9c04:	1b01      	addi      	r3, sp, 4
    9c06:	9360      	ld.w      	r3, (r3, 0x0)
    9c08:	4363      	lsli      	r3, r3, 3
    9c0a:	5a6c      	addu      	r3, r2, r3
    9c0c:	9361      	ld.w      	r3, (r3, 0x4)
    9c0e:	1010      	lrw      	r0, 0x1086c	//1086c <__etext+0xcbc>
    9c10:	6c4f      	mov      	r1, r3
    9c12:	e000269f 	bsr      	0xe950	//e950 <printf>
    9c16:	c4004820 	lsli      	r0, r0, 0
			return pcie_all_cap[i].cap_addr;
    9c1a:	104c      	lrw      	r2, 0x13a88	//13a88 <pcie_all_cap>
    9c1c:	1b01      	addi      	r3, sp, 4
    9c1e:	9360      	ld.w      	r3, (r3, 0x0)
    9c20:	4363      	lsli      	r3, r3, 3
    9c22:	5a6c      	addu      	r3, r2, r3
    9c24:	9361      	ld.w      	r3, (r3, 0x4)
    9c26:	74cd      	zexth      	r3, r3
    9c28:	040c      	br      	0x9c40	//9c40 <pci_altera_get_capability+0x64>
}

Bit16u pci_altera_get_capability(Bit16u cap_id){
	Bit32u i;

	for(i=0; i< PCIE_CAP_SIZE; i++){
    9c2a:	1b01      	addi      	r3, sp, 4
    9c2c:	1a01      	addi      	r2, sp, 4
    9c2e:	9240      	ld.w      	r2, (r2, 0x0)
    9c30:	2200      	addi      	r2, 1      	//0x1
    9c32:	b340      	st.w      	r2, (r3, 0x0)
    9c34:	1b01      	addi      	r3, sp, 4
    9c36:	9340      	ld.w      	r2, (r3, 0x0)
    9c38:	3305      	movi      	r3, 5      	//0x5
    9c3a:	648c      	cmphs      	r3, r2
    9c3c:	0bd9      	bt      	0x9bee	//9bee <pci_altera_get_capability+0x12>
		if(cap_id == pcie_all_cap[i].cap_id){
			printf("find capability addr:0x%04x\n", pcie_all_cap[i].cap_addr);
			return pcie_all_cap[i].cap_addr;
		}
	}
	return 0;
    9c3e:	3300      	movi      	r3, 0      	//0x0
}
    9c40:	6c0f      	mov      	r0, r3
    9c42:	1402      	addi      	sp, sp, 8
    9c44:	1490      	pop      	r15
    9c46:	0000      	.short	0x0000
    9c48:	00013a88 	.long	0x00013a88
    9c4c:	0001086c 	.long	0x0001086c
    9c50:	0000e950 	.long	0x0000e950

00009c54 <pci_altera_read_bar0>:

/*
 * @lenght 32bit length
 * */
Bit16u pci_altera_read_bar0(Bit32u length){
    9c54:	14d0      	push      	r15
    9c56:	1423      	subi      	sp, sp, 12
    9c58:	6cfb      	mov      	r3, sp
    9c5a:	b300      	st.w      	r0, (r3, 0x0)
	Bit32u i;
	Bit32u addr = CMDQ_INTC_BASE;
    9c5c:	1b01      	addi      	r3, sp, 4
    9c5e:	ea22197f 	movih      	r2, 6527      	//0x197f
    9c62:	b340      	st.w      	r2, (r3, 0x0)

	printf("Read pcie bar0\n");
    9c64:	101c      	lrw      	r0, 0x1088c	//1088c <__etext+0xcdc>
    9c66:	e0002675 	bsr      	0xe950	//e950 <printf>
    9c6a:	c4004820 	lsli      	r0, r0, 0
	for(i=0; i<length; i++){
    9c6e:	1b02      	addi      	r3, sp, 8
    9c70:	3200      	movi      	r2, 0      	//0x0
    9c72:	b340      	st.w      	r2, (r3, 0x0)
    9c74:	0425      	br      	0x9cbe	//9cbe <pci_altera_read_bar0+0x6a>
		if(i%4 == 0)
    9c76:	1b02      	addi      	r3, sp, 8
    9c78:	9360      	ld.w      	r3, (r3, 0x0)
    9c7a:	e4632003 	andi      	r3, r3, 3
    9c7e:	e9230009 	bnez      	r3, 0x9c90	//9c90 <pci_altera_read_bar0+0x3c>
			printf("\naddr:0x%08x: ", addr);
    9c82:	1b01      	addi      	r3, sp, 4
    9c84:	1016      	lrw      	r0, 0x1089c	//1089c <__etext+0xcec>
    9c86:	9320      	ld.w      	r1, (r3, 0x0)
    9c88:	e0002664 	bsr      	0xe950	//e950 <printf>
    9c8c:	c4004820 	lsli      	r0, r0, 0
		printf("0x%08x ", readl((void *)(addr + i*4)));
    9c90:	1b02      	addi      	r3, sp, 8
    9c92:	9360      	ld.w      	r3, (r3, 0x0)
    9c94:	4342      	lsli      	r2, r3, 2
    9c96:	1b01      	addi      	r3, sp, 4
    9c98:	9360      	ld.w      	r3, (r3, 0x0)
    9c9a:	5a6c      	addu      	r3, r2, r3
    9c9c:	6c0f      	mov      	r0, r3
    9c9e:	e3fffeaf 	bsr      	0x99fc	//99fc <readl>
    9ca2:	c4004820 	lsli      	r0, r0, 0
    9ca6:	6cc3      	mov      	r3, r0
    9ca8:	100f      	lrw      	r0, 0x108ac	//108ac <__etext+0xcfc>
    9caa:	6c4f      	mov      	r1, r3
    9cac:	e0002652 	bsr      	0xe950	//e950 <printf>
    9cb0:	c4004820 	lsli      	r0, r0, 0
Bit16u pci_altera_read_bar0(Bit32u length){
	Bit32u i;
	Bit32u addr = CMDQ_INTC_BASE;

	printf("Read pcie bar0\n");
	for(i=0; i<length; i++){
    9cb4:	1b02      	addi      	r3, sp, 8
    9cb6:	1a02      	addi      	r2, sp, 8
    9cb8:	9240      	ld.w      	r2, (r2, 0x0)
    9cba:	2200      	addi      	r2, 1      	//0x1
    9cbc:	b340      	st.w      	r2, (r3, 0x0)
    9cbe:	1a02      	addi      	r2, sp, 8
    9cc0:	6cfb      	mov      	r3, sp
    9cc2:	9240      	ld.w      	r2, (r2, 0x0)
    9cc4:	9360      	ld.w      	r3, (r3, 0x0)
    9cc6:	64c8      	cmphs      	r2, r3
    9cc8:	0fd7      	bf      	0x9c76	//9c76 <pci_altera_read_bar0+0x22>
		if(i%4 == 0)
			printf("\naddr:0x%08x: ", addr);
		printf("0x%08x ", readl((void *)(addr + i*4)));
	}
	return 0;
    9cca:	3300      	movi      	r3, 0      	//0x0
}
    9ccc:	6c0f      	mov      	r0, r3
    9cce:	1403      	addi      	sp, sp, 12
    9cd0:	1490      	pop      	r15
    9cd2:	0000      	.short	0x0000
    9cd4:	0001088c 	.long	0x0001088c
    9cd8:	0000e950 	.long	0x0000e950
    9cdc:	0001089c 	.long	0x0001089c
    9ce0:	000099fc 	.long	0x000099fc
    9ce4:	000108ac 	.long	0x000108ac

00009ce8 <pci_altera_enable_atu>:

/*
 * translate 64 bit address to 32 bit address
 * */
Bit32u pci_altera_enable_atu(Bit64u addr){
    9ce8:	14d1      	push      	r4, r15
    9cea:	1424      	subi      	sp, sp, 16
    9cec:	6cbb      	mov      	r2, sp
    9cee:	b200      	st.w      	r0, (r2, 0x0)
    9cf0:	b221      	st.w      	r1, (r2, 0x4)
	Bit32u addr_lo;
	Bit32u addr_hi;

	addr_lo = (addr&0xFFFFFFFF);
    9cf2:	1a03      	addi      	r2, sp, 12
    9cf4:	6c7b      	mov      	r1, sp
    9cf6:	9120      	ld.w      	r1, (r1, 0x0)
    9cf8:	b220      	st.w      	r1, (r2, 0x0)
	addr_hi = ((addr >> 32)&0xFFFFFFFF);
    9cfa:	6cbb      	mov      	r2, sp
    9cfc:	9241      	ld.w      	r2, (r2, 0x4)
    9cfe:	3100      	movi      	r1, 0      	//0x0
    9d00:	c4224043 	lsr      	r3, r2, r1
    9d04:	3400      	movi      	r4, 0      	//0x0
    9d06:	1a02      	addi      	r2, sp, 8
    9d08:	b260      	st.w      	r3, (r2, 0x0)

	printf("addr_lo:0x%08x hi:0x%08x\n", addr_lo, addr_hi);
    9d0a:	1a03      	addi      	r2, sp, 12
    9d0c:	1b02      	addi      	r3, sp, 8
    9d0e:	1017      	lrw      	r0, 0x108b4	//108b4 <__etext+0xd04>
    9d10:	9220      	ld.w      	r1, (r2, 0x0)
    9d12:	9340      	ld.w      	r2, (r3, 0x0)
    9d14:	e000261e 	bsr      	0xe950	//e950 <printf>
    9d18:	c4004820 	lsli      	r0, r0, 0
		
	writel((addr_lo&0xfe000000) + 1, (void *)(PCM_MEM_BASE1 + 0x1000));
    9d1c:	1b03      	addi      	r3, sp, 12
    9d1e:	9360      	ld.w      	r3, (r3, 0x0)
    9d20:	4b79      	lsri      	r3, r3, 25
    9d22:	4379      	lsli      	r3, r3, 25
    9d24:	2300      	addi      	r3, 1      	//0x1
    9d26:	6c0f      	mov      	r0, r3
    9d28:	ea21c000 	movih      	r1, 49152      	//0xc000
    9d2c:	39ae      	bseti      	r1, 14
    9d2e:	e3fffe71 	bsr      	0x9a10	//9a10 <writel>
    9d32:	c4004820 	lsli      	r0, r0, 0
	writel(addr_hi, (void *)(PCM_MEM_BASE1 + 0x1004));
    9d36:	1b02      	addi      	r3, sp, 8
    9d38:	9300      	ld.w      	r0, (r3, 0x0)
    9d3a:	102f      	lrw      	r1, 0xc0004010	//c0004010 <__stack+0xbfc04018>
    9d3c:	e3fffe6a 	bsr      	0x9a10	//9a10 <writel>
    9d40:	c4004820 	lsli      	r0, r0, 0

	printf("Read write addr:0x%08x\n", readl((void *)(PCM_MEM_BASE1 + 0x1000)));
    9d44:	ea20c000 	movih      	r0, 49152      	//0xc000
    9d48:	38ae      	bseti      	r0, 14
    9d4a:	e3fffe59 	bsr      	0x99fc	//99fc <readl>
    9d4e:	c4004820 	lsli      	r0, r0, 0
    9d52:	6cc3      	mov      	r3, r0
    9d54:	100a      	lrw      	r0, 0x108d0	//108d0 <__etext+0xd20>
    9d56:	6c4f      	mov      	r1, r3
    9d58:	e00025fc 	bsr      	0xe950	//e950 <printf>
    9d5c:	c4004820 	lsli      	r0, r0, 0
	return 0;
    9d60:	3300      	movi      	r3, 0      	//0x0
}
    9d62:	6c0f      	mov      	r0, r3
    9d64:	1404      	addi      	sp, sp, 16
    9d66:	1491      	pop      	r4, r15
    9d68:	000108b4 	.long	0x000108b4
    9d6c:	0000e950 	.long	0x0000e950
    9d70:	00009a10 	.long	0x00009a10
    9d74:	c0004010 	.long	0xc0004010
    9d78:	000099fc 	.long	0x000099fc
    9d7c:	000108d0 	.long	0x000108d0

00009d80 <pci_altera_msi_test>:

/*
 * @addr msi addr
 * */
Bit16u pci_altera_msi_test(Bit16u addr){
    9d80:	14d6      	push      	r4-r9, r15
    9d82:	1424      	subi      	sp, sp, 16
    9d84:	6c7b      	mov      	r1, sp
    9d86:	a900      	st.h      	r0, (r1, 0x0)
	Bit64u msi_addr = 0;
    9d88:	1902      	addi      	r1, sp, 8
    9d8a:	3200      	movi      	r2, 0      	//0x0
    9d8c:	3300      	movi      	r3, 0      	//0x0
    9d8e:	b140      	st.w      	r2, (r1, 0x0)
    9d90:	b161      	st.w      	r3, (r1, 0x4)
	Bit16u msi_data = 0;
    9d92:	e46e0005 	addi      	r3, sp, 6      	//0x6
    9d96:	3200      	movi      	r2, 0      	//0x0
    9d98:	ab40      	st.h      	r2, (r3, 0x0)

	printf("msi offset addr:0x%02x\n", addr);
    9d9a:	6cfb      	mov      	r3, sp
    9d9c:	8b60      	ld.h      	r3, (r3, 0x0)
    9d9e:	74cd      	zexth      	r3, r3
    9da0:	1118      	lrw      	r0, 0x108e8	//108e8 <__etext+0xd38>
    9da2:	6c4f      	mov      	r1, r3
    9da4:	e00025d6 	bsr      	0xe950	//e950 <printf>
    9da8:	c4004820 	lsli      	r0, r0, 0
	/* lo addr */
	msi_addr = readl((void*)(PCI_EP_CONFIG_SPACE_BASE_ADDR + addr + PCI_MSI_ADDRESS_LO));
    9dac:	6cfb      	mov      	r3, sp
    9dae:	8b60      	ld.h      	r3, (r3, 0x0)
    9db0:	74cd      	zexth      	r3, r3
    9db2:	2303      	addi      	r3, 4      	//0x4
    9db4:	4362      	lsli      	r3, r3, 2
    9db6:	32d0      	movi      	r2, 208      	//0xd0
    9db8:	4255      	lsli      	r2, r2, 21
    9dba:	5b68      	addu      	r3, r3, r2
    9dbc:	6c0f      	mov      	r0, r3
    9dbe:	e3fffe1f 	bsr      	0x99fc	//99fc <readl>
    9dc2:	c4004820 	lsli      	r0, r0, 0
    9dc6:	6c83      	mov      	r2, r0
    9dc8:	1b02      	addi      	r3, sp, 8
    9dca:	b340      	st.w      	r2, (r3, 0x0)
    9dcc:	3200      	movi      	r2, 0      	//0x0
    9dce:	b341      	st.w      	r2, (r3, 0x4)
	/* hi addr */
	msi_addr |= (readl((void*)(PCI_EP_CONFIG_SPACE_BASE_ADDR + addr + PCI_MSI_ADDRESS_HI)) << 32);
    9dd0:	6cfb      	mov      	r3, sp
    9dd2:	8b60      	ld.h      	r3, (r3, 0x0)
    9dd4:	74cd      	zexth      	r3, r3
    9dd6:	2307      	addi      	r3, 8      	//0x8
    9dd8:	4362      	lsli      	r3, r3, 2
    9dda:	ea0c00d0 	movi      	r12, 208      	//0xd0
    9dde:	c6ac482c 	lsli      	r12, r12, 21
    9de2:	60f0      	addu      	r3, r12
    9de4:	6c0f      	mov      	r0, r3
    9de6:	e3fffe0b 	bsr      	0x99fc	//99fc <readl>
    9dea:	c4004820 	lsli      	r0, r0, 0
    9dee:	6c83      	mov      	r2, r0
    9df0:	3320      	movi      	r3, 32      	//0x20
    9df2:	c4624023 	lsl      	r3, r2, r3
    9df6:	6e0f      	mov      	r8, r3
    9df8:	ea0d0000 	movi      	r13, 0      	//0x0
    9dfc:	6e77      	mov      	r9, r13
    9dfe:	1902      	addi      	r1, sp, 8
    9e00:	1b02      	addi      	r3, sp, 8
    9e02:	9340      	ld.w      	r2, (r3, 0x0)
    9e04:	9361      	ld.w      	r3, (r3, 0x4)
    9e06:	6ca0      	or      	r2, r8
    9e08:	6ce4      	or      	r3, r9
    9e0a:	b140      	st.w      	r2, (r1, 0x0)
    9e0c:	b161      	st.w      	r3, (r1, 0x4)

	msi_data = readl((void*)(PCI_EP_CONFIG_SPACE_BASE_ADDR + addr + PCI_MSI_DATA_64));
    9e0e:	6cfb      	mov      	r3, sp
    9e10:	8b60      	ld.h      	r3, (r3, 0x0)
    9e12:	74cd      	zexth      	r3, r3
    9e14:	230b      	addi      	r3, 12      	//0xc
    9e16:	4362      	lsli      	r3, r3, 2
    9e18:	32d0      	movi      	r2, 208      	//0xd0
    9e1a:	4255      	lsli      	r2, r2, 21
    9e1c:	5b68      	addu      	r3, r3, r2
    9e1e:	6c0f      	mov      	r0, r3
    9e20:	e3fffdee 	bsr      	0x99fc	//99fc <readl>
    9e24:	c4004820 	lsli      	r0, r0, 0
    9e28:	6c83      	mov      	r2, r0
    9e2a:	e46e0005 	addi      	r3, sp, 6      	//0x6
    9e2e:	ab40      	st.h      	r2, (r3, 0x0)

	pci_altera_enable_atu(msi_addr);
    9e30:	1b02      	addi      	r3, sp, 8
    9e32:	9300      	ld.w      	r0, (r3, 0x0)
    9e34:	9321      	ld.w      	r1, (r3, 0x4)
    9e36:	e3ffff59 	bsr      	0x9ce8	//9ce8 <pci_altera_enable_atu>
    9e3a:	c4004820 	lsli      	r0, r0, 0

	writel(msi_data, (void*)(0x8000000 + (msi_addr&0x1ffffff)));
    9e3e:	e46e0005 	addi      	r3, sp, 6      	//0x6
    9e42:	8b60      	ld.h      	r3, (r3, 0x0)
    9e44:	744d      	zexth      	r1, r3
    9e46:	1b02      	addi      	r3, sp, 8
    9e48:	9340      	ld.w      	r2, (r3, 0x0)
    9e4a:	9361      	ld.w      	r3, (r3, 0x4)
    9e4c:	c7005026 	bmaski      	r6, 25      	//0x19
    9e50:	3700      	movi      	r7, 0      	//0x0
    9e52:	6898      	and      	r2, r6
    9e54:	68dc      	and      	r3, r7
    9e56:	3480      	movi      	r4, 128      	//0x80
    9e58:	4494      	lsli      	r4, r4, 20
    9e5a:	3500      	movi      	r5, 0      	//0x0
    9e5c:	6731      	cmplt      	r12, r12
    9e5e:	c482004c 	addc      	r12, r2, r4
    9e62:	c4a3004d 	addc      	r13, r3, r5
    9e66:	6cf3      	mov      	r3, r12
    9e68:	6d37      	mov      	r4, r13
    9e6a:	6c07      	mov      	r0, r1
    9e6c:	6c4f      	mov      	r1, r3
    9e6e:	e3fffdd1 	bsr      	0x9a10	//9a10 <writel>
    9e72:	c4004820 	lsli      	r0, r0, 0
	return 0;
    9e76:	3300      	movi      	r3, 0      	//0x0
}
    9e78:	6c0f      	mov      	r0, r3
    9e7a:	1404      	addi      	sp, sp, 16
    9e7c:	1496      	pop      	r4-r9, r15
    9e7e:	0000      	.short	0x0000
    9e80:	000108e8 	.long	0x000108e8
    9e84:	0000e950 	.long	0x0000e950
    9e88:	000099fc 	.long	0x000099fc
    9e8c:	00009ce8 	.long	0x00009ce8
    9e90:	00009a10 	.long	0x00009a10

00009e94 <pci_altera_ep_test>:

Bit32u pci_altera_ep_test(){
    9e94:	14d1      	push      	r4, r15
    9e96:	1421      	subi      	sp, sp, 4
	Bit16u msi_addr;

	printf("pci altera ep test\n");
    9e98:	101a      	lrw      	r0, 0x10900	//10900 <__etext+0xd50>
    9e9a:	e000255b 	bsr      	0xe950	//e950 <printf>
    9e9e:	c4004820 	lsli      	r0, r0, 0
	pci_altera_verify_id();
    9ea2:	e3fffdc3 	bsr      	0x9a28	//9a28 <pci_altera_verify_id>
    9ea6:	c4004820 	lsli      	r0, r0, 0

	pci_altera_find_capabilities();
    9eaa:	e3fffde9 	bsr      	0x9a7c	//9a7c <pci_altera_find_capabilities>
    9eae:	c4004820 	lsli      	r0, r0, 0

	pci_altera_read_bar0(32);
    9eb2:	3020      	movi      	r0, 32      	//0x20
    9eb4:	e3fffed0 	bsr      	0x9c54	//9c54 <pci_altera_read_bar0>
    9eb8:	c4004820 	lsli      	r0, r0, 0

	msi_addr = pci_altera_get_capability(PCI_CAP_ID_MSI);
    9ebc:	e48e0001 	addi      	r4, sp, 2      	//0x2
    9ec0:	3005      	movi      	r0, 5      	//0x5
    9ec2:	e3fffe8d 	bsr      	0x9bdc	//9bdc <pci_altera_get_capability>
    9ec6:	c4004820 	lsli      	r0, r0, 0
    9eca:	6cc3      	mov      	r3, r0
    9ecc:	ac60      	st.h      	r3, (r4, 0x0)
	if(msi_addr == 0){
    9ece:	e46e0001 	addi      	r3, sp, 2      	//0x2
    9ed2:	8b60      	ld.h      	r3, (r3, 0x0)
    9ed4:	74cd      	zexth      	r3, r3
    9ed6:	e9230008 	bnez      	r3, 0x9ee6	//9ee6 <pci_altera_ep_test+0x52>
		printf("Can not find MSI capablility\n");
    9eda:	1010      	lrw      	r0, 0x10914	//10914 <__etext+0xd64>
    9edc:	e000253a 	bsr      	0xe950	//e950 <printf>
    9ee0:	c4004820 	lsli      	r0, r0, 0
    9ee4:	040a      	br      	0x9ef8	//9ef8 <pci_altera_ep_test+0x64>
	}
	else{
		pci_altera_msi_test(msi_addr);
    9ee6:	e46e0001 	addi      	r3, sp, 2      	//0x2
    9eea:	8b60      	ld.h      	r3, (r3, 0x0)
    9eec:	74cd      	zexth      	r3, r3
    9eee:	6c0f      	mov      	r0, r3
    9ef0:	e3ffff48 	bsr      	0x9d80	//9d80 <pci_altera_msi_test>
    9ef4:	c4004820 	lsli      	r0, r0, 0
		
	}

	return 0;
    9ef8:	3300      	movi      	r3, 0      	//0x0
}
    9efa:	6c0f      	mov      	r0, r3
    9efc:	1401      	addi      	sp, sp, 4
    9efe:	1491      	pop      	r4, r15
    9f00:	00010900 	.long	0x00010900
    9f04:	0000e950 	.long	0x0000e950
    9f08:	00009a28 	.long	0x00009a28
    9f0c:	00009a7c 	.long	0x00009a7c
    9f10:	00009c54 	.long	0x00009c54
    9f14:	00009bdc 	.long	0x00009bdc
    9f18:	00010914 	.long	0x00010914
    9f1c:	00009d80 	.long	0x00009d80

00009f20 <readb>:
#define __IO_H__

#include "types.h"

static inline Bit8u readb(const volatile void *addr)
{
    9f20:	1421      	subi      	sp, sp, 4
    9f22:	6cfb      	mov      	r3, sp
    9f24:	b300      	st.w      	r0, (r3, 0x0)
    return *(const volatile Bit8u *)addr;
    9f26:	6cfb      	mov      	r3, sp
    9f28:	9360      	ld.w      	r3, (r3, 0x0)
    9f2a:	8360      	ld.b      	r3, (r3, 0x0)
    9f2c:	74cc      	zextb      	r3, r3
}
    9f2e:	6c0f      	mov      	r0, r3
    9f30:	1401      	addi      	sp, sp, 4
    9f32:	783c      	rts

00009f34 <writeb>:

static inline void writeb(Bit8u value, volatile void *addr)
{
    9f34:	1422      	subi      	sp, sp, 8
    9f36:	6c83      	mov      	r2, r0
    9f38:	6cfb      	mov      	r3, sp
    9f3a:	b320      	st.w      	r1, (r3, 0x0)
    9f3c:	1b01      	addi      	r3, sp, 4
    9f3e:	a340      	st.b      	r2, (r3, 0x0)
    *(volatile Bit8u *)addr = value;
    9f40:	6cfb      	mov      	r3, sp
    9f42:	9360      	ld.w      	r3, (r3, 0x0)
    9f44:	1a01      	addi      	r2, sp, 4
    9f46:	8240      	ld.b      	r2, (r2, 0x0)
    9f48:	a340      	st.b      	r2, (r3, 0x0)
}
    9f4a:	1402      	addi      	sp, sp, 8
    9f4c:	783c      	rts
	...

00009f50 <readl>:
{
    *(volatile Bit16u *)addr = value;
}

static inline Bit32u readl(const volatile void *addr)
{
    9f50:	1421      	subi      	sp, sp, 4
    9f52:	6cfb      	mov      	r3, sp
    9f54:	b300      	st.w      	r0, (r3, 0x0)
    return *(const volatile Bit32u *)addr;
    9f56:	6cfb      	mov      	r3, sp
    9f58:	9360      	ld.w      	r3, (r3, 0x0)
    9f5a:	9360      	ld.w      	r3, (r3, 0x0)
}
    9f5c:	6c0f      	mov      	r0, r3
    9f5e:	1401      	addi      	sp, sp, 4
    9f60:	783c      	rts
	...

00009f64 <writel>:

static inline void writel(Bit32u value, volatile void *addr)
{
    9f64:	1422      	subi      	sp, sp, 8
    9f66:	1b01      	addi      	r3, sp, 4
    9f68:	b300      	st.w      	r0, (r3, 0x0)
    9f6a:	6cfb      	mov      	r3, sp
    9f6c:	b320      	st.w      	r1, (r3, 0x0)
    *(volatile Bit32u *)addr = value;
    9f6e:	6cfb      	mov      	r3, sp
    9f70:	9360      	ld.w      	r3, (r3, 0x0)
    9f72:	1a01      	addi      	r2, sp, 4
    9f74:	9240      	ld.w      	r2, (r2, 0x0)
    9f76:	b340      	st.w      	r2, (r3, 0x0)
}
    9f78:	1402      	addi      	sp, sp, 8
    9f7a:	783c      	rts

00009f7c <pci_reset>:
#define PCI_BRIDGE_NUM_REGIONS 2

/* pcie warm reset and code reset */
Bit32u pci_reset(){

	return 0;
    9f7c:	3300      	movi      	r3, 0      	//0x0
}
    9f7e:	6c0f      	mov      	r0, r3
    9f80:	783c      	rts
	...

00009f84 <pci_bist>:

/* pci Built-In Self Test */
Bit32u pci_bist(void){
    9f84:	14d1      	push      	r4, r15
    9f86:	1421      	subi      	sp, sp, 4
	Bit8u val;
	val = readb((void *)(PCIE_BASEADDR_F0_LEA_CFG_SPACE + PCI_BIST));
    9f88:	e48e0002 	addi      	r4, sp, 3      	//0x3
    9f8c:	300f      	movi      	r0, 15      	//0xf
    9f8e:	e3ffffc9 	bsr      	0x9f20	//9f20 <readb>
    9f92:	c4004820 	lsli      	r0, r0, 0
    9f96:	6cc3      	mov      	r3, r0
    9f98:	a460      	st.b      	r3, (r4, 0x0)
	if((val&PCI_BIST_CAPABLE) == PCI_BIST_CAPABLE){
    9f9a:	e46e0002 	addi      	r3, sp, 3      	//0x3
    9f9e:	8360      	ld.b      	r3, (r3, 0x0)
    9fa0:	74cc      	zextb      	r3, r3
    9fa2:	74ce      	sextb      	r3, r3
    9fa4:	e9a30030 	bhsz      	r3, 0xa004	//a004 <pci_bist+0x80>
		/* Devie support BIST */
		writeb(val | PCI_BIST_START, (void *)(PCIE_BASEADDR_F0_LEA_CFG_SPACE + PCI_BIST));
    9fa8:	e46e0002 	addi      	r3, sp, 3      	//0x3
    9fac:	8360      	ld.b      	r3, (r3, 0x0)
    9fae:	3ba6      	bseti      	r3, 6
    9fb0:	74cc      	zextb      	r3, r3
    9fb2:	6c0f      	mov      	r0, r3
    9fb4:	310f      	movi      	r1, 15      	//0xf
    9fb6:	e3ffffbf 	bsr      	0x9f34	//9f34 <writeb>
    9fba:	c4004820 	lsli      	r0, r0, 0

		/*sleep two seconds */

		val = readb((void *)(PCIE_BASEADDR_F0_LEA_CFG_SPACE + PCI_BIST)) & PCI_BIST_CODE_MASK;
    9fbe:	300f      	movi      	r0, 15      	//0xf
    9fc0:	e3ffffb0 	bsr      	0x9f20	//9f20 <readb>
    9fc4:	c4004820 	lsli      	r0, r0, 0
    9fc8:	6cc3      	mov      	r3, r0
    9fca:	6c8f      	mov      	r2, r3
    9fcc:	e46e0002 	addi      	r3, sp, 3      	//0x3
    9fd0:	e442200f 	andi      	r2, r2, 15
    9fd4:	a340      	st.b      	r2, (r3, 0x0)
		if(val == 0){
    9fd6:	e46e0002 	addi      	r3, sp, 3      	//0x3
    9fda:	8360      	ld.b      	r3, (r3, 0x0)
    9fdc:	74cc      	zextb      	r3, r3
    9fde:	e923000a 	bnez      	r3, 0x9ff2	//9ff2 <pci_bist+0x6e>
			printf("Device test passed.\n");
    9fe2:	ea800094 	lrw      	r0, 0x10934	//10934 <__etext+0xd84>
    9fe6:	e00024b5 	bsr      	0xe950	//e950 <printf>
    9fea:	c4004820 	lsli      	r0, r0, 0
			return 0;
    9fee:	3300      	movi      	r3, 0      	//0x0
    9ff0:	0411      	br      	0xa012	//a012 <pci_bist+0x8e>
		}
		else{
			printf("Device test failture.\n");
    9ff2:	ea800092 	lrw      	r0, 0x1094c	//1094c <__etext+0xd9c>
    9ff6:	e00024ad 	bsr      	0xe950	//e950 <printf>
    9ffa:	c4004820 	lsli      	r0, r0, 0
			return -1;
    9ffe:	3300      	movi      	r3, 0      	//0x0
    a000:	2b00      	subi      	r3, 1      	//0x1
    a002:	0408      	br      	0xa012	//a012 <pci_bist+0x8e>
		}
	}
	else{
		/* Devie don't support BIST */
		printf("Device don't support BIST.\n");
    a004:	ea80008e 	lrw      	r0, 0x10964	//10964 <__etext+0xdb4>
    a008:	e00024a4 	bsr      	0xe950	//e950 <printf>
    a00c:	c4004820 	lsli      	r0, r0, 0
		return 0;
    a010:	3300      	movi      	r3, 0      	//0x0
	}
}
    a012:	6c0f      	mov      	r0, r3
    a014:	1401      	addi      	sp, sp, 4
    a016:	1491      	pop      	r4, r15

0000a018 <pci_ib_read_taraddr>:

Bit32u pci_ib_read_taraddr(Bit8u number){
    a018:	14d0      	push      	r15
    a01a:	1422      	subi      	sp, sp, 8
    a01c:	6c83      	mov      	r2, r0
    a01e:	6cfb      	mov      	r3, sp
    a020:	a340      	st.b      	r2, (r3, 0x0)
	Bit32u target_addr;

	target_addr = PCIE_BASEADDR_ATU_INBOUND + (number << 8) + PCIE_BASEADDR_IB_TRGT_LADDR;
    a022:	6cfb      	mov      	r3, sp
    a024:	8360      	ld.b      	r3, (r3, 0x0)
    a026:	74cc      	zextb      	r3, r3
    a028:	4368      	lsli      	r3, r3, 8
    a02a:	ea01e005 	movi      	r1, 57349      	//0xe005
    a02e:	c4614901 	rotli      	r1, r1, 3
    a032:	5b44      	addu      	r2, r3, r1
    a034:	1b01      	addi      	r3, sp, 4
    a036:	b340      	st.w      	r2, (r3, 0x0)
	return readl((void*)target_addr);
    a038:	1b01      	addi      	r3, sp, 4
    a03a:	9360      	ld.w      	r3, (r3, 0x0)
    a03c:	6c0f      	mov      	r0, r3
    a03e:	e3ffff89 	bsr      	0x9f50	//9f50 <readl>
    a042:	c4004820 	lsli      	r0, r0, 0
    a046:	6cc3      	mov      	r3, r0
}
    a048:	6c0f      	mov      	r0, r3
    a04a:	1402      	addi      	sp, sp, 8
    a04c:	1490      	pop      	r15
	...

0000a050 <pci_get_ib_bar_match>:
 * We use region number 0, 1, 2 for function 0 three bars mapping
 * Only remap function0 here, the function number is 0
 * @number means function number, also means region number
 * @return value: 32 bit target address
 * */
Bit32u pci_get_ib_bar_match(Bit8u number){
    a050:	14d0      	push      	r15
    a052:	1423      	subi      	sp, sp, 12
    a054:	6c83      	mov      	r2, r0
    a056:	6cfb      	mov      	r3, sp
    a058:	a340      	st.b      	r2, (r3, 0x0)
	Bit32u region_addr;
	Bit32u value = 0; 
    a05a:	1b02      	addi      	r3, sp, 8
    a05c:	3200      	movi      	r2, 0      	//0x0
    a05e:	b340      	st.w      	r2, (r3, 0x0)

	number &= 0x7;
    a060:	6cfb      	mov      	r3, sp
    a062:	6cbb      	mov      	r2, sp
    a064:	8240      	ld.b      	r2, (r2, 0x0)
    a066:	e4422007 	andi      	r2, r2, 7
    a06a:	a340      	st.b      	r2, (r3, 0x0)
	region_addr = PCIE_BASEADDR_ATU_INBOUND + (number << 8) + PCIE_BASEADDR_IB_CTRL;
    a06c:	6cfb      	mov      	r3, sp
    a06e:	8360      	ld.b      	r3, (r3, 0x0)
    a070:	74cc      	zextb      	r3, r3
    a072:	4368      	lsli      	r3, r3, 8
    a074:	31e0      	movi      	r1, 224      	//0xe0
    a076:	412b      	lsli      	r1, r1, 11
    a078:	5b44      	addu      	r2, r3, r1
    a07a:	1b01      	addi      	r3, sp, 4
    a07c:	b340      	st.w      	r2, (r3, 0x0)
	value |= PCIE_IB_CTRL_MODE(PCIE_IB_CTRL_MODE_BAR);
    a07e:	1b02      	addi      	r3, sp, 8
    a080:	1a02      	addi      	r2, sp, 8
    a082:	9240      	ld.w      	r2, (r2, 0x0)
    a084:	3aa1      	bseti      	r2, 1
    a086:	b340      	st.w      	r2, (r3, 0x0)
	value |= PCIE_IB_CTRL_BAR_NUM(number);
    a088:	6cfb      	mov      	r3, sp
    a08a:	8360      	ld.b      	r3, (r3, 0x0)
    a08c:	74cc      	zextb      	r3, r3
    a08e:	4362      	lsli      	r3, r3, 2
    a090:	6c4f      	mov      	r1, r3
    a092:	1b02      	addi      	r3, sp, 8
    a094:	1a02      	addi      	r2, sp, 8
    a096:	9240      	ld.w      	r2, (r2, 0x0)
    a098:	6c84      	or      	r2, r1
    a09a:	b340      	st.w      	r2, (r3, 0x0)
	value |= PCIE_IB_CTRL_FUNC_NUM(PCIE_IB_CTRL_FUNC_NUM_0);
    a09c:	1b02      	addi      	r3, sp, 8
    a09e:	1a02      	addi      	r2, sp, 8
    a0a0:	9240      	ld.w      	r2, (r2, 0x0)
    a0a2:	b340      	st.w      	r2, (r3, 0x0)
	writel(value, (void *)region_addr);
    a0a4:	1b01      	addi      	r3, sp, 4
    a0a6:	9360      	ld.w      	r3, (r3, 0x0)
    a0a8:	1a02      	addi      	r2, sp, 8
    a0aa:	9200      	ld.w      	r0, (r2, 0x0)
    a0ac:	6c4f      	mov      	r1, r3
    a0ae:	e3ffff5b 	bsr      	0x9f64	//9f64 <writel>
    a0b2:	c4004820 	lsli      	r0, r0, 0

	/* enable translation */
	value |= PCIE_IB_CTRL_ENABLE;
    a0b6:	1b02      	addi      	r3, sp, 8
    a0b8:	1a02      	addi      	r2, sp, 8
    a0ba:	9240      	ld.w      	r2, (r2, 0x0)
    a0bc:	3aa0      	bseti      	r2, 0
    a0be:	b340      	st.w      	r2, (r3, 0x0)
	writel(value, (void *)region_addr);
    a0c0:	1b01      	addi      	r3, sp, 4
    a0c2:	9360      	ld.w      	r3, (r3, 0x0)
    a0c4:	1a02      	addi      	r2, sp, 8
    a0c6:	9200      	ld.w      	r0, (r2, 0x0)
    a0c8:	6c4f      	mov      	r1, r3
    a0ca:	e3ffff4d 	bsr      	0x9f64	//9f64 <writel>
    a0ce:	c4004820 	lsli      	r0, r0, 0

	return pci_ib_read_taraddr(number);
    a0d2:	6cfb      	mov      	r3, sp
    a0d4:	8360      	ld.b      	r3, (r3, 0x0)
    a0d6:	74cc      	zextb      	r3, r3
    a0d8:	6c0f      	mov      	r0, r3
    a0da:	e3ffff9f 	bsr      	0xa018	//a018 <pci_ib_read_taraddr>
    a0de:	c4004820 	lsli      	r0, r0, 0
    a0e2:	6cc3      	mov      	r3, r0
}
    a0e4:	6c0f      	mov      	r0, r3
    a0e6:	1403      	addi      	sp, sp, 12
    a0e8:	1490      	pop      	r15
	...

0000a0ec <pci_ib_getaddr_addr_match>:

/*
 * Inbound Bar mode, address translation
 * @return address: 32 bit target address
 * */
Bit32u pci_ib_getaddr_addr_match(Bit64u start_addr, Bit64u end_addr, Bit8u region_number){
    a0ec:	14d6      	push      	r4-r9, r15
    a0ee:	1427      	subi      	sp, sp, 28
    a0f0:	e64e000b 	addi      	r18, sp, 12      	//0xc
    a0f4:	dc122000 	st.w      	r0, (r18, 0x0)
    a0f8:	dc322001 	st.w      	r1, (r18, 0x4)
    a0fc:	1901      	addi      	r1, sp, 4
    a0fe:	b140      	st.w      	r2, (r1, 0x0)
    a100:	b161      	st.w      	r3, (r1, 0x4)
    a102:	984e      	ld.w      	r2, (sp, 0x38)
    a104:	6cfb      	mov      	r3, sp
    a106:	a340      	st.b      	r2, (r3, 0x0)
	Bit32u addr;
	Bit32u value = 0; 
    a108:	1b06      	addi      	r3, sp, 24
    a10a:	3200      	movi      	r2, 0      	//0x0
    a10c:	b340      	st.w      	r2, (r3, 0x0)

	/* start address low addr */
	addr = PCIE_BASEADDR_ATU_INBOUND + (region_number << 8) + PCIE_BASEADDR_IB_ST_LADDR;
    a10e:	6cfb      	mov      	r3, sp
    a110:	8360      	ld.b      	r3, (r3, 0x0)
    a112:	74cc      	zextb      	r3, r3
    a114:	4368      	lsli      	r3, r3, 8
    a116:	ea01e003 	movi      	r1, 57347      	//0xe003
    a11a:	c4614901 	rotli      	r1, r1, 3
    a11e:	5b44      	addu      	r2, r3, r1
    a120:	1b05      	addi      	r3, sp, 20
    a122:	b340      	st.w      	r2, (r3, 0x0)
	writel(start_addr & 0xFFFF, (void *)addr);
    a124:	1b03      	addi      	r3, sp, 12
    a126:	9320      	ld.w      	r1, (r3, 0x0)
    a128:	6c87      	mov      	r2, r1
    a12a:	ea0cffff 	movi      	r12, 65535      	//0xffff
    a12e:	ea0d0000 	movi      	r13, 0      	//0x0
    a132:	68b0      	and      	r2, r12
    a134:	68f4      	and      	r3, r13
    a136:	1b05      	addi      	r3, sp, 20
    a138:	9360      	ld.w      	r3, (r3, 0x0)
    a13a:	6c0b      	mov      	r0, r2
    a13c:	6c4f      	mov      	r1, r3
    a13e:	e3ffff13 	bsr      	0x9f64	//9f64 <writel>
    a142:	c4004820 	lsli      	r0, r0, 0

	/* start address high addr */
	addr = PCIE_BASEADDR_ATU_INBOUND + (region_number << 8) + PCIE_BASEADDR_IB_ST_UADDR;
    a146:	6cfb      	mov      	r3, sp
    a148:	8360      	ld.b      	r3, (r3, 0x0)
    a14a:	74cc      	zextb      	r3, r3
    a14c:	4368      	lsli      	r3, r3, 8
    a14e:	ea210007 	movih      	r1, 7      	//0x7
    a152:	211b      	addi      	r1, 28      	//0x1c
    a154:	5b44      	addu      	r2, r3, r1
    a156:	1b05      	addi      	r3, sp, 20
    a158:	b340      	st.w      	r2, (r3, 0x0)
	writel(start_addr >> 32, (void *)addr);
    a15a:	1b03      	addi      	r3, sp, 12
    a15c:	9361      	ld.w      	r3, (r3, 0x4)
    a15e:	3200      	movi      	r2, 0      	//0x0
    a160:	c4434042 	lsr      	r2, r3, r2
    a164:	6e0b      	mov      	r8, r2
    a166:	3300      	movi      	r3, 0      	//0x0
    a168:	6e4f      	mov      	r9, r3
    a16a:	6ca3      	mov      	r2, r8
    a16c:	1b05      	addi      	r3, sp, 20
    a16e:	9360      	ld.w      	r3, (r3, 0x0)
    a170:	6c0b      	mov      	r0, r2
    a172:	6c4f      	mov      	r1, r3
    a174:	e3fffef8 	bsr      	0x9f64	//9f64 <writel>
    a178:	c4004820 	lsli      	r0, r0, 0

	/* end address low addr */
	addr = PCIE_BASEADDR_ATU_INBOUND + (region_number << 8) + PCIE_BASEADDR_IB_END_LADDR;
    a17c:	6cfb      	mov      	r3, sp
    a17e:	8360      	ld.b      	r3, (r3, 0x0)
    a180:	74cc      	zextb      	r3, r3
    a182:	4368      	lsli      	r3, r3, 8
    a184:	ea01e004 	movi      	r1, 57348      	//0xe004
    a188:	c4614901 	rotli      	r1, r1, 3
    a18c:	5b44      	addu      	r2, r3, r1
    a18e:	1b05      	addi      	r3, sp, 20
    a190:	b340      	st.w      	r2, (r3, 0x0)
	writel(start_addr & 0xFFFF, (void *)addr);
    a192:	1b03      	addi      	r3, sp, 12
    a194:	9320      	ld.w      	r1, (r3, 0x0)
    a196:	6c87      	mov      	r2, r1
    a198:	ea06ffff 	movi      	r6, 65535      	//0xffff
    a19c:	3700      	movi      	r7, 0      	//0x0
    a19e:	6898      	and      	r2, r6
    a1a0:	68dc      	and      	r3, r7
    a1a2:	1b05      	addi      	r3, sp, 20
    a1a4:	9360      	ld.w      	r3, (r3, 0x0)
    a1a6:	6c0b      	mov      	r0, r2
    a1a8:	6c4f      	mov      	r1, r3
    a1aa:	e3fffedd 	bsr      	0x9f64	//9f64 <writel>
    a1ae:	c4004820 	lsli      	r0, r0, 0

	/* end address high addr */
	addr = PCIE_BASEADDR_ATU_INBOUND + (region_number << 8) + PCIE_BASEADDR_IB_END_UADDR;
    a1b2:	6cfb      	mov      	r3, sp
    a1b4:	8360      	ld.b      	r3, (r3, 0x0)
    a1b6:	74cc      	zextb      	r3, r3
    a1b8:	4368      	lsli      	r3, r3, 8
    a1ba:	1125      	lrw      	r1, 0x70024	//70024 <__DTOR_END__+0x5c554>
    a1bc:	5b44      	addu      	r2, r3, r1
    a1be:	1b05      	addi      	r3, sp, 20
    a1c0:	b340      	st.w      	r2, (r3, 0x0)
	writel(start_addr >> 32, (void *)addr);
    a1c2:	1b03      	addi      	r3, sp, 12
    a1c4:	9361      	ld.w      	r3, (r3, 0x4)
    a1c6:	3200      	movi      	r2, 0      	//0x0
    a1c8:	c4434044 	lsr      	r4, r3, r2
    a1cc:	3500      	movi      	r5, 0      	//0x0
    a1ce:	6c93      	mov      	r2, r4
    a1d0:	1b05      	addi      	r3, sp, 20
    a1d2:	9360      	ld.w      	r3, (r3, 0x0)
    a1d4:	6c0b      	mov      	r0, r2
    a1d6:	6c4f      	mov      	r1, r3
    a1d8:	e3fffec6 	bsr      	0x9f64	//9f64 <writel>
    a1dc:	c4004820 	lsli      	r0, r0, 0

	/* enable translation */
	addr = PCIE_BASEADDR_ATU_INBOUND + (region_number << 8) + PCIE_BASEADDR_IB_CTRL;
    a1e0:	6cfb      	mov      	r3, sp
    a1e2:	8360      	ld.b      	r3, (r3, 0x0)
    a1e4:	74cc      	zextb      	r3, r3
    a1e6:	4368      	lsli      	r3, r3, 8
    a1e8:	31e0      	movi      	r1, 224      	//0xe0
    a1ea:	412b      	lsli      	r1, r1, 11
    a1ec:	5b44      	addu      	r2, r3, r1
    a1ee:	1b05      	addi      	r3, sp, 20
    a1f0:	b340      	st.w      	r2, (r3, 0x0)
	value |= PCIE_IB_CTRL_ENABLE;
    a1f2:	1b06      	addi      	r3, sp, 24
    a1f4:	1a06      	addi      	r2, sp, 24
    a1f6:	9240      	ld.w      	r2, (r2, 0x0)
    a1f8:	3aa0      	bseti      	r2, 0
    a1fa:	b340      	st.w      	r2, (r3, 0x0)
	writel(value, (void *)addr);
    a1fc:	1b05      	addi      	r3, sp, 20
    a1fe:	9360      	ld.w      	r3, (r3, 0x0)
    a200:	1a06      	addi      	r2, sp, 24
    a202:	9200      	ld.w      	r0, (r2, 0x0)
    a204:	6c4f      	mov      	r1, r3
    a206:	e3fffeaf 	bsr      	0x9f64	//9f64 <writel>
    a20a:	c4004820 	lsli      	r0, r0, 0

	return pci_ib_read_taraddr(region_number);
    a20e:	6cfb      	mov      	r3, sp
    a210:	8360      	ld.b      	r3, (r3, 0x0)
    a212:	74cc      	zextb      	r3, r3
    a214:	6c0f      	mov      	r0, r3
    a216:	e3ffff01 	bsr      	0xa018	//a018 <pci_ib_read_taraddr>
    a21a:	c4004820 	lsli      	r0, r0, 0
    a21e:	6cc3      	mov      	r3, r0
}
    a220:	6c0f      	mov      	r0, r3
    a222:	1407      	addi      	sp, sp, 28
    a224:	1496      	pop      	r4-r9, r15
    a226:	0000      	.short	0x0000
    a228:	00009f20 	.long	0x00009f20
    a22c:	00009f34 	.long	0x00009f34
    a230:	00010934 	.long	0x00010934
    a234:	0000e950 	.long	0x0000e950
    a238:	0001094c 	.long	0x0001094c
    a23c:	00010964 	.long	0x00010964
    a240:	00009f50 	.long	0x00009f50
    a244:	00009f64 	.long	0x00009f64
    a248:	0000a018 	.long	0x0000a018
    a24c:	00070024 	.long	0x00070024

0000a250 <pci_ob_read_taraddr>:


Bit32u pci_ob_read_taraddr(Bit8u number){
    a250:	14d4      	push      	r4-r7, r15
    a252:	1424      	subi      	sp, sp, 16
    a254:	6c83      	mov      	r2, r0
    a256:	6cfb      	mov      	r3, sp
    a258:	a340      	st.b      	r2, (r3, 0x0)
	Bit32u target_addr;
	Bit64u value;

	target_addr = PCIE_BASEADDR_ATU_OUTBOUND + (number << 8) + PCIE_BASEADDR_OB_TRGT_LADDR;
    a25a:	6cfb      	mov      	r3, sp
    a25c:	8360      	ld.b      	r3, (r3, 0x0)
    a25e:	74cc      	zextb      	r3, r3
    a260:	4368      	lsli      	r3, r3, 8
    a262:	ea210008 	movih      	r1, 8      	//0x8
    a266:	2127      	addi      	r1, 40      	//0x28
    a268:	5b44      	addu      	r2, r3, r1
    a26a:	1b03      	addi      	r3, sp, 12
    a26c:	b340      	st.w      	r2, (r3, 0x0)
	value = readl((void*)target_addr);
    a26e:	1b03      	addi      	r3, sp, 12
    a270:	9360      	ld.w      	r3, (r3, 0x0)
    a272:	6c0f      	mov      	r0, r3
    a274:	e3fffe6e 	bsr      	0x9f50	//9f50 <readl>
    a278:	c4004820 	lsli      	r0, r0, 0
    a27c:	6c83      	mov      	r2, r0
    a27e:	1b01      	addi      	r3, sp, 4
    a280:	b340      	st.w      	r2, (r3, 0x0)
    a282:	3200      	movi      	r2, 0      	//0x0
    a284:	b341      	st.w      	r2, (r3, 0x4)

	target_addr = PCIE_BASEADDR_ATU_OUTBOUND + (number << 8) + PCIE_BASEADDR_OB_TRGT_UADDR;
    a286:	6cfb      	mov      	r3, sp
    a288:	8360      	ld.b      	r3, (r3, 0x0)
    a28a:	74cc      	zextb      	r3, r3
    a28c:	4368      	lsli      	r3, r3, 8
    a28e:	ea2c0008 	movih      	r12, 8      	//0x8
    a292:	e58c002b 	addi      	r12, r12, 44      	//0x2c
    a296:	c5830022 	addu      	r2, r3, r12
    a29a:	1b03      	addi      	r3, sp, 12
    a29c:	b340      	st.w      	r2, (r3, 0x0)
	value |= ((Bit64u)readl((void*)target_addr) << 32);
    a29e:	1b03      	addi      	r3, sp, 12
    a2a0:	9360      	ld.w      	r3, (r3, 0x0)
    a2a2:	6c0f      	mov      	r0, r3
    a2a4:	e3fffe56 	bsr      	0x9f50	//9f50 <readl>
    a2a8:	c4004820 	lsli      	r0, r0, 0
    a2ac:	6cc3      	mov      	r3, r0
    a2ae:	6d8f      	mov      	r6, r3
    a2b0:	3700      	movi      	r7, 0      	//0x0
    a2b2:	ea0d0000 	movi      	r13, 0      	//0x0
    a2b6:	c5a64025 	lsl      	r5, r6, r13
    a2ba:	3400      	movi      	r4, 0      	//0x0
    a2bc:	1901      	addi      	r1, sp, 4
    a2be:	1b01      	addi      	r3, sp, 4
    a2c0:	9340      	ld.w      	r2, (r3, 0x0)
    a2c2:	9361      	ld.w      	r3, (r3, 0x4)
    a2c4:	c444242c 	or      	r12, r4, r2
    a2c8:	c465242d 	or      	r13, r5, r3
    a2cc:	6cf3      	mov      	r3, r12
    a2ce:	6d37      	mov      	r4, r13
    a2d0:	b160      	st.w      	r3, (r1, 0x0)
    a2d2:	b181      	st.w      	r4, (r1, 0x4)

	return value;
    a2d4:	1b01      	addi      	r3, sp, 4
    a2d6:	9360      	ld.w      	r3, (r3, 0x0)
}
    a2d8:	6c0f      	mov      	r0, r3
    a2da:	1404      	addi      	sp, sp, 16
    a2dc:	1494      	pop      	r4-r7, r15
	...

0000a2e0 <pci_ob_transfer_addr>:

/*
 * This is a function called by data rw
 * */
Bit64u pci_ob_transfer_addr(Bit32u start_addr, Bit32u end_addr, Bit8u region_number, Bit32u ctrl_value){
    a2e0:	14d4      	push      	r4-r7, r15
    a2e2:	1425      	subi      	sp, sp, 20
    a2e4:	e64e000b 	addi      	r18, sp, 12      	//0xc
    a2e8:	dc122000 	st.w      	r0, (r18, 0x0)
    a2ec:	1802      	addi      	r0, sp, 8
    a2ee:	b020      	st.w      	r1, (r0, 0x0)
    a2f0:	6c7b      	mov      	r1, sp
    a2f2:	b160      	st.w      	r3, (r1, 0x0)
    a2f4:	1b01      	addi      	r3, sp, 4
    a2f6:	a340      	st.b      	r2, (r3, 0x0)
	Bit32u addr;
	/* start address low addr */
	addr = PCIE_BASEADDR_ATU_OUTBOUND + (region_number << 8) + PCIE_BASEADDR_OB_ST_LADDR;
    a2f8:	1b01      	addi      	r3, sp, 4
    a2fa:	8360      	ld.b      	r3, (r3, 0x0)
    a2fc:	74cc      	zextb      	r3, r3
    a2fe:	4368      	lsli      	r3, r3, 8
    a300:	ea210008 	movih      	r1, 8      	//0x8
    a304:	2117      	addi      	r1, 24      	//0x18
    a306:	5b44      	addu      	r2, r3, r1
    a308:	1b04      	addi      	r3, sp, 16
    a30a:	b340      	st.w      	r2, (r3, 0x0)
	writel(start_addr & 0xFFFF, (void *)addr);
    a30c:	1903      	addi      	r1, sp, 12
    a30e:	9140      	ld.w      	r2, (r1, 0x0)
    a310:	ea0cffff 	movi      	r12, 65535      	//0xffff
    a314:	ea0d0000 	movi      	r13, 0      	//0x0
    a318:	68b0      	and      	r2, r12
    a31a:	68f4      	and      	r3, r13
    a31c:	1b04      	addi      	r3, sp, 16
    a31e:	9360      	ld.w      	r3, (r3, 0x0)
    a320:	6c0b      	mov      	r0, r2
    a322:	6c4f      	mov      	r1, r3
    a324:	e3fffe20 	bsr      	0x9f64	//9f64 <writel>
    a328:	c4004820 	lsli      	r0, r0, 0
	/* start address high addr */
	//addr = PCIE_BASEADDR_ATU_OUTBOUND + (region_number << 8) + PCIE_BASEADDR_OB_ST_UADDR;
	//writel(start_addr, (void *)addr);

	/* end address low addr */
	addr = PCIE_BASEADDR_ATU_OUTBOUND + (region_number << 8) + PCIE_BASEADDR_OB_END_LADDR;
    a32c:	1b01      	addi      	r3, sp, 4
    a32e:	8360      	ld.b      	r3, (r3, 0x0)
    a330:	74cc      	zextb      	r3, r3
    a332:	4368      	lsli      	r3, r3, 8
    a334:	ea210008 	movih      	r1, 8      	//0x8
    a338:	211f      	addi      	r1, 32      	//0x20
    a33a:	5b44      	addu      	r2, r3, r1
    a33c:	1b04      	addi      	r3, sp, 16
    a33e:	b340      	st.w      	r2, (r3, 0x0)
	writel(start_addr & 0xFFFF, (void *)addr);
    a340:	1903      	addi      	r1, sp, 12
    a342:	9140      	ld.w      	r2, (r1, 0x0)
    a344:	ea06ffff 	movi      	r6, 65535      	//0xffff
    a348:	3700      	movi      	r7, 0      	//0x0
    a34a:	6898      	and      	r2, r6
    a34c:	68dc      	and      	r3, r7
    a34e:	1b04      	addi      	r3, sp, 16
    a350:	9360      	ld.w      	r3, (r3, 0x0)
    a352:	6c0b      	mov      	r0, r2
    a354:	6c4f      	mov      	r1, r3
    a356:	e3fffe07 	bsr      	0x9f64	//9f64 <writel>
    a35a:	c4004820 	lsli      	r0, r0, 0
	/* end address high addr */
	//addr = PCIE_BASEADDR_ATU_OUTBOUND + (region_number << 8) + PCIE_BASEADDR_OB_END_UADDR;
	//writel(((Bit32u)start_addr >> 32), (void *)addr);

	/* enable translation */
	addr = PCIE_BASEADDR_ATU_OUTBOUND + (region_number << 8) + PCIE_BASEADDR_OB_CTRL;
    a35e:	1b01      	addi      	r3, sp, 4
    a360:	8360      	ld.b      	r3, (r3, 0x0)
    a362:	74cc      	zextb      	r3, r3
    a364:	4368      	lsli      	r3, r3, 8
    a366:	3180      	movi      	r1, 128      	//0x80
    a368:	412c      	lsli      	r1, r1, 12
    a36a:	5b44      	addu      	r2, r3, r1
    a36c:	1b04      	addi      	r3, sp, 16
    a36e:	b340      	st.w      	r2, (r3, 0x0)
	ctrl_value |= PCIE_IB_CTRL_ENABLE;
    a370:	6cfb      	mov      	r3, sp
    a372:	6cbb      	mov      	r2, sp
    a374:	9240      	ld.w      	r2, (r2, 0x0)
    a376:	3aa0      	bseti      	r2, 0
    a378:	b340      	st.w      	r2, (r3, 0x0)
	writel(ctrl_value, (void *)addr);
    a37a:	1b04      	addi      	r3, sp, 16
    a37c:	9360      	ld.w      	r3, (r3, 0x0)
    a37e:	6cbb      	mov      	r2, sp
    a380:	9200      	ld.w      	r0, (r2, 0x0)
    a382:	6c4f      	mov      	r1, r3
    a384:	e3fffdf0 	bsr      	0x9f64	//9f64 <writel>
    a388:	c4004820 	lsli      	r0, r0, 0

	return pci_ob_read_taraddr(region_number);
    a38c:	1b01      	addi      	r3, sp, 4
    a38e:	8360      	ld.b      	r3, (r3, 0x0)
    a390:	74cc      	zextb      	r3, r3
    a392:	6c0f      	mov      	r0, r3
    a394:	e3ffff5e 	bsr      	0xa250	//a250 <pci_ob_read_taraddr>
    a398:	c4004820 	lsli      	r0, r0, 0
    a39c:	6cc3      	mov      	r3, r0
    a39e:	6d0f      	mov      	r4, r3
    a3a0:	3500      	movi      	r5, 0      	//0x0
    a3a2:	6cd3      	mov      	r3, r4
    a3a4:	6d17      	mov      	r4, r5
}
    a3a6:	6c0f      	mov      	r0, r3
    a3a8:	6c53      	mov      	r1, r4
    a3aa:	1405      	addi      	sp, sp, 20
    a3ac:	1494      	pop      	r4-r7, r15
	...

0000a3b0 <pci_ob_memory_rw>:
 * Outbound operation, memory read/write 
 * @type 0:read, 1:write, the read and write is selected by software
 * @func_sel, 0:from internal, 1:from external
 * @func_number This bit if valid if @func_sel==1, this number is used for Group1, Group0, Group2
 * */
Bit64u pci_ob_memory_rw(Bit8u type, Bit8u func_sel, Bit8u func_number, Bit32u start_addr, Bit32u end_addr,   Bit8u region_number){
    a3b0:	14d1      	push      	r4, r15
    a3b2:	1428      	subi      	sp, sp, 32
    a3b4:	6f03      	mov      	r12, r0
    a3b6:	6c07      	mov      	r0, r1
    a3b8:	6c4b      	mov      	r1, r2
    a3ba:	1a01      	addi      	r2, sp, 4
    a3bc:	b260      	st.w      	r3, (r2, 0x0)
    a3be:	984b      	ld.w      	r2, (sp, 0x2c)
    a3c0:	1b04      	addi      	r3, sp, 16
    a3c2:	dd830000 	st.b      	r12, (r3, 0x0)
    a3c6:	1b03      	addi      	r3, sp, 12
    a3c8:	a300      	st.b      	r0, (r3, 0x0)
    a3ca:	1b02      	addi      	r3, sp, 8
    a3cc:	a320      	st.b      	r1, (r3, 0x0)
    a3ce:	6cfb      	mov      	r3, sp
    a3d0:	a340      	st.b      	r2, (r3, 0x0)
	Bit32u addr;
	Bit32u ctrl_value = 0;  /* value for ctrl register */
    a3d2:	1b06      	addi      	r3, sp, 24
    a3d4:	3200      	movi      	r2, 0      	//0x0
    a3d6:	b340      	st.w      	r2, (r3, 0x0)
	Bit32u misc_value = 0; 
    a3d8:	1b07      	addi      	r3, sp, 28
    a3da:	3200      	movi      	r2, 0      	//0x0
    a3dc:	b340      	st.w      	r2, (r3, 0x0)

	ctrl_value |= PCIE_OB_CTRL_TRANS_TYPE(PCIE_OB_CTRL_TRANS_TYPE_MEM);
    a3de:	1b06      	addi      	r3, sp, 24
    a3e0:	1a06      	addi      	r2, sp, 24
    a3e2:	9240      	ld.w      	r2, (r2, 0x0)
    a3e4:	b340      	st.w      	r2, (r3, 0x0)
	ctrl_value |= PCIE_OB_CTRL_FUNC_SEL(func_sel);
    a3e6:	1b03      	addi      	r3, sp, 12
    a3e8:	8360      	ld.b      	r3, (r3, 0x0)
    a3ea:	74cc      	zextb      	r3, r3
    a3ec:	4363      	lsli      	r3, r3, 3
    a3ee:	6c4f      	mov      	r1, r3
    a3f0:	1b06      	addi      	r3, sp, 24
    a3f2:	1a06      	addi      	r2, sp, 24
    a3f4:	9240      	ld.w      	r2, (r2, 0x0)
    a3f6:	6c84      	or      	r2, r1
    a3f8:	b340      	st.w      	r2, (r3, 0x0)
	addr = PCIE_BASEADDR_ATU_OUTBOUND + (region_number << 8) + PCIE_BASEADDR_OB_CTRL;
    a3fa:	6cfb      	mov      	r3, sp
    a3fc:	8360      	ld.b      	r3, (r3, 0x0)
    a3fe:	74cc      	zextb      	r3, r3
    a400:	4368      	lsli      	r3, r3, 8
    a402:	3180      	movi      	r1, 128      	//0x80
    a404:	412c      	lsli      	r1, r1, 12
    a406:	5b44      	addu      	r2, r3, r1
    a408:	1b05      	addi      	r3, sp, 20
    a40a:	b340      	st.w      	r2, (r3, 0x0)
	writel(ctrl_value, (void *)addr);
    a40c:	1b05      	addi      	r3, sp, 20
    a40e:	9360      	ld.w      	r3, (r3, 0x0)
    a410:	1a06      	addi      	r2, sp, 24
    a412:	9200      	ld.w      	r0, (r2, 0x0)
    a414:	6c4f      	mov      	r1, r3
    a416:	e3fffda7 	bsr      	0x9f64	//9f64 <writel>
    a41a:	c4004820 	lsli      	r0, r0, 0

	if(func_sel == 1)
    a41e:	1b03      	addi      	r3, sp, 12
    a420:	8360      	ld.b      	r3, (r3, 0x0)
    a422:	74cc      	zextb      	r3, r3
    a424:	3b41      	cmpnei      	r3, 1
    a426:	0821      	bt      	0xa468	//a468 <pci_ob_memory_rw+0xb8>
		switch(func_number){
    a428:	1b02      	addi      	r3, sp, 8
    a42a:	8360      	ld.b      	r3, (r3, 0x0)
    a42c:	74cc      	zextb      	r3, r3
    a42e:	3b41      	cmpnei      	r3, 1
    a430:	0c0a      	bf      	0xa444	//a444 <pci_ob_memory_rw+0x94>
    a432:	3b42      	cmpnei      	r3, 2
    a434:	0c14      	bf      	0xa45c	//a45c <pci_ob_memory_rw+0xac>
    a436:	e9230019 	bnez      	r3, 0xa468	//a468 <pci_ob_memory_rw+0xb8>
			case 0:
				misc_value |= PCIE_OB_WR_MSIC_TLP_FUNC(PCIE_OB_WR_MSIC_TLP_FUNC_GRP1);  
    a43a:	1b07      	addi      	r3, sp, 28
    a43c:	1a07      	addi      	r2, sp, 28
    a43e:	9240      	ld.w      	r2, (r2, 0x0)
    a440:	b340      	st.w      	r2, (r3, 0x0)
				break;
    a442:	0413      	br      	0xa468	//a468 <pci_ob_memory_rw+0xb8>
			case 1:
				misc_value |= PCIE_OB_WR_MSIC_TLP_FUNC(PCIE_OB_WR_MSIC_TLP_FUNC_GRP0);  
    a444:	1b07      	addi      	r3, sp, 28
    a446:	1a07      	addi      	r2, sp, 28
    a448:	9240      	ld.w      	r2, (r2, 0x0)
    a44a:	3ab6      	bseti      	r2, 22
    a44c:	b340      	st.w      	r2, (r3, 0x0)
				break;
    a44e:	040d      	br      	0xa468	//a468 <pci_ob_memory_rw+0xb8>
    a450:	00009f50 	.long	0x00009f50
    a454:	00009f64 	.long	0x00009f64
    a458:	0000a250 	.long	0x0000a250
			case 2:
				misc_value |= PCIE_OB_WR_MSIC_TLP_FUNC(PCIE_OB_WR_MSIC_TLP_FUNC_GRP2);  
    a45c:	1b07      	addi      	r3, sp, 28
    a45e:	1a07      	addi      	r2, sp, 28
    a460:	9240      	ld.w      	r2, (r2, 0x0)
    a462:	3ab7      	bseti      	r2, 23
    a464:	b340      	st.w      	r2, (r3, 0x0)
				break;
    a466:	6c00      	or      	r0, r0
		}

	misc_value |= PCIE_OB_RD_MSIC_TLP_TYPE(PCIE_TLP_HEADER_MSG_TYPE_MRD);
    a468:	1b07      	addi      	r3, sp, 28
    a46a:	1a07      	addi      	r2, sp, 28
    a46c:	9240      	ld.w      	r2, (r2, 0x0)
    a46e:	b340      	st.w      	r2, (r3, 0x0)

	switch(type){
    a470:	1b04      	addi      	r3, sp, 16
    a472:	8360      	ld.b      	r3, (r3, 0x0)
    a474:	74cc      	zextb      	r3, r3
    a476:	e9030005 	bez      	r3, 0xa480	//a480 <pci_ob_memory_rw+0xd0>
    a47a:	3b41      	cmpnei      	r3, 1
    a47c:	0c16      	bf      	0xa4a8	//a4a8 <pci_ob_memory_rw+0xf8>
		case 1: 	/* write */
			addr = PCIE_BASEADDR_ATU_OUTBOUND + (region_number << 8) + PCIE_BASEADDR_OB_WR_MSIC;
			writel(misc_value, (void *)addr);
			break;
		default:
			break;
    a47e:	0429      	br      	0xa4d0	//a4d0 <pci_ob_memory_rw+0x120>

	misc_value |= PCIE_OB_RD_MSIC_TLP_TYPE(PCIE_TLP_HEADER_MSG_TYPE_MRD);

	switch(type){
		case 0: 	/* read */
			addr = PCIE_BASEADDR_ATU_OUTBOUND + (region_number << 8) + PCIE_BASEADDR_OB_RD_MSIC;
    a480:	6cfb      	mov      	r3, sp
    a482:	8360      	ld.b      	r3, (r3, 0x0)
    a484:	74cc      	zextb      	r3, r3
    a486:	4368      	lsli      	r3, r3, 8
    a488:	ea210008 	movih      	r1, 8      	//0x8
    a48c:	210f      	addi      	r1, 16      	//0x10
    a48e:	5b44      	addu      	r2, r3, r1
    a490:	1b05      	addi      	r3, sp, 20
    a492:	b340      	st.w      	r2, (r3, 0x0)
			writel(misc_value, (void *)addr);
    a494:	1b05      	addi      	r3, sp, 20
    a496:	9360      	ld.w      	r3, (r3, 0x0)
    a498:	1a07      	addi      	r2, sp, 28
    a49a:	9200      	ld.w      	r0, (r2, 0x0)
    a49c:	6c4f      	mov      	r1, r3
    a49e:	e3fffd63 	bsr      	0x9f64	//9f64 <writel>
    a4a2:	c4004820 	lsli      	r0, r0, 0
			break;
    a4a6:	0415      	br      	0xa4d0	//a4d0 <pci_ob_memory_rw+0x120>
		case 1: 	/* write */
			addr = PCIE_BASEADDR_ATU_OUTBOUND + (region_number << 8) + PCIE_BASEADDR_OB_WR_MSIC;
    a4a8:	6cfb      	mov      	r3, sp
    a4aa:	8360      	ld.b      	r3, (r3, 0x0)
    a4ac:	74cc      	zextb      	r3, r3
    a4ae:	4368      	lsli      	r3, r3, 8
    a4b0:	ea210008 	movih      	r1, 8      	//0x8
    a4b4:	2103      	addi      	r1, 4      	//0x4
    a4b6:	5b44      	addu      	r2, r3, r1
    a4b8:	1b05      	addi      	r3, sp, 20
    a4ba:	b340      	st.w      	r2, (r3, 0x0)
			writel(misc_value, (void *)addr);
    a4bc:	1b05      	addi      	r3, sp, 20
    a4be:	9360      	ld.w      	r3, (r3, 0x0)
    a4c0:	1a07      	addi      	r2, sp, 28
    a4c2:	9200      	ld.w      	r0, (r2, 0x0)
    a4c4:	6c4f      	mov      	r1, r3
    a4c6:	e3fffd4f 	bsr      	0x9f64	//9f64 <writel>
    a4ca:	c4004820 	lsli      	r0, r0, 0
			break;
    a4ce:	6c00      	or      	r0, r0
		default:
			break;
	}

	return pci_ob_transfer_addr(start_addr, end_addr, region_number, ctrl_value);
    a4d0:	6cfb      	mov      	r3, sp
    a4d2:	8360      	ld.b      	r3, (r3, 0x0)
    a4d4:	748c      	zextb      	r2, r3
    a4d6:	1901      	addi      	r1, sp, 4
    a4d8:	1b06      	addi      	r3, sp, 24
    a4da:	9100      	ld.w      	r0, (r1, 0x0)
    a4dc:	982a      	ld.w      	r1, (sp, 0x28)
    a4de:	9360      	ld.w      	r3, (r3, 0x0)
    a4e0:	e3ffff00 	bsr      	0xa2e0	//a2e0 <pci_ob_transfer_addr>
    a4e4:	c4004820 	lsli      	r0, r0, 0
    a4e8:	6cc3      	mov      	r3, r0
    a4ea:	6d07      	mov      	r4, r1
}
    a4ec:	6c0f      	mov      	r0, r3
    a4ee:	6c53      	mov      	r1, r4
    a4f0:	1408      	addi      	sp, sp, 32
    a4f2:	1491      	pop      	r4, r15

0000a4f4 <pci_ob_cfg_rw>:
 * Outbound operation, configuation read/write 
 * @type 0:read, 1:write, the read and write is selected by software, But we only use configuration write here.
 * @func_sel, 0:from internal, 1:from external
 * @func_number This bit if valid if @func_sel==1, this number is used for Group1, Group0, Group2
 * */
Bit64u pci_ob_cfg_rw(Bit8u type, Bit8u func_sel, Bit8u fun_number, Bit8u bus_numer, Bit8u device_number, Bit8u function_number,  Bit32u start_addr, Bit32u end_addr,   Bit8u region_number){
    a4f4:	14d1      	push      	r4, r15
    a4f6:	142b      	subi      	sp, sp, 44
    a4f8:	c4004833 	lsli      	r19, r0, 0
    a4fc:	c4014832 	lsli      	r18, r1, 0
    a500:	6f4b      	mov      	r13, r2
    a502:	6f0f      	mov      	r12, r3
    a504:	980d      	ld.w      	r0, (sp, 0x34)
    a506:	982e      	ld.w      	r1, (sp, 0x38)
    a508:	9851      	ld.w      	r2, (sp, 0x44)
    a50a:	1b06      	addi      	r3, sp, 24
    a50c:	de630000 	st.b      	r19, (r3, 0x0)
    a510:	1b05      	addi      	r3, sp, 20
    a512:	de430000 	st.b      	r18, (r3, 0x0)
    a516:	1b04      	addi      	r3, sp, 16
    a518:	dda30000 	st.b      	r13, (r3, 0x0)
    a51c:	1b03      	addi      	r3, sp, 12
    a51e:	dd830000 	st.b      	r12, (r3, 0x0)
    a522:	1b02      	addi      	r3, sp, 8
    a524:	a300      	st.b      	r0, (r3, 0x0)
    a526:	1b01      	addi      	r3, sp, 4
    a528:	a320      	st.b      	r1, (r3, 0x0)
    a52a:	6cfb      	mov      	r3, sp
    a52c:	a340      	st.b      	r2, (r3, 0x0)
	Bit32u addr;
	Bit32u ctrl_value = 0;  /* value for ctrl register */
    a52e:	1b09      	addi      	r3, sp, 36
    a530:	3200      	movi      	r2, 0      	//0x0
    a532:	b340      	st.w      	r2, (r3, 0x0)
	Bit32u misc_value = 0;
    a534:	1b0a      	addi      	r3, sp, 40
    a536:	3200      	movi      	r2, 0      	//0x0
    a538:	b340      	st.w      	r2, (r3, 0x0)
	Bit32u bdf_value = 0; 	/* Bus devie function value */
    a53a:	1b08      	addi      	r3, sp, 32
    a53c:	3200      	movi      	r2, 0      	//0x0
    a53e:	b340      	st.w      	r2, (r3, 0x0)

	ctrl_value |= PCIE_OB_CTRL_TRANS_TYPE(PCIE_OB_CTRL_TRANS_TYPE_CFG);
    a540:	1b09      	addi      	r3, sp, 36
    a542:	1a09      	addi      	r2, sp, 36
    a544:	9240      	ld.w      	r2, (r2, 0x0)
    a546:	3aa1      	bseti      	r2, 1
    a548:	b340      	st.w      	r2, (r3, 0x0)
	ctrl_value |= PCIE_OB_CTRL_FUNC_SEL(func_sel);
    a54a:	1b05      	addi      	r3, sp, 20
    a54c:	8360      	ld.b      	r3, (r3, 0x0)
    a54e:	74cc      	zextb      	r3, r3
    a550:	4363      	lsli      	r3, r3, 3
    a552:	6c4f      	mov      	r1, r3
    a554:	1b09      	addi      	r3, sp, 36
    a556:	1a09      	addi      	r2, sp, 36
    a558:	9240      	ld.w      	r2, (r2, 0x0)
    a55a:	6c84      	or      	r2, r1
    a55c:	b340      	st.w      	r2, (r3, 0x0)
	addr = PCIE_BASEADDR_ATU_OUTBOUND + (region_number << 8) + PCIE_BASEADDR_OB_CTRL;
    a55e:	6cfb      	mov      	r3, sp
    a560:	8360      	ld.b      	r3, (r3, 0x0)
    a562:	74cc      	zextb      	r3, r3
    a564:	4368      	lsli      	r3, r3, 8
    a566:	3180      	movi      	r1, 128      	//0x80
    a568:	412c      	lsli      	r1, r1, 12
    a56a:	5b44      	addu      	r2, r3, r1
    a56c:	1b07      	addi      	r3, sp, 28
    a56e:	b340      	st.w      	r2, (r3, 0x0)
	writel(ctrl_value, (void *)addr);
    a570:	1b07      	addi      	r3, sp, 28
    a572:	9360      	ld.w      	r3, (r3, 0x0)
    a574:	1a09      	addi      	r2, sp, 36
    a576:	9200      	ld.w      	r0, (r2, 0x0)
    a578:	6c4f      	mov      	r1, r3
    a57a:	e3fffcf5 	bsr      	0x9f64	//9f64 <writel>
    a57e:	c4004820 	lsli      	r0, r0, 0

	if(func_sel == 1)
    a582:	1b05      	addi      	r3, sp, 20
    a584:	8360      	ld.b      	r3, (r3, 0x0)
    a586:	74cc      	zextb      	r3, r3
    a588:	3b41      	cmpnei      	r3, 1
    a58a:	081b      	bt      	0xa5c0	//a5c0 <pci_ob_cfg_rw+0xcc>
		switch(function_number){
    a58c:	1b01      	addi      	r3, sp, 4
    a58e:	8360      	ld.b      	r3, (r3, 0x0)
    a590:	74cc      	zextb      	r3, r3
    a592:	3b41      	cmpnei      	r3, 1
    a594:	0c0a      	bf      	0xa5a8	//a5a8 <pci_ob_cfg_rw+0xb4>
    a596:	3b42      	cmpnei      	r3, 2
    a598:	0c0e      	bf      	0xa5b4	//a5b4 <pci_ob_cfg_rw+0xc0>
    a59a:	e9230013 	bnez      	r3, 0xa5c0	//a5c0 <pci_ob_cfg_rw+0xcc>
			case 0:
				misc_value |= PCIE_OB_WR_MSIC_TLP_FUNC(PCIE_OB_WR_MSIC_TLP_FUNC_GRP1);  
    a59e:	1b0a      	addi      	r3, sp, 40
    a5a0:	1a0a      	addi      	r2, sp, 40
    a5a2:	9240      	ld.w      	r2, (r2, 0x0)
    a5a4:	b340      	st.w      	r2, (r3, 0x0)
				break;
    a5a6:	040d      	br      	0xa5c0	//a5c0 <pci_ob_cfg_rw+0xcc>
			case 1:
				misc_value |= PCIE_OB_WR_MSIC_TLP_FUNC(PCIE_OB_WR_MSIC_TLP_FUNC_GRP0);  
    a5a8:	1b0a      	addi      	r3, sp, 40
    a5aa:	1a0a      	addi      	r2, sp, 40
    a5ac:	9240      	ld.w      	r2, (r2, 0x0)
    a5ae:	3ab6      	bseti      	r2, 22
    a5b0:	b340      	st.w      	r2, (r3, 0x0)
				break;
    a5b2:	0407      	br      	0xa5c0	//a5c0 <pci_ob_cfg_rw+0xcc>
			case 2:
				misc_value |= PCIE_OB_WR_MSIC_TLP_FUNC(PCIE_OB_WR_MSIC_TLP_FUNC_GRP2);  
    a5b4:	1b0a      	addi      	r3, sp, 40
    a5b6:	1a0a      	addi      	r2, sp, 40
    a5b8:	9240      	ld.w      	r2, (r2, 0x0)
    a5ba:	3ab7      	bseti      	r2, 23
    a5bc:	b340      	st.w      	r2, (r3, 0x0)
				break;
    a5be:	6c00      	or      	r0, r0

		}

	misc_value |= PCIE_OB_RD_MSIC_TLP_TYPE(PCIE_OB_CTRL_TRANS_TYPE_CFG);
    a5c0:	1b0a      	addi      	r3, sp, 40
    a5c2:	1a0a      	addi      	r2, sp, 40
    a5c4:	9240      	ld.w      	r2, (r2, 0x0)
    a5c6:	3aa0      	bseti      	r2, 0
    a5c8:	b340      	st.w      	r2, (r3, 0x0)

	switch(type){
    a5ca:	1b06      	addi      	r3, sp, 24
    a5cc:	8360      	ld.b      	r3, (r3, 0x0)
    a5ce:	74cc      	zextb      	r3, r3
    a5d0:	e9030005 	bez      	r3, 0xa5da	//a5da <pci_ob_cfg_rw+0xe6>
    a5d4:	3b41      	cmpnei      	r3, 1
    a5d6:	0c16      	bf      	0xa602	//a602 <pci_ob_cfg_rw+0x10e>
			bdf_value = PCIE_OB_CFG_FUNC_NUM(bus_numer) + PCIE_OB_CFG_DEV_NUM(device_number) + PCIE_OB_CFG_FUNC_NUM(function_number);
			addr = PCIE_BASEADDR_ATU_OUTBOUND + (region_number << 8) + PCIE_BASEADDR_OB_CFG_ADDR;
			writel(bdf_value, (void *)addr);
			break;
		default:
			break;
    a5d8:	044c      	br      	0xa670	//a670 <pci_ob_cfg_rw+0x17c>

	misc_value |= PCIE_OB_RD_MSIC_TLP_TYPE(PCIE_OB_CTRL_TRANS_TYPE_CFG);

	switch(type){
		case 0: 	/* read */
			addr = PCIE_BASEADDR_ATU_OUTBOUND + (region_number << 8) + PCIE_BASEADDR_OB_RD_MSIC;
    a5da:	6cfb      	mov      	r3, sp
    a5dc:	8360      	ld.b      	r3, (r3, 0x0)
    a5de:	74cc      	zextb      	r3, r3
    a5e0:	4368      	lsli      	r3, r3, 8
    a5e2:	ea210008 	movih      	r1, 8      	//0x8
    a5e6:	210f      	addi      	r1, 16      	//0x10
    a5e8:	5b44      	addu      	r2, r3, r1
    a5ea:	1b07      	addi      	r3, sp, 28
    a5ec:	b340      	st.w      	r2, (r3, 0x0)
			writel(misc_value, (void *)addr);
    a5ee:	1b07      	addi      	r3, sp, 28
    a5f0:	9360      	ld.w      	r3, (r3, 0x0)
    a5f2:	1a0a      	addi      	r2, sp, 40
    a5f4:	9200      	ld.w      	r0, (r2, 0x0)
    a5f6:	6c4f      	mov      	r1, r3
    a5f8:	e3fffcb6 	bsr      	0x9f64	//9f64 <writel>
    a5fc:	c4004820 	lsli      	r0, r0, 0
			break;
    a600:	0438      	br      	0xa670	//a670 <pci_ob_cfg_rw+0x17c>
		case 1: 	/* write */
			addr = PCIE_BASEADDR_ATU_OUTBOUND + (region_number << 8) + PCIE_BASEADDR_OB_WR_MSIC;
    a602:	6cfb      	mov      	r3, sp
    a604:	8360      	ld.b      	r3, (r3, 0x0)
    a606:	74cc      	zextb      	r3, r3
    a608:	4368      	lsli      	r3, r3, 8
    a60a:	ea210008 	movih      	r1, 8      	//0x8
    a60e:	2103      	addi      	r1, 4      	//0x4
    a610:	5b44      	addu      	r2, r3, r1
    a612:	1b07      	addi      	r3, sp, 28
    a614:	b340      	st.w      	r2, (r3, 0x0)
			writel(misc_value, (void *)addr);
    a616:	1b07      	addi      	r3, sp, 28
    a618:	9360      	ld.w      	r3, (r3, 0x0)
    a61a:	1a0a      	addi      	r2, sp, 40
    a61c:	9200      	ld.w      	r0, (r2, 0x0)
    a61e:	6c4f      	mov      	r1, r3
    a620:	e3fffca2 	bsr      	0x9f64	//9f64 <writel>
    a624:	c4004820 	lsli      	r0, r0, 0

			bdf_value = PCIE_OB_CFG_FUNC_NUM(bus_numer) + PCIE_OB_CFG_DEV_NUM(device_number) + PCIE_OB_CFG_FUNC_NUM(function_number);
    a628:	1b03      	addi      	r3, sp, 12
    a62a:	8360      	ld.b      	r3, (r3, 0x0)
    a62c:	74cc      	zextb      	r3, r3
    a62e:	4350      	lsli      	r2, r3, 16
    a630:	1b02      	addi      	r3, sp, 8
    a632:	8360      	ld.b      	r3, (r3, 0x0)
    a634:	74cc      	zextb      	r3, r3
    a636:	4373      	lsli      	r3, r3, 19
    a638:	5a4c      	addu      	r2, r2, r3
    a63a:	1b01      	addi      	r3, sp, 4
    a63c:	8360      	ld.b      	r3, (r3, 0x0)
    a63e:	74cc      	zextb      	r3, r3
    a640:	4370      	lsli      	r3, r3, 16
    a642:	5a4c      	addu      	r2, r2, r3
    a644:	1b08      	addi      	r3, sp, 32
    a646:	b340      	st.w      	r2, (r3, 0x0)
			addr = PCIE_BASEADDR_ATU_OUTBOUND + (region_number << 8) + PCIE_BASEADDR_OB_CFG_ADDR;
    a648:	6cfb      	mov      	r3, sp
    a64a:	8360      	ld.b      	r3, (r3, 0x0)
    a64c:	74cc      	zextb      	r3, r3
    a64e:	4368      	lsli      	r3, r3, 8
    a650:	ea210008 	movih      	r1, 8      	//0x8
    a654:	2113      	addi      	r1, 20      	//0x14
    a656:	5b44      	addu      	r2, r3, r1
    a658:	1b07      	addi      	r3, sp, 28
    a65a:	b340      	st.w      	r2, (r3, 0x0)
			writel(bdf_value, (void *)addr);
    a65c:	1b07      	addi      	r3, sp, 28
    a65e:	9360      	ld.w      	r3, (r3, 0x0)
    a660:	1a08      	addi      	r2, sp, 32
    a662:	9200      	ld.w      	r0, (r2, 0x0)
    a664:	6c4f      	mov      	r1, r3
    a666:	e3fffc7f 	bsr      	0x9f64	//9f64 <writel>
    a66a:	c4004820 	lsli      	r0, r0, 0
			break;
    a66e:	6c00      	or      	r0, r0
		default:
			break;
	}


	return pci_ob_transfer_addr(start_addr, end_addr, region_number, ctrl_value);
    a670:	6cfb      	mov      	r3, sp
    a672:	8360      	ld.b      	r3, (r3, 0x0)
    a674:	748c      	zextb      	r2, r3
    a676:	1b09      	addi      	r3, sp, 36
    a678:	980f      	ld.w      	r0, (sp, 0x3c)
    a67a:	9830      	ld.w      	r1, (sp, 0x40)
    a67c:	9360      	ld.w      	r3, (r3, 0x0)
    a67e:	e3fffe31 	bsr      	0xa2e0	//a2e0 <pci_ob_transfer_addr>
    a682:	c4004820 	lsli      	r0, r0, 0
    a686:	6cc3      	mov      	r3, r0
    a688:	6d07      	mov      	r4, r1
}
    a68a:	6c0f      	mov      	r0, r3
    a68c:	6c53      	mov      	r1, r4
    a68e:	140b      	addi      	sp, sp, 44
    a690:	1491      	pop      	r4, r15
    a692:	0000      	.short	0x0000
    a694:	00009f64 	.long	0x00009f64
    a698:	0000a2e0 	.long	0x0000a2e0

0000a69c <pci_ob_message_write>:
 * @func_sel, 0:from internal, 1:from external
 * @func_number This bit if valid if @func_sel==1, this number is used for Group1, Group0, Group2
 * @dw3: TLP DW3 content.
 * @dw4: TLP DW4 content.
 * */
Bit64u pci_ob_message_write(Bit8u func_sel, Bit8u func_number, Bit32u start_addr, Bit32u end_addr, Bit8u region_number, Bit32u dw3, Bit32u dw4, Bit8u msg_code){
    a69c:	14d1      	push      	r4, r15
    a69e:	1429      	subi      	sp, sp, 36
    a6a0:	6f03      	mov      	r12, r0
    a6a2:	6c07      	mov      	r0, r1
    a6a4:	1903      	addi      	r1, sp, 12
    a6a6:	b140      	st.w      	r2, (r1, 0x0)
    a6a8:	1a02      	addi      	r2, sp, 8
    a6aa:	b260      	st.w      	r3, (r2, 0x0)
    a6ac:	982b      	ld.w      	r1, (sp, 0x2c)
    a6ae:	984e      	ld.w      	r2, (sp, 0x38)
    a6b0:	1b05      	addi      	r3, sp, 20
    a6b2:	dd830000 	st.b      	r12, (r3, 0x0)
    a6b6:	1b04      	addi      	r3, sp, 16
    a6b8:	a300      	st.b      	r0, (r3, 0x0)
    a6ba:	1b01      	addi      	r3, sp, 4
    a6bc:	a320      	st.b      	r1, (r3, 0x0)
    a6be:	6cfb      	mov      	r3, sp
    a6c0:	a340      	st.b      	r2, (r3, 0x0)
	Bit32u addr;
	Bit32u ctrl_value = 0;  /* value for ctrl register */
    a6c2:	1b07      	addi      	r3, sp, 28
    a6c4:	3200      	movi      	r2, 0      	//0x0
    a6c6:	b340      	st.w      	r2, (r3, 0x0)
	Bit32u misc_value = 0; 
    a6c8:	1b08      	addi      	r3, sp, 32
    a6ca:	3200      	movi      	r2, 0      	//0x0
    a6cc:	b340      	st.w      	r2, (r3, 0x0)

	ctrl_value |= PCIE_OB_CTRL_TRANS_TYPE(PCIE_OB_CTRL_TRANS_TYPE_MSG);
    a6ce:	1b07      	addi      	r3, sp, 28
    a6d0:	1a07      	addi      	r2, sp, 28
    a6d2:	9240      	ld.w      	r2, (r2, 0x0)
    a6d4:	3aa2      	bseti      	r2, 2
    a6d6:	b340      	st.w      	r2, (r3, 0x0)
	ctrl_value |= PCIE_OB_CTRL_FUNC_SEL(func_sel);
    a6d8:	1b05      	addi      	r3, sp, 20
    a6da:	8360      	ld.b      	r3, (r3, 0x0)
    a6dc:	74cc      	zextb      	r3, r3
    a6de:	4363      	lsli      	r3, r3, 3
    a6e0:	6c4f      	mov      	r1, r3
    a6e2:	1b07      	addi      	r3, sp, 28
    a6e4:	1a07      	addi      	r2, sp, 28
    a6e6:	9240      	ld.w      	r2, (r2, 0x0)
    a6e8:	6c84      	or      	r2, r1
    a6ea:	b340      	st.w      	r2, (r3, 0x0)
	addr = PCIE_BASEADDR_ATU_OUTBOUND + (region_number << 8) + PCIE_BASEADDR_OB_CTRL;
    a6ec:	1b01      	addi      	r3, sp, 4
    a6ee:	8360      	ld.b      	r3, (r3, 0x0)
    a6f0:	74cc      	zextb      	r3, r3
    a6f2:	4368      	lsli      	r3, r3, 8
    a6f4:	3180      	movi      	r1, 128      	//0x80
    a6f6:	412c      	lsli      	r1, r1, 12
    a6f8:	5b44      	addu      	r2, r3, r1
    a6fa:	1b06      	addi      	r3, sp, 24
    a6fc:	b340      	st.w      	r2, (r3, 0x0)
	writel(ctrl_value, (void *)addr);
    a6fe:	1b06      	addi      	r3, sp, 24
    a700:	9360      	ld.w      	r3, (r3, 0x0)
    a702:	1a07      	addi      	r2, sp, 28
    a704:	9200      	ld.w      	r0, (r2, 0x0)
    a706:	6c4f      	mov      	r1, r3
    a708:	e3fffc2e 	bsr      	0x9f64	//9f64 <writel>
    a70c:	c4004820 	lsli      	r0, r0, 0

	if(func_sel == 1)
    a710:	1b05      	addi      	r3, sp, 20
    a712:	8360      	ld.b      	r3, (r3, 0x0)
    a714:	74cc      	zextb      	r3, r3
    a716:	3b41      	cmpnei      	r3, 1
    a718:	081b      	bt      	0xa74e	//a74e <pci_ob_message_write+0xb2>
		switch(func_number){
    a71a:	1b04      	addi      	r3, sp, 16
    a71c:	8360      	ld.b      	r3, (r3, 0x0)
    a71e:	74cc      	zextb      	r3, r3
    a720:	3b41      	cmpnei      	r3, 1
    a722:	0c0a      	bf      	0xa736	//a736 <pci_ob_message_write+0x9a>
    a724:	3b42      	cmpnei      	r3, 2
    a726:	0c0e      	bf      	0xa742	//a742 <pci_ob_message_write+0xa6>
    a728:	e9230013 	bnez      	r3, 0xa74e	//a74e <pci_ob_message_write+0xb2>
			case 0:
				misc_value |= PCIE_OB_WR_MSIC_TLP_FUNC(PCIE_OB_WR_MSIC_TLP_FUNC_GRP1);  
    a72c:	1b08      	addi      	r3, sp, 32
    a72e:	1a08      	addi      	r2, sp, 32
    a730:	9240      	ld.w      	r2, (r2, 0x0)
    a732:	b340      	st.w      	r2, (r3, 0x0)
				break;
    a734:	040d      	br      	0xa74e	//a74e <pci_ob_message_write+0xb2>
			case 1:
				misc_value |= PCIE_OB_WR_MSIC_TLP_FUNC(PCIE_OB_WR_MSIC_TLP_FUNC_GRP0);  
    a736:	1b08      	addi      	r3, sp, 32
    a738:	1a08      	addi      	r2, sp, 32
    a73a:	9240      	ld.w      	r2, (r2, 0x0)
    a73c:	3ab6      	bseti      	r2, 22
    a73e:	b340      	st.w      	r2, (r3, 0x0)
				break;
    a740:	0407      	br      	0xa74e	//a74e <pci_ob_message_write+0xb2>
			case 2:
				misc_value |= PCIE_OB_WR_MSIC_TLP_FUNC(PCIE_OB_WR_MSIC_TLP_FUNC_GRP2);  
    a742:	1b08      	addi      	r3, sp, 32
    a744:	1a08      	addi      	r2, sp, 32
    a746:	9240      	ld.w      	r2, (r2, 0x0)
    a748:	3ab7      	bseti      	r2, 23
    a74a:	b340      	st.w      	r2, (r3, 0x0)
				break;
    a74c:	6c00      	or      	r0, r0

		}

	misc_value |= PCIE_OB_RD_MSIC_TLP_TYPE(PCIE_TLP_HEADER_MSG_TYPE_MRD);
    a74e:	1b08      	addi      	r3, sp, 32
    a750:	1a08      	addi      	r2, sp, 32
    a752:	9240      	ld.w      	r2, (r2, 0x0)
    a754:	b340      	st.w      	r2, (r3, 0x0)
	misc_value |= PCIE_OB_WR_MSIC_TLP_MSG(msg_code);
    a756:	6cfb      	mov      	r3, sp
    a758:	8360      	ld.b      	r3, (r3, 0x0)
    a75a:	74cc      	zextb      	r3, r3
    a75c:	436d      	lsli      	r3, r3, 13
    a75e:	6c4f      	mov      	r1, r3
    a760:	1b08      	addi      	r3, sp, 32
    a762:	1a08      	addi      	r2, sp, 32
    a764:	9240      	ld.w      	r2, (r2, 0x0)
    a766:	6c84      	or      	r2, r1
    a768:	b340      	st.w      	r2, (r3, 0x0)

	addr = PCIE_BASEADDR_ATU_OUTBOUND + (region_number << 8) + PCIE_BASEADDR_OB_WR_MSIC;
    a76a:	1b01      	addi      	r3, sp, 4
    a76c:	8360      	ld.b      	r3, (r3, 0x0)
    a76e:	74cc      	zextb      	r3, r3
    a770:	4368      	lsli      	r3, r3, 8
    a772:	ea210008 	movih      	r1, 8      	//0x8
    a776:	2103      	addi      	r1, 4      	//0x4
    a778:	5b44      	addu      	r2, r3, r1
    a77a:	1b06      	addi      	r3, sp, 24
    a77c:	b340      	st.w      	r2, (r3, 0x0)
	writel(misc_value, (void *)addr);
    a77e:	1b06      	addi      	r3, sp, 24
    a780:	9360      	ld.w      	r3, (r3, 0x0)
    a782:	1a08      	addi      	r2, sp, 32
    a784:	9200      	ld.w      	r0, (r2, 0x0)
    a786:	6c4f      	mov      	r1, r3
    a788:	e3fffbee 	bsr      	0x9f64	//9f64 <writel>
    a78c:	c4004820 	lsli      	r0, r0, 0

	addr = PCIE_BASEADDR_ATU_OUTBOUND + (region_number << 8) + PCIE_BASEADDR_OB_WR_HDR_DW3;
    a790:	1b01      	addi      	r3, sp, 4
    a792:	8360      	ld.b      	r3, (r3, 0x0)
    a794:	74cc      	zextb      	r3, r3
    a796:	4368      	lsli      	r3, r3, 8
    a798:	ea210008 	movih      	r1, 8      	//0x8
    a79c:	2107      	addi      	r1, 8      	//0x8
    a79e:	5b44      	addu      	r2, r3, r1
    a7a0:	1b06      	addi      	r3, sp, 24
    a7a2:	b340      	st.w      	r2, (r3, 0x0)
	writel(dw3, (void *)addr);
    a7a4:	1b06      	addi      	r3, sp, 24
    a7a6:	9360      	ld.w      	r3, (r3, 0x0)
    a7a8:	980c      	ld.w      	r0, (sp, 0x30)
    a7aa:	6c4f      	mov      	r1, r3
    a7ac:	e3fffbdc 	bsr      	0x9f64	//9f64 <writel>
    a7b0:	c4004820 	lsli      	r0, r0, 0

	addr = PCIE_BASEADDR_ATU_OUTBOUND + (region_number << 8) + PCIE_BASEADDR_OB_WR_HDR_DW4;
    a7b4:	1b01      	addi      	r3, sp, 4
    a7b6:	8360      	ld.b      	r3, (r3, 0x0)
    a7b8:	74cc      	zextb      	r3, r3
    a7ba:	4368      	lsli      	r3, r3, 8
    a7bc:	ea210008 	movih      	r1, 8      	//0x8
    a7c0:	210b      	addi      	r1, 12      	//0xc
    a7c2:	5b44      	addu      	r2, r3, r1
    a7c4:	1b06      	addi      	r3, sp, 24
    a7c6:	b340      	st.w      	r2, (r3, 0x0)
	writel(dw4, (void *)addr);
    a7c8:	1b06      	addi      	r3, sp, 24
    a7ca:	9360      	ld.w      	r3, (r3, 0x0)
    a7cc:	980d      	ld.w      	r0, (sp, 0x34)
    a7ce:	6c4f      	mov      	r1, r3
    a7d0:	e3fffbca 	bsr      	0x9f64	//9f64 <writel>
    a7d4:	c4004820 	lsli      	r0, r0, 0


	return pci_ob_transfer_addr(start_addr, end_addr, region_number, ctrl_value);
    a7d8:	1b01      	addi      	r3, sp, 4
    a7da:	8360      	ld.b      	r3, (r3, 0x0)
    a7dc:	748c      	zextb      	r2, r3
    a7de:	1803      	addi      	r0, sp, 12
    a7e0:	1902      	addi      	r1, sp, 8
    a7e2:	1b07      	addi      	r3, sp, 28
    a7e4:	9000      	ld.w      	r0, (r0, 0x0)
    a7e6:	9120      	ld.w      	r1, (r1, 0x0)
    a7e8:	9360      	ld.w      	r3, (r3, 0x0)
    a7ea:	e3fffd7b 	bsr      	0xa2e0	//a2e0 <pci_ob_transfer_addr>
    a7ee:	c4004820 	lsli      	r0, r0, 0
    a7f2:	6cc3      	mov      	r3, r0
    a7f4:	6d07      	mov      	r4, r1
}
    a7f6:	6c0f      	mov      	r0, r3
    a7f8:	6c53      	mov      	r1, r4
    a7fa:	1409      	addi      	sp, sp, 36
    a7fc:	1491      	pop      	r4, r15
	...

0000a800 <pci_find_capbility_pointer>:
 * 			PCI_CAP_ID_MSI
 * 			PCI_CAP_ID_MSIX
 * 			PCI_CAP_ID_EXP	
 * @return value: Capability pointer address, or 0
 * */
Bit16u pci_find_capbility_pointer(Bit8u cap_id){
    a800:	1422      	subi      	sp, sp, 8
    a802:	6c83      	mov      	r2, r0
    a804:	6cfb      	mov      	r3, sp
    a806:	a340      	st.b      	r2, (r3, 0x0)
	Bit8u i;

	for(i=0; i< PCIE_CAP_SIZE; i++){
    a808:	e46e0006 	addi      	r3, sp, 7      	//0x7
    a80c:	3200      	movi      	r2, 0      	//0x0
    a80e:	a340      	st.b      	r2, (r3, 0x0)
    a810:	041e      	br      	0xa84c	//a84c <pci_find_capbility_pointer+0x4c>
		if(pcie_all_cap[i].cap_id == cap_id)
    a812:	e46e0006 	addi      	r3, sp, 7      	//0x7
    a816:	8360      	ld.b      	r3, (r3, 0x0)
    a818:	748c      	zextb      	r2, r3
    a81a:	107d      	lrw      	r3, 0x13a88	//13a88 <pcie_all_cap>
    a81c:	d0430902 	ldr.w      	r2, (r3, r2<<3)
    a820:	6cfb      	mov      	r3, sp
    a822:	8360      	ld.b      	r3, (r3, 0x0)
    a824:	74cc      	zextb      	r3, r3
    a826:	64ca      	cmpne      	r2, r3
    a828:	080b      	bt      	0xa83e	//a83e <pci_find_capbility_pointer+0x3e>
			return pcie_all_cap[i].cap_addr;
    a82a:	e46e0006 	addi      	r3, sp, 7      	//0x7
    a82e:	8360      	ld.b      	r3, (r3, 0x0)
    a830:	74cc      	zextb      	r3, r3
    a832:	1057      	lrw      	r2, 0x13a88	//13a88 <pcie_all_cap>
    a834:	4363      	lsli      	r3, r3, 3
    a836:	5a6c      	addu      	r3, r2, r3
    a838:	9361      	ld.w      	r3, (r3, 0x4)
    a83a:	74cd      	zexth      	r3, r3
    a83c:	0410      	br      	0xa85c	//a85c <pci_find_capbility_pointer+0x5c>
 * @return value: Capability pointer address, or 0
 * */
Bit16u pci_find_capbility_pointer(Bit8u cap_id){
	Bit8u i;

	for(i=0; i< PCIE_CAP_SIZE; i++){
    a83e:	e46e0006 	addi      	r3, sp, 7      	//0x7
    a842:	e44e0006 	addi      	r2, sp, 7      	//0x7
    a846:	8240      	ld.b      	r2, (r2, 0x0)
    a848:	2200      	addi      	r2, 1      	//0x1
    a84a:	a340      	st.b      	r2, (r3, 0x0)
    a84c:	e46e0006 	addi      	r3, sp, 7      	//0x7
    a850:	8360      	ld.b      	r3, (r3, 0x0)
    a852:	748c      	zextb      	r2, r3
    a854:	3305      	movi      	r3, 5      	//0x5
    a856:	648c      	cmphs      	r3, r2
    a858:	0bdd      	bt      	0xa812	//a812 <pci_find_capbility_pointer+0x12>
		if(pcie_all_cap[i].cap_id == cap_id)
			return pcie_all_cap[i].cap_addr;
	}

	return 0;
    a85a:	3300      	movi      	r3, 0      	//0x0
}
    a85c:	6c0f      	mov      	r0, r3
    a85e:	1402      	addi      	sp, sp, 8
    a860:	783c      	rts
	...

0000a864 <pci_rc_cap_msi_init>:
 * init MSI capbility
 * For EP, we do nothing here
 * For RC, we config the msi related address, and use ATU to tranlate address.
 * 	we need alloc a meory for msg data,and use ATU.
 * */
Bit16u pci_rc_cap_msi_init(Bit8u cap_addr){
    a864:	1421      	subi      	sp, sp, 4
    a866:	6c83      	mov      	r2, r0
    a868:	6cfb      	mov      	r3, sp
    a86a:	a340      	st.b      	r2, (r3, 0x0)
	/* 1. init msi control register here 
	 * Address translation here
	 * */


	return 0;
    a86c:	3300      	movi      	r3, 0      	//0x0
}
    a86e:	6c0f      	mov      	r0, r3
    a870:	1401      	addi      	sp, sp, 4
    a872:	783c      	rts

0000a874 <pci_rc_cap_msix_init>:
 * init MSI-X capbility
 * For EP, we do nothing here
 * For RC, we config the msi related address, and use ATU to tranlate address.
 * we need alloc a meory for msg data,and use ATU.
 * */
Bit16u pci_rc_cap_msix_init(Bit8u cap_addr){
    a874:	1421      	subi      	sp, sp, 4
    a876:	6c83      	mov      	r2, r0
    a878:	6cfb      	mov      	r3, sp
    a87a:	a340      	st.b      	r2, (r3, 0x0)
	return 0;
    a87c:	3300      	movi      	r3, 0      	//0x0
}
    a87e:	6c0f      	mov      	r0, r3
    a880:	1401      	addi      	sp, sp, 4
    a882:	783c      	rts
    a884:	00009f64 	.long	0x00009f64
    a888:	0000a2e0 	.long	0x0000a2e0
    a88c:	00013a88 	.long	0x00013a88

0000a890 <pci_rc_cap_pm_init>:
/*
 * init PM capbility
 * Not initilize here.
 * We get interrupt from hardware, and dealwith it in irqhandler
 * */
Bit16u pci_rc_cap_pm_init(Bit8u cap_addr){
    a890:	1421      	subi      	sp, sp, 4
    a892:	6c83      	mov      	r2, r0
    a894:	6cfb      	mov      	r3, sp
    a896:	a340      	st.b      	r2, (r3, 0x0)
	return 0;
    a898:	3300      	movi      	r3, 0      	//0x0
}
    a89a:	6c0f      	mov      	r0, r3
    a89c:	1401      	addi      	sp, sp, 4
    a89e:	783c      	rts

0000a8a0 <pci_rc_cap_pcie_init>:
/*
 * init PCI Express capbility
 * Not initilize here.
 * We get interrupt from hardware, and dealwith it in irqhandler
 * */
Bit16u pci_rc_cap_pcie_init(Bit8u cap_addr){
    a8a0:	1421      	subi      	sp, sp, 4
    a8a2:	6c83      	mov      	r2, r0
    a8a4:	6cfb      	mov      	r3, sp
    a8a6:	a340      	st.b      	r2, (r3, 0x0)
	return 0;
    a8a8:	3300      	movi      	r3, 0      	//0x0
}
    a8aa:	6c0f      	mov      	r0, r3
    a8ac:	1401      	addi      	sp, sp, 4
    a8ae:	783c      	rts

0000a8b0 <pci_find_capabilities>:

Bit16u pci_find_capabilities(){
    a8b0:	14d1      	push      	r4, r15
    a8b2:	1423      	subi      	sp, sp, 12
	Bit8u cap_id;
	Bit32u addr; 	/* capbility list entry */
	Bit32u pcap; 	/* capability pointer */
	Bit8u i;

	addr = PCIE_BASEADDR_F0_LEA_CFG_SPACE + PCI_CAPABILITY_LIST; 	/* pcie capbility list pointer */
    a8b4:	1b02      	addi      	r3, sp, 8
    a8b6:	3234      	movi      	r2, 52      	//0x34
    a8b8:	b340      	st.w      	r2, (r3, 0x0)

	for(i=0; i< PCIE_CAP_SIZE; i++){
    a8ba:	e46e0006 	addi      	r3, sp, 7      	//0x7
    a8be:	3200      	movi      	r2, 0      	//0x0
    a8c0:	a340      	st.b      	r2, (r3, 0x0)
    a8c2:	044e      	br      	0xa95e	//a95e <pci_find_capabilities+0xae>
		pcap = readl((void *)addr);
    a8c4:	1b02      	addi      	r3, sp, 8
    a8c6:	9360      	ld.w      	r3, (r3, 0x0)
    a8c8:	6d3b      	mov      	r4, sp
    a8ca:	6c0f      	mov      	r0, r3
    a8cc:	e3fffb42 	bsr      	0x9f50	//9f50 <readl>
    a8d0:	c4004820 	lsli      	r0, r0, 0
    a8d4:	b400      	st.w      	r0, (r4, 0x0)
		if(pcap == 0){
    a8d6:	6cfb      	mov      	r3, sp
    a8d8:	9360      	ld.w      	r3, (r3, 0x0)
    a8da:	e9230009 	bnez      	r3, 0xa8ec	//a8ec <pci_find_capabilities+0x3c>
			printf("Finished reading capabilities\n");
    a8de:	110b      	lrw      	r0, 0x10980	//10980 <__etext+0xdd0>
    a8e0:	e0002038 	bsr      	0xe950	//e950 <printf>
    a8e4:	c4004820 	lsli      	r0, r0, 0
			return 0;
    a8e8:	3300      	movi      	r3, 0      	//0x0
    a8ea:	0442      	br      	0xa96e	//a96e <pci_find_capabilities+0xbe>
		}

		pcie_all_cap[i].cap_addr = pcap;
    a8ec:	e46e0006 	addi      	r3, sp, 7      	//0x7
    a8f0:	8360      	ld.b      	r3, (r3, 0x0)
    a8f2:	74cc      	zextb      	r3, r3
    a8f4:	1147      	lrw      	r2, 0x13a88	//13a88 <pcie_all_cap>
    a8f6:	4363      	lsli      	r3, r3, 3
    a8f8:	5a6c      	addu      	r3, r2, r3
    a8fa:	6cbb      	mov      	r2, sp
    a8fc:	9240      	ld.w      	r2, (r2, 0x0)
    a8fe:	b341      	st.w      	r2, (r3, 0x4)
		pcie_all_cap[i].cap_id = readl((void *)pcap);
    a900:	e46e0006 	addi      	r3, sp, 7      	//0x7
    a904:	8360      	ld.b      	r3, (r3, 0x0)
    a906:	750c      	zextb      	r4, r3
    a908:	6cfb      	mov      	r3, sp
    a90a:	9360      	ld.w      	r3, (r3, 0x0)
    a90c:	6c0f      	mov      	r0, r3
    a90e:	e3fffb21 	bsr      	0x9f50	//9f50 <readl>
    a912:	c4004820 	lsli      	r0, r0, 0
    a916:	6c83      	mov      	r2, r0
    a918:	107e      	lrw      	r3, 0x13a88	//13a88 <pcie_all_cap>
    a91a:	d4830902 	str.w      	r2, (r3, r4<<3)
		addr = pcap + 8;
    a91e:	1b02      	addi      	r3, sp, 8
    a920:	6cbb      	mov      	r2, sp
    a922:	9240      	ld.w      	r2, (r2, 0x0)
    a924:	2207      	addi      	r2, 8      	//0x8
    a926:	b340      	st.w      	r2, (r3, 0x0)

		/* Init capbility */
		switch(pcie_all_cap[i].cap_id){
    a928:	e46e0006 	addi      	r3, sp, 7      	//0x7
    a92c:	8360      	ld.b      	r3, (r3, 0x0)
    a92e:	748c      	zextb      	r2, r3
    a930:	1078      	lrw      	r3, 0x13a88	//13a88 <pcie_all_cap>
    a932:	d0430903 	ldr.w      	r3, (r3, r2<<3)
    a936:	3b45      	cmpnei      	r3, 5
    a938:	0c09      	bf      	0xa94a	//a94a <pci_find_capabilities+0x9a>
    a93a:	3b05      	cmphsi      	r3, 6      	//0x6
    a93c:	0803      	bt      	0xa942	//a942 <pci_find_capabilities+0x92>
    a93e:	3b41      	cmpnei      	r3, 1
			case PCI_CAP_ID_PM: 		/* Power Management */
				//pci_rc_cap_pm_init(pcie_all_cap[i].cap_addr);
				break;
    a940:	0408      	br      	0xa950	//a950 <pci_find_capabilities+0xa0>
		pcie_all_cap[i].cap_addr = pcap;
		pcie_all_cap[i].cap_id = readl((void *)pcap);
		addr = pcap + 8;

		/* Init capbility */
		switch(pcie_all_cap[i].cap_id){
    a942:	3b50      	cmpnei      	r3, 16
    a944:	0c05      	bf      	0xa94e	//a94e <pci_find_capabilities+0x9e>
    a946:	3b51      	cmpnei      	r3, 17
			case PCI_CAP_ID_MSI: 		/* MSI */
				//pci_rc_cap_msi_init(pcie_all_cap[i].cap_addr);
				break;
			case PCI_CAP_ID_MSIX: 		/* MSI-X */
				//pci_rc_cap_msix_init(pcie_all_cap[i].cap_addr);
				break;
    a948:	0404      	br      	0xa950	//a950 <pci_find_capabilities+0xa0>
			case PCI_CAP_ID_PM: 		/* Power Management */
				//pci_rc_cap_pm_init(pcie_all_cap[i].cap_addr);
				break;
			case PCI_CAP_ID_MSI: 		/* MSI */
				//pci_rc_cap_msi_init(pcie_all_cap[i].cap_addr);
				break;
    a94a:	6c00      	or      	r0, r0
    a94c:	0402      	br      	0xa950	//a950 <pci_find_capabilities+0xa0>
			case PCI_CAP_ID_MSIX: 		/* MSI-X */
				//pci_rc_cap_msix_init(pcie_all_cap[i].cap_addr);
				break;
			case PCI_CAP_ID_EXP: 		/* PCI Express */
				//pci_rc_cap_pcie_init(pcie_all_cap[i].cap_addr);
				break;
    a94e:	6c00      	or      	r0, r0
	Bit32u pcap; 	/* capability pointer */
	Bit8u i;

	addr = PCIE_BASEADDR_F0_LEA_CFG_SPACE + PCI_CAPABILITY_LIST; 	/* pcie capbility list pointer */

	for(i=0; i< PCIE_CAP_SIZE; i++){
    a950:	e46e0006 	addi      	r3, sp, 7      	//0x7
    a954:	e44e0006 	addi      	r2, sp, 7      	//0x7
    a958:	8240      	ld.b      	r2, (r2, 0x0)
    a95a:	2200      	addi      	r2, 1      	//0x1
    a95c:	a340      	st.b      	r2, (r3, 0x0)
    a95e:	e46e0006 	addi      	r3, sp, 7      	//0x7
    a962:	8360      	ld.b      	r3, (r3, 0x0)
    a964:	748c      	zextb      	r2, r3
    a966:	3305      	movi      	r3, 5      	//0x5
    a968:	648c      	cmphs      	r3, r2
    a96a:	0bad      	bt      	0xa8c4	//a8c4 <pci_find_capabilities+0x14>
			default:
				break;
		}
	}

	return 0;
    a96c:	3300      	movi      	r3, 0      	//0x0

}
    a96e:	6c0f      	mov      	r0, r3
    a970:	1403      	addi      	sp, sp, 12
    a972:	1491      	pop      	r4, r15

0000a974 <pcie_verify_id>:
		printf("wrong device id:0x%o8x\n", (val >> 16)&0xFFFF);
		return -1;
	}
	*/

	return 0;
    a974:	3300      	movi      	r3, 0      	//0x0
}
    a976:	6c0f      	mov      	r0, r3
    a978:	783c      	rts
	...

0000a97c <pci_rc_init_configspace>:
 * If we are rc, we need init configspce.
 * */
Bit32u pci_rc_init_configspace(){
	/* Write command and BAR addr */

	return 0;
    a97c:	3300      	movi      	r3, 0      	//0x0
}
    a97e:	6c0f      	mov      	r0, r3
    a980:	783c      	rts
    a982:	0000      	.short	0x0000
    a984:	00009f50 	.long	0x00009f50
    a988:	00010980 	.long	0x00010980
    a98c:	0000e950 	.long	0x0000e950
    a990:	00013a88 	.long	0x00013a88

0000a994 <pci_ep_init>:

Bit32u pci_ep_init(){
    a994:	14d1      	push      	r4, r15
    a996:	1424      	subi      	sp, sp, 16
	Bit32u addr_bar0; /* GRP2 PCIe Command Response Queue */
	Bit32u addr_bar1; /* 4MB MEM POOL access range for GRP2 SOC */
	Bit32u addr_bar2; /* User defined exernal application register and MSI-X interrupt register for GRP2*/

	/* reset pcie */
	if (pci_reset() != 0) { 
    a998:	e3fffaf2 	bsr      	0x9f7c	//9f7c <pci_reset>
    a99c:	c4004820 	lsli      	r0, r0, 0
    a9a0:	6cc3      	mov      	r3, r0
    a9a2:	e903000a 	bez      	r3, 0xa9b6	//a9b6 <pci_ep_init+0x22>
		printf("reset pcie error.\n");
    a9a6:	101c      	lrw      	r0, 0x109a0	//109a0 <__etext+0xdf0>
    a9a8:	e0001fd4 	bsr      	0xe950	//e950 <printf>
    a9ac:	c4004820 	lsli      	r0, r0, 0
		return -1;
    a9b0:	3300      	movi      	r3, 0      	//0x0
    a9b2:	2b00      	subi      	r3, 1      	//0x1
    a9b4:	0423      	br      	0xa9fa	//a9fa <pci_ep_init+0x66>
	}

	/* pcie self test */
	val = pci_bist();
    a9b6:	1c03      	addi      	r4, sp, 12
    a9b8:	e3fffae6 	bsr      	0x9f84	//9f84 <pci_bist>
    a9bc:	c4004820 	lsli      	r0, r0, 0
    a9c0:	b400      	st.w      	r0, (r4, 0x0)
		printf("pcie not prepared now.\n");
		return -1;
	}

	/* verify vendor id and deivce id */
	val = pcie_verify_id();
    a9c2:	1c03      	addi      	r4, sp, 12
    a9c4:	e3ffffd8 	bsr      	0xa974	//a974 <pcie_verify_id>
    a9c8:	c4004820 	lsli      	r0, r0, 0
    a9cc:	b400      	st.w      	r0, (r4, 0x0)
	}

	/* get msi-x capability address */
	//get_msix_cap_addr(bar0);

	addr_bar0 = pci_get_ib_bar_match(PCIE_IB_CTRL_BAR_NUM_BAR1_BAR0);
    a9ce:	1c02      	addi      	r4, sp, 8
    a9d0:	3000      	movi      	r0, 0      	//0x0
    a9d2:	e3fffb3f 	bsr      	0xa050	//a050 <pci_get_ib_bar_match>
    a9d6:	c4004820 	lsli      	r0, r0, 0
    a9da:	b400      	st.w      	r0, (r4, 0x0)
	addr_bar1 = pci_get_ib_bar_match(PCIE_IB_CTRL_BAR_NUM_BAR3_BAR2);
    a9dc:	1c01      	addi      	r4, sp, 4
    a9de:	3001      	movi      	r0, 1      	//0x1
    a9e0:	e3fffb38 	bsr      	0xa050	//a050 <pci_get_ib_bar_match>
    a9e4:	c4004820 	lsli      	r0, r0, 0
    a9e8:	b400      	st.w      	r0, (r4, 0x0)
	addr_bar2 = pci_get_ib_bar_match(PCIE_IB_CTRL_BAR_NUM_BAR5_BAR4);
    a9ea:	6d3b      	mov      	r4, sp
    a9ec:	3002      	movi      	r0, 2      	//0x2
    a9ee:	e3fffb31 	bsr      	0xa050	//a050 <pci_get_ib_bar_match>
    a9f2:	c4004820 	lsli      	r0, r0, 0
    a9f6:	b400      	st.w      	r0, (r4, 0x0)

	/* set 
	 * message address, message data, vector control, PBA 
	 * for Table Entries */

	return 0;
    a9f8:	3300      	movi      	r3, 0      	//0x0
}
    a9fa:	6c0f      	mov      	r0, r3
    a9fc:	1404      	addi      	sp, sp, 16
    a9fe:	1491      	pop      	r4, r15

0000aa00 <pci_rc_init>:

Bit32u pci_rc_init(){
    aa00:	14d0      	push      	r15
	pci_rc_init_configspace();
    aa02:	e3ffffbd 	bsr      	0xa97c	//a97c <pci_rc_init_configspace>
    aa06:	c4004820 	lsli      	r0, r0, 0
}
    aa0a:	6c0f      	mov      	r0, r3
    aa0c:	1490      	pop      	r15
    aa0e:	0000      	.short	0x0000
    aa10:	00009f7c 	.long	0x00009f7c
    aa14:	000109a0 	.long	0x000109a0
    aa18:	0000e950 	.long	0x0000e950
    aa1c:	00009f84 	.long	0x00009f84
    aa20:	0000a974 	.long	0x0000a974
    aa24:	0000a050 	.long	0x0000a050
    aa28:	0000a97c 	.long	0x0000a97c

0000aa2c <readl>:
{
    *(volatile Bit16u *)addr = value;
}

static inline Bit32u readl(const volatile void *addr)
{
    aa2c:	1421      	subi      	sp, sp, 4
    aa2e:	6cfb      	mov      	r3, sp
    aa30:	b300      	st.w      	r0, (r3, 0x0)
    return *(const volatile Bit32u *)addr;
    aa32:	6cfb      	mov      	r3, sp
    aa34:	9360      	ld.w      	r3, (r3, 0x0)
    aa36:	9360      	ld.w      	r3, (r3, 0x0)
}
    aa38:	6c0f      	mov      	r0, r3
    aa3a:	1401      	addi      	sp, sp, 4
    aa3c:	783c      	rts
	...

0000aa40 <writel>:

static inline void writel(Bit32u value, volatile void *addr)
{
    aa40:	1422      	subi      	sp, sp, 8
    aa42:	1b01      	addi      	r3, sp, 4
    aa44:	b300      	st.w      	r0, (r3, 0x0)
    aa46:	6cfb      	mov      	r3, sp
    aa48:	b320      	st.w      	r1, (r3, 0x0)
    *(volatile Bit32u *)addr = value;
    aa4a:	6cfb      	mov      	r3, sp
    aa4c:	9360      	ld.w      	r3, (r3, 0x0)
    aa4e:	1a01      	addi      	r2, sp, 4
    aa50:	9240      	ld.w      	r2, (r2, 0x0)
    aa52:	b340      	st.w      	r2, (r3, 0x0)
}
    aa54:	1402      	addi      	sp, sp, 8
    aa56:	783c      	rts

0000aa58 <ffs>:
#include "include/io.h"
#include "include/misc.h"
#include "pci_regs.h"

Bit32u ffs(Bit32u word)  
{  
    aa58:	14c1      	push      	r4
    aa5a:	1422      	subi      	sp, sp, 8
    aa5c:	6cbb      	mov      	r2, sp
    aa5e:	b200      	st.w      	r0, (r2, 0x0)
	Bit32u num = 0;  
    aa60:	1a01      	addi      	r2, sp, 4
    aa62:	3100      	movi      	r1, 0      	//0x0
    aa64:	b220      	st.w      	r1, (r2, 0x0)
  
	if ((word & 0xffff) == 0) {  
    aa66:	6c3b      	mov      	r0, sp
    aa68:	9020      	ld.w      	r1, (r0, 0x0)
    aa6a:	ea03ffff 	movi      	r3, 65535      	//0xffff
    aa6e:	3400      	movi      	r4, 0      	//0x0
    aa70:	68c4      	and      	r3, r1
    aa72:	6908      	and      	r4, r2
    aa74:	e923000c 	bnez      	r3, 0xaa8c	//aa8c <ffs+0x34>
		num += 16;  
    aa78:	1b01      	addi      	r3, sp, 4
    aa7a:	1a01      	addi      	r2, sp, 4
    aa7c:	9240      	ld.w      	r2, (r2, 0x0)
    aa7e:	220f      	addi      	r2, 16      	//0x10
    aa80:	b340      	st.w      	r2, (r3, 0x0)
		word >>= 16;  
    aa82:	6cfb      	mov      	r3, sp
    aa84:	6cbb      	mov      	r2, sp
    aa86:	9240      	ld.w      	r2, (r2, 0x0)
    aa88:	4a50      	lsri      	r2, r2, 16
    aa8a:	b340      	st.w      	r2, (r3, 0x0)
	}  
	if ((word & 0xff) == 0) {  
    aa8c:	6cfb      	mov      	r3, sp
    aa8e:	9360      	ld.w      	r3, (r3, 0x0)
    aa90:	e46320ff 	andi      	r3, r3, 255
    aa94:	e923000c 	bnez      	r3, 0xaaac	//aaac <ffs+0x54>
		num += 8;  
    aa98:	1b01      	addi      	r3, sp, 4
    aa9a:	1a01      	addi      	r2, sp, 4
    aa9c:	9240      	ld.w      	r2, (r2, 0x0)
    aa9e:	2207      	addi      	r2, 8      	//0x8
    aaa0:	b340      	st.w      	r2, (r3, 0x0)
		word >>= 8;  
    aaa2:	6cfb      	mov      	r3, sp
    aaa4:	6cbb      	mov      	r2, sp
    aaa6:	9240      	ld.w      	r2, (r2, 0x0)
    aaa8:	4a48      	lsri      	r2, r2, 8
    aaaa:	b340      	st.w      	r2, (r3, 0x0)
	}  
	if ((word & 0xf) == 0) {  
    aaac:	6cfb      	mov      	r3, sp
    aaae:	9360      	ld.w      	r3, (r3, 0x0)
    aab0:	e463200f 	andi      	r3, r3, 15
    aab4:	e923000c 	bnez      	r3, 0xaacc	//aacc <ffs+0x74>
		num += 4;  
    aab8:	1b01      	addi      	r3, sp, 4
    aaba:	1a01      	addi      	r2, sp, 4
    aabc:	9240      	ld.w      	r2, (r2, 0x0)
    aabe:	2203      	addi      	r2, 4      	//0x4
    aac0:	b340      	st.w      	r2, (r3, 0x0)
		word >>= 4;  
    aac2:	6cfb      	mov      	r3, sp
    aac4:	6cbb      	mov      	r2, sp
    aac6:	9240      	ld.w      	r2, (r2, 0x0)
    aac8:	4a44      	lsri      	r2, r2, 4
    aaca:	b340      	st.w      	r2, (r3, 0x0)
	}  
	if ((word & 0x3) == 0) {  
    aacc:	6cfb      	mov      	r3, sp
    aace:	9360      	ld.w      	r3, (r3, 0x0)
    aad0:	e4632003 	andi      	r3, r3, 3
    aad4:	e923000c 	bnez      	r3, 0xaaec	//aaec <ffs+0x94>
		num += 2;  
    aad8:	1b01      	addi      	r3, sp, 4
    aada:	1a01      	addi      	r2, sp, 4
    aadc:	9240      	ld.w      	r2, (r2, 0x0)
    aade:	2201      	addi      	r2, 2      	//0x2
    aae0:	b340      	st.w      	r2, (r3, 0x0)
		word >>= 2;  
    aae2:	6cfb      	mov      	r3, sp
    aae4:	6cbb      	mov      	r2, sp
    aae6:	9240      	ld.w      	r2, (r2, 0x0)
    aae8:	4a42      	lsri      	r2, r2, 2
    aaea:	b340      	st.w      	r2, (r3, 0x0)
	}  
	if ((word & 0x1) == 0)  
    aaec:	6cfb      	mov      	r3, sp
    aaee:	9360      	ld.w      	r3, (r3, 0x0)
    aaf0:	e4632001 	andi      	r3, r3, 1
    aaf4:	e9230007 	bnez      	r3, 0xab02	//ab02 <ffs+0xaa>
		num += 1;  
    aaf8:	1b01      	addi      	r3, sp, 4
    aafa:	1a01      	addi      	r2, sp, 4
    aafc:	9240      	ld.w      	r2, (r2, 0x0)
    aafe:	2200      	addi      	r2, 1      	//0x1
    ab00:	b340      	st.w      	r2, (r3, 0x0)
	return num;  
    ab02:	1b01      	addi      	r3, sp, 4
    ab04:	9360      	ld.w      	r3, (r3, 0x0)
}
    ab06:	6c0f      	mov      	r0, r3
    ab08:	1402      	addi      	sp, sp, 8
    ab0a:	1481      	pop      	r4

0000ab0c <pcie_tlp_recv>:

Bit32u pcie_tlp_recv(struct cfg_status *cfg){
    ab0c:	14d1      	push      	r4, r15
    ab0e:	1425      	subi      	sp, sp, 20
    ab10:	6cfb      	mov      	r3, sp
    ab12:	b300      	st.w      	r0, (r3, 0x0)
	Bit32u val;
	Bit8u type;
	Bit8u i;
	struct tlp_header_total_3dw dw={0};
    ab14:	1b01      	addi      	r3, sp, 4
    ab16:	3200      	movi      	r2, 0      	//0x0
    ab18:	b340      	st.w      	r2, (r3, 0x0)
    ab1a:	3200      	movi      	r2, 0      	//0x0
    ab1c:	b341      	st.w      	r2, (r3, 0x4)
    ab1e:	3200      	movi      	r2, 0      	//0x0
    ab20:	b342      	st.w      	r2, (r3, 0x8)
	cfg->recv_data = 0;
    ab22:	6cfb      	mov      	r3, sp
    ab24:	9360      	ld.w      	r3, (r3, 0x0)
    ab26:	3200      	movi      	r2, 0      	//0x0
    ab28:	b342      	st.w      	r2, (r3, 0x8)

	/* while rx data is ready */
	while((readl((void *)ALTERA_RP_RX_CTRL)&ALTERA_RP_RX_CTRL_EOP) != ALTERA_RP_RX_CTRL_EOP);
    ab2a:	6c00      	or      	r0, r0
    ab2c:	1201      	lrw      	r0, 0x1a102010	//1a102010 <__stack+0x19d02018>
    ab2e:	e3ffff7f 	bsr      	0xaa2c	//aa2c <readl>
    ab32:	c4004820 	lsli      	r0, r0, 0
    ab36:	6cc3      	mov      	r3, r0
    ab38:	e4632002 	andi      	r3, r3, 2
    ab3c:	e903fff8 	bez      	r3, 0xab2c	//ab2c <pcie_tlp_recv+0x20>

	dw.dw1 = readl((void *)ALTERA_RP_RX_REG0);
    ab40:	111e      	lrw      	r0, 0x1a102014	//1a102014 <__stack+0x19d0201c>
    ab42:	e3ffff75 	bsr      	0xaa2c	//aa2c <readl>
    ab46:	c4004820 	lsli      	r0, r0, 0
    ab4a:	6c83      	mov      	r2, r0
    ab4c:	1b01      	addi      	r3, sp, 4
    ab4e:	b340      	st.w      	r2, (r3, 0x0)
	dw.dw2 = readl((void *)ALTERA_RP_RX_REG1);
    ab50:	111b      	lrw      	r0, 0x1a102018	//1a102018 <__stack+0x19d02020>
    ab52:	e3ffff6d 	bsr      	0xaa2c	//aa2c <readl>
    ab56:	c4004820 	lsli      	r0, r0, 0
    ab5a:	6c83      	mov      	r2, r0
    ab5c:	1b01      	addi      	r3, sp, 4
    ab5e:	b341      	st.w      	r2, (r3, 0x4)
	printf("recv dw.dw1:0x%x dw.dw2:0x%x\n",dw.dw1, dw.dw2);
    ab60:	1b01      	addi      	r3, sp, 4
    ab62:	9340      	ld.w      	r2, (r3, 0x0)
    ab64:	1b01      	addi      	r3, sp, 4
    ab66:	9361      	ld.w      	r3, (r3, 0x4)
    ab68:	1116      	lrw      	r0, 0x109b4	//109b4 <__etext+0xe04>
    ab6a:	6c4b      	mov      	r1, r2
    ab6c:	6c8f      	mov      	r2, r3
    ab6e:	e0001ef1 	bsr      	0xe950	//e950 <printf>
    ab72:	c4004820 	lsli      	r0, r0, 0
	dw.dw3 = readl((void *)ALTERA_RP_RX_REG0);
    ab76:	1111      	lrw      	r0, 0x1a102014	//1a102014 <__stack+0x19d0201c>
    ab78:	e3ffff5a 	bsr      	0xaa2c	//aa2c <readl>
    ab7c:	c4004820 	lsli      	r0, r0, 0
    ab80:	6c83      	mov      	r2, r0
    ab82:	1b01      	addi      	r3, sp, 4
    ab84:	b342      	st.w      	r2, (r3, 0x8)
	readl((void *)ALTERA_RP_RX_REG1);
    ab86:	110e      	lrw      	r0, 0x1a102018	//1a102018 <__stack+0x19d02020>
    ab88:	e3ffff52 	bsr      	0xaa2c	//aa2c <readl>
    ab8c:	c4004820 	lsli      	r0, r0, 0
	printf("recv dw.dw3:0x%x\n",dw.dw3);
    ab90:	1b01      	addi      	r3, sp, 4
    ab92:	9362      	ld.w      	r3, (r3, 0x8)
    ab94:	110d      	lrw      	r0, 0x109d4	//109d4 <__etext+0xe24>
    ab96:	6c4f      	mov      	r1, r3
    ab98:	e0001edc 	bsr      	0xe950	//e950 <printf>
    ab9c:	c4004820 	lsli      	r0, r0, 0
	printf("rx ctrl regiser status:0x%x\n", readl((void *)ALTERA_RP_RX_CTRL));
    aba0:	1104      	lrw      	r0, 0x1a102010	//1a102010 <__stack+0x19d02018>
    aba2:	e3ffff45 	bsr      	0xaa2c	//aa2c <readl>
    aba6:	c4004820 	lsli      	r0, r0, 0
    abaa:	6cc3      	mov      	r3, r0
    abac:	1108      	lrw      	r0, 0x109e8	//109e8 <__etext+0xe38>
    abae:	6c4f      	mov      	r1, r3
    abb0:	e0001ed0 	bsr      	0xe950	//e950 <printf>
    abb4:	c4004820 	lsli      	r0, r0, 0

	type = ((dw.dw1>>24)&0xFF);
    abb8:	1b01      	addi      	r3, sp, 4
    abba:	9360      	ld.w      	r3, (r3, 0x0)
    abbc:	4b58      	lsri      	r2, r3, 24
    abbe:	e46e0012 	addi      	r3, sp, 19      	//0x13
    abc2:	a340      	st.b      	r2, (r3, 0x0)
	if (type == FMT_TYPE_CFG_CPLD){
    abc4:	e46e0012 	addi      	r3, sp, 19      	//0x13
    abc8:	8360      	ld.b      	r3, (r3, 0x0)
    abca:	74cc      	zextb      	r3, r3
    abcc:	eb43004a 	cmpnei      	r3, 74      	//0x4a
    abd0:	081f      	bt      	0xac0e	//ac0e <pcie_tlp_recv+0x102>
		cfg->recv_data = readl((void *)ALTERA_RP_RX_REG0);
    abd2:	101a      	lrw      	r0, 0x1a102014	//1a102014 <__stack+0x19d0201c>
    abd4:	e3ffff2c 	bsr      	0xaa2c	//aa2c <readl>
    abd8:	c4004820 	lsli      	r0, r0, 0
    abdc:	6c83      	mov      	r2, r0
    abde:	6cfb      	mov      	r3, sp
    abe0:	9360      	ld.w      	r3, (r3, 0x0)
    abe2:	b342      	st.w      	r2, (r3, 0x8)
		readl((void *)ALTERA_RP_RX_REG1);
    abe4:	1016      	lrw      	r0, 0x1a102018	//1a102018 <__stack+0x19d02020>
    abe6:	e3ffff23 	bsr      	0xaa2c	//aa2c <readl>
    abea:	c4004820 	lsli      	r0, r0, 0
		printf("recv data0:0x%x, data1:0x%x\n", cfg->recv_data, readl((void *)ALTERA_RP_RX_REG1));
    abee:	6cfb      	mov      	r3, sp
    abf0:	9360      	ld.w      	r3, (r3, 0x0)
    abf2:	9382      	ld.w      	r4, (r3, 0x8)
    abf4:	1012      	lrw      	r0, 0x1a102018	//1a102018 <__stack+0x19d02020>
    abf6:	e3ffff1b 	bsr      	0xaa2c	//aa2c <readl>
    abfa:	c4004820 	lsli      	r0, r0, 0
    abfe:	6cc3      	mov      	r3, r0
    ac00:	1014      	lrw      	r0, 0x10a08	//10a08 <__etext+0xe58>
    ac02:	6c53      	mov      	r1, r4
    ac04:	6c8f      	mov      	r2, r3
    ac06:	e0001ea5 	bsr      	0xe950	//e950 <printf>
    ac0a:	c4004820 	lsli      	r0, r0, 0
	}
	printf("ctrl regiser status:0x%x\n", readl((void *)ALTERA_RP_RX_CTRL));
    ac0e:	1009      	lrw      	r0, 0x1a102010	//1a102010 <__stack+0x19d02018>
    ac10:	e3ffff0e 	bsr      	0xaa2c	//aa2c <readl>
    ac14:	c4004820 	lsli      	r0, r0, 0
    ac18:	6cc3      	mov      	r3, r0
    ac1a:	100f      	lrw      	r0, 0x10a28	//10a28 <__etext+0xe78>
    ac1c:	6c4f      	mov      	r1, r3
    ac1e:	e0001e99 	bsr      	0xe950	//e950 <printf>
    ac22:	c4004820 	lsli      	r0, r0, 0
	
	return 0;
    ac26:	3300      	movi      	r3, 0      	//0x0
}
    ac28:	6c0f      	mov      	r0, r3
    ac2a:	1405      	addi      	sp, sp, 20
    ac2c:	1491      	pop      	r4, r15
    ac2e:	0000      	.short	0x0000
    ac30:	1a102010 	.long	0x1a102010
    ac34:	0000aa2c 	.long	0x0000aa2c
    ac38:	1a102014 	.long	0x1a102014
    ac3c:	1a102018 	.long	0x1a102018
    ac40:	000109b4 	.long	0x000109b4
    ac44:	0000e950 	.long	0x0000e950
    ac48:	000109d4 	.long	0x000109d4
    ac4c:	000109e8 	.long	0x000109e8
    ac50:	00010a08 	.long	0x00010a08
    ac54:	00010a28 	.long	0x00010a28

0000ac58 <pcie_tlp_send>:

Bit32u pcie_tlp_send(struct cfg_status *cfg){
    ac58:	14d1      	push      	r4, r15
    ac5a:	1426      	subi      	sp, sp, 24
    ac5c:	6cfb      	mov      	r3, sp
    ac5e:	b300      	st.w      	r0, (r3, 0x0)
	struct tlp_header_total_3dw dw = {0};
    ac60:	1b01      	addi      	r3, sp, 4
    ac62:	3200      	movi      	r2, 0      	//0x0
    ac64:	b340      	st.w      	r2, (r3, 0x0)
    ac66:	3200      	movi      	r2, 0      	//0x0
    ac68:	b341      	st.w      	r2, (r3, 0x4)
    ac6a:	3200      	movi      	r2, 0      	//0x0
    ac6c:	b342      	st.w      	r2, (r3, 0x8)
	Bit8u type = 0;
    ac6e:	e46e0016 	addi      	r3, sp, 23      	//0x17
    ac72:	3200      	movi      	r2, 0      	//0x0
    ac74:	a340      	st.b      	r2, (r3, 0x0)
	Bit32u val;
	Bit32u rel;

	dw.dw1 = (cfg->status << 24) | 1;
    ac76:	6cfb      	mov      	r3, sp
    ac78:	9360      	ld.w      	r3, (r3, 0x0)
    ac7a:	8360      	ld.b      	r3, (r3, 0x0)
    ac7c:	74cc      	zextb      	r3, r3
    ac7e:	4378      	lsli      	r3, r3, 24
    ac80:	3ba0      	bseti      	r3, 0
    ac82:	6c8f      	mov      	r2, r3
    ac84:	1b01      	addi      	r3, sp, 4
    ac86:	b340      	st.w      	r2, (r3, 0x0)
	dw.dw2 = 0x1f0f;
    ac88:	1b01      	addi      	r3, sp, 4
    ac8a:	ea021f0f 	movi      	r2, 7951      	//0x1f0f
    ac8e:	b341      	st.w      	r2, (r3, 0x4)
	dw.dw3 = cfg->reg;
    ac90:	6cfb      	mov      	r3, sp
    ac92:	9360      	ld.w      	r3, (r3, 0x0)
    ac94:	8361      	ld.b      	r3, (r3, 0x1)
    ac96:	74cc      	zextb      	r3, r3
    ac98:	6c8f      	mov      	r2, r3
    ac9a:	1b01      	addi      	r3, sp, 4
    ac9c:	b342      	st.w      	r2, (r3, 0x8)

//	while(readl((void *)ALTERA_STATUS)!=0x0F);

	writel(dw.dw1, (void *)ALTERA_RP_TX_REG0);
    ac9e:	1b01      	addi      	r3, sp, 4
    aca0:	9360      	ld.w      	r3, (r3, 0x0)
    aca2:	6c0f      	mov      	r0, r3
    aca4:	ea01d081 	movi      	r1, 53377      	//0xd081
    aca8:	c5a14901 	rotli      	r1, r1, 13
    acac:	e3fffeca 	bsr      	0xaa40	//aa40 <writel>
    acb0:	c4004820 	lsli      	r0, r0, 0
	writel(dw.dw2, (void *)ALTERA_RP_TX_REG1);
    acb4:	1b01      	addi      	r3, sp, 4
    acb6:	9361      	ld.w      	r3, (r3, 0x4)
    acb8:	6c0f      	mov      	r0, r3
    acba:	1337      	lrw      	r1, 0x1a102004	//1a102004 <__stack+0x19d0200c>
    acbc:	e3fffec2 	bsr      	0xaa40	//aa40 <writel>
    acc0:	c4004820 	lsli      	r0, r0, 0
	writel(ALTERA_RP_TX_CTRL_SOP, (void *)ALTERA_RP_TX_CTRL);
    acc4:	3001      	movi      	r0, 1      	//0x1
    acc6:	1335      	lrw      	r1, 0x1a102008	//1a102008 <__stack+0x19d02010>
    acc8:	e3fffebc 	bsr      	0xaa40	//aa40 <writel>
    accc:	c4004820 	lsli      	r0, r0, 0
	printf("send dw.dw1:0x%x dw.dw2:0x%x\n", dw.dw1, dw.dw2);
    acd0:	1b01      	addi      	r3, sp, 4
    acd2:	9340      	ld.w      	r2, (r3, 0x0)
    acd4:	1b01      	addi      	r3, sp, 4
    acd6:	9361      	ld.w      	r3, (r3, 0x4)
    acd8:	1311      	lrw      	r0, 0x10a44	//10a44 <__etext+0xe94>
    acda:	6c4b      	mov      	r1, r2
    acdc:	6c8f      	mov      	r2, r3
    acde:	e0001e39 	bsr      	0xe950	//e950 <printf>
    ace2:	c4004820 	lsli      	r0, r0, 0
	type = ((dw.dw1>>24)&0xFF);
    ace6:	1b01      	addi      	r3, sp, 4
    ace8:	9360      	ld.w      	r3, (r3, 0x0)
    acea:	4b58      	lsri      	r2, r3, 24
    acec:	e46e0016 	addi      	r3, sp, 23      	//0x17
    acf0:	a340      	st.b      	r2, (r3, 0x0)

	switch (type){
    acf2:	e46e0016 	addi      	r3, sp, 23      	//0x17
    acf6:	8360      	ld.b      	r3, (r3, 0x0)
    acf8:	74cc      	zextb      	r3, r3
    acfa:	3b45      	cmpnei      	r3, 5
    acfc:	0c0d      	bf      	0xad16	//ad16 <pcie_tlp_send+0xbe>
    acfe:	3b25      	cmplti      	r3, 6      	//0x6
    ad00:	0c04      	bf      	0xad08	//ad08 <pcie_tlp_send+0xb0>
    ad02:	3b44      	cmpnei      	r3, 4
    ad04:	0c30      	bf      	0xad64	//ad64 <pcie_tlp_send+0x10c>
				writel(ALTERA_RP_TX_CTRL_EOP, (void *)ALTERA_RP_TX_CTRL);
				printf("send cfg->send_data:0x%x :0x%x\n",cfg->send_data, 0);
			}
			break;
		default:
			break;
    ad06:	0543      	br      	0xaf8c	//af8c <pcie_tlp_send+0x334>
	writel(dw.dw2, (void *)ALTERA_RP_TX_REG1);
	writel(ALTERA_RP_TX_CTRL_SOP, (void *)ALTERA_RP_TX_CTRL);
	printf("send dw.dw1:0x%x dw.dw2:0x%x\n", dw.dw1, dw.dw2);
	type = ((dw.dw1>>24)&0xFF);

	switch (type){
    ad08:	eb430044 	cmpnei      	r3, 68      	//0x44
    ad0c:	0cd0      	bf      	0xaeac	//aeac <pcie_tlp_send+0x254>
    ad0e:	eb430045 	cmpnei      	r3, 69      	//0x45
    ad12:	0c4a      	bf      	0xada6	//ada6 <pcie_tlp_send+0x14e>
				writel(ALTERA_RP_TX_CTRL_EOP, (void *)ALTERA_RP_TX_CTRL);
				printf("send cfg->send_data:0x%x :0x%x\n",cfg->send_data, 0);
			}
			break;
		default:
			break;
    ad14:	053c      	br      	0xaf8c	//af8c <pcie_tlp_send+0x334>
	type = ((dw.dw1>>24)&0xFF);

	switch (type){
		case FMT_TYPE_CFG_RD1:
			/* config read, 3dw no data */
			dw.dw3 |= 0x01000000;  /* add bus number here */
    ad16:	1b01      	addi      	r3, sp, 4
    ad18:	9362      	ld.w      	r3, (r3, 0x8)
    ad1a:	c7032842 	bseti      	r2, r3, 24
    ad1e:	1b01      	addi      	r3, sp, 4
    ad20:	b342      	st.w      	r2, (r3, 0x8)
			writel(dw.dw3, (void *)ALTERA_RP_TX_REG0);
    ad22:	1b01      	addi      	r3, sp, 4
    ad24:	9362      	ld.w      	r3, (r3, 0x8)
    ad26:	6c0f      	mov      	r0, r3
    ad28:	ea01d081 	movi      	r1, 53377      	//0xd081
    ad2c:	c5a14901 	rotli      	r1, r1, 13
    ad30:	e3fffe88 	bsr      	0xaa40	//aa40 <writel>
    ad34:	c4004820 	lsli      	r0, r0, 0
			writel(0x0, (void *)ALTERA_RP_TX_REG1);
    ad38:	3000      	movi      	r0, 0      	//0x0
    ad3a:	1237      	lrw      	r1, 0x1a102004	//1a102004 <__stack+0x19d0200c>
    ad3c:	e3fffe82 	bsr      	0xaa40	//aa40 <writel>
    ad40:	c4004820 	lsli      	r0, r0, 0
			writel(ALTERA_RP_TX_CTRL_EOP, (void *)ALTERA_RP_TX_CTRL);
    ad44:	3002      	movi      	r0, 2      	//0x2
    ad46:	1235      	lrw      	r1, 0x1a102008	//1a102008 <__stack+0x19d02010>
    ad48:	e3fffe7c 	bsr      	0xaa40	//aa40 <writel>
    ad4c:	c4004820 	lsli      	r0, r0, 0
			printf("send dw.dw3:0x%x dw.dw4:0x%x\n",dw.dw3, 0);
    ad50:	1b01      	addi      	r3, sp, 4
    ad52:	9362      	ld.w      	r3, (r3, 0x8)
    ad54:	1214      	lrw      	r0, 0x10a64	//10a64 <__etext+0xeb4>
    ad56:	6c4f      	mov      	r1, r3
    ad58:	3200      	movi      	r2, 0      	//0x0
    ad5a:	e0001dfb 	bsr      	0xe950	//e950 <printf>
    ad5e:	c4004820 	lsli      	r0, r0, 0
			break;
    ad62:	0515      	br      	0xaf8c	//af8c <pcie_tlp_send+0x334>
		case FMT_TYPE_CFG_RD0:
			/* config read, 3dw no data */
			writel(dw.dw3, (void *)ALTERA_RP_TX_REG0);
    ad64:	1b01      	addi      	r3, sp, 4
    ad66:	9362      	ld.w      	r3, (r3, 0x8)
    ad68:	6c0f      	mov      	r0, r3
    ad6a:	ea01d081 	movi      	r1, 53377      	//0xd081
    ad6e:	c5a14901 	rotli      	r1, r1, 13
    ad72:	e3fffe67 	bsr      	0xaa40	//aa40 <writel>
    ad76:	c4004820 	lsli      	r0, r0, 0
			writel(0x0, (void *)ALTERA_RP_TX_REG1);
    ad7a:	3000      	movi      	r0, 0      	//0x0
    ad7c:	1226      	lrw      	r1, 0x1a102004	//1a102004 <__stack+0x19d0200c>
    ad7e:	e3fffe61 	bsr      	0xaa40	//aa40 <writel>
    ad82:	c4004820 	lsli      	r0, r0, 0
			writel(ALTERA_RP_TX_CTRL_EOP, (void *)ALTERA_RP_TX_CTRL);
    ad86:	3002      	movi      	r0, 2      	//0x2
    ad88:	1224      	lrw      	r1, 0x1a102008	//1a102008 <__stack+0x19d02010>
    ad8a:	e3fffe5b 	bsr      	0xaa40	//aa40 <writel>
    ad8e:	c4004820 	lsli      	r0, r0, 0
			printf("send dw.dw3:0x%x dw.dw4:0x%x\n",dw.dw3, 0);
    ad92:	1b01      	addi      	r3, sp, 4
    ad94:	9362      	ld.w      	r3, (r3, 0x8)
    ad96:	1204      	lrw      	r0, 0x10a64	//10a64 <__etext+0xeb4>
    ad98:	6c4f      	mov      	r1, r3
    ad9a:	3200      	movi      	r2, 0      	//0x0
    ad9c:	e0001dda 	bsr      	0xe950	//e950 <printf>
    ada0:	c4004820 	lsli      	r0, r0, 0
			break;
    ada4:	04f4      	br      	0xaf8c	//af8c <pcie_tlp_send+0x334>
		case FMT_TYPE_CFG_WD1:
			dw.dw3 |= 0x01000000; /* add bus number here */
    ada6:	1b01      	addi      	r3, sp, 4
    ada8:	9362      	ld.w      	r3, (r3, 0x8)
    adaa:	c7032842 	bseti      	r2, r3, 24
    adae:	1b01      	addi      	r3, sp, 4
    adb0:	b342      	st.w      	r2, (r3, 0x8)
			if(cfg->reg == PCI_COMMAND){
    adb2:	6cfb      	mov      	r3, sp
    adb4:	9360      	ld.w      	r3, (r3, 0x0)
    adb6:	8361      	ld.b      	r3, (r3, 0x1)
    adb8:	74cc      	zextb      	r3, r3
    adba:	3b44      	cmpnei      	r3, 4
    adbc:	0828      	bt      	0xae0c	//ae0c <pcie_tlp_send+0x1b4>
				writel(dw.dw3, (void *)ALTERA_RP_TX_REG0);
    adbe:	1b01      	addi      	r3, sp, 4
    adc0:	9362      	ld.w      	r3, (r3, 0x8)
    adc2:	6c0f      	mov      	r0, r3
    adc4:	ea01d081 	movi      	r1, 53377      	//0xd081
    adc8:	c5a14901 	rotli      	r1, r1, 13
    adcc:	e3fffe3a 	bsr      	0xaa40	//aa40 <writel>
    add0:	c4004820 	lsli      	r0, r0, 0
				writel(cfg->send_data, (void *)ALTERA_RP_TX_REG1);
    add4:	6cfb      	mov      	r3, sp
    add6:	9360      	ld.w      	r3, (r3, 0x0)
    add8:	9361      	ld.w      	r3, (r3, 0x4)
    adda:	6c0f      	mov      	r0, r3
    addc:	112e      	lrw      	r1, 0x1a102004	//1a102004 <__stack+0x19d0200c>
    adde:	e3fffe31 	bsr      	0xaa40	//aa40 <writel>
    ade2:	c4004820 	lsli      	r0, r0, 0
				writel(ALTERA_RP_TX_CTRL_EOP, (void *)ALTERA_RP_TX_CTRL);
    ade6:	3002      	movi      	r0, 2      	//0x2
    ade8:	112c      	lrw      	r1, 0x1a102008	//1a102008 <__stack+0x19d02010>
    adea:	e3fffe2b 	bsr      	0xaa40	//aa40 <writel>
    adee:	c4004820 	lsli      	r0, r0, 0
				printf("send dw.dw3:0x%x dw.dw4:0x%x\n",dw.dw3, cfg->send_data);
    adf2:	1b01      	addi      	r3, sp, 4
    adf4:	9342      	ld.w      	r2, (r3, 0x8)
    adf6:	6cfb      	mov      	r3, sp
    adf8:	9360      	ld.w      	r3, (r3, 0x0)
    adfa:	9361      	ld.w      	r3, (r3, 0x4)
    adfc:	110a      	lrw      	r0, 0x10a64	//10a64 <__etext+0xeb4>
    adfe:	6c4b      	mov      	r1, r2
    ae00:	6c8f      	mov      	r2, r3
    ae02:	e0001da7 	bsr      	0xe950	//e950 <printf>
    ae06:	c4004820 	lsli      	r0, r0, 0
				writel(cfg->send_data, (void *)ALTERA_RP_TX_REG0);
				writel(0x0, (void *)ALTERA_RP_TX_REG1);
				writel(ALTERA_RP_TX_CTRL_EOP, (void *)ALTERA_RP_TX_CTRL);
				printf("send cfg->send_data:0x%x\n", cfg->send_data);
			}
			break;
    ae0a:	04c1      	br      	0xaf8c	//af8c <pcie_tlp_send+0x334>
				writel(ALTERA_RP_TX_CTRL_EOP, (void *)ALTERA_RP_TX_CTRL);
				printf("send dw.dw3:0x%x dw.dw4:0x%x\n",dw.dw3, cfg->send_data);
			}
			else{
				/* config write, 3dw with data */
				writel(dw.dw3, (void *)ALTERA_RP_TX_REG0);
    ae0c:	1b01      	addi      	r3, sp, 4
    ae0e:	9362      	ld.w      	r3, (r3, 0x8)
    ae10:	6c0f      	mov      	r0, r3
    ae12:	ea01d081 	movi      	r1, 53377      	//0xd081
    ae16:	c5a14901 	rotli      	r1, r1, 13
    ae1a:	e3fffe13 	bsr      	0xaa40	//aa40 <writel>
    ae1e:	c4004820 	lsli      	r0, r0, 0
				writel(0x0, (void *)ALTERA_RP_TX_REG1);
    ae22:	3000      	movi      	r0, 0      	//0x0
    ae24:	103c      	lrw      	r1, 0x1a102004	//1a102004 <__stack+0x19d0200c>
    ae26:	e3fffe0d 	bsr      	0xaa40	//aa40 <writel>
    ae2a:	c4004820 	lsli      	r0, r0, 0
				writel(0x00, (void *)ALTERA_RP_TX_CTRL);
    ae2e:	3000      	movi      	r0, 0      	//0x0
    ae30:	103a      	lrw      	r1, 0x1a102008	//1a102008 <__stack+0x19d02010>
    ae32:	e3fffe07 	bsr      	0xaa40	//aa40 <writel>
    ae36:	c4004820 	lsli      	r0, r0, 0
				printf("send dw.dw3:0x%x dw.dw4:0x%x\n",dw.dw3, 0);
    ae3a:	1b01      	addi      	r3, sp, 4
    ae3c:	9362      	ld.w      	r3, (r3, 0x8)
    ae3e:	101a      	lrw      	r0, 0x10a64	//10a64 <__etext+0xeb4>
    ae40:	6c4f      	mov      	r1, r3
    ae42:	3200      	movi      	r2, 0      	//0x0
    ae44:	e0001d86 	bsr      	0xe950	//e950 <printf>
    ae48:	c4004820 	lsli      	r0, r0, 0

				writel(cfg->send_data, (void *)ALTERA_RP_TX_REG0);
    ae4c:	6cfb      	mov      	r3, sp
    ae4e:	9360      	ld.w      	r3, (r3, 0x0)
    ae50:	9361      	ld.w      	r3, (r3, 0x4)
    ae52:	6c0f      	mov      	r0, r3
    ae54:	ea01d081 	movi      	r1, 53377      	//0xd081
    ae58:	c5a14901 	rotli      	r1, r1, 13
    ae5c:	e3fffdf2 	bsr      	0xaa40	//aa40 <writel>
    ae60:	c4004820 	lsli      	r0, r0, 0
				writel(0x0, (void *)ALTERA_RP_TX_REG1);
    ae64:	3000      	movi      	r0, 0      	//0x0
    ae66:	102c      	lrw      	r1, 0x1a102004	//1a102004 <__stack+0x19d0200c>
    ae68:	e3fffdec 	bsr      	0xaa40	//aa40 <writel>
    ae6c:	c4004820 	lsli      	r0, r0, 0
				writel(ALTERA_RP_TX_CTRL_EOP, (void *)ALTERA_RP_TX_CTRL);
    ae70:	3002      	movi      	r0, 2      	//0x2
    ae72:	102a      	lrw      	r1, 0x1a102008	//1a102008 <__stack+0x19d02010>
    ae74:	e3fffde6 	bsr      	0xaa40	//aa40 <writel>
    ae78:	c4004820 	lsli      	r0, r0, 0
				printf("send cfg->send_data:0x%x\n", cfg->send_data);
    ae7c:	6cfb      	mov      	r3, sp
    ae7e:	9360      	ld.w      	r3, (r3, 0x0)
    ae80:	9361      	ld.w      	r3, (r3, 0x4)
    ae82:	100a      	lrw      	r0, 0x10a84	//10a84 <__etext+0xed4>
    ae84:	6c4f      	mov      	r1, r3
    ae86:	e0001d65 	bsr      	0xe950	//e950 <printf>
    ae8a:	c4004820 	lsli      	r0, r0, 0
			}
			break;
    ae8e:	047f      	br      	0xaf8c	//af8c <pcie_tlp_send+0x334>
    ae90:	0000aa40 	.long	0x0000aa40
    ae94:	1a102004 	.long	0x1a102004
    ae98:	1a102008 	.long	0x1a102008
    ae9c:	00010a44 	.long	0x00010a44
    aea0:	0000e950 	.long	0x0000e950
    aea4:	00010a64 	.long	0x00010a64
    aea8:	00010a84 	.long	0x00010a84

		case FMT_TYPE_CFG_WD0:
			if(cfg->reg == PCI_COMMAND){
    aeac:	6cfb      	mov      	r3, sp
    aeae:	9360      	ld.w      	r3, (r3, 0x0)
    aeb0:	8361      	ld.b      	r3, (r3, 0x1)
    aeb2:	74cc      	zextb      	r3, r3
    aeb4:	3b44      	cmpnei      	r3, 4
    aeb6:	0828      	bt      	0xaf06	//af06 <pcie_tlp_send+0x2ae>
				writel(dw.dw3, (void *)ALTERA_RP_TX_REG0);
    aeb8:	1b01      	addi      	r3, sp, 4
    aeba:	9362      	ld.w      	r3, (r3, 0x8)
    aebc:	6c0f      	mov      	r0, r3
    aebe:	ea01d081 	movi      	r1, 53377      	//0xd081
    aec2:	c5a14901 	rotli      	r1, r1, 13
    aec6:	e3fffdbd 	bsr      	0xaa40	//aa40 <writel>
    aeca:	c4004820 	lsli      	r0, r0, 0
				writel(cfg->send_data, (void *)ALTERA_RP_TX_REG1);
    aece:	6cfb      	mov      	r3, sp
    aed0:	9360      	ld.w      	r3, (r3, 0x0)
    aed2:	9361      	ld.w      	r3, (r3, 0x4)
    aed4:	6c0f      	mov      	r0, r3
    aed6:	1135      	lrw      	r1, 0x1a102004	//1a102004 <__stack+0x19d0200c>
    aed8:	e3fffdb4 	bsr      	0xaa40	//aa40 <writel>
    aedc:	c4004820 	lsli      	r0, r0, 0
				writel(ALTERA_RP_TX_CTRL_EOP, (void *)ALTERA_RP_TX_CTRL);
    aee0:	3002      	movi      	r0, 2      	//0x2
    aee2:	1133      	lrw      	r1, 0x1a102008	//1a102008 <__stack+0x19d02010>
    aee4:	e3fffdae 	bsr      	0xaa40	//aa40 <writel>
    aee8:	c4004820 	lsli      	r0, r0, 0
				printf("send dw.dw3:0x%x dw.dw4:0x%x\n",dw.dw3, cfg->send_data);
    aeec:	1b01      	addi      	r3, sp, 4
    aeee:	9342      	ld.w      	r2, (r3, 0x8)
    aef0:	6cfb      	mov      	r3, sp
    aef2:	9360      	ld.w      	r3, (r3, 0x0)
    aef4:	9361      	ld.w      	r3, (r3, 0x4)
    aef6:	110f      	lrw      	r0, 0x10a64	//10a64 <__etext+0xeb4>
    aef8:	6c4b      	mov      	r1, r2
    aefa:	6c8f      	mov      	r2, r3
    aefc:	e0001d2a 	bsr      	0xe950	//e950 <printf>
    af00:	c4004820 	lsli      	r0, r0, 0
				writel(cfg->send_data, (void *)ALTERA_RP_TX_REG0);
				writel(0x0, (void *)ALTERA_RP_TX_REG1);
				writel(ALTERA_RP_TX_CTRL_EOP, (void *)ALTERA_RP_TX_CTRL);
				printf("send cfg->send_data:0x%x :0x%x\n",cfg->send_data, 0);
			}
			break;
    af04:	0444      	br      	0xaf8c	//af8c <pcie_tlp_send+0x334>
				writel(ALTERA_RP_TX_CTRL_EOP, (void *)ALTERA_RP_TX_CTRL);
				printf("send dw.dw3:0x%x dw.dw4:0x%x\n",dw.dw3, cfg->send_data);
			}
			else{
				/* config write, 3dw with data */
				writel(dw.dw3, (void *)ALTERA_RP_TX_REG0);
    af06:	1b01      	addi      	r3, sp, 4
    af08:	9362      	ld.w      	r3, (r3, 0x8)
    af0a:	6c0f      	mov      	r0, r3
    af0c:	ea01d081 	movi      	r1, 53377      	//0xd081
    af10:	c5a14901 	rotli      	r1, r1, 13
    af14:	e3fffd96 	bsr      	0xaa40	//aa40 <writel>
    af18:	c4004820 	lsli      	r0, r0, 0
				writel(0x0, (void *)ALTERA_RP_TX_REG1);
    af1c:	3000      	movi      	r0, 0      	//0x0
    af1e:	1123      	lrw      	r1, 0x1a102004	//1a102004 <__stack+0x19d0200c>
    af20:	e3fffd90 	bsr      	0xaa40	//aa40 <writel>
    af24:	c4004820 	lsli      	r0, r0, 0
				writel(0x00, (void *)ALTERA_RP_TX_CTRL);
    af28:	3000      	movi      	r0, 0      	//0x0
    af2a:	1121      	lrw      	r1, 0x1a102008	//1a102008 <__stack+0x19d02010>
    af2c:	e3fffd8a 	bsr      	0xaa40	//aa40 <writel>
    af30:	c4004820 	lsli      	r0, r0, 0
				printf("send dw.dw3:0x%x dw.dw4:0x%x\n",dw.dw3, 0);
    af34:	1b01      	addi      	r3, sp, 4
    af36:	9362      	ld.w      	r3, (r3, 0x8)
    af38:	101e      	lrw      	r0, 0x10a64	//10a64 <__etext+0xeb4>
    af3a:	6c4f      	mov      	r1, r3
    af3c:	3200      	movi      	r2, 0      	//0x0
    af3e:	e0001d09 	bsr      	0xe950	//e950 <printf>
    af42:	c4004820 	lsli      	r0, r0, 0

				writel(cfg->send_data, (void *)ALTERA_RP_TX_REG0);
    af46:	6cfb      	mov      	r3, sp
    af48:	9360      	ld.w      	r3, (r3, 0x0)
    af4a:	9361      	ld.w      	r3, (r3, 0x4)
    af4c:	6c0f      	mov      	r0, r3
    af4e:	ea01d081 	movi      	r1, 53377      	//0xd081
    af52:	c5a14901 	rotli      	r1, r1, 13
    af56:	e3fffd75 	bsr      	0xaa40	//aa40 <writel>
    af5a:	c4004820 	lsli      	r0, r0, 0
				writel(0x0, (void *)ALTERA_RP_TX_REG1);
    af5e:	3000      	movi      	r0, 0      	//0x0
    af60:	1032      	lrw      	r1, 0x1a102004	//1a102004 <__stack+0x19d0200c>
    af62:	e3fffd6f 	bsr      	0xaa40	//aa40 <writel>
    af66:	c4004820 	lsli      	r0, r0, 0
				writel(ALTERA_RP_TX_CTRL_EOP, (void *)ALTERA_RP_TX_CTRL);
    af6a:	3002      	movi      	r0, 2      	//0x2
    af6c:	1030      	lrw      	r1, 0x1a102008	//1a102008 <__stack+0x19d02010>
    af6e:	e3fffd69 	bsr      	0xaa40	//aa40 <writel>
    af72:	c4004820 	lsli      	r0, r0, 0
				printf("send cfg->send_data:0x%x :0x%x\n",cfg->send_data, 0);
    af76:	6cfb      	mov      	r3, sp
    af78:	9360      	ld.w      	r3, (r3, 0x0)
    af7a:	9361      	ld.w      	r3, (r3, 0x4)
    af7c:	100f      	lrw      	r0, 0x10aa0	//10aa0 <__etext+0xef0>
    af7e:	6c4f      	mov      	r1, r3
    af80:	3200      	movi      	r2, 0      	//0x0
    af82:	e0001ce7 	bsr      	0xe950	//e950 <printf>
    af86:	c4004820 	lsli      	r0, r0, 0
			}
			break;
    af8a:	6c00      	or      	r0, r0
		default:
			break;
	}

	rel = pcie_tlp_recv(cfg);
    af8c:	1c04      	addi      	r4, sp, 16
    af8e:	6cfb      	mov      	r3, sp
    af90:	9300      	ld.w      	r0, (r3, 0x0)
    af92:	e3fffdbd 	bsr      	0xab0c	//ab0c <pcie_tlp_recv>
    af96:	c4004820 	lsli      	r0, r0, 0
    af9a:	b400      	st.w      	r0, (r4, 0x0)

	return 0;
    af9c:	3300      	movi      	r3, 0      	//0x0
}
    af9e:	6c0f      	mov      	r0, r3
    afa0:	1406      	addi      	sp, sp, 24
    afa2:	1491      	pop      	r4, r15
    afa4:	0000aa40 	.long	0x0000aa40
    afa8:	1a102004 	.long	0x1a102004
    afac:	1a102008 	.long	0x1a102008
    afb0:	00010a64 	.long	0x00010a64
    afb4:	0000e950 	.long	0x0000e950
    afb8:	00010aa0 	.long	0x00010aa0
    afbc:	0000ab0c 	.long	0x0000ab0c

0000afc0 <readl>:
{
    *(volatile Bit16u *)addr = value;
}

static inline Bit32u readl(const volatile void *addr)
{
    afc0:	1421      	subi      	sp, sp, 4
    afc2:	6cfb      	mov      	r3, sp
    afc4:	b300      	st.w      	r0, (r3, 0x0)
    return *(const volatile Bit32u *)addr;
    afc6:	6cfb      	mov      	r3, sp
    afc8:	9360      	ld.w      	r3, (r3, 0x0)
    afca:	9360      	ld.w      	r3, (r3, 0x0)
}
    afcc:	6c0f      	mov      	r0, r3
    afce:	1401      	addi      	sp, sp, 4
    afd0:	783c      	rts
	...

0000afd4 <altera_get_mcu_bar_addr>:
#include "io.h"

/*
 *  mcu side, get bar address from config space 
 *  */
Bit32u altera_get_mcu_bar_addr(Bit64u addr){
    afd4:	14d2      	push      	r4-r5, r15
    afd6:	1423      	subi      	sp, sp, 12
    afd8:	6cfb      	mov      	r3, sp
    afda:	b300      	st.w      	r0, (r3, 0x0)
    afdc:	b321      	st.w      	r1, (r3, 0x4)
	Bit32u val;

	printf("32bit addr:0x%x\n", (Bit32u)addr);
    afde:	6cfb      	mov      	r3, sp
    afe0:	9360      	ld.w      	r3, (r3, 0x0)
    afe2:	101f      	lrw      	r0, 0x10ac0	//10ac0 <__etext+0xf10>
    afe4:	6c4f      	mov      	r1, r3
    afe6:	e0001cb5 	bsr      	0xe950	//e950 <printf>
    afea:	c4004820 	lsli      	r0, r0, 0
	val = (0x80000000 | ((Bit32u)addr)&0x3fffffff);
    afee:	6cfb      	mov      	r3, sp
    aff0:	9320      	ld.w      	r1, (r3, 0x0)
    aff2:	6c87      	mov      	r2, r1
    aff4:	c7a05024 	bmaski      	r4, 30      	//0x1e
    aff8:	3500      	movi      	r5, 0      	//0x0
    affa:	c4822020 	and      	r0, r2, r4
    affe:	c4a32021 	and      	r1, r3, r5
    b002:	6cc3      	mov      	r3, r0
    b004:	6d07      	mov      	r4, r1
    b006:	6c8f      	mov      	r2, r3
    b008:	1b02      	addi      	r3, sp, 8
    b00a:	3abf      	bseti      	r2, 31
    b00c:	b340      	st.w      	r2, (r3, 0x0)
	printf("32bit addr val :0x%x\n", (Bit32u)val);
    b00e:	1b02      	addi      	r3, sp, 8
    b010:	1015      	lrw      	r0, 0x10ad4	//10ad4 <__etext+0xf24>
    b012:	9320      	ld.w      	r1, (r3, 0x0)
    b014:	e0001c9e 	bsr      	0xe950	//e950 <printf>
    b018:	c4004820 	lsli      	r0, r0, 0
	return val;
    b01c:	1b02      	addi      	r3, sp, 8
    b01e:	9360      	ld.w      	r3, (r3, 0x0)
}
    b020:	6c0f      	mov      	r0, r3
    b022:	1403      	addi      	sp, sp, 12
    b024:	1492      	pop      	r4-r5, r15
	...

0000b028 <altera_bar_lower_addr>:

Bit32u altera_bar_lower_addr(Bit64u addr){
    b028:	1422      	subi      	sp, sp, 8
    b02a:	6cfb      	mov      	r3, sp
    b02c:	b300      	st.w      	r0, (r3, 0x0)
    b02e:	b321      	st.w      	r1, (r3, 0x4)
 	return ((((Bit32u)addr)&0xC0000000));
    b030:	6cfb      	mov      	r3, sp
    b032:	9360      	ld.w      	r3, (r3, 0x0)
    b034:	4b7e      	lsri      	r3, r3, 30
    b036:	437e      	lsli      	r3, r3, 30
}
    b038:	6c0f      	mov      	r0, r3
    b03a:	1402      	addi      	sp, sp, 8
    b03c:	783c      	rts
	...

0000b040 <altera_bar_upper_addr>:

Bit32u altera_bar_upper_addr(Bit64u addr){
    b040:	14c1      	push      	r4
    b042:	1422      	subi      	sp, sp, 8
    b044:	6cbb      	mov      	r2, sp
    b046:	b200      	st.w      	r0, (r2, 0x0)
    b048:	b221      	st.w      	r1, (r2, 0x4)
 	return (Bit32u)(addr >> 32);
    b04a:	6cbb      	mov      	r2, sp
    b04c:	9241      	ld.w      	r2, (r2, 0x4)
    b04e:	3100      	movi      	r1, 0      	//0x0
    b050:	c4224043 	lsr      	r3, r2, r1
    b054:	3400      	movi      	r4, 0      	//0x0
}
    b056:	6c0f      	mov      	r0, r3
    b058:	1402      	addi      	sp, sp, 8
    b05a:	1481      	pop      	r4
    b05c:	00010ac0 	.long	0x00010ac0
    b060:	0000e950 	.long	0x0000e950
    b064:	00010ad4 	.long	0x00010ad4

0000b068 <altera_rc_set_bar>:
 * Upper bits of Avalon-MM-to-PCI Express address map  entry 0.
 * (volatile unsigned int *)0x0e001004  =   ((unsigned int)(HOST_ADDR_64>>32));
 * mcu side: 0x80000000 + ((unsigned int)HOST_ADDR_64)&0x3fffffff to get HOST_ADDR_64。
 * Entry1 offset is 0x1008 and 0x100c。
 * */
Bit32u altera_rc_set_bar(Bit64u addr){
    b068:	14d0      	push      	r15
    b06a:	142d      	subi      	sp, sp, 52
    b06c:	6cfb      	mov      	r3, sp
    b06e:	b300      	st.w      	r0, (r3, 0x0)
    b070:	b321      	st.w      	r1, (r3, 0x4)
	struct cfg_status cfg = {0, 0, 0, 0};
    b072:	1b02      	addi      	r3, sp, 8
    b074:	3200      	movi      	r2, 0      	//0x0
    b076:	a340      	st.b      	r2, (r3, 0x0)
    b078:	1b02      	addi      	r3, sp, 8
    b07a:	3200      	movi      	r2, 0      	//0x0
    b07c:	a341      	st.b      	r2, (r3, 0x1)
    b07e:	1b02      	addi      	r3, sp, 8
    b080:	3200      	movi      	r2, 0      	//0x0
    b082:	b341      	st.w      	r2, (r3, 0x4)
    b084:	1b02      	addi      	r3, sp, 8
    b086:	3200      	movi      	r2, 0      	//0x0
    b088:	b342      	st.w      	r2, (r3, 0x8)

	Bit32u ep_bar0_len = 0;
    b08a:	1b0c      	addi      	r3, sp, 48
    b08c:	3200      	movi      	r2, 0      	//0x0
    b08e:	b340      	st.w      	r2, (r3, 0x0)
	Bit32u ep_bar0_type = 0;
    b090:	1b0b      	addi      	r3, sp, 44
    b092:	3200      	movi      	r2, 0      	//0x0
    b094:	b340      	st.w      	r2, (r3, 0x0)
	Bit32u ep_lower_addr = 0x0;
    b096:	1b0a      	addi      	r3, sp, 40
    b098:	3200      	movi      	r2, 0      	//0x0
    b09a:	b340      	st.w      	r2, (r3, 0x0)
	Bit32u ep_upper_addr = 0x0;
    b09c:	1b09      	addi      	r3, sp, 36
    b09e:	3200      	movi      	r2, 0      	//0x0
    b0a0:	b340      	st.w      	r2, (r3, 0x0)

	Bit32u rc_bar0_len = 0;
    b0a2:	1b08      	addi      	r3, sp, 32
    b0a4:	3200      	movi      	r2, 0      	//0x0
    b0a6:	b340      	st.w      	r2, (r3, 0x0)
	Bit32u rc_bar0_type = 0;
    b0a8:	1b07      	addi      	r3, sp, 28
    b0aa:	3200      	movi      	r2, 0      	//0x0
    b0ac:	b340      	st.w      	r2, (r3, 0x0)
	Bit32u rc_lower_addr = 0x40000000;
    b0ae:	1a06      	addi      	r2, sp, 24
    b0b0:	3380      	movi      	r3, 128      	//0x80
    b0b2:	4377      	lsli      	r3, r3, 23
    b0b4:	b260      	st.w      	r3, (r2, 0x0)
	Bit32u rc_upper_addr = 0x0;
    b0b6:	1b05      	addi      	r3, sp, 20
    b0b8:	3200      	movi      	r2, 0      	//0x0
    b0ba:	b340      	st.w      	r2, (r3, 0x0)
	cfg.send_data = ep_upper_addr;
	pcie_tlp_send(&cfg);
	printf("\n");
#endif

	printf("Write bar0 lower addr to ep PCI_BASE_ADDRESS_0\n");
    b0bc:	1312      	lrw      	r0, 0x10aec	//10aec <__etext+0xf3c>
    b0be:	e0001c49 	bsr      	0xe950	//e950 <printf>
    b0c2:	c4004820 	lsli      	r0, r0, 0
	cfg.status = FMT_TYPE_CFG_WD1;
    b0c6:	1b02      	addi      	r3, sp, 8
    b0c8:	3245      	movi      	r2, 69      	//0x45
    b0ca:	a340      	st.b      	r2, (r3, 0x0)
	cfg.reg = PCI_BASE_ADDRESS_0;
    b0cc:	1b02      	addi      	r3, sp, 8
    b0ce:	3210      	movi      	r2, 16      	//0x10
    b0d0:	a341      	st.b      	r2, (r3, 0x1)
	//cfg.send_data = ep_lower_addr;
	cfg.send_data = 0x400;
    b0d2:	1a02      	addi      	r2, sp, 8
    b0d4:	3380      	movi      	r3, 128      	//0x80
    b0d6:	4363      	lsli      	r3, r3, 3
    b0d8:	b261      	st.w      	r3, (r2, 0x4)
	pcie_tlp_send(&cfg);
    b0da:	1b02      	addi      	r3, sp, 8
    b0dc:	6c0f      	mov      	r0, r3
    b0de:	e3fffdbd 	bsr      	0xac58	//ac58 <pcie_tlp_send>
    b0e2:	c4004820 	lsli      	r0, r0, 0
	printf("\n");
    b0e6:	130b      	lrw      	r0, 0x10b1c	//10b1c <__etext+0xf6c>
    b0e8:	e0001c34 	bsr      	0xe950	//e950 <printf>
    b0ec:	c4004820 	lsli      	r0, r0, 0

#if 1
	printf("Read bar0 lower from ep PCI_BASE_ADDRESS_0\n");
    b0f0:	1309      	lrw      	r0, 0x10b20	//10b20 <__etext+0xf70>
    b0f2:	e0001c2f 	bsr      	0xe950	//e950 <printf>
    b0f6:	c4004820 	lsli      	r0, r0, 0
	cfg.status = FMT_TYPE_CFG_RD1;
    b0fa:	1b02      	addi      	r3, sp, 8
    b0fc:	3205      	movi      	r2, 5      	//0x5
    b0fe:	a340      	st.b      	r2, (r3, 0x0)
	cfg.reg = PCI_BASE_ADDRESS_0;
    b100:	1b02      	addi      	r3, sp, 8
    b102:	3210      	movi      	r2, 16      	//0x10
    b104:	a341      	st.b      	r2, (r3, 0x1)
	pcie_tlp_send(&cfg);
    b106:	1b02      	addi      	r3, sp, 8
    b108:	6c0f      	mov      	r0, r3
    b10a:	e3fffda7 	bsr      	0xac58	//ac58 <pcie_tlp_send>
    b10e:	c4004820 	lsli      	r0, r0, 0
	printf("cofing response data. 0x%x\n", cfg.recv_data);
    b112:	1b02      	addi      	r3, sp, 8
    b114:	9362      	ld.w      	r3, (r3, 0x8)
    b116:	1301      	lrw      	r0, 0x10b4c	//10b4c <__etext+0xf9c>
    b118:	6c4f      	mov      	r1, r3
    b11a:	e0001c1b 	bsr      	0xe950	//e950 <printf>
    b11e:	c4004820 	lsli      	r0, r0, 0
	printf("\n");
    b122:	121c      	lrw      	r0, 0x10b1c	//10b1c <__etext+0xf6c>
    b124:	e0001c16 	bsr      	0xe950	//e950 <printf>
    b128:	c4004820 	lsli      	r0, r0, 0
#endif

	/* Write ep command register */
	printf("Write ep command register\n");
    b12c:	121c      	lrw      	r0, 0x10b68	//10b68 <__etext+0xfb8>
    b12e:	e0001c11 	bsr      	0xe950	//e950 <printf>
    b132:	c4004820 	lsli      	r0, r0, 0
	cfg.status = FMT_TYPE_CFG_WD1;
    b136:	1b02      	addi      	r3, sp, 8
    b138:	3245      	movi      	r2, 69      	//0x45
    b13a:	a340      	st.b      	r2, (r3, 0x0)
	cfg.reg = PCI_COMMAND;
    b13c:	1b02      	addi      	r3, sp, 8
    b13e:	3204      	movi      	r2, 4      	//0x4
    b140:	a341      	st.b      	r2, (r3, 0x1)
	cfg.send_data = (PCI_COMMAND_MASTER | PCI_COMMAND_MEMORY);
    b142:	1b02      	addi      	r3, sp, 8
    b144:	3206      	movi      	r2, 6      	//0x6
    b146:	b341      	st.w      	r2, (r3, 0x4)
	pcie_tlp_send(&cfg);
    b148:	1b02      	addi      	r3, sp, 8
    b14a:	6c0f      	mov      	r0, r3
    b14c:	e3fffd86 	bsr      	0xac58	//ac58 <pcie_tlp_send>
    b150:	c4004820 	lsli      	r0, r0, 0
	printf("\n");
    b154:	120f      	lrw      	r0, 0x10b1c	//10b1c <__etext+0xf6c>
    b156:	e0001bfd 	bsr      	0xe950	//e950 <printf>
    b15a:	c4004820 	lsli      	r0, r0, 0

#if 1
	printf("Read ep command register\n");
    b15e:	1211      	lrw      	r0, 0x10b84	//10b84 <__etext+0xfd4>
    b160:	e0001bf8 	bsr      	0xe950	//e950 <printf>
    b164:	c4004820 	lsli      	r0, r0, 0
	cfg.status = FMT_TYPE_CFG_RD1;
    b168:	1b02      	addi      	r3, sp, 8
    b16a:	3205      	movi      	r2, 5      	//0x5
    b16c:	a340      	st.b      	r2, (r3, 0x0)
	cfg.reg = PCI_COMMAND; 
    b16e:	1b02      	addi      	r3, sp, 8
    b170:	3204      	movi      	r2, 4      	//0x4
    b172:	a341      	st.b      	r2, (r3, 0x1)
	pcie_tlp_send(&cfg);
    b174:	1b02      	addi      	r3, sp, 8
    b176:	6c0f      	mov      	r0, r3
    b178:	e3fffd70 	bsr      	0xac58	//ac58 <pcie_tlp_send>
    b17c:	c4004820 	lsli      	r0, r0, 0
	printf("cofing response data. 0x%x\n", cfg.recv_data);
    b180:	1b02      	addi      	r3, sp, 8
    b182:	9362      	ld.w      	r3, (r3, 0x8)
    b184:	1205      	lrw      	r0, 0x10b4c	//10b4c <__etext+0xf9c>
    b186:	6c4f      	mov      	r1, r3
    b188:	e0001be4 	bsr      	0xe950	//e950 <printf>
    b18c:	c4004820 	lsli      	r0, r0, 0
	printf("\n");
    b190:	1200      	lrw      	r0, 0x10b1c	//10b1c <__etext+0xf6c>
    b192:	e0001bdf 	bsr      	0xe950	//e950 <printf>
    b196:	c4004820 	lsli      	r0, r0, 0
#endif

	printf("Write bar0 lower addr to rc PCI_BASE_ADDRESS_0\n");
    b19a:	1203      	lrw      	r0, 0x10ba0	//10ba0 <__etext+0xff0>
    b19c:	e0001bda 	bsr      	0xe950	//e950 <printf>
    b1a0:	c4004820 	lsli      	r0, r0, 0
	cfg.status = FMT_TYPE_CFG_WD0;
    b1a4:	1b02      	addi      	r3, sp, 8
    b1a6:	3244      	movi      	r2, 68      	//0x44
    b1a8:	a340      	st.b      	r2, (r3, 0x0)
	cfg.reg = PCI_BASE_ADDRESS_0;
    b1aa:	1b02      	addi      	r3, sp, 8
    b1ac:	3210      	movi      	r2, 16      	//0x10
    b1ae:	a341      	st.b      	r2, (r3, 0x1)
	cfg.send_data = 0x100400;
    b1b0:	1b02      	addi      	r3, sp, 8
    b1b2:	ea220010 	movih      	r2, 16      	//0x10
    b1b6:	e44203ff 	addi      	r2, r2, 1024      	//0x400
    b1ba:	b341      	st.w      	r2, (r3, 0x4)
	pcie_tlp_send(&cfg);
    b1bc:	1b02      	addi      	r3, sp, 8
    b1be:	6c0f      	mov      	r0, r3
    b1c0:	e3fffd4c 	bsr      	0xac58	//ac58 <pcie_tlp_send>
    b1c4:	c4004820 	lsli      	r0, r0, 0
	printf("\n");
    b1c8:	1112      	lrw      	r0, 0x10b1c	//10b1c <__etext+0xf6c>
    b1ca:	e0001bc3 	bsr      	0xe950	//e950 <printf>
    b1ce:	c4004820 	lsli      	r0, r0, 0

#if 1
	printf("Read bar0 lower from rc PCI_BASE_ADDRESS_0\n");
    b1d2:	1116      	lrw      	r0, 0x10bd0	//10bd0 <__etext+0x1020>
    b1d4:	e0001bbe 	bsr      	0xe950	//e950 <printf>
    b1d8:	c4004820 	lsli      	r0, r0, 0
	cfg.status = FMT_TYPE_CFG_RD0;
    b1dc:	1b02      	addi      	r3, sp, 8
    b1de:	3204      	movi      	r2, 4      	//0x4
    b1e0:	a340      	st.b      	r2, (r3, 0x0)
	cfg.reg = PCI_BASE_ADDRESS_0;
    b1e2:	1b02      	addi      	r3, sp, 8
    b1e4:	3210      	movi      	r2, 16      	//0x10
    b1e6:	a341      	st.b      	r2, (r3, 0x1)
	pcie_tlp_send(&cfg);
    b1e8:	1b02      	addi      	r3, sp, 8
    b1ea:	6c0f      	mov      	r0, r3
    b1ec:	e3fffd36 	bsr      	0xac58	//ac58 <pcie_tlp_send>
    b1f0:	c4004820 	lsli      	r0, r0, 0
	printf("cofing response data. 0x%x\n", cfg.recv_data);
    b1f4:	1b02      	addi      	r3, sp, 8
    b1f6:	9362      	ld.w      	r3, (r3, 0x8)
    b1f8:	1108      	lrw      	r0, 0x10b4c	//10b4c <__etext+0xf9c>
    b1fa:	6c4f      	mov      	r1, r3
    b1fc:	e0001baa 	bsr      	0xe950	//e950 <printf>
    b200:	c4004820 	lsli      	r0, r0, 0
	printf("\n");
    b204:	1103      	lrw      	r0, 0x10b1c	//10b1c <__etext+0xf6c>
    b206:	e0001ba5 	bsr      	0xe950	//e950 <printf>
    b20a:	c4004820 	lsli      	r0, r0, 0
#endif

	/* Write rc command register */
	printf("Write rc command register\n");
    b20e:	1108      	lrw      	r0, 0x10bfc	//10bfc <__etext+0x104c>
    b210:	e0001ba0 	bsr      	0xe950	//e950 <printf>
    b214:	c4004820 	lsli      	r0, r0, 0
	cfg.status = FMT_TYPE_CFG_WD0;
    b218:	1b02      	addi      	r3, sp, 8
    b21a:	3244      	movi      	r2, 68      	//0x44
    b21c:	a340      	st.b      	r2, (r3, 0x0)
	cfg.reg = PCI_COMMAND;
    b21e:	1b02      	addi      	r3, sp, 8
    b220:	3204      	movi      	r2, 4      	//0x4
    b222:	a341      	st.b      	r2, (r3, 0x1)
	cfg.send_data = (PCI_COMMAND_MASTER | PCI_COMMAND_MEMORY);
    b224:	1b02      	addi      	r3, sp, 8
    b226:	3206      	movi      	r2, 6      	//0x6
    b228:	b341      	st.w      	r2, (r3, 0x4)
	pcie_tlp_send(&cfg);
    b22a:	1b02      	addi      	r3, sp, 8
    b22c:	6c0f      	mov      	r0, r3
    b22e:	e3fffd15 	bsr      	0xac58	//ac58 <pcie_tlp_send>
    b232:	c4004820 	lsli      	r0, r0, 0
	printf("\n");
    b236:	1017      	lrw      	r0, 0x10b1c	//10b1c <__etext+0xf6c>
    b238:	e0001b8c 	bsr      	0xe950	//e950 <printf>
    b23c:	c4004820 	lsli      	r0, r0, 0

#if 1
	printf("Read rc command register\n");
    b240:	101c      	lrw      	r0, 0x10c18	//10c18 <__etext+0x1068>
    b242:	e0001b87 	bsr      	0xe950	//e950 <printf>
    b246:	c4004820 	lsli      	r0, r0, 0
	cfg.status = FMT_TYPE_CFG_RD0;
    b24a:	1b02      	addi      	r3, sp, 8
    b24c:	3204      	movi      	r2, 4      	//0x4
    b24e:	a340      	st.b      	r2, (r3, 0x0)
	cfg.reg = PCI_COMMAND; 
    b250:	1b02      	addi      	r3, sp, 8
    b252:	3204      	movi      	r2, 4      	//0x4
    b254:	a341      	st.b      	r2, (r3, 0x1)
	pcie_tlp_send(&cfg);
    b256:	1b02      	addi      	r3, sp, 8
    b258:	6c0f      	mov      	r0, r3
    b25a:	e3fffcff 	bsr      	0xac58	//ac58 <pcie_tlp_send>
    b25e:	c4004820 	lsli      	r0, r0, 0
	printf("cofing response data. 0x%x\n", cfg.recv_data);
    b262:	1b02      	addi      	r3, sp, 8
    b264:	9362      	ld.w      	r3, (r3, 0x8)
    b266:	100d      	lrw      	r0, 0x10b4c	//10b4c <__etext+0xf9c>
    b268:	6c4f      	mov      	r1, r3
    b26a:	e0001b73 	bsr      	0xe950	//e950 <printf>
    b26e:	c4004820 	lsli      	r0, r0, 0
	printf("\n");
    b272:	1008      	lrw      	r0, 0x10b1c	//10b1c <__etext+0xf6c>
    b274:	e0001b6e 	bsr      	0xe950	//e950 <printf>
    b278:	c4004820 	lsli      	r0, r0, 0
#endif

}
    b27c:	6c0f      	mov      	r0, r3
    b27e:	140d      	addi      	sp, sp, 52
    b280:	1490      	pop      	r15
    b282:	0000      	.short	0x0000
    b284:	00010aec 	.long	0x00010aec
    b288:	0000e950 	.long	0x0000e950
    b28c:	0000ac58 	.long	0x0000ac58
    b290:	00010b1c 	.long	0x00010b1c
    b294:	00010b20 	.long	0x00010b20
    b298:	00010b4c 	.long	0x00010b4c
    b29c:	00010b68 	.long	0x00010b68
    b2a0:	00010b84 	.long	0x00010b84
    b2a4:	00010ba0 	.long	0x00010ba0
    b2a8:	00010bd0 	.long	0x00010bd0
    b2ac:	00010bfc 	.long	0x00010bfc
    b2b0:	00010c18 	.long	0x00010c18

0000b2b4 <pci_altera_rc_test>:
 *  5. Configure the rootport command register to enable the memory space decoder and enable it to bus master so it can initiate requests.
*/

/* R/W ep using cfg type 1
 * R/W rc using cfg type 0 */
Bit32u pci_altera_rc_test(){
    b2b4:	14d1      	push      	r4, r15
    b2b6:	1425      	subi      	sp, sp, 20
	struct cfg_status cfg = {0, 0, 0, 0};
    b2b8:	6cbb      	mov      	r2, sp
    b2ba:	3100      	movi      	r1, 0      	//0x0
    b2bc:	a220      	st.b      	r1, (r2, 0x0)
    b2be:	6cbb      	mov      	r2, sp
    b2c0:	3100      	movi      	r1, 0      	//0x0
    b2c2:	a221      	st.b      	r1, (r2, 0x1)
    b2c4:	6cbb      	mov      	r2, sp
    b2c6:	3100      	movi      	r1, 0      	//0x0
    b2c8:	b221      	st.w      	r1, (r2, 0x4)
    b2ca:	6cbb      	mov      	r2, sp
    b2cc:	3100      	movi      	r1, 0      	//0x0
    b2ce:	b222      	st.w      	r1, (r2, 0x8)
	Bit32u val;
	Bit64u addr = 0x50000000;
    b2d0:	1a03      	addi      	r2, sp, 12
    b2d2:	33a0      	movi      	r3, 160      	//0xa0
    b2d4:	4377      	lsli      	r3, r3, 23
    b2d6:	3400      	movi      	r4, 0      	//0x0
    b2d8:	b260      	st.w      	r3, (r2, 0x0)
    b2da:	b281      	st.w      	r4, (r2, 0x4)

	while(readl((void *)ALTERA_STATUS)!=0x0F);
    b2dc:	6c00      	or      	r0, r0
    b2de:	111a      	lrw      	r0, 0x1a103c64	//1a103c64 <__stack+0x19d03c6c>
    b2e0:	e3fffe70 	bsr      	0xafc0	//afc0 <readl>
    b2e4:	c4004820 	lsli      	r0, r0, 0
    b2e8:	6cc3      	mov      	r3, r0
    b2ea:	3b4f      	cmpnei      	r3, 15
    b2ec:	0bf9      	bt      	0xb2de	//b2de <pci_altera_rc_test+0x2a>

	/* Write bus number to rc */
	printf("Write bus number to rc\n");
    b2ee:	1118      	lrw      	r0, 0x10c34	//10c34 <__etext+0x1084>
    b2f0:	e0001b30 	bsr      	0xe950	//e950 <printf>
    b2f4:	c4004820 	lsli      	r0, r0, 0
	cfg.status = FMT_TYPE_CFG_WD0;
    b2f8:	6cfb      	mov      	r3, sp
    b2fa:	3244      	movi      	r2, 68      	//0x44
    b2fc:	a340      	st.b      	r2, (r3, 0x0)
	cfg.reg = PCI_RC_BUS_NUMBER;
    b2fe:	6cfb      	mov      	r3, sp
    b300:	3218      	movi      	r2, 24      	//0x18
    b302:	a341      	st.b      	r2, (r3, 0x1)
	cfg.send_data = 0x10100;
    b304:	6cfb      	mov      	r3, sp
    b306:	ea220001 	movih      	r2, 1      	//0x1
    b30a:	22ff      	addi      	r2, 256      	//0x100
    b30c:	b341      	st.w      	r2, (r3, 0x4)
	pcie_tlp_send(&cfg);
    b30e:	6cfb      	mov      	r3, sp
    b310:	6c0f      	mov      	r0, r3
    b312:	e3fffca3 	bsr      	0xac58	//ac58 <pcie_tlp_send>
    b316:	c4004820 	lsli      	r0, r0, 0
	printf("cofing response data. 0x%x\n", cfg.recv_data);
    b31a:	6cfb      	mov      	r3, sp
    b31c:	9362      	ld.w      	r3, (r3, 0x8)
    b31e:	110f      	lrw      	r0, 0x10b4c	//10b4c <__etext+0xf9c>
    b320:	6c4f      	mov      	r1, r3
    b322:	e0001b17 	bsr      	0xe950	//e950 <printf>
    b326:	c4004820 	lsli      	r0, r0, 0
	printf("\n");
    b32a:	110d      	lrw      	r0, 0x10b1c	//10b1c <__etext+0xf6c>
    b32c:	e0001b12 	bsr      	0xe950	//e950 <printf>
    b330:	c4004820 	lsli      	r0, r0, 0

	/* Read vendor id register from ep
	 * Should be 4 byte aligned  */
	printf("Read vendor id register from ep\n");
    b334:	110b      	lrw      	r0, 0x10c4c	//10c4c <__etext+0x109c>
    b336:	e0001b0d 	bsr      	0xe950	//e950 <printf>
    b33a:	c4004820 	lsli      	r0, r0, 0
	cfg.status = FMT_TYPE_CFG_RD1;
    b33e:	6cfb      	mov      	r3, sp
    b340:	3205      	movi      	r2, 5      	//0x5
    b342:	a340      	st.b      	r2, (r3, 0x0)
	cfg.reg = PCI_VENDOR_ID;
    b344:	6cfb      	mov      	r3, sp
    b346:	3200      	movi      	r2, 0      	//0x0
    b348:	a341      	st.b      	r2, (r3, 0x1)
	pcie_tlp_send(&cfg);
    b34a:	6cfb      	mov      	r3, sp
    b34c:	6c0f      	mov      	r0, r3
    b34e:	e3fffc85 	bsr      	0xac58	//ac58 <pcie_tlp_send>
    b352:	c4004820 	lsli      	r0, r0, 0
	printf("cofing response data. 0x%x\n", cfg.recv_data);
    b356:	6cfb      	mov      	r3, sp
    b358:	9362      	ld.w      	r3, (r3, 0x8)
    b35a:	1100      	lrw      	r0, 0x10b4c	//10b4c <__etext+0xf9c>
    b35c:	6c4f      	mov      	r1, r3
    b35e:	e0001af9 	bsr      	0xe950	//e950 <printf>
    b362:	c4004820 	lsli      	r0, r0, 0
	printf("\n");
    b366:	101e      	lrw      	r0, 0x10b1c	//10b1c <__etext+0xf6c>
    b368:	e0001af4 	bsr      	0xe950	//e950 <printf>
    b36c:	c4004820 	lsli      	r0, r0, 0

	/* Read vendor id register from rc
	 * Should be 4 byte aligned  */
	printf("Read vendor id register from rc\n");
    b370:	101d      	lrw      	r0, 0x10c70	//10c70 <__etext+0x10c0>
    b372:	e0001aef 	bsr      	0xe950	//e950 <printf>
    b376:	c4004820 	lsli      	r0, r0, 0
	cfg.status = FMT_TYPE_CFG_RD0;
    b37a:	6cfb      	mov      	r3, sp
    b37c:	3204      	movi      	r2, 4      	//0x4
    b37e:	a340      	st.b      	r2, (r3, 0x0)
	cfg.reg = PCI_VENDOR_ID;
    b380:	6cfb      	mov      	r3, sp
    b382:	3200      	movi      	r2, 0      	//0x0
    b384:	a341      	st.b      	r2, (r3, 0x1)
	pcie_tlp_send(&cfg);
    b386:	6cfb      	mov      	r3, sp
    b388:	6c0f      	mov      	r0, r3
    b38a:	e3fffc67 	bsr      	0xac58	//ac58 <pcie_tlp_send>
    b38e:	c4004820 	lsli      	r0, r0, 0
	printf("cofing response data. 0x%x\n", cfg.recv_data);
    b392:	6cfb      	mov      	r3, sp
    b394:	9362      	ld.w      	r3, (r3, 0x8)
    b396:	1011      	lrw      	r0, 0x10b4c	//10b4c <__etext+0xf9c>
    b398:	6c4f      	mov      	r1, r3
    b39a:	e0001adb 	bsr      	0xe950	//e950 <printf>
    b39e:	c4004820 	lsli      	r0, r0, 0
	printf("\n");
    b3a2:	100f      	lrw      	r0, 0x10b1c	//10b1c <__etext+0xf6c>
    b3a4:	e0001ad6 	bsr      	0xe950	//e950 <printf>
    b3a8:	c4004820 	lsli      	r0, r0, 0

	//printf("64bit addr lower %x\n", addr);
	//printf("64bit addr upper %x\n", addr>>32);
	altera_rc_set_bar(addr);
    b3ac:	1b03      	addi      	r3, sp, 12
    b3ae:	9300      	ld.w      	r0, (r3, 0x0)
    b3b0:	9321      	ld.w      	r1, (r3, 0x4)
    b3b2:	e3fffe5b 	bsr      	0xb068	//b068 <altera_rc_set_bar>
    b3b6:	c4004820 	lsli      	r0, r0, 0
	pcie_tlp_send(&cfg);
	printf("cofing response data. 0x%x\n", cfg.recv_data);
	printf("\n");
#endif

	return 0;
    b3ba:	3300      	movi      	r3, 0      	//0x0
}
    b3bc:	6c0f      	mov      	r0, r3
    b3be:	1405      	addi      	sp, sp, 20
    b3c0:	1491      	pop      	r4, r15
    b3c2:	0000      	.short	0x0000
    b3c4:	1a103c64 	.long	0x1a103c64
    b3c8:	0000afc0 	.long	0x0000afc0
    b3cc:	00010c34 	.long	0x00010c34
    b3d0:	0000e950 	.long	0x0000e950
    b3d4:	0000ac58 	.long	0x0000ac58
    b3d8:	00010b4c 	.long	0x00010b4c
    b3dc:	00010b1c 	.long	0x00010b1c
    b3e0:	00010c4c 	.long	0x00010c4c
    b3e4:	00010c70 	.long	0x00010c70
    b3e8:	0000b068 	.long	0x0000b068

0000b3ec <pea>:
#include "pea.h"

void pea(void){
	return 0;
}
    b3ec:	783c      	rts
	...

0000b3f0 <ReplayCache_Flush>:
#include "replaycache.h"

Bit32u ReplayCache_Flush()
{
	*(Bit32u *)(REPLAY_CACHE_REG_BASE + REPLAY_CACHE_FLUSH_OFFSET) = 1;
    b3f0:	ea23197e 	movih      	r3, 6526      	//0x197e
    b3f4:	3201      	movi      	r2, 1      	//0x1
    b3f6:	b340      	st.w      	r2, (r3, 0x0)
    while(*(Bit32u *)(REPLAY_CACHE_REG_BASE + REPLAY_CACHE_FLUSH_OFFSET));
    b3f8:	6c00      	or      	r0, r0
    b3fa:	ea23197e 	movih      	r3, 6526      	//0x197e
    b3fe:	9360      	ld.w      	r3, (r3, 0x0)
    b400:	e923fffd 	bnez      	r3, 0xb3fa	//b3fa <ReplayCache_Flush+0xa>
    return 0;
    b404:	3300      	movi      	r3, 0      	//0x0
}
    b406:	6c0f      	mov      	r0, r3
    b408:	783c      	rts
	...

0000b40c <ReplayCache_ByteValid_Check>:

Bit32u ReplayCache_ByteValid_Check()
{
     return *(Bit32u *)(REPLAY_CACHE_REG_BASE + REPLAY_CACHE_BV_OFFSET);
    b40c:	ea23197e 	movih      	r3, 6526      	//0x197e
    b410:	3ba2      	bseti      	r3, 2
    b412:	9360      	ld.w      	r3, (r3, 0x0)
}
    b414:	6c0f      	mov      	r0, r3
    b416:	783c      	rts

0000b418 <ReplayCache_SRAM_Init_Check>:

Bit32u ReplayCache_SRAM_Init_Check()
{
	return *(Bit32u *)(REPLAY_CACHE_REG_BASE + REPLAY_CACHE_SRAM_INIT_OFFSET);
    b418:	ea23197e 	movih      	r3, 6526      	//0x197e
    b41c:	3ba3      	bseti      	r3, 3
    b41e:	9360      	ld.w      	r3, (r3, 0x0)
}
    b420:	6c0f      	mov      	r0, r3
    b422:	783c      	rts

0000b424 <readl>:
{
    *(volatile Bit16u *)addr = value;
}

static inline Bit32u readl(const volatile void *addr)
{
    b424:	1421      	subi      	sp, sp, 4
    b426:	6cfb      	mov      	r3, sp
    b428:	b300      	st.w      	r0, (r3, 0x0)
    return *(const volatile Bit32u *)addr;
    b42a:	6cfb      	mov      	r3, sp
    b42c:	9360      	ld.w      	r3, (r3, 0x0)
    b42e:	9360      	ld.w      	r3, (r3, 0x0)
}
    b430:	6c0f      	mov      	r0, r3
    b432:	1401      	addi      	sp, sp, 4
    b434:	783c      	rts
	...

0000b438 <CK_RTC_Handler>:
#include "misc.h"

Bit32u rtctestflag=0;
/*User modify*/
void CK_RTC_Handler(Bit32u irqid)
{
    b438:	14d1      	push      	r4, r15
    b43a:	1424      	subi      	sp, sp, 16
    b43c:	6cfb      	mov      	r3, sp
    b43e:	b300      	st.w      	r0, (r3, 0x0)
	Bit32u i,temp;
	ITStatus_TypeDef state;
	state=RTC_GetITRStat();
    b440:	1c02      	addi      	r4, sp, 8
    b442:	e00005c5 	bsr      	0xbfcc	//bfcc <RTC_GetITRStat>
    b446:	c4004820 	lsli      	r0, r0, 0
    b44a:	b400      	st.w      	r0, (r4, 0x0)
	printf("IT raw state:%x \n", state);
    b44c:	1b02      	addi      	r3, sp, 8
    b44e:	101d      	lrw      	r0, 0x10c94	//10c94 <__etext+0x10e4>
    b450:	9320      	ld.w      	r1, (r3, 0x0)
    b452:	e0001a7f 	bsr      	0xe950	//e950 <printf>
    b456:	c4004820 	lsli      	r0, r0, 0
	state=RTC_GetITStat();
    b45a:	1c02      	addi      	r4, sp, 8
    b45c:	e000059a 	bsr      	0xbf90	//bf90 <RTC_GetITStat>
    b460:	c4004820 	lsli      	r0, r0, 0
    b464:	b400      	st.w      	r0, (r4, 0x0)
	printf("IT state:%x \n", state);
    b466:	1b02      	addi      	r3, sp, 8
    b468:	1019      	lrw      	r0, 0x10ca8	//10ca8 <__etext+0x10f8>
    b46a:	9320      	ld.w      	r1, (r3, 0x0)
    b46c:	e0001a72 	bsr      	0xe950	//e950 <printf>
    b470:	c4004820 	lsli      	r0, r0, 0
	for(i=0;i<5;i++)
    b474:	1b03      	addi      	r3, sp, 12
    b476:	3200      	movi      	r2, 0      	//0x0
    b478:	b340      	st.w      	r2, (r3, 0x0)
    b47a:	0413      	br      	0xb4a0	//b4a0 <CK_RTC_Handler+0x68>
	{
		temp=RTC_GetCNTValue();
    b47c:	1c01      	addi      	r4, sp, 4
    b47e:	e00004c5 	bsr      	0xbe08	//be08 <RTC_GetCNTValue>
    b482:	c4004820 	lsli      	r0, r0, 0
    b486:	b400      	st.w      	r0, (r4, 0x0)
		printf("Counter Value:%x \n", temp);
    b488:	1b01      	addi      	r3, sp, 4
    b48a:	1013      	lrw      	r0, 0x10cb8	//10cb8 <__etext+0x1108>
    b48c:	9320      	ld.w      	r1, (r3, 0x0)
    b48e:	e0001a61 	bsr      	0xe950	//e950 <printf>
    b492:	c4004820 	lsli      	r0, r0, 0
	ITStatus_TypeDef state;
	state=RTC_GetITRStat();
	printf("IT raw state:%x \n", state);
	state=RTC_GetITStat();
	printf("IT state:%x \n", state);
	for(i=0;i<5;i++)
    b496:	1b03      	addi      	r3, sp, 12
    b498:	1a03      	addi      	r2, sp, 12
    b49a:	9240      	ld.w      	r2, (r2, 0x0)
    b49c:	2200      	addi      	r2, 1      	//0x1
    b49e:	b340      	st.w      	r2, (r3, 0x0)
    b4a0:	1b03      	addi      	r3, sp, 12
    b4a2:	9340      	ld.w      	r2, (r3, 0x0)
    b4a4:	3304      	movi      	r3, 4      	//0x4
    b4a6:	648c      	cmphs      	r3, r2
    b4a8:	0bea      	bt      	0xb47c	//b47c <CK_RTC_Handler+0x44>
	{
		temp=RTC_GetCNTValue();
		printf("Counter Value:%x \n", temp);

	}
	RTC_ClearITFlag();
    b4aa:	e00005af 	bsr      	0xc008	//c008 <RTC_ClearITFlag>
    b4ae:	c4004820 	lsli      	r0, r0, 0
	rtctestflag=1;
    b4b2:	106b      	lrw      	r3, 0x136e0	//136e0 <rtctestflag>
    b4b4:	3201      	movi      	r2, 1      	//0x1
    b4b6:	b340      	st.w      	r2, (r3, 0x0)
}
    b4b8:	1404      	addi      	sp, sp, 16
    b4ba:	1491      	pop      	r4, r15
    b4bc:	0000bfcc 	.long	0x0000bfcc
    b4c0:	00010c94 	.long	0x00010c94
    b4c4:	0000e950 	.long	0x0000e950
    b4c8:	0000bf90 	.long	0x0000bf90
    b4cc:	00010ca8 	.long	0x00010ca8
    b4d0:	0000be08 	.long	0x0000be08
    b4d4:	00010cb8 	.long	0x00010cb8
    b4d8:	0000c008 	.long	0x0000c008
    b4dc:	000136e0 	.long	0x000136e0

0000b4e0 <RTC_Test1>:

/*rtc_en mode ,interrupt musked and disabled,set load value and match value
 *
 */
void RTC_Test1(void )
{
    b4e0:	14d1      	push      	r4, r15
    b4e2:	1422      	subi      	sp, sp, 8
	Bit32u temp,i;
	temp = RTC->RTC_CCR;
    b4e4:	ea221906 	movih      	r2, 6406      	//0x1906
    b4e8:	6cfb      	mov      	r3, sp
    b4ea:	9243      	ld.w      	r2, (r2, 0xc)
    b4ec:	b340      	st.w      	r2, (r3, 0x0)
	printf("CCR_1 :%x \n", temp);
    b4ee:	6cfb      	mov      	r3, sp
    b4f0:	1216      	lrw      	r0, 0x10ccc	//10ccc <__etext+0x111c>
    b4f2:	9320      	ld.w      	r1, (r3, 0x0)
    b4f4:	e0001a2e 	bsr      	0xe950	//e950 <printf>
    b4f8:	c4004820 	lsli      	r0, r0, 0
	RTC_Deactive();
    b4fc:	e0000400 	bsr      	0xbcfc	//bcfc <RTC_Deactive>
    b500:	c4004820 	lsli      	r0, r0, 0
	temp = RTC->RTC_CCR;
    b504:	ea221906 	movih      	r2, 6406      	//0x1906
    b508:	6cfb      	mov      	r3, sp
    b50a:	9243      	ld.w      	r2, (r2, 0xc)
    b50c:	b340      	st.w      	r2, (r3, 0x0)
	printf("CCR_2 :%x \n", temp);
    b50e:	6cfb      	mov      	r3, sp
    b510:	1211      	lrw      	r0, 0x10cd8	//10cd8 <__etext+0x1128>
    b512:	9320      	ld.w      	r1, (r3, 0x0)
    b514:	e0001a1e 	bsr      	0xe950	//e950 <printf>
    b518:	c4004820 	lsli      	r0, r0, 0

	temp = RTC->RTC_CMR;
    b51c:	ea221906 	movih      	r2, 6406      	//0x1906
    b520:	6cfb      	mov      	r3, sp
    b522:	9241      	ld.w      	r2, (r2, 0x4)
    b524:	b340      	st.w      	r2, (r3, 0x0)
	printf("Match_1 :%x \n", temp);
    b526:	6cfb      	mov      	r3, sp
    b528:	120c      	lrw      	r0, 0x10ce4	//10ce4 <__etext+0x1134>
    b52a:	9320      	ld.w      	r1, (r3, 0x0)
    b52c:	e0001a12 	bsr      	0xe950	//e950 <printf>
    b530:	c4004820 	lsli      	r0, r0, 0
	temp = RTC->RTC_CLR;
    b534:	ea221906 	movih      	r2, 6406      	//0x1906
    b538:	6cfb      	mov      	r3, sp
    b53a:	9242      	ld.w      	r2, (r2, 0x8)
    b53c:	b340      	st.w      	r2, (r3, 0x0)
	printf("Load_1 :%x \n", temp);
    b53e:	6cfb      	mov      	r3, sp
    b540:	1207      	lrw      	r0, 0x10cf4	//10cf4 <__etext+0x1144>
    b542:	9320      	ld.w      	r1, (r3, 0x0)
    b544:	e0001a06 	bsr      	0xe950	//e950 <printf>
    b548:	c4004820 	lsli      	r0, r0, 0
	RTC_Configuation(RTC_CNTEN_MODE,11,10);
    b54c:	3001      	movi      	r0, 1      	//0x1
    b54e:	310b      	movi      	r1, 11      	//0xb
    b550:	320a      	movi      	r2, 10      	//0xa
    b552:	e00003e7 	bsr      	0xbd20	//bd20 <RTC_Configuation>
    b556:	c4004820 	lsli      	r0, r0, 0
	temp = RTC->RTC_CMR;
    b55a:	ea221906 	movih      	r2, 6406      	//0x1906
    b55e:	6cfb      	mov      	r3, sp
    b560:	9241      	ld.w      	r2, (r2, 0x4)
    b562:	b340      	st.w      	r2, (r3, 0x0)
	printf("Match_2 :%x \n", temp);
    b564:	6cfb      	mov      	r3, sp
    b566:	1200      	lrw      	r0, 0x10d04	//10d04 <__etext+0x1154>
    b568:	9320      	ld.w      	r1, (r3, 0x0)
    b56a:	e00019f3 	bsr      	0xe950	//e950 <printf>
    b56e:	c4004820 	lsli      	r0, r0, 0
	temp = RTC->RTC_CLR;
    b572:	ea221906 	movih      	r2, 6406      	//0x1906
    b576:	6cfb      	mov      	r3, sp
    b578:	9242      	ld.w      	r2, (r2, 0x8)
    b57a:	b340      	st.w      	r2, (r3, 0x0)
	printf("Load_2 :%x \n", temp);
    b57c:	6cfb      	mov      	r3, sp
    b57e:	111b      	lrw      	r0, 0x10d14	//10d14 <__etext+0x1164>
    b580:	9320      	ld.w      	r1, (r3, 0x0)
    b582:	e00019e7 	bsr      	0xe950	//e950 <printf>
    b586:	c4004820 	lsli      	r0, r0, 0
	temp = RTC->RTC_CCR;
    b58a:	ea221906 	movih      	r2, 6406      	//0x1906
    b58e:	6cfb      	mov      	r3, sp
    b590:	9243      	ld.w      	r2, (r2, 0xc)
    b592:	b340      	st.w      	r2, (r3, 0x0)
	//printf("CCR_3 :%x \n", temp);

	temp=RTC_IT_Register();
    b594:	6d3b      	mov      	r4, sp
    b596:	e00003df 	bsr      	0xbd54	//bd54 <RTC_IT_Register>
    b59a:	c4004820 	lsli      	r0, r0, 0
    b59e:	b400      	st.w      	r0, (r4, 0x0)
    RTC_ITMask_CMD(RTC_IT_UMUSK);
    b5a0:	3000      	movi      	r0, 0      	//0x0
    b5a2:	e00004bf 	bsr      	0xbf20	//bf20 <RTC_ITMask_CMD>
    b5a6:	c4004820 	lsli      	r0, r0, 0
    RTC_IT_CMD(ENABLE);
    b5aa:	3001      	movi      	r0, 1      	//0x1
    b5ac:	e00004d6 	bsr      	0xbf58	//bf58 <RTC_IT_CMD>
    b5b0:	c4004820 	lsli      	r0, r0, 0
	printf("irq regis state:%x \n", temp);
    b5b4:	6cfb      	mov      	r3, sp
    b5b6:	1111      	lrw      	r0, 0x10d24	//10d24 <__etext+0x1174>
    b5b8:	9320      	ld.w      	r1, (r3, 0x0)
    b5ba:	e00019cb 	bsr      	0xe950	//e950 <printf>
    b5be:	c4004820 	lsli      	r0, r0, 0

	RTC_Start();
    b5c2:	e00003d7 	bsr      	0xbd70	//bd70 <RTC_Start>
    b5c6:	c4004820 	lsli      	r0, r0, 0
	temp = RTC->RTC_CCR;
    b5ca:	ea221906 	movih      	r2, 6406      	//0x1906
    b5ce:	6cfb      	mov      	r3, sp
    b5d0:	9243      	ld.w      	r2, (r2, 0xc)
    b5d2:	b340      	st.w      	r2, (r3, 0x0)
	printf("CCR_4:%x \n", temp);
    b5d4:	6cfb      	mov      	r3, sp
    b5d6:	110b      	lrw      	r0, 0x10d3c	//10d3c <__etext+0x118c>
    b5d8:	9320      	ld.w      	r1, (r3, 0x0)
    b5da:	e00019bb 	bsr      	0xe950	//e950 <printf>
    b5de:	c4004820 	lsli      	r0, r0, 0

	temp=RTC_GetCompVer();
    b5e2:	6d3b      	mov      	r4, sp
    b5e4:	e0000520 	bsr      	0xc024	//c024 <RTC_GetCompVer>
    b5e8:	c4004820 	lsli      	r0, r0, 0
    b5ec:	b400      	st.w      	r0, (r4, 0x0)
	printf("CompVersion:%x \n", temp);
    b5ee:	6cfb      	mov      	r3, sp
    b5f0:	1106      	lrw      	r0, 0x10d48	//10d48 <__etext+0x1198>
    b5f2:	9320      	ld.w      	r1, (r3, 0x0)
    b5f4:	e00019ae 	bsr      	0xe950	//e950 <printf>
    b5f8:	c4004820 	lsli      	r0, r0, 0

	for(i=0;i<=4;i++)
    b5fc:	1b01      	addi      	r3, sp, 4
    b5fe:	3200      	movi      	r2, 0      	//0x0
    b600:	b340      	st.w      	r2, (r3, 0x0)
    b602:	041c      	br      	0xb63a	//b63a <RTC_Test1+0x15a>
	{
		temp=RTC_GetCNTValue();
    b604:	6d3b      	mov      	r4, sp
    b606:	e0000401 	bsr      	0xbe08	//be08 <RTC_GetCNTValue>
    b60a:	c4004820 	lsli      	r0, r0, 0
    b60e:	b400      	st.w      	r0, (r4, 0x0)
		printf("Counter Value:%x \n", temp);
    b610:	6cfb      	mov      	r3, sp
    b612:	1100      	lrw      	r0, 0x10cb8	//10cb8 <__etext+0x1108>
    b614:	9320      	ld.w      	r1, (r3, 0x0)
    b616:	e000199d 	bsr      	0xe950	//e950 <printf>
    b61a:	c4004820 	lsli      	r0, r0, 0
		if(i==4)
    b61e:	1b01      	addi      	r3, sp, 4
    b620:	9360      	ld.w      	r3, (r3, 0x0)
    b622:	3b44      	cmpnei      	r3, 4
    b624:	0806      	bt      	0xb630	//b630 <RTC_Test1+0x150>
		{
			RTC_EN_CMD(DISABLE);
    b626:	3000      	movi      	r0, 0      	//0x0
    b628:	e0000460 	bsr      	0xbee8	//bee8 <RTC_EN_CMD>
    b62c:	c4004820 	lsli      	r0, r0, 0
	printf("CCR_4:%x \n", temp);

	temp=RTC_GetCompVer();
	printf("CompVersion:%x \n", temp);

	for(i=0;i<=4;i++)
    b630:	1b01      	addi      	r3, sp, 4
    b632:	1a01      	addi      	r2, sp, 4
    b634:	9240      	ld.w      	r2, (r2, 0x0)
    b636:	2200      	addi      	r2, 1      	//0x1
    b638:	b340      	st.w      	r2, (r3, 0x0)
    b63a:	1b01      	addi      	r3, sp, 4
    b63c:	9340      	ld.w      	r2, (r3, 0x0)
    b63e:	3304      	movi      	r3, 4      	//0x4
    b640:	648c      	cmphs      	r3, r2
    b642:	0be1      	bt      	0xb604	//b604 <RTC_Test1+0x124>
		if(i==4)
		{
			RTC_EN_CMD(DISABLE);
		}
	}
}
    b644:	1402      	addi      	sp, sp, 8
    b646:	1491      	pop      	r4, r15
    b648:	00010ccc 	.long	0x00010ccc
    b64c:	0000e950 	.long	0x0000e950
    b650:	0000bcfc 	.long	0x0000bcfc
    b654:	00010cd8 	.long	0x00010cd8
    b658:	00010ce4 	.long	0x00010ce4
    b65c:	00010cf4 	.long	0x00010cf4
    b660:	0000bd20 	.long	0x0000bd20
    b664:	00010d04 	.long	0x00010d04
    b668:	00010d14 	.long	0x00010d14
    b66c:	0000bd54 	.long	0x0000bd54
    b670:	0000bf20 	.long	0x0000bf20
    b674:	0000bf58 	.long	0x0000bf58
    b678:	00010d24 	.long	0x00010d24
    b67c:	0000bd70 	.long	0x0000bd70
    b680:	00010d3c 	.long	0x00010d3c
    b684:	0000c024 	.long	0x0000c024
    b688:	00010d48 	.long	0x00010d48
    b68c:	0000be08 	.long	0x0000be08
    b690:	00010cb8 	.long	0x00010cb8
    b694:	0000bee8 	.long	0x0000bee8

0000b698 <RTC_Test2>:

/*rtc_en mode ,interrupt umusked and enabled,set load value and match value
 *
 */
void RTC_Test2(void )
{
    b698:	14d1      	push      	r4, r15
    b69a:	1422      	subi      	sp, sp, 8
	rtctestflag=0;
    b69c:	117a      	lrw      	r3, 0x136e0	//136e0 <rtctestflag>
    b69e:	3200      	movi      	r2, 0      	//0x0
    b6a0:	b340      	st.w      	r2, (r3, 0x0)
	Bit32u i,temp;
	printf(" rtc test begins \n");
    b6a2:	111a      	lrw      	r0, 0x10d5c	//10d5c <__etext+0x11ac>
    b6a4:	e0001956 	bsr      	0xe950	//e950 <printf>
    b6a8:	c4004820 	lsli      	r0, r0, 0
	RTC_Configuation(RTC_CNTEN_MODE,4000000,1);
    b6ac:	3001      	movi      	r0, 1      	//0x1
    b6ae:	ea01f424 	movi      	r1, 62500      	//0xf424
    b6b2:	c4c14901 	rotli      	r1, r1, 6
    b6b6:	3201      	movi      	r2, 1      	//0x1
    b6b8:	e0000334 	bsr      	0xbd20	//bd20 <RTC_Configuation>
    b6bc:	c4004820 	lsli      	r0, r0, 0
	//temp = RTC->RTC_CMR;
	temp = reg_readl(RTC,RTC_CMR);
    b6c0:	6d3b      	mov      	r4, sp
    b6c2:	ea201906 	movih      	r0, 6406      	//0x1906
    b6c6:	38a2      	bseti      	r0, 2
    b6c8:	e3fffeae 	bsr      	0xb424	//b424 <readl>
    b6cc:	c4004820 	lsli      	r0, r0, 0
    b6d0:	b400      	st.w      	r0, (r4, 0x0)
	printf(" Match value :%x \n", temp);
    b6d2:	6cfb      	mov      	r3, sp
    b6d4:	1111      	lrw      	r0, 0x10d70	//10d70 <__etext+0x11c0>
    b6d6:	9320      	ld.w      	r1, (r3, 0x0)
    b6d8:	e000193c 	bsr      	0xe950	//e950 <printf>
    b6dc:	c4004820 	lsli      	r0, r0, 0
	//temp = RTC->RTC_CLR;
	temp = RTC_GetCNTValue();
    b6e0:	6d3b      	mov      	r4, sp
    b6e2:	e0000393 	bsr      	0xbe08	//be08 <RTC_GetCNTValue>
    b6e6:	c4004820 	lsli      	r0, r0, 0
    b6ea:	b400      	st.w      	r0, (r4, 0x0)
	printf(" Load value :%x \n", temp);
    b6ec:	6cfb      	mov      	r3, sp
    b6ee:	110d      	lrw      	r0, 0x10d84	//10d84 <__etext+0x11d4>
    b6f0:	9320      	ld.w      	r1, (r3, 0x0)
    b6f2:	e000192f 	bsr      	0xe950	//e950 <printf>
    b6f6:	c4004820 	lsli      	r0, r0, 0
	//temp = RTC->RTC_CCR;

	temp=RTC_IT_Register();
    b6fa:	6d3b      	mov      	r4, sp
    b6fc:	e000032c 	bsr      	0xbd54	//bd54 <RTC_IT_Register>
    b700:	c4004820 	lsli      	r0, r0, 0
    b704:	b400      	st.w      	r0, (r4, 0x0)
    RTC_ITMask_CMD(RTC_IT_UMUSK);
    b706:	3000      	movi      	r0, 0      	//0x0
    b708:	e000040c 	bsr      	0xbf20	//bf20 <RTC_ITMask_CMD>
    b70c:	c4004820 	lsli      	r0, r0, 0
    RTC_IT_CMD(ENABLE);
    b710:	3001      	movi      	r0, 1      	//0x1
    b712:	e0000423 	bsr      	0xbf58	//bf58 <RTC_IT_CMD>
    b716:	c4004820 	lsli      	r0, r0, 0

	RTC_Start();
    b71a:	e000032b 	bsr      	0xbd70	//bd70 <RTC_Start>
    b71e:	c4004820 	lsli      	r0, r0, 0

	for(i=0;i<=4;i++)
    b722:	1b01      	addi      	r3, sp, 4
    b724:	3200      	movi      	r2, 0      	//0x0
    b726:	b340      	st.w      	r2, (r3, 0x0)
    b728:	0413      	br      	0xb74e	//b74e <RTC_Test2+0xb6>
	{
		temp=RTC_GetCNTValue();
    b72a:	6d3b      	mov      	r4, sp
    b72c:	e000036e 	bsr      	0xbe08	//be08 <RTC_GetCNTValue>
    b730:	c4004820 	lsli      	r0, r0, 0
    b734:	b400      	st.w      	r0, (r4, 0x0)
		printf(" Counter Value:%x \n", temp);
    b736:	6cfb      	mov      	r3, sp
    b738:	101f      	lrw      	r0, 0x10d98	//10d98 <__etext+0x11e8>
    b73a:	9320      	ld.w      	r1, (r3, 0x0)
    b73c:	e000190a 	bsr      	0xe950	//e950 <printf>
    b740:	c4004820 	lsli      	r0, r0, 0
    RTC_ITMask_CMD(RTC_IT_UMUSK);
    RTC_IT_CMD(ENABLE);

	RTC_Start();

	for(i=0;i<=4;i++)
    b744:	1b01      	addi      	r3, sp, 4
    b746:	1a01      	addi      	r2, sp, 4
    b748:	9240      	ld.w      	r2, (r2, 0x0)
    b74a:	2200      	addi      	r2, 1      	//0x1
    b74c:	b340      	st.w      	r2, (r3, 0x0)
    b74e:	1b01      	addi      	r3, sp, 4
    b750:	9340      	ld.w      	r2, (r3, 0x0)
    b752:	3304      	movi      	r3, 4      	//0x4
    b754:	648c      	cmphs      	r3, r2
    b756:	0bea      	bt      	0xb72a	//b72a <RTC_Test2+0x92>
	{
		temp=RTC_GetCNTValue();
		printf(" Counter Value:%x \n", temp);
	}

	while (!rtctestflag);
    b758:	6c00      	or      	r0, r0
    b75a:	106b      	lrw      	r3, 0x136e0	//136e0 <rtctestflag>
    b75c:	9360      	ld.w      	r3, (r3, 0x0)
    b75e:	e903fffe 	bez      	r3, 0xb75a	//b75a <RTC_Test2+0xc2>
	CK_INTC_FreeIrq(CK_RTC_IRQ);
    b762:	3011      	movi      	r0, 17      	//0x11
    b764:	e3ffd7da 	bsr      	0x6718	//6718 <CK_INTC_FreeIrq>
    b768:	c4004820 	lsli      	r0, r0, 0
	RTC_ITMask_CMD(RTC_IT_MUSK);
    b76c:	3001      	movi      	r0, 1      	//0x1
    b76e:	e00003d9 	bsr      	0xbf20	//bf20 <RTC_ITMask_CMD>
    b772:	c4004820 	lsli      	r0, r0, 0
	printf (" rtc test success\n");
    b776:	1012      	lrw      	r0, 0x10dac	//10dac <__etext+0x11fc>
    b778:	e00018ec 	bsr      	0xe950	//e950 <printf>
    b77c:	c4004820 	lsli      	r0, r0, 0
}
    b780:	1402      	addi      	sp, sp, 8
    b782:	1491      	pop      	r4, r15
    b784:	000136e0 	.long	0x000136e0
    b788:	00010d5c 	.long	0x00010d5c
    b78c:	0000e950 	.long	0x0000e950
    b790:	0000bd20 	.long	0x0000bd20
    b794:	0000b424 	.long	0x0000b424
    b798:	00010d70 	.long	0x00010d70
    b79c:	0000be08 	.long	0x0000be08
    b7a0:	00010d84 	.long	0x00010d84
    b7a4:	0000bd54 	.long	0x0000bd54
    b7a8:	0000bf20 	.long	0x0000bf20
    b7ac:	0000bf58 	.long	0x0000bf58
    b7b0:	0000bd70 	.long	0x0000bd70
    b7b4:	00010d98 	.long	0x00010d98
    b7b8:	00006718 	.long	0x00006718
    b7bc:	00010dac 	.long	0x00010dac

0000b7c0 <RTC_Test3_1>:

/*wrap mode ,interrupt musked and disabled,set load value and match value,enable rtc_en and wrap_en
 *
 */
void RTC_Test3_1(void )
{
    b7c0:	14d1      	push      	r4, r15
    b7c2:	1422      	subi      	sp, sp, 8
	Bit32u temp,i;
	temp = RTC->RTC_CCR;
    b7c4:	ea221906 	movih      	r2, 6406      	//0x1906
    b7c8:	6cfb      	mov      	r3, sp
    b7ca:	9243      	ld.w      	r2, (r2, 0xc)
    b7cc:	b340      	st.w      	r2, (r3, 0x0)
	printf("CCR_1 :%x \n", temp);
    b7ce:	6cfb      	mov      	r3, sp
    b7d0:	ea800098 	lrw      	r0, 0x10ccc	//10ccc <__etext+0x111c>
    b7d4:	9320      	ld.w      	r1, (r3, 0x0)
    b7d6:	e00018bd 	bsr      	0xe950	//e950 <printf>
    b7da:	c4004820 	lsli      	r0, r0, 0
	RTC_Deactive();
    b7de:	e000028f 	bsr      	0xbcfc	//bcfc <RTC_Deactive>
    b7e2:	c4004820 	lsli      	r0, r0, 0
	temp = RTC->RTC_CCR;
    b7e6:	ea221906 	movih      	r2, 6406      	//0x1906
    b7ea:	6cfb      	mov      	r3, sp
    b7ec:	9243      	ld.w      	r2, (r2, 0xc)
    b7ee:	b340      	st.w      	r2, (r3, 0x0)
	printf("CCR_2 :%x \n", temp);
    b7f0:	6cfb      	mov      	r3, sp
    b7f2:	ea800093 	lrw      	r0, 0x10cd8	//10cd8 <__etext+0x1128>
    b7f6:	9320      	ld.w      	r1, (r3, 0x0)
    b7f8:	e00018ac 	bsr      	0xe950	//e950 <printf>
    b7fc:	c4004820 	lsli      	r0, r0, 0

	temp = RTC->RTC_CMR;
    b800:	ea221906 	movih      	r2, 6406      	//0x1906
    b804:	6cfb      	mov      	r3, sp
    b806:	9241      	ld.w      	r2, (r2, 0x4)
    b808:	b340      	st.w      	r2, (r3, 0x0)
	printf("Match_1 :%x \n", temp);
    b80a:	6cfb      	mov      	r3, sp
    b80c:	ea80008d 	lrw      	r0, 0x10ce4	//10ce4 <__etext+0x1134>
    b810:	9320      	ld.w      	r1, (r3, 0x0)
    b812:	e000189f 	bsr      	0xe950	//e950 <printf>
    b816:	c4004820 	lsli      	r0, r0, 0
	temp = RTC->RTC_CLR;
    b81a:	ea221906 	movih      	r2, 6406      	//0x1906
    b81e:	6cfb      	mov      	r3, sp
    b820:	9242      	ld.w      	r2, (r2, 0x8)
    b822:	b340      	st.w      	r2, (r3, 0x0)
	printf("Load_1 :%x \n", temp);
    b824:	6cfb      	mov      	r3, sp
    b826:	ea800088 	lrw      	r0, 0x10cf4	//10cf4 <__etext+0x1144>
    b82a:	9320      	ld.w      	r1, (r3, 0x0)
    b82c:	e0001892 	bsr      	0xe950	//e950 <printf>
    b830:	c4004820 	lsli      	r0, r0, 0
	RTC_Configuation(RTC_WRAP_MODE,50,40);
    b834:	3002      	movi      	r0, 2      	//0x2
    b836:	3132      	movi      	r1, 50      	//0x32
    b838:	3228      	movi      	r2, 40      	//0x28
    b83a:	e0000273 	bsr      	0xbd20	//bd20 <RTC_Configuation>
    b83e:	c4004820 	lsli      	r0, r0, 0
	temp = RTC->RTC_CMR;
    b842:	ea221906 	movih      	r2, 6406      	//0x1906
    b846:	6cfb      	mov      	r3, sp
    b848:	9241      	ld.w      	r2, (r2, 0x4)
    b84a:	b340      	st.w      	r2, (r3, 0x0)
	printf("Match_2 :%x \n", temp);
    b84c:	6cfb      	mov      	r3, sp
    b84e:	ea800080 	lrw      	r0, 0x10d04	//10d04 <__etext+0x1154>
    b852:	9320      	ld.w      	r1, (r3, 0x0)
    b854:	e000187e 	bsr      	0xe950	//e950 <printf>
    b858:	c4004820 	lsli      	r0, r0, 0
	temp = RTC->RTC_CLR;
    b85c:	ea221906 	movih      	r2, 6406      	//0x1906
    b860:	6cfb      	mov      	r3, sp
    b862:	9242      	ld.w      	r2, (r2, 0x8)
    b864:	b340      	st.w      	r2, (r3, 0x0)
	printf("Load_2 :%x \n", temp);
    b866:	6cfb      	mov      	r3, sp
    b868:	131a      	lrw      	r0, 0x10d14	//10d14 <__etext+0x1164>
    b86a:	9320      	ld.w      	r1, (r3, 0x0)
    b86c:	e0001872 	bsr      	0xe950	//e950 <printf>
    b870:	c4004820 	lsli      	r0, r0, 0
	temp = RTC->RTC_CCR;
    b874:	ea221906 	movih      	r2, 6406      	//0x1906
    b878:	6cfb      	mov      	r3, sp
    b87a:	9243      	ld.w      	r2, (r2, 0xc)
    b87c:	b340      	st.w      	r2, (r3, 0x0)
	printf("CCR_3 :%x \n", temp);
    b87e:	6cfb      	mov      	r3, sp
    b880:	1315      	lrw      	r0, 0x10dc0	//10dc0 <__etext+0x1210>
    b882:	9320      	ld.w      	r1, (r3, 0x0)
    b884:	e0001866 	bsr      	0xe950	//e950 <printf>
    b888:	c4004820 	lsli      	r0, r0, 0

	temp=RTC_IT_Register();
    b88c:	6d3b      	mov      	r4, sp
    b88e:	e0000263 	bsr      	0xbd54	//bd54 <RTC_IT_Register>
    b892:	c4004820 	lsli      	r0, r0, 0
    b896:	b400      	st.w      	r0, (r4, 0x0)
    RTC_ITMask_CMD(RTC_IT_MUSK);
    b898:	3001      	movi      	r0, 1      	//0x1
    b89a:	e0000343 	bsr      	0xbf20	//bf20 <RTC_ITMask_CMD>
    b89e:	c4004820 	lsli      	r0, r0, 0
    RTC_IT_CMD(ENABLE);
    b8a2:	3001      	movi      	r0, 1      	//0x1
    b8a4:	e000035a 	bsr      	0xbf58	//bf58 <RTC_IT_CMD>
    b8a8:	c4004820 	lsli      	r0, r0, 0
	printf("irq regis state:%x \n", temp);
    b8ac:	6cfb      	mov      	r3, sp
    b8ae:	130e      	lrw      	r0, 0x10d24	//10d24 <__etext+0x1174>
    b8b0:	9320      	ld.w      	r1, (r3, 0x0)
    b8b2:	e000184f 	bsr      	0xe950	//e950 <printf>
    b8b6:	c4004820 	lsli      	r0, r0, 0

	RTC_Start();
    b8ba:	e000025b 	bsr      	0xbd70	//bd70 <RTC_Start>
    b8be:	c4004820 	lsli      	r0, r0, 0
	//RTC_EN_CMD(DISABLE);
	//RTC_Wrap_CMD(ENABLE);
	temp = RTC->RTC_CCR;
    b8c2:	ea221906 	movih      	r2, 6406      	//0x1906
    b8c6:	6cfb      	mov      	r3, sp
    b8c8:	9243      	ld.w      	r2, (r2, 0xc)
    b8ca:	b340      	st.w      	r2, (r3, 0x0)
	printf("CCR_4:%x \n", temp);
    b8cc:	6cfb      	mov      	r3, sp
    b8ce:	1308      	lrw      	r0, 0x10d3c	//10d3c <__etext+0x118c>
    b8d0:	9320      	ld.w      	r1, (r3, 0x0)
    b8d2:	e000183f 	bsr      	0xe950	//e950 <printf>
    b8d6:	c4004820 	lsli      	r0, r0, 0

	for(i=0;i<=4;i++)
    b8da:	1b01      	addi      	r3, sp, 4
    b8dc:	3200      	movi      	r2, 0      	//0x0
    b8de:	b340      	st.w      	r2, (r3, 0x0)
    b8e0:	0413      	br      	0xb906	//b906 <RTC_Test3_1+0x146>
	{
		temp=RTC_GetCNTValue();
    b8e2:	6d3b      	mov      	r4, sp
    b8e4:	e0000292 	bsr      	0xbe08	//be08 <RTC_GetCNTValue>
    b8e8:	c4004820 	lsli      	r0, r0, 0
    b8ec:	b400      	st.w      	r0, (r4, 0x0)
		printf("Counter Value:%x \n", temp);
    b8ee:	6cfb      	mov      	r3, sp
    b8f0:	1301      	lrw      	r0, 0x10cb8	//10cb8 <__etext+0x1108>
    b8f2:	9320      	ld.w      	r1, (r3, 0x0)
    b8f4:	e000182e 	bsr      	0xe950	//e950 <printf>
    b8f8:	c4004820 	lsli      	r0, r0, 0
	//RTC_EN_CMD(DISABLE);
	//RTC_Wrap_CMD(ENABLE);
	temp = RTC->RTC_CCR;
	printf("CCR_4:%x \n", temp);

	for(i=0;i<=4;i++)
    b8fc:	1b01      	addi      	r3, sp, 4
    b8fe:	1a01      	addi      	r2, sp, 4
    b900:	9240      	ld.w      	r2, (r2, 0x0)
    b902:	2200      	addi      	r2, 1      	//0x1
    b904:	b340      	st.w      	r2, (r3, 0x0)
    b906:	1b01      	addi      	r3, sp, 4
    b908:	9340      	ld.w      	r2, (r3, 0x0)
    b90a:	3304      	movi      	r3, 4      	//0x4
    b90c:	648c      	cmphs      	r3, r2
    b90e:	0bea      	bt      	0xb8e2	//b8e2 <RTC_Test3_1+0x122>
	{
		temp=RTC_GetCNTValue();
		printf("Counter Value:%x \n", temp);
	}
}
    b910:	1402      	addi      	sp, sp, 8
    b912:	1491      	pop      	r4, r15

0000b914 <RTC_Test3_2>:

/*wrap mode ,interrupt musked and disabled,set load value and match value,just enable wrap_en,disable rtc_en
 *
 */
void RTC_Test3_2(void )
{
    b914:	14d1      	push      	r4, r15
    b916:	1422      	subi      	sp, sp, 8
	Bit32u temp,i;
	temp = RTC->RTC_CCR;
    b918:	ea221906 	movih      	r2, 6406      	//0x1906
    b91c:	6cfb      	mov      	r3, sp
    b91e:	9243      	ld.w      	r2, (r2, 0xc)
    b920:	b340      	st.w      	r2, (r3, 0x0)
	printf("CCR_1 :%x \n", temp);
    b922:	6cfb      	mov      	r3, sp
    b924:	1203      	lrw      	r0, 0x10ccc	//10ccc <__etext+0x111c>
    b926:	9320      	ld.w      	r1, (r3, 0x0)
    b928:	e0001814 	bsr      	0xe950	//e950 <printf>
    b92c:	c4004820 	lsli      	r0, r0, 0
	RTC_Deactive();
    b930:	e00001e6 	bsr      	0xbcfc	//bcfc <RTC_Deactive>
    b934:	c4004820 	lsli      	r0, r0, 0
	temp = RTC->RTC_CCR;
    b938:	ea221906 	movih      	r2, 6406      	//0x1906
    b93c:	6cfb      	mov      	r3, sp
    b93e:	9243      	ld.w      	r2, (r2, 0xc)
    b940:	b340      	st.w      	r2, (r3, 0x0)
	printf("CCR_2 :%x \n", temp);
    b942:	6cfb      	mov      	r3, sp
    b944:	111e      	lrw      	r0, 0x10cd8	//10cd8 <__etext+0x1128>
    b946:	9320      	ld.w      	r1, (r3, 0x0)
    b948:	e0001804 	bsr      	0xe950	//e950 <printf>
    b94c:	c4004820 	lsli      	r0, r0, 0

	temp = RTC->RTC_CMR;
    b950:	ea221906 	movih      	r2, 6406      	//0x1906
    b954:	6cfb      	mov      	r3, sp
    b956:	9241      	ld.w      	r2, (r2, 0x4)
    b958:	b340      	st.w      	r2, (r3, 0x0)
	printf("Match_1 :%x \n", temp);
    b95a:	6cfb      	mov      	r3, sp
    b95c:	1119      	lrw      	r0, 0x10ce4	//10ce4 <__etext+0x1134>
    b95e:	9320      	ld.w      	r1, (r3, 0x0)
    b960:	e00017f8 	bsr      	0xe950	//e950 <printf>
    b964:	c4004820 	lsli      	r0, r0, 0
	temp = RTC->RTC_CLR;
    b968:	ea221906 	movih      	r2, 6406      	//0x1906
    b96c:	6cfb      	mov      	r3, sp
    b96e:	9242      	ld.w      	r2, (r2, 0x8)
    b970:	b340      	st.w      	r2, (r3, 0x0)
	printf("Load_1 :%x \n", temp);
    b972:	6cfb      	mov      	r3, sp
    b974:	1114      	lrw      	r0, 0x10cf4	//10cf4 <__etext+0x1144>
    b976:	9320      	ld.w      	r1, (r3, 0x0)
    b978:	e00017ec 	bsr      	0xe950	//e950 <printf>
    b97c:	c4004820 	lsli      	r0, r0, 0
	RTC_Configuation(RTC_WRAP_MODE,50,40);
    b980:	3002      	movi      	r0, 2      	//0x2
    b982:	3132      	movi      	r1, 50      	//0x32
    b984:	3228      	movi      	r2, 40      	//0x28
    b986:	e00001cd 	bsr      	0xbd20	//bd20 <RTC_Configuation>
    b98a:	c4004820 	lsli      	r0, r0, 0
	temp = RTC->RTC_CMR;
    b98e:	ea221906 	movih      	r2, 6406      	//0x1906
    b992:	6cfb      	mov      	r3, sp
    b994:	9241      	ld.w      	r2, (r2, 0x4)
    b996:	b340      	st.w      	r2, (r3, 0x0)
	printf("Match_2 :%x \n", temp);
    b998:	6cfb      	mov      	r3, sp
    b99a:	110d      	lrw      	r0, 0x10d04	//10d04 <__etext+0x1154>
    b99c:	9320      	ld.w      	r1, (r3, 0x0)
    b99e:	e00017d9 	bsr      	0xe950	//e950 <printf>
    b9a2:	c4004820 	lsli      	r0, r0, 0
	temp = RTC->RTC_CLR;
    b9a6:	ea221906 	movih      	r2, 6406      	//0x1906
    b9aa:	6cfb      	mov      	r3, sp
    b9ac:	9242      	ld.w      	r2, (r2, 0x8)
    b9ae:	b340      	st.w      	r2, (r3, 0x0)
	printf("Load_2 :%x \n", temp);
    b9b0:	6cfb      	mov      	r3, sp
    b9b2:	1108      	lrw      	r0, 0x10d14	//10d14 <__etext+0x1164>
    b9b4:	9320      	ld.w      	r1, (r3, 0x0)
    b9b6:	e00017cd 	bsr      	0xe950	//e950 <printf>
    b9ba:	c4004820 	lsli      	r0, r0, 0
	temp = RTC->RTC_CCR;
    b9be:	ea221906 	movih      	r2, 6406      	//0x1906
    b9c2:	6cfb      	mov      	r3, sp
    b9c4:	9243      	ld.w      	r2, (r2, 0xc)
    b9c6:	b340      	st.w      	r2, (r3, 0x0)
	printf("CCR_3 :%x \n", temp);
    b9c8:	6cfb      	mov      	r3, sp
    b9ca:	1103      	lrw      	r0, 0x10dc0	//10dc0 <__etext+0x1210>
    b9cc:	9320      	ld.w      	r1, (r3, 0x0)
    b9ce:	e00017c1 	bsr      	0xe950	//e950 <printf>
    b9d2:	c4004820 	lsli      	r0, r0, 0

	temp=RTC_IT_Register();
    b9d6:	6d3b      	mov      	r4, sp
    b9d8:	e00001be 	bsr      	0xbd54	//bd54 <RTC_IT_Register>
    b9dc:	c4004820 	lsli      	r0, r0, 0
    b9e0:	b400      	st.w      	r0, (r4, 0x0)
    RTC_ITMask_CMD(RTC_IT_MUSK);
    b9e2:	3001      	movi      	r0, 1      	//0x1
    b9e4:	e000029e 	bsr      	0xbf20	//bf20 <RTC_ITMask_CMD>
    b9e8:	c4004820 	lsli      	r0, r0, 0
    RTC_IT_CMD(ENABLE);
    b9ec:	3001      	movi      	r0, 1      	//0x1
    b9ee:	e00002b5 	bsr      	0xbf58	//bf58 <RTC_IT_CMD>
    b9f2:	c4004820 	lsli      	r0, r0, 0
	printf("irq regis state:%x \n", temp);
    b9f6:	6cfb      	mov      	r3, sp
    b9f8:	101b      	lrw      	r0, 0x10d24	//10d24 <__etext+0x1174>
    b9fa:	9320      	ld.w      	r1, (r3, 0x0)
    b9fc:	e00017aa 	bsr      	0xe950	//e950 <printf>
    ba00:	c4004820 	lsli      	r0, r0, 0

	RTC_Wrap_CMD(ENABLE);
    ba04:	3001      	movi      	r0, 1      	//0x1
    ba06:	e0000233 	bsr      	0xbe6c	//be6c <RTC_Wrap_CMD>
    ba0a:	c4004820 	lsli      	r0, r0, 0
	temp = RTC->RTC_CCR;
    ba0e:	ea221906 	movih      	r2, 6406      	//0x1906
    ba12:	6cfb      	mov      	r3, sp
    ba14:	9243      	ld.w      	r2, (r2, 0xc)
    ba16:	b340      	st.w      	r2, (r3, 0x0)
	printf("CCR_4:%x \n", temp);
    ba18:	6cfb      	mov      	r3, sp
    ba1a:	1015      	lrw      	r0, 0x10d3c	//10d3c <__etext+0x118c>
    ba1c:	9320      	ld.w      	r1, (r3, 0x0)
    ba1e:	e0001799 	bsr      	0xe950	//e950 <printf>
    ba22:	c4004820 	lsli      	r0, r0, 0

	for(i=0;i<=4;i++)
    ba26:	1b01      	addi      	r3, sp, 4
    ba28:	3200      	movi      	r2, 0      	//0x0
    ba2a:	b340      	st.w      	r2, (r3, 0x0)
    ba2c:	043a      	br      	0xbaa0	//baa0 <RTC_Test3_2+0x18c>
    ba2e:	0000      	.short	0x0000
    ba30:	00010ccc 	.long	0x00010ccc
    ba34:	0000e950 	.long	0x0000e950
    ba38:	0000bcfc 	.long	0x0000bcfc
    ba3c:	00010cd8 	.long	0x00010cd8
    ba40:	00010ce4 	.long	0x00010ce4
    ba44:	00010cf4 	.long	0x00010cf4
    ba48:	0000bd20 	.long	0x0000bd20
    ba4c:	00010d04 	.long	0x00010d04
    ba50:	00010d14 	.long	0x00010d14
    ba54:	00010dc0 	.long	0x00010dc0
    ba58:	0000bd54 	.long	0x0000bd54
    ba5c:	0000bf20 	.long	0x0000bf20
    ba60:	0000bf58 	.long	0x0000bf58
    ba64:	00010d24 	.long	0x00010d24
    ba68:	0000bd70 	.long	0x0000bd70
    ba6c:	00010d3c 	.long	0x00010d3c
    ba70:	0000be08 	.long	0x0000be08
    ba74:	00010cb8 	.long	0x00010cb8
    ba78:	0000be6c 	.long	0x0000be6c
	{
		temp=RTC_GetCNTValue();
    ba7c:	6d3b      	mov      	r4, sp
    ba7e:	e00001c5 	bsr      	0xbe08	//be08 <RTC_GetCNTValue>
    ba82:	c4004820 	lsli      	r0, r0, 0
    ba86:	b400      	st.w      	r0, (r4, 0x0)
		printf("Counter Value:%x \n", temp);
    ba88:	6cfb      	mov      	r3, sp
    ba8a:	121e      	lrw      	r0, 0x10cb8	//10cb8 <__etext+0x1108>
    ba8c:	9320      	ld.w      	r1, (r3, 0x0)
    ba8e:	e0001761 	bsr      	0xe950	//e950 <printf>
    ba92:	c4004820 	lsli      	r0, r0, 0

	RTC_Wrap_CMD(ENABLE);
	temp = RTC->RTC_CCR;
	printf("CCR_4:%x \n", temp);

	for(i=0;i<=4;i++)
    ba96:	1b01      	addi      	r3, sp, 4
    ba98:	1a01      	addi      	r2, sp, 4
    ba9a:	9240      	ld.w      	r2, (r2, 0x0)
    ba9c:	2200      	addi      	r2, 1      	//0x1
    ba9e:	b340      	st.w      	r2, (r3, 0x0)
    baa0:	1b01      	addi      	r3, sp, 4
    baa2:	9340      	ld.w      	r2, (r3, 0x0)
    baa4:	3304      	movi      	r3, 4      	//0x4
    baa6:	648c      	cmphs      	r3, r2
    baa8:	0bea      	bt      	0xba7c	//ba7c <RTC_Test3_2+0x168>
	{
		temp=RTC_GetCNTValue();
		printf("Counter Value:%x \n", temp);
	}
}
    baaa:	1402      	addi      	sp, sp, 8
    baac:	1491      	pop      	r4, r15
	...

0000bab0 <RTC_Test4>:

/*wrap mode ,interrupt umusked and enabled,set load value and match value
 *
 */
void RTC_Test4(void )
{
    bab0:	14d1      	push      	r4, r15
    bab2:	1422      	subi      	sp, sp, 8
	Bit32u temp,i;
	temp = RTC->RTC_CCR;
    bab4:	ea221906 	movih      	r2, 6406      	//0x1906
    bab8:	6cfb      	mov      	r3, sp
    baba:	9243      	ld.w      	r2, (r2, 0xc)
    babc:	b340      	st.w      	r2, (r3, 0x0)
	printf("CCR_1 :%x \n", temp);
    babe:	6cfb      	mov      	r3, sp
    bac0:	1212      	lrw      	r0, 0x10ccc	//10ccc <__etext+0x111c>
    bac2:	9320      	ld.w      	r1, (r3, 0x0)
    bac4:	e0001746 	bsr      	0xe950	//e950 <printf>
    bac8:	c4004820 	lsli      	r0, r0, 0
	RTC_Deactive();
    bacc:	e0000118 	bsr      	0xbcfc	//bcfc <RTC_Deactive>
    bad0:	c4004820 	lsli      	r0, r0, 0
	temp = RTC->RTC_CCR;
    bad4:	ea221906 	movih      	r2, 6406      	//0x1906
    bad8:	6cfb      	mov      	r3, sp
    bada:	9243      	ld.w      	r2, (r2, 0xc)
    badc:	b340      	st.w      	r2, (r3, 0x0)
	printf("CCR_2 :%x \n", temp);
    bade:	6cfb      	mov      	r3, sp
    bae0:	120c      	lrw      	r0, 0x10cd8	//10cd8 <__etext+0x1128>
    bae2:	9320      	ld.w      	r1, (r3, 0x0)
    bae4:	e0001736 	bsr      	0xe950	//e950 <printf>
    bae8:	c4004820 	lsli      	r0, r0, 0

	temp = RTC->RTC_CMR;
    baec:	ea221906 	movih      	r2, 6406      	//0x1906
    baf0:	6cfb      	mov      	r3, sp
    baf2:	9241      	ld.w      	r2, (r2, 0x4)
    baf4:	b340      	st.w      	r2, (r3, 0x0)
	printf("Match_1 :%x \n", temp);
    baf6:	6cfb      	mov      	r3, sp
    baf8:	1207      	lrw      	r0, 0x10ce4	//10ce4 <__etext+0x1134>
    bafa:	9320      	ld.w      	r1, (r3, 0x0)
    bafc:	e000172a 	bsr      	0xe950	//e950 <printf>
    bb00:	c4004820 	lsli      	r0, r0, 0
	temp = RTC->RTC_CLR;
    bb04:	ea221906 	movih      	r2, 6406      	//0x1906
    bb08:	6cfb      	mov      	r3, sp
    bb0a:	9242      	ld.w      	r2, (r2, 0x8)
    bb0c:	b340      	st.w      	r2, (r3, 0x0)
	printf("Load_1 :%x \n", temp);
    bb0e:	6cfb      	mov      	r3, sp
    bb10:	1202      	lrw      	r0, 0x10cf4	//10cf4 <__etext+0x1144>
    bb12:	9320      	ld.w      	r1, (r3, 0x0)
    bb14:	e000171e 	bsr      	0xe950	//e950 <printf>
    bb18:	c4004820 	lsli      	r0, r0, 0
	RTC_Configuation(RTC_WRAP_MODE,50,40);
    bb1c:	3002      	movi      	r0, 2      	//0x2
    bb1e:	3132      	movi      	r1, 50      	//0x32
    bb20:	3228      	movi      	r2, 40      	//0x28
    bb22:	e00000ff 	bsr      	0xbd20	//bd20 <RTC_Configuation>
    bb26:	c4004820 	lsli      	r0, r0, 0
	temp = RTC->RTC_CMR;
    bb2a:	ea221906 	movih      	r2, 6406      	//0x1906
    bb2e:	6cfb      	mov      	r3, sp
    bb30:	9241      	ld.w      	r2, (r2, 0x4)
    bb32:	b340      	st.w      	r2, (r3, 0x0)
	printf("Match_2 :%x \n", temp);
    bb34:	6cfb      	mov      	r3, sp
    bb36:	111b      	lrw      	r0, 0x10d04	//10d04 <__etext+0x1154>
    bb38:	9320      	ld.w      	r1, (r3, 0x0)
    bb3a:	e000170b 	bsr      	0xe950	//e950 <printf>
    bb3e:	c4004820 	lsli      	r0, r0, 0
	temp = RTC->RTC_CLR;
    bb42:	ea221906 	movih      	r2, 6406      	//0x1906
    bb46:	6cfb      	mov      	r3, sp
    bb48:	9242      	ld.w      	r2, (r2, 0x8)
    bb4a:	b340      	st.w      	r2, (r3, 0x0)
	printf("Load_2 :%x \n", temp);
    bb4c:	6cfb      	mov      	r3, sp
    bb4e:	1116      	lrw      	r0, 0x10d14	//10d14 <__etext+0x1164>
    bb50:	9320      	ld.w      	r1, (r3, 0x0)
    bb52:	e00016ff 	bsr      	0xe950	//e950 <printf>
    bb56:	c4004820 	lsli      	r0, r0, 0
	temp = RTC->RTC_CCR;
    bb5a:	ea221906 	movih      	r2, 6406      	//0x1906
    bb5e:	6cfb      	mov      	r3, sp
    bb60:	9243      	ld.w      	r2, (r2, 0xc)
    bb62:	b340      	st.w      	r2, (r3, 0x0)
	printf("CCR_3 :%x \n", temp);
    bb64:	6cfb      	mov      	r3, sp
    bb66:	1111      	lrw      	r0, 0x10dc0	//10dc0 <__etext+0x1210>
    bb68:	9320      	ld.w      	r1, (r3, 0x0)
    bb6a:	e00016f3 	bsr      	0xe950	//e950 <printf>
    bb6e:	c4004820 	lsli      	r0, r0, 0

	temp=RTC_IT_Register();
    bb72:	6d3b      	mov      	r4, sp
    bb74:	e00000f0 	bsr      	0xbd54	//bd54 <RTC_IT_Register>
    bb78:	c4004820 	lsli      	r0, r0, 0
    bb7c:	b400      	st.w      	r0, (r4, 0x0)
    RTC_ITMask_CMD(RTC_IT_UMUSK);
    bb7e:	3000      	movi      	r0, 0      	//0x0
    bb80:	e00001d0 	bsr      	0xbf20	//bf20 <RTC_ITMask_CMD>
    bb84:	c4004820 	lsli      	r0, r0, 0
    RTC_IT_CMD(ENABLE);
    bb88:	3001      	movi      	r0, 1      	//0x1
    bb8a:	e00001e7 	bsr      	0xbf58	//bf58 <RTC_IT_CMD>
    bb8e:	c4004820 	lsli      	r0, r0, 0
	printf("irq regis state:%x \n", temp);
    bb92:	6cfb      	mov      	r3, sp
    bb94:	1109      	lrw      	r0, 0x10d24	//10d24 <__etext+0x1174>
    bb96:	9320      	ld.w      	r1, (r3, 0x0)
    bb98:	e00016dc 	bsr      	0xe950	//e950 <printf>
    bb9c:	c4004820 	lsli      	r0, r0, 0

	RTC_Wrap_CMD(ENABLE);
    bba0:	3001      	movi      	r0, 1      	//0x1
    bba2:	e0000165 	bsr      	0xbe6c	//be6c <RTC_Wrap_CMD>
    bba6:	c4004820 	lsli      	r0, r0, 0
	temp = RTC->RTC_CCR;
    bbaa:	ea221906 	movih      	r2, 6406      	//0x1906
    bbae:	6cfb      	mov      	r3, sp
    bbb0:	9243      	ld.w      	r2, (r2, 0xc)
    bbb2:	b340      	st.w      	r2, (r3, 0x0)
	printf("CCR_4:%x \n", temp);
    bbb4:	6cfb      	mov      	r3, sp
    bbb6:	1103      	lrw      	r0, 0x10d3c	//10d3c <__etext+0x118c>
    bbb8:	9320      	ld.w      	r1, (r3, 0x0)
    bbba:	e00016cb 	bsr      	0xe950	//e950 <printf>
    bbbe:	c4004820 	lsli      	r0, r0, 0

	for(i=0;i<=4;i++)
    bbc2:	1b01      	addi      	r3, sp, 4
    bbc4:	3200      	movi      	r2, 0      	//0x0
    bbc6:	b340      	st.w      	r2, (r3, 0x0)
    bbc8:	0413      	br      	0xbbee	//bbee <RTC_Test4+0x13e>
	{
		temp=RTC_GetCNTValue();
    bbca:	6d3b      	mov      	r4, sp
    bbcc:	e000011e 	bsr      	0xbe08	//be08 <RTC_GetCNTValue>
    bbd0:	c4004820 	lsli      	r0, r0, 0
    bbd4:	b400      	st.w      	r0, (r4, 0x0)
		printf("Counter Value:%x \n", temp);
    bbd6:	6cfb      	mov      	r3, sp
    bbd8:	100a      	lrw      	r0, 0x10cb8	//10cb8 <__etext+0x1108>
    bbda:	9320      	ld.w      	r1, (r3, 0x0)
    bbdc:	e00016ba 	bsr      	0xe950	//e950 <printf>
    bbe0:	c4004820 	lsli      	r0, r0, 0

	RTC_Wrap_CMD(ENABLE);
	temp = RTC->RTC_CCR;
	printf("CCR_4:%x \n", temp);

	for(i=0;i<=4;i++)
    bbe4:	1b01      	addi      	r3, sp, 4
    bbe6:	1a01      	addi      	r2, sp, 4
    bbe8:	9240      	ld.w      	r2, (r2, 0x0)
    bbea:	2200      	addi      	r2, 1      	//0x1
    bbec:	b340      	st.w      	r2, (r3, 0x0)
    bbee:	1b01      	addi      	r3, sp, 4
    bbf0:	9340      	ld.w      	r2, (r3, 0x0)
    bbf2:	3304      	movi      	r3, 4      	//0x4
    bbf4:	648c      	cmphs      	r3, r2
    bbf6:	0bea      	bt      	0xbbca	//bbca <RTC_Test4+0x11a>
	{
		temp=RTC_GetCNTValue();
		printf("Counter Value:%x \n", temp);
	}
	while (1);
    bbf8:	0400      	br      	0xbbf8	//bbf8 <RTC_Test4+0x148>
    bbfa:	0000      	.short	0x0000
    bbfc:	0000be08 	.long	0x0000be08
    bc00:	00010cb8 	.long	0x00010cb8
    bc04:	0000e950 	.long	0x0000e950
    bc08:	00010ccc 	.long	0x00010ccc
    bc0c:	0000bcfc 	.long	0x0000bcfc
    bc10:	00010cd8 	.long	0x00010cd8
    bc14:	00010ce4 	.long	0x00010ce4
    bc18:	00010cf4 	.long	0x00010cf4
    bc1c:	0000bd20 	.long	0x0000bd20
    bc20:	00010d04 	.long	0x00010d04
    bc24:	00010d14 	.long	0x00010d14
    bc28:	00010dc0 	.long	0x00010dc0
    bc2c:	0000bd54 	.long	0x0000bd54
    bc30:	0000bf20 	.long	0x0000bf20
    bc34:	0000bf58 	.long	0x0000bf58
    bc38:	00010d24 	.long	0x00010d24
    bc3c:	0000be6c 	.long	0x0000be6c
    bc40:	00010d3c 	.long	0x00010d3c

0000bc44 <readl>:
{
    *(volatile Bit16u *)addr = value;
}

static inline Bit32u readl(const volatile void *addr)
{
    bc44:	1421      	subi      	sp, sp, 4
    bc46:	6cfb      	mov      	r3, sp
    bc48:	b300      	st.w      	r0, (r3, 0x0)
    return *(const volatile Bit32u *)addr;
    bc4a:	6cfb      	mov      	r3, sp
    bc4c:	9360      	ld.w      	r3, (r3, 0x0)
    bc4e:	9360      	ld.w      	r3, (r3, 0x0)
}
    bc50:	6c0f      	mov      	r0, r3
    bc52:	1401      	addi      	sp, sp, 4
    bc54:	783c      	rts
	...

0000bc58 <writel>:

static inline void writel(Bit32u value, volatile void *addr)
{
    bc58:	1422      	subi      	sp, sp, 8
    bc5a:	1b01      	addi      	r3, sp, 4
    bc5c:	b300      	st.w      	r0, (r3, 0x0)
    bc5e:	6cfb      	mov      	r3, sp
    bc60:	b320      	st.w      	r1, (r3, 0x0)
    *(volatile Bit32u *)addr = value;
    bc62:	6cfb      	mov      	r3, sp
    bc64:	9360      	ld.w      	r3, (r3, 0x0)
    bc66:	1a01      	addi      	r2, sp, 4
    bc68:	9240      	ld.w      	r2, (r2, 0x0)
    bc6a:	b340      	st.w      	r2, (r3, 0x0)
}
    bc6c:	1402      	addi      	sp, sp, 8
    bc6e:	783c      	rts

0000bc70 <dw_write>:

static inline void dw_write(Bit32u val, void* addr)
{
    bc70:	14d1      	push      	r4, r15
    bc72:	1423      	subi      	sp, sp, 12
    bc74:	1b01      	addi      	r3, sp, 4
    bc76:	b300      	st.w      	r0, (r3, 0x0)
    bc78:	6cfb      	mov      	r3, sp
    bc7a:	b320      	st.w      	r1, (r3, 0x0)
	Bit32u value;
	value =readl(addr);
    bc7c:	1c02      	addi      	r4, sp, 8
    bc7e:	6cfb      	mov      	r3, sp
    bc80:	9300      	ld.w      	r0, (r3, 0x0)
    bc82:	e3ffffe1 	bsr      	0xbc44	//bc44 <readl>
    bc86:	c4004820 	lsli      	r0, r0, 0
    bc8a:	b400      	st.w      	r0, (r4, 0x0)
	value |= val;
    bc8c:	1b02      	addi      	r3, sp, 8
    bc8e:	1902      	addi      	r1, sp, 8
    bc90:	1a01      	addi      	r2, sp, 4
    bc92:	9120      	ld.w      	r1, (r1, 0x0)
    bc94:	9240      	ld.w      	r2, (r2, 0x0)
    bc96:	6c84      	or      	r2, r1
    bc98:	b340      	st.w      	r2, (r3, 0x0)
	writel(value, addr);
    bc9a:	1a02      	addi      	r2, sp, 8
    bc9c:	6cfb      	mov      	r3, sp
    bc9e:	9200      	ld.w      	r0, (r2, 0x0)
    bca0:	9320      	ld.w      	r1, (r3, 0x0)
    bca2:	e3ffffdb 	bsr      	0xbc58	//bc58 <writel>
    bca6:	c4004820 	lsli      	r0, r0, 0
}
    bcaa:	1403      	addi      	sp, sp, 12
    bcac:	1491      	pop      	r4, r15
	...

0000bcb0 <dw_clear>:

static inline void dw_clear(Bit32u val, void* addr)
{
    bcb0:	14d1      	push      	r4, r15
    bcb2:	1423      	subi      	sp, sp, 12
    bcb4:	1b01      	addi      	r3, sp, 4
    bcb6:	b300      	st.w      	r0, (r3, 0x0)
    bcb8:	6cfb      	mov      	r3, sp
    bcba:	b320      	st.w      	r1, (r3, 0x0)
	Bit32u value;
	value =readl(addr);
    bcbc:	1c02      	addi      	r4, sp, 8
    bcbe:	6cfb      	mov      	r3, sp
    bcc0:	9300      	ld.w      	r0, (r3, 0x0)
    bcc2:	e3ffffc1 	bsr      	0xbc44	//bc44 <readl>
    bcc6:	c4004820 	lsli      	r0, r0, 0
    bcca:	b400      	st.w      	r0, (r4, 0x0)
	value &= ~val;
    bccc:	1b01      	addi      	r3, sp, 4
    bcce:	9360      	ld.w      	r3, (r3, 0x0)
    bcd0:	c4632481 	nor      	r1, r3, r3
    bcd4:	1b02      	addi      	r3, sp, 8
    bcd6:	1a02      	addi      	r2, sp, 8
    bcd8:	9240      	ld.w      	r2, (r2, 0x0)
    bcda:	6884      	and      	r2, r1
    bcdc:	b340      	st.w      	r2, (r3, 0x0)
	writel(value, addr);
    bcde:	1a02      	addi      	r2, sp, 8
    bce0:	6cfb      	mov      	r3, sp
    bce2:	9200      	ld.w      	r0, (r2, 0x0)
    bce4:	9320      	ld.w      	r1, (r3, 0x0)
    bce6:	e3ffffb9 	bsr      	0xbc58	//bc58 <writel>
    bcea:	c4004820 	lsli      	r0, r0, 0
}
    bcee:	1403      	addi      	sp, sp, 12
    bcf0:	1491      	pop      	r4, r15
    bcf2:	0000      	.short	0x0000
    bcf4:	0000bc44 	.long	0x0000bc44
    bcf8:	0000bc58 	.long	0x0000bc58

0000bcfc <RTC_Deactive>:
#include "misc.h"

static RTC_MODE_TypeDef Mode;

void RTC_Deactive(void)
{
    bcfc:	14d0      	push      	r15
	/*disable rtc*/
	RTC_IT_CMD(DISABLE);
    bcfe:	3000      	movi      	r0, 0      	//0x0
    bd00:	e000012c 	bsr      	0xbf58	//bf58 <RTC_IT_CMD>
    bd04:	c4004820 	lsli      	r0, r0, 0
	RTC_EN_CMD(DISABLE);
    bd08:	3000      	movi      	r0, 0      	//0x0
    bd0a:	e00000ef 	bsr      	0xbee8	//bee8 <RTC_EN_CMD>
    bd0e:	c4004820 	lsli      	r0, r0, 0
	RTC_Wrap_CMD(DISABLE);
    bd12:	3000      	movi      	r0, 0      	//0x0
    bd14:	e00000ac 	bsr      	0xbe6c	//be6c <RTC_Wrap_CMD>
    bd18:	c4004820 	lsli      	r0, r0, 0
}
    bd1c:	1490      	pop      	r15
	...

0000bd20 <RTC_Configuation>:

/*config RTC mode,matchvalue,loadvalue,ITmusk state*/
void RTC_Configuation(RTC_MODE_TypeDef RTCMode,Bit32u MatchValue,Bit32u LoadValue)
{
    bd20:	14d0      	push      	r15
    bd22:	1423      	subi      	sp, sp, 12
    bd24:	1b02      	addi      	r3, sp, 8
    bd26:	b300      	st.w      	r0, (r3, 0x0)
    bd28:	1b01      	addi      	r3, sp, 4
    bd2a:	b320      	st.w      	r1, (r3, 0x0)
    bd2c:	6cfb      	mov      	r3, sp
    bd2e:	b340      	st.w      	r2, (r3, 0x0)
	RTC_SetMTCHValue(MatchValue);
    bd30:	1b01      	addi      	r3, sp, 4
    bd32:	9300      	ld.w      	r0, (r3, 0x0)
    bd34:	e000007c 	bsr      	0xbe2c	//be2c <RTC_SetMTCHValue>
    bd38:	c4004820 	lsli      	r0, r0, 0
	RTC_SetLoadValue(LoadValue);
    bd3c:	6cfb      	mov      	r3, sp
    bd3e:	9300      	ld.w      	r0, (r3, 0x0)
    bd40:	e0000086 	bsr      	0xbe4c	//be4c <RTC_SetLoadValue>
    bd44:	c4004820 	lsli      	r0, r0, 0
	Mode=RTCMode;
    bd48:	127c      	lrw      	r3, 0x136e4	//136e4 <Mode>
    bd4a:	1a02      	addi      	r2, sp, 8
    bd4c:	9240      	ld.w      	r2, (r2, 0x0)
    bd4e:	b340      	st.w      	r2, (r3, 0x0)
}
    bd50:	1403      	addi      	sp, sp, 12
    bd52:	1490      	pop      	r15

0000bd54 <RTC_IT_Register>:

/* config intc,register rtc isq  */
Bit32u RTC_IT_Register(void)
{
    bd54:	14d0      	push      	r15
	/* clear interrupt flag */
    RTC_ClearITFlag();
    bd56:	e0000159 	bsr      	0xc008	//c008 <RTC_ClearITFlag>
    bd5a:	c4004820 	lsli      	r0, r0, 0
    /* register rtc isq  */
    CK_INTC_RequestIrq(CK_RTC_IRQ, CK_RTC_Handler);
    bd5e:	3011      	movi      	r0, 17      	//0x11
    bd60:	1238      	lrw      	r1, 0xb438	//b438 <CK_RTC_Handler>
    bd62:	e3ffd44b 	bsr      	0x65f8	//65f8 <CK_INTC_RequestIrq>
    bd66:	c4004820 	lsli      	r0, r0, 0
    /* set rtc IT state  */
    return 0;
    bd6a:	3300      	movi      	r3, 0      	//0x0
}
    bd6c:	6c0f      	mov      	r0, r3
    bd6e:	1490      	pop      	r15

0000bd70 <RTC_Start>:



/*Enable interrupt(if needed),Enable the RTC*/
Bit32u RTC_Start(void)
{
    bd70:	14d0      	push      	r15
	if(Mode==RTC_WRAP_MODE)
    bd72:	1272      	lrw      	r3, 0x136e4	//136e4 <Mode>
    bd74:	9360      	ld.w      	r3, (r3, 0x0)
    bd76:	3b42      	cmpnei      	r3, 2
    bd78:	080d      	bt      	0xbd92	//bd92 <RTC_Start+0x22>
	{
		RTC_Wrap_CMD(ENABLE);
    bd7a:	3001      	movi      	r0, 1      	//0x1
    bd7c:	e0000078 	bsr      	0xbe6c	//be6c <RTC_Wrap_CMD>
    bd80:	c4004820 	lsli      	r0, r0, 0
		RTC_EN_CMD(ENABLE);
    bd84:	3001      	movi      	r0, 1      	//0x1
    bd86:	e00000b1 	bsr      	0xbee8	//bee8 <RTC_EN_CMD>
    bd8a:	c4004820 	lsli      	r0, r0, 0
		return 0;
    bd8e:	3300      	movi      	r3, 0      	//0x0
    bd90:	0412      	br      	0xbdb4	//bdb4 <RTC_Start+0x44>
	}

	else if(Mode==RTC_CNTEN_MODE)
    bd92:	126a      	lrw      	r3, 0x136e4	//136e4 <Mode>
    bd94:	9360      	ld.w      	r3, (r3, 0x0)
    bd96:	3b41      	cmpnei      	r3, 1
    bd98:	080d      	bt      	0xbdb2	//bdb2 <RTC_Start+0x42>
    {
		RTC_Wrap_CMD(DISABLE);
    bd9a:	3000      	movi      	r0, 0      	//0x0
    bd9c:	e0000068 	bsr      	0xbe6c	//be6c <RTC_Wrap_CMD>
    bda0:	c4004820 	lsli      	r0, r0, 0
        RTC_EN_CMD(ENABLE);
    bda4:	3001      	movi      	r0, 1      	//0x1
    bda6:	e00000a1 	bsr      	0xbee8	//bee8 <RTC_EN_CMD>
    bdaa:	c4004820 	lsli      	r0, r0, 0
        return 0;
    bdae:	3300      	movi      	r3, 0      	//0x0
    bdb0:	0402      	br      	0xbdb4	//bdb4 <RTC_Start+0x44>
    }
	else
		return 1;
    bdb2:	3301      	movi      	r3, 1      	//0x1
}
    bdb4:	6c0f      	mov      	r0, r3
    bdb6:	1490      	pop      	r15

0000bdb8 <RTC_Stop>:

void RTC_Stop(void)
{
    bdb8:	14d0      	push      	r15
	RTC_EN_CMD(DISABLE);
    bdba:	3000      	movi      	r0, 0      	//0x0
    bdbc:	e0000096 	bsr      	0xbee8	//bee8 <RTC_EN_CMD>
    bdc0:	c4004820 	lsli      	r0, r0, 0
	RTC_Wrap_CMD(DISABLE);
    bdc4:	3000      	movi      	r0, 0      	//0x0
    bdc6:	e0000053 	bsr      	0xbe6c	//be6c <RTC_Wrap_CMD>
    bdca:	c4004820 	lsli      	r0, r0, 0
}
    bdce:	1490      	pop      	r15

0000bdd0 <RTC_Init>:

/*init rtc with default */
void RTC_Init(void)
{
    bdd0:	14d0      	push      	r15
	RTC_Configuation(RTC_CNTEN_MODE,10000,0);
    bdd2:	3001      	movi      	r0, 1      	//0x1
    bdd4:	ea012710 	movi      	r1, 10000      	//0x2710
    bdd8:	3200      	movi      	r2, 0      	//0x0
    bdda:	e3ffffa3 	bsr      	0xbd20	//bd20 <RTC_Configuation>
    bdde:	c4004820 	lsli      	r0, r0, 0
	RTC_IT_Register();
    bde2:	e3ffffb9 	bsr      	0xbd54	//bd54 <RTC_IT_Register>
    bde6:	c4004820 	lsli      	r0, r0, 0
    RTC_ITMask_CMD(RTC_IT_UMUSK);
    bdea:	3000      	movi      	r0, 0      	//0x0
    bdec:	e000009a 	bsr      	0xbf20	//bf20 <RTC_ITMask_CMD>
    bdf0:	c4004820 	lsli      	r0, r0, 0
    RTC_IT_CMD(ENABLE);
    bdf4:	3001      	movi      	r0, 1      	//0x1
    bdf6:	e00000b1 	bsr      	0xbf58	//bf58 <RTC_IT_CMD>
    bdfa:	c4004820 	lsli      	r0, r0, 0
	RTC_Start();
    bdfe:	e3ffffb9 	bsr      	0xbd70	//bd70 <RTC_Start>
    be02:	c4004820 	lsli      	r0, r0, 0
}
    be06:	1490      	pop      	r15

0000be08 <RTC_GetCNTValue>:

/*get the value of the counter,read RTC_CCVR*/
Bit32u RTC_GetCNTValue(void)
{
    be08:	14d1      	push      	r4, r15
    be0a:	1421      	subi      	sp, sp, 4
  Bit32u tmp = 0;
    be0c:	6cfb      	mov      	r3, sp
    be0e:	3200      	movi      	r2, 0      	//0x0
    be10:	b340      	st.w      	r2, (r3, 0x0)
  //tmp = RTC->RTC_CCVR;
  tmp = reg_readl(RTC,RTC_CCVR);
    be12:	6d3b      	mov      	r4, sp
    be14:	ea201906 	movih      	r0, 6406      	//0x1906
    be18:	e3ffff16 	bsr      	0xbc44	//bc44 <readl>
    be1c:	c4004820 	lsli      	r0, r0, 0
    be20:	b400      	st.w      	r0, (r4, 0x0)
  return  tmp ;
    be22:	6cfb      	mov      	r3, sp
    be24:	9360      	ld.w      	r3, (r3, 0x0)
}
    be26:	6c0f      	mov      	r0, r3
    be28:	1401      	addi      	sp, sp, 4
    be2a:	1491      	pop      	r4, r15

0000be2c <RTC_SetMTCHValue>:

/*set the match value,write RTC_CMR*/
void RTC_SetMTCHValue(Bit32u MatchValue)
{
    be2c:	14d0      	push      	r15
    be2e:	1421      	subi      	sp, sp, 4
    be30:	6cfb      	mov      	r3, sp
    be32:	b300      	st.w      	r0, (r3, 0x0)
  //RTC->RTC_CMR = MatchValue;
  reg_direct_writel(MatchValue,RTC,RTC_CMR);
    be34:	6cfb      	mov      	r3, sp
    be36:	9300      	ld.w      	r0, (r3, 0x0)
    be38:	ea211906 	movih      	r1, 6406      	//0x1906
    be3c:	39a2      	bseti      	r1, 2
    be3e:	e3ffff0d 	bsr      	0xbc58	//bc58 <writel>
    be42:	c4004820 	lsli      	r0, r0, 0
}
    be46:	1401      	addi      	sp, sp, 4
    be48:	1490      	pop      	r15
	...

0000be4c <RTC_SetLoadValue>:

/*set the loaded value,write RTC_CLR*/
void RTC_SetLoadValue(Bit32u LoadValue)
{
    be4c:	14d0      	push      	r15
    be4e:	1421      	subi      	sp, sp, 4
    be50:	6cfb      	mov      	r3, sp
    be52:	b300      	st.w      	r0, (r3, 0x0)
  //RTC->RTC_CLR = LoadValue;
  reg_direct_writel(LoadValue,RTC,RTC_CLR);
    be54:	6cfb      	mov      	r3, sp
    be56:	9300      	ld.w      	r0, (r3, 0x0)
    be58:	ea211906 	movih      	r1, 6406      	//0x1906
    be5c:	39a3      	bseti      	r1, 3
    be5e:	e3fffefd 	bsr      	0xbc58	//bc58 <writel>
    be62:	c4004820 	lsli      	r0, r0, 0
}
    be66:	1401      	addi      	sp, sp, 4
    be68:	1490      	pop      	r15
	...

0000be6c <RTC_Wrap_CMD>:

/*set the RTC wrap enabled or disabled,set the rtc_wen bit of the CCR*/
void RTC_Wrap_CMD( State_TypeDef NewState)
{
    be6c:	14d0      	push      	r15
    be6e:	1421      	subi      	sp, sp, 4
    be70:	6cfb      	mov      	r3, sp
    be72:	b300      	st.w      	r0, (r3, 0x0)
	if (NewState == ENABLE)
    be74:	6cfb      	mov      	r3, sp
    be76:	9360      	ld.w      	r3, (r3, 0x0)
    be78:	3b41      	cmpnei      	r3, 1
    be7a:	080a      	bt      	0xbe8e	//be8e <RTC_Wrap_CMD+0x22>
	{
		//RTC->RTC_CCR |= RTC_WEN;
		reg_writel(RTC_WEN,RTC,RTC_CCR);
    be7c:	3008      	movi      	r0, 8      	//0x8
    be7e:	ea211906 	movih      	r1, 6406      	//0x1906
    be82:	210b      	addi      	r1, 12      	//0xc
    be84:	e3fffef6 	bsr      	0xbc70	//bc70 <dw_write>
    be88:	c4004820 	lsli      	r0, r0, 0
    be8c:	0409      	br      	0xbe9e	//be9e <RTC_Wrap_CMD+0x32>
	}
	else
	{
		//RTC->RTC_CCR &= ~RTC_WEN;
		reg_clearl(RTC_WEN,RTC,RTC_CCR);
    be8e:	3008      	movi      	r0, 8      	//0x8
    be90:	ea211906 	movih      	r1, 6406      	//0x1906
    be94:	210b      	addi      	r1, 12      	//0xc
    be96:	e3ffff0d 	bsr      	0xbcb0	//bcb0 <dw_clear>
    be9a:	c4004820 	lsli      	r0, r0, 0
	}
}
    be9e:	1401      	addi      	sp, sp, 4
    bea0:	1490      	pop      	r15
    bea2:	0000      	.short	0x0000
    bea4:	0000bf58 	.long	0x0000bf58
    bea8:	0000bee8 	.long	0x0000bee8
    beac:	0000be6c 	.long	0x0000be6c
    beb0:	0000be2c 	.long	0x0000be2c
    beb4:	0000be4c 	.long	0x0000be4c
    beb8:	000136e4 	.long	0x000136e4
    bebc:	0000c008 	.long	0x0000c008
    bec0:	0000b438 	.long	0x0000b438
    bec4:	000065f8 	.long	0x000065f8
    bec8:	0000bd20 	.long	0x0000bd20
    becc:	0000bd54 	.long	0x0000bd54
    bed0:	0000bf20 	.long	0x0000bf20
    bed4:	0000bd70 	.long	0x0000bd70
    bed8:	0000bc44 	.long	0x0000bc44
    bedc:	0000bc58 	.long	0x0000bc58
    bee0:	0000bc70 	.long	0x0000bc70
    bee4:	0000bcb0 	.long	0x0000bcb0

0000bee8 <RTC_EN_CMD>:

/*set the RTC counter enabled or disabled,set the rtc_en bit of the CCR*/
void RTC_EN_CMD( State_TypeDef NewState)
{
    bee8:	14d0      	push      	r15
    beea:	1421      	subi      	sp, sp, 4
    beec:	6cfb      	mov      	r3, sp
    beee:	b300      	st.w      	r0, (r3, 0x0)
	if (NewState == ENABLE)
    bef0:	6cfb      	mov      	r3, sp
    bef2:	9360      	ld.w      	r3, (r3, 0x0)
    bef4:	3b41      	cmpnei      	r3, 1
    bef6:	080a      	bt      	0xbf0a	//bf0a <RTC_EN_CMD+0x22>
	{
		//RTC->RTC_CCR |= RTC_EN;
		reg_writel(RTC_EN,RTC,RTC_CCR);
    bef8:	3004      	movi      	r0, 4      	//0x4
    befa:	ea211906 	movih      	r1, 6406      	//0x1906
    befe:	210b      	addi      	r1, 12      	//0xc
    bf00:	e3fffeb8 	bsr      	0xbc70	//bc70 <dw_write>
    bf04:	c4004820 	lsli      	r0, r0, 0
    bf08:	0409      	br      	0xbf1a	//bf1a <RTC_EN_CMD+0x32>
	}
	else
	{
		//RTC->RTC_CCR &= ~RTC_EN;
		reg_clearl(RTC_EN,RTC,RTC_CCR);
    bf0a:	3004      	movi      	r0, 4      	//0x4
    bf0c:	ea211906 	movih      	r1, 6406      	//0x1906
    bf10:	210b      	addi      	r1, 12      	//0xc
    bf12:	e3fffecf 	bsr      	0xbcb0	//bcb0 <dw_clear>
    bf16:	c4004820 	lsli      	r0, r0, 0
	}
}
    bf1a:	1401      	addi      	sp, sp, 4
    bf1c:	1490      	pop      	r15
	...

0000bf20 <RTC_ITMask_CMD>:

/*set the RTC interrupt masked or unmasked,set the rtc_mask bit of the CCR*/
void RTC_ITMask_CMD( RTC_ITMusk_TypeDef ITMaskState)
{
    bf20:	14d0      	push      	r15
    bf22:	1421      	subi      	sp, sp, 4
    bf24:	6cfb      	mov      	r3, sp
    bf26:	b300      	st.w      	r0, (r3, 0x0)
	if (ITMaskState == RTC_IT_MUSK)
    bf28:	6cfb      	mov      	r3, sp
    bf2a:	9360      	ld.w      	r3, (r3, 0x0)
    bf2c:	3b41      	cmpnei      	r3, 1
    bf2e:	080a      	bt      	0xbf42	//bf42 <RTC_ITMask_CMD+0x22>
	{
		//RTC->RTC_CCR |= RTC_MASK;
		reg_writel(RTC_MASK,RTC,RTC_CCR);
    bf30:	3002      	movi      	r0, 2      	//0x2
    bf32:	ea211906 	movih      	r1, 6406      	//0x1906
    bf36:	210b      	addi      	r1, 12      	//0xc
    bf38:	e3fffe9c 	bsr      	0xbc70	//bc70 <dw_write>
    bf3c:	c4004820 	lsli      	r0, r0, 0
    bf40:	0409      	br      	0xbf52	//bf52 <RTC_ITMask_CMD+0x32>
	}
	else
	{
		//RTC->RTC_CCR &= ~RTC_MASK;
		reg_clearl(RTC_MASK,RTC,RTC_CCR);
    bf42:	3002      	movi      	r0, 2      	//0x2
    bf44:	ea211906 	movih      	r1, 6406      	//0x1906
    bf48:	210b      	addi      	r1, 12      	//0xc
    bf4a:	e3fffeb3 	bsr      	0xbcb0	//bcb0 <dw_clear>
    bf4e:	c4004820 	lsli      	r0, r0, 0
	}
}
    bf52:	1401      	addi      	sp, sp, 4
    bf54:	1490      	pop      	r15
	...

0000bf58 <RTC_IT_CMD>:

/*set the RTC interrupt enabled or disabled,set the rtc_ien bit of the CCR*/
void RTC_IT_CMD( State_TypeDef NewState)
{
    bf58:	14d0      	push      	r15
    bf5a:	1421      	subi      	sp, sp, 4
    bf5c:	6cfb      	mov      	r3, sp
    bf5e:	b300      	st.w      	r0, (r3, 0x0)
	if (NewState == ENABLE)
    bf60:	6cfb      	mov      	r3, sp
    bf62:	9360      	ld.w      	r3, (r3, 0x0)
    bf64:	3b41      	cmpnei      	r3, 1
    bf66:	080a      	bt      	0xbf7a	//bf7a <RTC_IT_CMD+0x22>
	{
		//RTC->RTC_CCR |= RTC_IEN;
		reg_writel(RTC_IEN,RTC,RTC_CCR);
    bf68:	3001      	movi      	r0, 1      	//0x1
    bf6a:	ea211906 	movih      	r1, 6406      	//0x1906
    bf6e:	210b      	addi      	r1, 12      	//0xc
    bf70:	e3fffe80 	bsr      	0xbc70	//bc70 <dw_write>
    bf74:	c4004820 	lsli      	r0, r0, 0
    bf78:	0409      	br      	0xbf8a	//bf8a <RTC_IT_CMD+0x32>
	}
	else
	{
		//RTC->RTC_CCR &= ~RTC_IEN;
		reg_clearl(RTC_IEN,RTC,RTC_CCR);
    bf7a:	3001      	movi      	r0, 1      	//0x1
    bf7c:	ea211906 	movih      	r1, 6406      	//0x1906
    bf80:	210b      	addi      	r1, 12      	//0xc
    bf82:	e3fffe97 	bsr      	0xbcb0	//bcb0 <dw_clear>
    bf86:	c4004820 	lsli      	r0, r0, 0
	}
}
    bf8a:	1401      	addi      	sp, sp, 4
    bf8c:	1490      	pop      	r15
	...

0000bf90 <RTC_GetITStat>:

/*get the interrupt status,read RTC_stat*/
ITStatus_TypeDef RTC_GetITStat(void)
{
    bf90:	14d0      	push      	r15
    bf92:	1421      	subi      	sp, sp, 4
	ITStatus_TypeDef bitstatus = INACTIVE;
    bf94:	6cfb      	mov      	r3, sp
    bf96:	3200      	movi      	r2, 0      	//0x0
    bf98:	b340      	st.w      	r2, (r3, 0x0)
	//if(((RTC->RTC_STAT) & RTC_ITSTAT)==INACTIVE)
	if((reg_readl(RTC,RTC_STAT) & RTC_ITSTAT)==INACTIVE)
    bf9a:	ea201906 	movih      	r0, 6406      	//0x1906
    bf9e:	38a4      	bseti      	r0, 4
    bfa0:	e3fffe52 	bsr      	0xbc44	//bc44 <readl>
    bfa4:	c4004820 	lsli      	r0, r0, 0
    bfa8:	6cc3      	mov      	r3, r0
    bfaa:	e4632001 	andi      	r3, r3, 1
    bfae:	e9230006 	bnez      	r3, 0xbfba	//bfba <RTC_GetITStat+0x2a>
	{
		bitstatus = INACTIVE;
    bfb2:	6cfb      	mov      	r3, sp
    bfb4:	3200      	movi      	r2, 0      	//0x0
    bfb6:	b340      	st.w      	r2, (r3, 0x0)
    bfb8:	0404      	br      	0xbfc0	//bfc0 <RTC_GetITStat+0x30>
	}
	else
	{
		bitstatus = ACTIVE;               /* Interrupt is active */
    bfba:	6cfb      	mov      	r3, sp
    bfbc:	3201      	movi      	r2, 1      	//0x1
    bfbe:	b340      	st.w      	r2, (r3, 0x0)
	}
	return  bitstatus;                    /* Return the SPI_FLAG status */
    bfc0:	6cfb      	mov      	r3, sp
    bfc2:	9360      	ld.w      	r3, (r3, 0x0)
}
    bfc4:	6c0f      	mov      	r0, r3
    bfc6:	1401      	addi      	sp, sp, 4
    bfc8:	1490      	pop      	r15
	...

0000bfcc <RTC_GetITRStat>:

/*get the interrupt raw status,read RTC_rstat*/
ITStatus_TypeDef RTC_GetITRStat(void)
{
    bfcc:	14d0      	push      	r15
    bfce:	1421      	subi      	sp, sp, 4
	ITStatus_TypeDef bitstatus = INACTIVE;
    bfd0:	6cfb      	mov      	r3, sp
    bfd2:	3200      	movi      	r2, 0      	//0x0
    bfd4:	b340      	st.w      	r2, (r3, 0x0)
	//if ((RTC->RTC_RSTAT & RTC_ITRSTAT) == (Bit32u) INACTIVE)
	if ((reg_readl(RTC,RTC_RSTAT) & RTC_ITRSTAT) == (Bit32u) INACTIVE)
    bfd6:	ea201906 	movih      	r0, 6406      	//0x1906
    bfda:	2013      	addi      	r0, 20      	//0x14
    bfdc:	e3fffe34 	bsr      	0xbc44	//bc44 <readl>
    bfe0:	c4004820 	lsli      	r0, r0, 0
    bfe4:	6cc3      	mov      	r3, r0
    bfe6:	e4632001 	andi      	r3, r3, 1
    bfea:	e9230006 	bnez      	r3, 0xbff6	//bff6 <RTC_GetITRStat+0x2a>
	{
		bitstatus = INACTIVE;             /* Interrupt is inactive */
    bfee:	6cfb      	mov      	r3, sp
    bff0:	3200      	movi      	r2, 0      	//0x0
    bff2:	b340      	st.w      	r2, (r3, 0x0)
    bff4:	0404      	br      	0xbffc	//bffc <RTC_GetITRStat+0x30>
	}
	else
	{
		bitstatus = ACTIVE;               /* Interrupt is active */
    bff6:	6cfb      	mov      	r3, sp
    bff8:	3201      	movi      	r2, 1      	//0x1
    bffa:	b340      	st.w      	r2, (r3, 0x0)
	}
	return  bitstatus;                    /* Return the status */
    bffc:	6cfb      	mov      	r3, sp
    bffe:	9360      	ld.w      	r3, (r3, 0x0)
}
    c000:	6c0f      	mov      	r0, r3
    c002:	1401      	addi      	sp, sp, 4
    c004:	1490      	pop      	r15
	...

0000c008 <RTC_ClearITFlag>:

/*clear the it flag,read RTC_EOI*/
void RTC_ClearITFlag(void)
{
    c008:	14d1      	push      	r4, r15
    c00a:	1421      	subi      	sp, sp, 4
	Bit32u tmp;
	//tmp=RTC->RTC_EOI;
	tmp = reg_readl(RTC,RTC_EOI);
    c00c:	6d3b      	mov      	r4, sp
    c00e:	ea201906 	movih      	r0, 6406      	//0x1906
    c012:	2017      	addi      	r0, 24      	//0x18
    c014:	e3fffe18 	bsr      	0xbc44	//bc44 <readl>
    c018:	c4004820 	lsli      	r0, r0, 0
    c01c:	b400      	st.w      	r0, (r4, 0x0)
}
    c01e:	1401      	addi      	sp, sp, 4
    c020:	1491      	pop      	r4, r15
	...

0000c024 <RTC_GetCompVer>:

/*get the comp version,RTC_COMP_VERSION*/
Bit32u RTC_GetCompVer(void)
{
    c024:	14d1      	push      	r4, r15
    c026:	1421      	subi      	sp, sp, 4
  Bit32u tmp = 0;
    c028:	6cfb      	mov      	r3, sp
    c02a:	3200      	movi      	r2, 0      	//0x0
    c02c:	b340      	st.w      	r2, (r3, 0x0)
  //tmp = RTC->RTC_COMP_VERSION;
  tmp = reg_readl(RTC,RTC_COMP_VERSION);
    c02e:	6d3b      	mov      	r4, sp
    c030:	ea201906 	movih      	r0, 6406      	//0x1906
    c034:	201b      	addi      	r0, 28      	//0x1c
    c036:	e3fffe07 	bsr      	0xbc44	//bc44 <readl>
    c03a:	c4004820 	lsli      	r0, r0, 0
    c03e:	b400      	st.w      	r0, (r4, 0x0)
  return  tmp ;
    c040:	6cfb      	mov      	r3, sp
    c042:	9360      	ld.w      	r3, (r3, 0x0)
}
    c044:	6c0f      	mov      	r0, r3
    c046:	1401      	addi      	sp, sp, 4
    c048:	1491      	pop      	r4, r15
    c04a:	0000      	.short	0x0000
    c04c:	0000bc70 	.long	0x0000bc70
    c050:	0000bcb0 	.long	0x0000bcb0
    c054:	0000bc44 	.long	0x0000bc44

0000c058 <flash_reset>:

#define enable_chip(_ssi) (_ssi)->ssienr = 1

void flash_reset()
{
    disable_chip(SSI);
    c058:	1268      	lrw      	r3, 0x1139c	//1139c <SSI>
    c05a:	9360      	ld.w      	r3, (r3, 0x0)
    c05c:	936a      	ld.w      	r3, (r3, 0x28)
    c05e:	e4632001 	andi      	r3, r3, 1
    c062:	74cc      	zextb      	r3, r3
    c064:	e923fffa 	bnez      	r3, 0xc058	//c058 <flash_reset>
    c068:	1264      	lrw      	r3, 0x1139c	//1139c <SSI>
    c06a:	9360      	ld.w      	r3, (r3, 0x0)
    c06c:	3200      	movi      	r2, 0      	//0x0
    c06e:	b344      	st.w      	r2, (r3, 0x10)
    c070:	1262      	lrw      	r3, 0x1139c	//1139c <SSI>
    c072:	9360      	ld.w      	r3, (r3, 0x0)
    c074:	3200      	movi      	r2, 0      	//0x0
    c076:	b342      	st.w      	r2, (r3, 0x8)
    SSI->spi_ctrlr0 = 0
    c078:	1260      	lrw      	r3, 0x1139c	//1139c <SSI>
    c07a:	9340      	ld.w      	r2, (r3, 0x0)
    c07c:	3380      	movi      	r3, 128      	//0x80
    c07e:	4362      	lsli      	r3, r3, 2
    c080:	dc62203d 	st.w      	r3, (r2, 0xf4)
            | 0b00 <<  0  // trans_type=addr,data in the mode specified byCTRLR0.SPI_FRF
            | 0b10 <<  8  // 8bit cmd
            | 0 << 11     // wait 0cycle
            ;

    SSI->ctrlr0 =  0
    c084:	117d      	lrw      	r3, 0x1139c	//1139c <SSI>
    c086:	9360      	ld.w      	r3, (r3, 0x0)
    c088:	ea02e020 	movi      	r2, 57376      	//0xe020
    c08c:	c4624902 	rotli      	r2, r2, 3
    c090:	b340      	st.w      	r2, (r3, 0x0)
        | (0b01<<8) /*TMOD:tx+rx:00 01<--todev 10<--tohost*/
        | (0<<11) 
        | ((7) << 16) /*8bit data  */
        | (0b00 << 21) /*frf:normal format*/
        ;
    enable_chip(SSI);
    c092:	117a      	lrw      	r3, 0x1139c	//1139c <SSI>
    c094:	9360      	ld.w      	r3, (r3, 0x0)
    c096:	3201      	movi      	r2, 1      	//0x1
    c098:	b342      	st.w      	r2, (r3, 0x8)

    // write enable
    SSI->dr[0] = 0x66;
    c09a:	1178      	lrw      	r3, 0x1139c	//1139c <SSI>
    c09c:	9360      	ld.w      	r3, (r3, 0x0)
    c09e:	3266      	movi      	r2, 102      	//0x66
    c0a0:	b358      	st.w      	r2, (r3, 0x60)
    SEND_CMD(SSI);
    c0a2:	1176      	lrw      	r3, 0x1139c	//1139c <SSI>
    c0a4:	9360      	ld.w      	r3, (r3, 0x0)
    c0a6:	936a      	ld.w      	r3, (r3, 0x28)
    c0a8:	e4632001 	andi      	r3, r3, 1
    c0ac:	74cc      	zextb      	r3, r3
    c0ae:	e923fffa 	bnez      	r3, 0xc0a2	//c0a2 <flash_reset+0x4a>
    c0b2:	1172      	lrw      	r3, 0x1139c	//1139c <SSI>
    c0b4:	9360      	ld.w      	r3, (r3, 0x0)
    c0b6:	3201      	movi      	r2, 1      	//0x1
    c0b8:	b344      	st.w      	r2, (r3, 0x10)
    c0ba:	1170      	lrw      	r3, 0x1139c	//1139c <SSI>
    c0bc:	9360      	ld.w      	r3, (r3, 0x0)
    c0be:	936a      	ld.w      	r3, (r3, 0x28)
    c0c0:	e4632001 	andi      	r3, r3, 1
    c0c4:	74cc      	zextb      	r3, r3
    c0c6:	e923fffa 	bnez      	r3, 0xc0ba	//c0ba <flash_reset+0x62>

    // send cmd
    RESET_CMD(SSI);
    c0ca:	116c      	lrw      	r3, 0x1139c	//1139c <SSI>
    c0cc:	9360      	ld.w      	r3, (r3, 0x0)
    c0ce:	936a      	ld.w      	r3, (r3, 0x28)
    c0d0:	e4632001 	andi      	r3, r3, 1
    c0d4:	74cc      	zextb      	r3, r3
    c0d6:	e923fffa 	bnez      	r3, 0xc0ca	//c0ca <flash_reset+0x72>
    c0da:	1168      	lrw      	r3, 0x1139c	//1139c <SSI>
    c0dc:	9360      	ld.w      	r3, (r3, 0x0)
    c0de:	3200      	movi      	r2, 0      	//0x0
    c0e0:	b344      	st.w      	r2, (r3, 0x10)
    SSI->dr[0] = 0x99;
    c0e2:	1166      	lrw      	r3, 0x1139c	//1139c <SSI>
    c0e4:	9360      	ld.w      	r3, (r3, 0x0)
    c0e6:	3299      	movi      	r2, 153      	//0x99
    c0e8:	b358      	st.w      	r2, (r3, 0x60)
    SEND_CMD(SSI);
    c0ea:	1164      	lrw      	r3, 0x1139c	//1139c <SSI>
    c0ec:	9360      	ld.w      	r3, (r3, 0x0)
    c0ee:	936a      	ld.w      	r3, (r3, 0x28)
    c0f0:	e4632001 	andi      	r3, r3, 1
    c0f4:	74cc      	zextb      	r3, r3
    c0f6:	e923fffa 	bnez      	r3, 0xc0ea	//c0ea <flash_reset+0x92>
    c0fa:	1160      	lrw      	r3, 0x1139c	//1139c <SSI>
    c0fc:	9360      	ld.w      	r3, (r3, 0x0)
    c0fe:	3201      	movi      	r2, 1      	//0x1
    c100:	b344      	st.w      	r2, (r3, 0x10)
    c102:	107e      	lrw      	r3, 0x1139c	//1139c <SSI>
    c104:	9360      	ld.w      	r3, (r3, 0x0)
    c106:	936a      	ld.w      	r3, (r3, 0x28)
    c108:	e4632001 	andi      	r3, r3, 1
    c10c:	74cc      	zextb      	r3, r3
    c10e:	e923fffa 	bnez      	r3, 0xc102	//c102 <flash_reset+0xaa>
}
    c112:	783c      	rts

0000c114 <write_enable>:

void write_enable()
{
    SSI->ssienr = 0x0;//设置前禁止ssI
    c114:	1079      	lrw      	r3, 0x1139c	//1139c <SSI>
    c116:	9360      	ld.w      	r3, (r3, 0x0)
    c118:	3200      	movi      	r2, 0      	//0x0
    c11a:	b342      	st.w      	r2, (r3, 0x8)
    SSI->baudr = BAUD_DIV;
    c11c:	1077      	lrw      	r3, 0x1139c	//1139c <SSI>
    c11e:	9360      	ld.w      	r3, (r3, 0x0)
    c120:	3204      	movi      	r2, 4      	//0x4
    c122:	b345      	st.w      	r2, (r3, 0x14)
    SSI->ctrlr0 =  0
    c124:	1075      	lrw      	r3, 0x1139c	//1139c <SSI>
    c126:	9360      	ld.w      	r3, (r3, 0x0)
    c128:	ea02e020 	movi      	r2, 57376      	//0xe020
    c12c:	c4624902 	rotli      	r2, r2, 3
    c130:	b340      	st.w      	r2, (r3, 0x0)
        | (0b01<<8) /*tx+rx:00 01<--todev 10<--tohost*/
        | (0<<11) 
        | 0b00 << 21 /*stand spi mode*/
        | (7 << 16) /* */
        ;    
    SSI->dmacr = 0;
    c132:	1072      	lrw      	r3, 0x1139c	//1139c <SSI>
    c134:	9360      	ld.w      	r3, (r3, 0x0)
    c136:	3200      	movi      	r2, 0      	//0x0
    c138:	b353      	st.w      	r2, (r3, 0x4c)
    SSI->imr = 0;
    c13a:	1070      	lrw      	r3, 0x1139c	//1139c <SSI>
    c13c:	9360      	ld.w      	r3, (r3, 0x0)
    c13e:	3200      	movi      	r2, 0      	//0x0
    c140:	b34b      	st.w      	r2, (r3, 0x2c)
    SSI->ser = 0x1;
    c142:	106e      	lrw      	r3, 0x1139c	//1139c <SSI>
    c144:	9360      	ld.w      	r3, (r3, 0x0)
    c146:	3201      	movi      	r2, 1      	//0x1
    c148:	b344      	st.w      	r2, (r3, 0x10)
    SSI->ctrlr1 = 0;
    c14a:	106c      	lrw      	r3, 0x1139c	//1139c <SSI>
    c14c:	9360      	ld.w      	r3, (r3, 0x0)
    c14e:	3200      	movi      	r2, 0      	//0x0
    c150:	b341      	st.w      	r2, (r3, 0x4)
    SSI->ssienr = 0x1;
    c152:	106a      	lrw      	r3, 0x1139c	//1139c <SSI>
    c154:	9360      	ld.w      	r3, (r3, 0x0)
    c156:	3201      	movi      	r2, 1      	//0x1
    c158:	b342      	st.w      	r2, (r3, 0x8)

    // write enable 
    SSI->dr[0] = 0x06;
    c15a:	1068      	lrw      	r3, 0x1139c	//1139c <SSI>
    c15c:	9360      	ld.w      	r3, (r3, 0x0)
    c15e:	3206      	movi      	r2, 6      	//0x6
    c160:	b358      	st.w      	r2, (r3, 0x60)
    while((SSI->sr & 0x1) == 0x01);
    c162:	6c00      	or      	r0, r0
    c164:	1065      	lrw      	r3, 0x1139c	//1139c <SSI>
    c166:	9360      	ld.w      	r3, (r3, 0x0)
    c168:	936a      	ld.w      	r3, (r3, 0x28)
    c16a:	e4632001 	andi      	r3, r3, 1
    c16e:	74cc      	zextb      	r3, r3
    c170:	e923fffa 	bnez      	r3, 0xc164	//c164 <write_enable+0x50>
}
    c174:	783c      	rts
    c176:	0000      	.short	0x0000
    c178:	0001139c 	.long	0x0001139c

0000c17c <flash_reg_write8>:

unsigned char flash_reg_write8(unsigned char cmd, unsigned char value)
{
    c17c:	14d0      	push      	r15
    c17e:	1422      	subi      	sp, sp, 8
    c180:	6c87      	mov      	r2, r1
    c182:	1b01      	addi      	r3, sp, 4
    c184:	6c43      	mov      	r1, r0
    c186:	a320      	st.b      	r1, (r3, 0x0)
    c188:	6cfb      	mov      	r3, sp
    c18a:	a340      	st.b      	r2, (r3, 0x0)
    // 0x05
    SSI->ssienr = 0x0;//设置前禁止ssI
    c18c:	ea8300b8 	lrw      	r3, 0x1139c	//1139c <SSI>
    c190:	9360      	ld.w      	r3, (r3, 0x0)
    c192:	3200      	movi      	r2, 0      	//0x0
    c194:	b342      	st.w      	r2, (r3, 0x8)

#if 1
    SSI->spi_ctrlr0 = 0b00 << 0  // trans_type=addr,data in stand mode
    c196:	ea8300b6 	lrw      	r3, 0x1139c	//1139c <SSI>
    c19a:	9340      	ld.w      	r2, (r3, 0x0)
    c19c:	3380      	movi      	r3, 128      	//0x80
    c19e:	4362      	lsli      	r3, r3, 2
    c1a0:	dc62203d 	st.w      	r3, (r2, 0xf4)
        | 2 <<  8 // 8bit cmd
        | 0 << 11  // wait 0cycle
        ;
#endif

    write_enable();
    c1a4:	e3ffffb8 	bsr      	0xc114	//c114 <write_enable>
    c1a8:	c4004820 	lsli      	r0, r0, 0

    SSI->ssienr = 0x0;//设置前禁止ssI
    c1ac:	ea8300b0 	lrw      	r3, 0x1139c	//1139c <SSI>
    c1b0:	9360      	ld.w      	r3, (r3, 0x0)
    c1b2:	3200      	movi      	r2, 0      	//0x0
    c1b4:	b342      	st.w      	r2, (r3, 0x8)
    SSI->baudr = BAUD_DIV;
    c1b6:	ea8300ae 	lrw      	r3, 0x1139c	//1139c <SSI>
    c1ba:	9360      	ld.w      	r3, (r3, 0x0)
    c1bc:	3204      	movi      	r2, 4      	//0x4
    c1be:	b345      	st.w      	r2, (r3, 0x14)
    SSI->ctrlr0 =  0
    c1c0:	ea8300ab 	lrw      	r3, 0x1139c	//1139c <SSI>
    c1c4:	9360      	ld.w      	r3, (r3, 0x0)
    c1c6:	ea02f010 	movi      	r2, 61456      	//0xf010
    c1ca:	c4824902 	rotli      	r2, r2, 4
    c1ce:	b340      	st.w      	r2, (r3, 0x0)
        | (0b01<<8) /*tx+rx:00 01<--todev 10<--tohost*/
        | (0<<11) 
        | 0b00 << 21 /*stand spi mode*/
        | (15 << 16) /* */
        ;    
    SSI->dmacr = 0;
    c1d0:	ea8300a7 	lrw      	r3, 0x1139c	//1139c <SSI>
    c1d4:	9360      	ld.w      	r3, (r3, 0x0)
    c1d6:	3200      	movi      	r2, 0      	//0x0
    c1d8:	b353      	st.w      	r2, (r3, 0x4c)
    SSI->imr = 0;
    c1da:	ea8300a5 	lrw      	r3, 0x1139c	//1139c <SSI>
    c1de:	9360      	ld.w      	r3, (r3, 0x0)
    c1e0:	3200      	movi      	r2, 0      	//0x0
    c1e2:	b34b      	st.w      	r2, (r3, 0x2c)
    SSI->ser = 0x1;
    c1e4:	ea8300a2 	lrw      	r3, 0x1139c	//1139c <SSI>
    c1e8:	9360      	ld.w      	r3, (r3, 0x0)
    c1ea:	3201      	movi      	r2, 1      	//0x1
    c1ec:	b344      	st.w      	r2, (r3, 0x10)
    SSI->ctrlr1 = 0;
    c1ee:	ea8300a0 	lrw      	r3, 0x1139c	//1139c <SSI>
    c1f2:	9360      	ld.w      	r3, (r3, 0x0)
    c1f4:	3200      	movi      	r2, 0      	//0x0
    c1f6:	b341      	st.w      	r2, (r3, 0x4)
    SSI->ssienr = 0x1;
    c1f8:	ea83009d 	lrw      	r3, 0x1139c	//1139c <SSI>
    c1fc:	9360      	ld.w      	r3, (r3, 0x0)
    c1fe:	3201      	movi      	r2, 1      	//0x1
    c200:	b342      	st.w      	r2, (r3, 0x8)

    // write enable 
    SSI->dr[0] = cmd << 8|value;
    c202:	ea83009b 	lrw      	r3, 0x1139c	//1139c <SSI>
    c206:	9360      	ld.w      	r3, (r3, 0x0)
    c208:	1a01      	addi      	r2, sp, 4
    c20a:	8240      	ld.b      	r2, (r2, 0x0)
    c20c:	7488      	zextb      	r2, r2
    c20e:	4228      	lsli      	r1, r2, 8
    c210:	6cbb      	mov      	r2, sp
    c212:	8240      	ld.b      	r2, (r2, 0x0)
    c214:	7488      	zextb      	r2, r2
    c216:	6c84      	or      	r2, r1
    c218:	b358      	st.w      	r2, (r3, 0x60)
    while((SSI->sr & 0x1) == 0x01);
    c21a:	6c00      	or      	r0, r0
    c21c:	ea830094 	lrw      	r3, 0x1139c	//1139c <SSI>
    c220:	9360      	ld.w      	r3, (r3, 0x0)
    c222:	936a      	ld.w      	r3, (r3, 0x28)
    c224:	e4632001 	andi      	r3, r3, 1
    c228:	74cc      	zextb      	r3, r3
    c22a:	e923fff9 	bnez      	r3, 0xc21c	//c21c <flash_reg_write8+0xa0>
	
	return 0;
    c22e:	3300      	movi      	r3, 0      	//0x0
}
    c230:	6c0f      	mov      	r0, r3
    c232:	1402      	addi      	sp, sp, 8
    c234:	1490      	pop      	r15
	...

0000c238 <flash_read>:

static int flash_read(unsigned int flashaddr, void*buf, int readbytes)
{
    c238:	142b      	subi      	sp, sp, 44
    c23a:	1b02      	addi      	r3, sp, 8
    c23c:	b300      	st.w      	r0, (r3, 0x0)
    c23e:	1b01      	addi      	r3, sp, 4
    c240:	b320      	st.w      	r1, (r3, 0x0)
    c242:	6cfb      	mov      	r3, sp
    c244:	b340      	st.w      	r2, (r3, 0x0)
    int frms_peer_loop,i;
    int *ptr = (int*)buf;
    c246:	1b09      	addi      	r3, sp, 36
    c248:	1a01      	addi      	r2, sp, 4
    c24a:	9240      	ld.w      	r2, (r2, 0x0)
    c24c:	b340      	st.w      	r2, (r3, 0x0)
    int MAX_FRMS_ONETIME = 16;
    c24e:	1b07      	addi      	r3, sp, 28
    c250:	3210      	movi      	r2, 16      	//0x10
    c252:	b340      	st.w      	r2, (r3, 0x0)
    int cntof4byte = readbytes/sizeof(int);
    c254:	6cfb      	mov      	r3, sp
    c256:	9360      	ld.w      	r3, (r3, 0x0)
    c258:	4b42      	lsri      	r2, r3, 2
    c25a:	1b06      	addi      	r3, sp, 24
    c25c:	b340      	st.w      	r2, (r3, 0x0)
    int less4byte = readbytes%4;
    c25e:	1905      	addi      	r1, sp, 20
    c260:	6cfb      	mov      	r3, sp
    c262:	9340      	ld.w      	r2, (r3, 0x0)
    c264:	ea238000 	movih      	r3, 32768      	//0x8000
    c268:	2302      	addi      	r3, 3      	//0x3
    c26a:	68c8      	and      	r3, r2
    c26c:	e9a30007 	bhsz      	r3, 0xc27a	//c27a <flash_read+0x42>
    c270:	2b00      	subi      	r3, 1      	//0x1
    c272:	3200      	movi      	r2, 0      	//0x0
    c274:	2a03      	subi      	r2, 4      	//0x4
    c276:	6cc8      	or      	r3, r2
    c278:	2300      	addi      	r3, 1      	//0x1
    c27a:	b160      	st.w      	r3, (r1, 0x0)
    int frm_cnt = 0;
    c27c:	1b08      	addi      	r3, sp, 32
    c27e:	3200      	movi      	r2, 0      	//0x0
    c280:	b340      	st.w      	r2, (r3, 0x0)
    int data;

    SSI->ssienr = 0x0;//设置前禁止ssI
    c282:	137b      	lrw      	r3, 0x1139c	//1139c <SSI>
    c284:	9360      	ld.w      	r3, (r3, 0x0)
    c286:	3200      	movi      	r2, 0      	//0x0
    c288:	b342      	st.w      	r2, (r3, 0x8)
    SSI->baudr = BAUD_DIV;
    c28a:	1379      	lrw      	r3, 0x1139c	//1139c <SSI>
    c28c:	9360      	ld.w      	r3, (r3, 0x0)
    c28e:	3204      	movi      	r2, 4      	//0x4
    c290:	b345      	st.w      	r2, (r3, 0x14)
    SSI->ctrlr0 =  0
    c292:	1377      	lrw      	r3, 0x1139c	//1139c <SSI>
    c294:	9360      	ld.w      	r3, (r3, 0x0)
    c296:	ea02f818 	movi      	r2, 63512      	//0xf818
    c29a:	c4a24902 	rotli      	r2, r2, 5
    c29e:	b340      	st.w      	r2, (r3, 0x0)
        | (0<<4)  /*motolar spi*/
        | (0b11<<8) /*tx+rx:00, 01<--todev, 10<--tohost,11<-eeprom read*/
        | 0b00 << 21 /*stand spi mode*/
        | (31 << 16) /* read 32bit onetime(rd) 32bit one frame */
        ;    
    SSI->dmacr = 0;
    c2a0:	1373      	lrw      	r3, 0x1139c	//1139c <SSI>
    c2a2:	9360      	ld.w      	r3, (r3, 0x0)
    c2a4:	3200      	movi      	r2, 0      	//0x0
    c2a6:	b353      	st.w      	r2, (r3, 0x4c)
    SSI->imr = 0;
    c2a8:	1371      	lrw      	r3, 0x1139c	//1139c <SSI>
    c2aa:	9360      	ld.w      	r3, (r3, 0x0)
    c2ac:	3200      	movi      	r2, 0      	//0x0
    c2ae:	b34b      	st.w      	r2, (r3, 0x2c)
    SSI->ser = 0x1;
    c2b0:	136f      	lrw      	r3, 0x1139c	//1139c <SSI>
    c2b2:	9360      	ld.w      	r3, (r3, 0x0)
    c2b4:	3201      	movi      	r2, 1      	//0x1
    c2b6:	b344      	st.w      	r2, (r3, 0x10)
    SSI->ssienr = 0x1;
    c2b8:	136d      	lrw      	r3, 0x1139c	//1139c <SSI>
    c2ba:	9360      	ld.w      	r3, (r3, 0x0)
    c2bc:	3201      	movi      	r2, 1      	//0x1
    c2be:	b342      	st.w      	r2, (r3, 0x8)


    while(frm_cnt < cntof4byte){
    c2c0:	047e      	br      	0xc3bc	//c3bc <flash_read+0x184>
        // set regs
        frms_peer_loop = min(cntof4byte-frm_cnt, MAX_FRMS_ONETIME);
    c2c2:	1a06      	addi      	r2, sp, 24
    c2c4:	1b08      	addi      	r3, sp, 32
    c2c6:	9240      	ld.w      	r2, (r2, 0x0)
    c2c8:	9360      	ld.w      	r3, (r3, 0x0)
    c2ca:	5a4d      	subu      	r2, r2, r3
    c2cc:	1904      	addi      	r1, sp, 16
    c2ce:	1b07      	addi      	r3, sp, 28
    c2d0:	9360      	ld.w      	r3, (r3, 0x0)
    c2d2:	648d      	cmplt      	r3, r2
    c2d4:	c4620c20 	incf      	r3, r2, 0
    c2d8:	b160      	st.w      	r3, (r1, 0x0)
        SSI->ssienr = 0x0;//
    c2da:	1365      	lrw      	r3, 0x1139c	//1139c <SSI>
    c2dc:	9360      	ld.w      	r3, (r3, 0x0)
    c2de:	3200      	movi      	r2, 0      	//0x0
    c2e0:	b342      	st.w      	r2, (r3, 0x8)
        SSI->ctrlr1 = frms_peer_loop-1;
    c2e2:	1363      	lrw      	r3, 0x1139c	//1139c <SSI>
    c2e4:	9360      	ld.w      	r3, (r3, 0x0)
    c2e6:	1a04      	addi      	r2, sp, 16
    c2e8:	9240      	ld.w      	r2, (r2, 0x0)
    c2ea:	2a00      	subi      	r2, 1      	//0x1
    c2ec:	b341      	st.w      	r2, (r3, 0x4)
        SSI->ssienr = 0x1;//
    c2ee:	1360      	lrw      	r3, 0x1139c	//1139c <SSI>
    c2f0:	9360      	ld.w      	r3, (r3, 0x0)
    c2f2:	3201      	movi      	r2, 1      	//0x1
    c2f4:	b342      	st.w      	r2, (r3, 0x8)

        // send read cmd
        SSI->dr[0] = (0x03 << 24) | flashaddr;
    c2f6:	127e      	lrw      	r3, 0x1139c	//1139c <SSI>
    c2f8:	9360      	ld.w      	r3, (r3, 0x0)
    c2fa:	1a02      	addi      	r2, sp, 8
    c2fc:	9240      	ld.w      	r2, (r2, 0x0)
    c2fe:	3ab8      	bseti      	r2, 24
    c300:	3ab9      	bseti      	r2, 25
    c302:	b358      	st.w      	r2, (r3, 0x60)
        while((SSI->sr & 0x1) == 0x01);
    c304:	6c00      	or      	r0, r0
    c306:	127a      	lrw      	r3, 0x1139c	//1139c <SSI>
    c308:	9360      	ld.w      	r3, (r3, 0x0)
    c30a:	936a      	ld.w      	r3, (r3, 0x28)
    c30c:	e4632001 	andi      	r3, r3, 1
    c310:	74cc      	zextb      	r3, r3
    c312:	e923fffa 	bnez      	r3, 0xc306	//c306 <flash_read+0xce>

        // read data
        for (i = 0; i < frms_peer_loop; i++) {
    c316:	1b0a      	addi      	r3, sp, 40
    c318:	3200      	movi      	r2, 0      	//0x0
    c31a:	b340      	st.w      	r2, (r3, 0x0)
    c31c:	043b      	br      	0xc392	//c392 <flash_read+0x15a>
            while((SSI->sr & (1<<3)) == 0x0);// receive fifo is empty
    c31e:	6c00      	or      	r0, r0
    c320:	1273      	lrw      	r3, 0x1139c	//1139c <SSI>
    c322:	9360      	ld.w      	r3, (r3, 0x0)
    c324:	936a      	ld.w      	r3, (r3, 0x28)
    c326:	e4632008 	andi      	r3, r3, 8
    c32a:	e903fffb 	bez      	r3, 0xc320	//c320 <flash_read+0xe8>
            while((SSI->sr & (1<<0)) != 0x0);// data is tranfer
    c32e:	6c00      	or      	r0, r0
    c330:	126f      	lrw      	r3, 0x1139c	//1139c <SSI>
    c332:	9360      	ld.w      	r3, (r3, 0x0)
    c334:	936a      	ld.w      	r3, (r3, 0x28)
    c336:	e4632001 	andi      	r3, r3, 1
    c33a:	74cc      	zextb      	r3, r3
    c33c:	e923fffa 	bnez      	r3, 0xc330	//c330 <flash_read+0xf8>
            data = SSI->dr[0];
    c340:	126b      	lrw      	r3, 0x1139c	//1139c <SSI>
    c342:	9360      	ld.w      	r3, (r3, 0x0)
    c344:	9358      	ld.w      	r2, (r3, 0x60)
    c346:	1b03      	addi      	r3, sp, 12
    c348:	b340      	st.w      	r2, (r3, 0x0)
            *ptr = SWAP32(data);
    c34a:	1b03      	addi      	r3, sp, 12
    c34c:	9360      	ld.w      	r3, (r3, 0x0)
    c34e:	4358      	lsli      	r2, r3, 24
    c350:	1b03      	addi      	r3, sp, 12
    c352:	9320      	ld.w      	r1, (r3, 0x0)
    c354:	33ff      	movi      	r3, 255      	//0xff
    c356:	4368      	lsli      	r3, r3, 8
    c358:	68c4      	and      	r3, r1
    c35a:	4368      	lsli      	r3, r3, 8
    c35c:	6c8c      	or      	r2, r3
    c35e:	1b03      	addi      	r3, sp, 12
    c360:	9320      	ld.w      	r1, (r3, 0x0)
    c362:	33ff      	movi      	r3, 255      	//0xff
    c364:	4370      	lsli      	r3, r3, 16
    c366:	68c4      	and      	r3, r1
    c368:	5368      	asri      	r3, r3, 8
    c36a:	6cc8      	or      	r3, r2
    c36c:	6c8f      	mov      	r2, r3
    c36e:	1b03      	addi      	r3, sp, 12
    c370:	9360      	ld.w      	r3, (r3, 0x0)
    c372:	4b78      	lsri      	r3, r3, 24
    c374:	6cc8      	or      	r3, r2
    c376:	6c8f      	mov      	r2, r3
    c378:	1b09      	addi      	r3, sp, 36
    c37a:	9360      	ld.w      	r3, (r3, 0x0)
    c37c:	b340      	st.w      	r2, (r3, 0x0)
            ptr++;
    c37e:	1b09      	addi      	r3, sp, 36
    c380:	1a09      	addi      	r2, sp, 36
    c382:	9240      	ld.w      	r2, (r2, 0x0)
    c384:	2203      	addi      	r2, 4      	//0x4
    c386:	b340      	st.w      	r2, (r3, 0x0)
        // send read cmd
        SSI->dr[0] = (0x03 << 24) | flashaddr;
        while((SSI->sr & 0x1) == 0x01);

        // read data
        for (i = 0; i < frms_peer_loop; i++) {
    c388:	1b0a      	addi      	r3, sp, 40
    c38a:	1a0a      	addi      	r2, sp, 40
    c38c:	9240      	ld.w      	r2, (r2, 0x0)
    c38e:	2200      	addi      	r2, 1      	//0x1
    c390:	b340      	st.w      	r2, (r3, 0x0)
    c392:	1a0a      	addi      	r2, sp, 40
    c394:	1b04      	addi      	r3, sp, 16
    c396:	9240      	ld.w      	r2, (r2, 0x0)
    c398:	9360      	ld.w      	r3, (r3, 0x0)
    c39a:	64c9      	cmplt      	r2, r3
    c39c:	0bc1      	bt      	0xc31e	//c31e <flash_read+0xe6>
            *ptr = SWAP32(data);
            ptr++;
        }


        flashaddr += sizeof(int)*frms_peer_loop;
    c39e:	1b04      	addi      	r3, sp, 16
    c3a0:	9360      	ld.w      	r3, (r3, 0x0)
    c3a2:	4322      	lsli      	r1, r3, 2
    c3a4:	1b02      	addi      	r3, sp, 8
    c3a6:	1a02      	addi      	r2, sp, 8
    c3a8:	9240      	ld.w      	r2, (r2, 0x0)
    c3aa:	5948      	addu      	r2, r1, r2
    c3ac:	b340      	st.w      	r2, (r3, 0x0)
        frm_cnt+=frms_peer_loop;
    c3ae:	1b08      	addi      	r3, sp, 32
    c3b0:	1908      	addi      	r1, sp, 32
    c3b2:	1a04      	addi      	r2, sp, 16
    c3b4:	9120      	ld.w      	r1, (r1, 0x0)
    c3b6:	9240      	ld.w      	r2, (r2, 0x0)
    c3b8:	5948      	addu      	r2, r1, r2
    c3ba:	b340      	st.w      	r2, (r3, 0x0)
    SSI->imr = 0;
    SSI->ser = 0x1;
    SSI->ssienr = 0x1;


    while(frm_cnt < cntof4byte){
    c3bc:	1a08      	addi      	r2, sp, 32
    c3be:	1b06      	addi      	r3, sp, 24
    c3c0:	9240      	ld.w      	r2, (r2, 0x0)
    c3c2:	9360      	ld.w      	r3, (r3, 0x0)
    c3c4:	64c9      	cmplt      	r2, r3
    c3c6:	0b7e      	bt      	0xc2c2	//c2c2 <flash_read+0x8a>
        flashaddr += sizeof(int)*frms_peer_loop;
        frm_cnt+=frms_peer_loop;
    }

    // less than 4byte(32bit)
    if(less4byte>0){
    c3c8:	1b05      	addi      	r3, sp, 20
    c3ca:	9360      	ld.w      	r3, (r3, 0x0)
    c3cc:	e963006d 	blsz      	r3, 0xc4a6	//c4a6 <flash_read+0x26e>
        SSI->ssienr = 0x0;//设置前禁止ssI
    c3d0:	1167      	lrw      	r3, 0x1139c	//1139c <SSI>
    c3d2:	9360      	ld.w      	r3, (r3, 0x0)
    c3d4:	3200      	movi      	r2, 0      	//0x0
    c3d6:	b342      	st.w      	r2, (r3, 0x8)
        SSI->ctrlr1 = 0;
    c3d8:	1165      	lrw      	r3, 0x1139c	//1139c <SSI>
    c3da:	9360      	ld.w      	r3, (r3, 0x0)
    c3dc:	3200      	movi      	r2, 0      	//0x0
    c3de:	b341      	st.w      	r2, (r3, 0x4)
        SSI->ssienr = 0x1;//
    c3e0:	1163      	lrw      	r3, 0x1139c	//1139c <SSI>
    c3e2:	9360      	ld.w      	r3, (r3, 0x0)
    c3e4:	3201      	movi      	r2, 1      	//0x1
    c3e6:	b342      	st.w      	r2, (r3, 0x8)

        SSI->dr[0] = (0x03 << 24) | flashaddr;
    c3e8:	1161      	lrw      	r3, 0x1139c	//1139c <SSI>
    c3ea:	9360      	ld.w      	r3, (r3, 0x0)
    c3ec:	1a02      	addi      	r2, sp, 8
    c3ee:	9240      	ld.w      	r2, (r2, 0x0)
    c3f0:	3ab8      	bseti      	r2, 24
    c3f2:	3ab9      	bseti      	r2, 25
    c3f4:	b358      	st.w      	r2, (r3, 0x60)
        while((SSI->sr & 0x1) == 0x01);
    c3f6:	6c00      	or      	r0, r0
    c3f8:	107d      	lrw      	r3, 0x1139c	//1139c <SSI>
    c3fa:	9360      	ld.w      	r3, (r3, 0x0)
    c3fc:	936a      	ld.w      	r3, (r3, 0x28)
    c3fe:	e4632001 	andi      	r3, r3, 1
    c402:	74cc      	zextb      	r3, r3
    c404:	e923fffa 	bnez      	r3, 0xc3f8	//c3f8 <flash_read+0x1c0>

        while((SSI->sr & (1<<3)) == 0x0);// receive fifo is empty
    c408:	6c00      	or      	r0, r0
    c40a:	1079      	lrw      	r3, 0x1139c	//1139c <SSI>
    c40c:	9360      	ld.w      	r3, (r3, 0x0)
    c40e:	936a      	ld.w      	r3, (r3, 0x28)
    c410:	e4632008 	andi      	r3, r3, 8
    c414:	e903fffb 	bez      	r3, 0xc40a	//c40a <flash_read+0x1d2>
        while((SSI->sr & (1<<0)) != 0x0);// data is tranfer
    c418:	6c00      	or      	r0, r0
    c41a:	1075      	lrw      	r3, 0x1139c	//1139c <SSI>
    c41c:	9360      	ld.w      	r3, (r3, 0x0)
    c41e:	936a      	ld.w      	r3, (r3, 0x28)
    c420:	e4632001 	andi      	r3, r3, 1
    c424:	74cc      	zextb      	r3, r3
    c426:	e923fffa 	bnez      	r3, 0xc41a	//c41a <flash_read+0x1e2>
        data = SSI->dr[0];
    c42a:	1071      	lrw      	r3, 0x1139c	//1139c <SSI>
    c42c:	9360      	ld.w      	r3, (r3, 0x0)
    c42e:	9358      	ld.w      	r2, (r3, 0x60)
    c430:	1b03      	addi      	r3, sp, 12
    c432:	b340      	st.w      	r2, (r3, 0x0)
        data = SWAP32(data);
    c434:	1b03      	addi      	r3, sp, 12
    c436:	9360      	ld.w      	r3, (r3, 0x0)
    c438:	4358      	lsli      	r2, r3, 24
    c43a:	1b03      	addi      	r3, sp, 12
    c43c:	9320      	ld.w      	r1, (r3, 0x0)
    c43e:	33ff      	movi      	r3, 255      	//0xff
    c440:	4368      	lsli      	r3, r3, 8
    c442:	68c4      	and      	r3, r1
    c444:	4368      	lsli      	r3, r3, 8
    c446:	6c8c      	or      	r2, r3
    c448:	1b03      	addi      	r3, sp, 12
    c44a:	9320      	ld.w      	r1, (r3, 0x0)
    c44c:	33ff      	movi      	r3, 255      	//0xff
    c44e:	4370      	lsli      	r3, r3, 16
    c450:	68c4      	and      	r3, r1
    c452:	5368      	asri      	r3, r3, 8
    c454:	6cc8      	or      	r3, r2
    c456:	6c8f      	mov      	r2, r3
    c458:	1b03      	addi      	r3, sp, 12
    c45a:	9360      	ld.w      	r3, (r3, 0x0)
    c45c:	4b78      	lsri      	r3, r3, 24
    c45e:	6c8c      	or      	r2, r3
    c460:	1b03      	addi      	r3, sp, 12
    c462:	b340      	st.w      	r2, (r3, 0x0)

        for (i = 0; i < less4byte; i++) {
    c464:	1b0a      	addi      	r3, sp, 40
    c466:	3200      	movi      	r2, 0      	//0x0
    c468:	b340      	st.w      	r2, (r3, 0x0)
    c46a:	0418      	br      	0xc49a	//c49a <flash_read+0x262>
    c46c:	0001139c 	.long	0x0001139c
    c470:	0000c114 	.long	0x0000c114
            ((unsigned char*)ptr)[i] =  (data >> (i*8)) & 0xff;
    c474:	1b09      	addi      	r3, sp, 36
    c476:	9340      	ld.w      	r2, (r3, 0x0)
    c478:	1b0a      	addi      	r3, sp, 40
    c47a:	9360      	ld.w      	r3, (r3, 0x0)
    c47c:	5a6c      	addu      	r3, r2, r3
    c47e:	1a0a      	addi      	r2, sp, 40
    c480:	9240      	ld.w      	r2, (r2, 0x0)
    c482:	4243      	lsli      	r2, r2, 3
    c484:	1903      	addi      	r1, sp, 12
    c486:	9120      	ld.w      	r1, (r1, 0x0)
    c488:	c4414082 	asr      	r2, r1, r2
    c48c:	7488      	zextb      	r2, r2
    c48e:	a340      	st.b      	r2, (r3, 0x0)
        while((SSI->sr & (1<<3)) == 0x0);// receive fifo is empty
        while((SSI->sr & (1<<0)) != 0x0);// data is tranfer
        data = SSI->dr[0];
        data = SWAP32(data);

        for (i = 0; i < less4byte; i++) {
    c490:	1b0a      	addi      	r3, sp, 40
    c492:	1a0a      	addi      	r2, sp, 40
    c494:	9240      	ld.w      	r2, (r2, 0x0)
    c496:	2200      	addi      	r2, 1      	//0x1
    c498:	b340      	st.w      	r2, (r3, 0x0)
    c49a:	1a0a      	addi      	r2, sp, 40
    c49c:	1b05      	addi      	r3, sp, 20
    c49e:	9240      	ld.w      	r2, (r2, 0x0)
    c4a0:	9360      	ld.w      	r3, (r3, 0x0)
    c4a2:	64c9      	cmplt      	r2, r3
    c4a4:	0be8      	bt      	0xc474	//c474 <flash_read+0x23c>
            ((unsigned char*)ptr)[i] =  (data >> (i*8)) & 0xff;
        }
    }

    return readbytes;
    c4a6:	6cfb      	mov      	r3, sp
    c4a8:	9360      	ld.w      	r3, (r3, 0x0)
}
    c4aa:	6c0f      	mov      	r0, r3
    c4ac:	140b      	addi      	sp, sp, 44
    c4ae:	783c      	rts

0000c4b0 <read_id>:
static unsigned int read_id()
{
    c4b0:	1422      	subi      	sp, sp, 8
    unsigned int data;
    unsigned int id = 0;
    c4b2:	1b01      	addi      	r3, sp, 4
    c4b4:	3200      	movi      	r2, 0      	//0x0
    c4b6:	b340      	st.w      	r2, (r3, 0x0)

    SSI->ssienr = 0x0;//设置前禁止ssI
    c4b8:	1272      	lrw      	r3, 0x1139c	//1139c <SSI>
    c4ba:	9360      	ld.w      	r3, (r3, 0x0)
    c4bc:	3200      	movi      	r2, 0      	//0x0
    c4be:	b342      	st.w      	r2, (r3, 0x8)

    SSI->spi_ctrlr0 = 0b00 << 0  // trans_type=addr,data in stand mode
    c4c0:	1270      	lrw      	r3, 0x1139c	//1139c <SSI>
    c4c2:	9340      	ld.w      	r2, (r3, 0x0)
    c4c4:	3380      	movi      	r3, 128      	//0x80
    c4c6:	4362      	lsli      	r3, r3, 2
    c4c8:	dc62203d 	st.w      	r3, (r2, 0xf4)
        | 2 <<  8 // 8bit cmd
        | 0 << 11  // wait 0cycle
        ;

    SSI->baudr = BAUD_DIV;
    c4cc:	126d      	lrw      	r3, 0x1139c	//1139c <SSI>
    c4ce:	9360      	ld.w      	r3, (r3, 0x0)
    c4d0:	3204      	movi      	r2, 4      	//0x4
    c4d2:	b345      	st.w      	r2, (r3, 0x14)
    SSI->ctrlr0 =  0
    c4d4:	126b      	lrw      	r3, 0x1139c	//1139c <SSI>
    c4d6:	9360      	ld.w      	r3, (r3, 0x0)
    c4d8:	ea02e060 	movi      	r2, 57440      	//0xe060
    c4dc:	c4624902 	rotli      	r2, r2, 3
    c4e0:	b340      	st.w      	r2, (r3, 0x0)
        | (0b11<<8) /*tx+rx:00 01<--todev 10<--tohost*/
        | (0<<11) 
        | 0b00 << 21 /*stand spi mode*/
        | (7 << 16) /* */
        ;
    SSI->dmacr = 0;
    c4e2:	1268      	lrw      	r3, 0x1139c	//1139c <SSI>
    c4e4:	9360      	ld.w      	r3, (r3, 0x0)
    c4e6:	3200      	movi      	r2, 0      	//0x0
    c4e8:	b353      	st.w      	r2, (r3, 0x4c)
    SSI->imr = 0;
    c4ea:	1266      	lrw      	r3, 0x1139c	//1139c <SSI>
    c4ec:	9360      	ld.w      	r3, (r3, 0x0)
    c4ee:	3200      	movi      	r2, 0      	//0x0
    c4f0:	b34b      	st.w      	r2, (r3, 0x2c)
    SSI->ser = 0x1;
    c4f2:	1264      	lrw      	r3, 0x1139c	//1139c <SSI>
    c4f4:	9360      	ld.w      	r3, (r3, 0x0)
    c4f6:	3201      	movi      	r2, 1      	//0x1
    c4f8:	b344      	st.w      	r2, (r3, 0x10)
    SSI->ctrlr1 = 3;
    c4fa:	1262      	lrw      	r3, 0x1139c	//1139c <SSI>
    c4fc:	9360      	ld.w      	r3, (r3, 0x0)
    c4fe:	3203      	movi      	r2, 3      	//0x3
    c500:	b341      	st.w      	r2, (r3, 0x4)
    SSI->ssienr = 0x1;
    c502:	1260      	lrw      	r3, 0x1139c	//1139c <SSI>
    c504:	9360      	ld.w      	r3, (r3, 0x0)
    c506:	3201      	movi      	r2, 1      	//0x1
    c508:	b342      	st.w      	r2, (r3, 0x8)

    SSI->dr[0] = 0x9e;
    c50a:	117e      	lrw      	r3, 0x1139c	//1139c <SSI>
    c50c:	9360      	ld.w      	r3, (r3, 0x0)
    c50e:	329e      	movi      	r2, 158      	//0x9e
    c510:	b358      	st.w      	r2, (r3, 0x60)
    while((SSI->sr & 0x1) == 0x01);
    c512:	6c00      	or      	r0, r0
    c514:	117b      	lrw      	r3, 0x1139c	//1139c <SSI>
    c516:	9360      	ld.w      	r3, (r3, 0x0)
    c518:	936a      	ld.w      	r3, (r3, 0x28)
    c51a:	e4632001 	andi      	r3, r3, 1
    c51e:	74cc      	zextb      	r3, r3
    c520:	e923fffa 	bnez      	r3, 0xc514	//c514 <read_id+0x64>

    data = SSI->dr[0]; 
    c524:	1177      	lrw      	r3, 0x1139c	//1139c <SSI>
    c526:	9340      	ld.w      	r2, (r3, 0x0)
    c528:	6cfb      	mov      	r3, sp
    c52a:	9258      	ld.w      	r2, (r2, 0x60)
    c52c:	b340      	st.w      	r2, (r3, 0x0)
    id = data & 0xff;
    c52e:	1b01      	addi      	r3, sp, 4
    c530:	6cbb      	mov      	r2, sp
    c532:	9240      	ld.w      	r2, (r2, 0x0)
    c534:	e44220ff 	andi      	r2, r2, 255
    c538:	b340      	st.w      	r2, (r3, 0x0)
    data = SSI->dr[0]; 
    c53a:	1172      	lrw      	r3, 0x1139c	//1139c <SSI>
    c53c:	9340      	ld.w      	r2, (r3, 0x0)
    c53e:	6cfb      	mov      	r3, sp
    c540:	9258      	ld.w      	r2, (r2, 0x60)
    c542:	b340      	st.w      	r2, (r3, 0x0)
    id = (id << 8) | (data & 0xff);
    c544:	1b01      	addi      	r3, sp, 4
    c546:	9360      	ld.w      	r3, (r3, 0x0)
    c548:	4328      	lsli      	r1, r3, 8
    c54a:	6cfb      	mov      	r3, sp
    c54c:	9360      	ld.w      	r3, (r3, 0x0)
    c54e:	e44320ff 	andi      	r2, r3, 255
    c552:	1b01      	addi      	r3, sp, 4
    c554:	6c84      	or      	r2, r1
    c556:	b340      	st.w      	r2, (r3, 0x0)
    data = SSI->dr[0]; 
    c558:	116a      	lrw      	r3, 0x1139c	//1139c <SSI>
    c55a:	9340      	ld.w      	r2, (r3, 0x0)
    c55c:	6cfb      	mov      	r3, sp
    c55e:	9258      	ld.w      	r2, (r2, 0x60)
    c560:	b340      	st.w      	r2, (r3, 0x0)
    id = (id << 8) | (data & 0xff);
    c562:	1b01      	addi      	r3, sp, 4
    c564:	9360      	ld.w      	r3, (r3, 0x0)
    c566:	4328      	lsli      	r1, r3, 8
    c568:	6cfb      	mov      	r3, sp
    c56a:	9360      	ld.w      	r3, (r3, 0x0)
    c56c:	e44320ff 	andi      	r2, r3, 255
    c570:	1b01      	addi      	r3, sp, 4
    c572:	6c84      	or      	r2, r1
    c574:	b340      	st.w      	r2, (r3, 0x0)

    return id;
    c576:	1b01      	addi      	r3, sp, 4
    c578:	9360      	ld.w      	r3, (r3, 0x0)
}
    c57a:	6c0f      	mov      	r0, r3
    c57c:	1402      	addi      	sp, sp, 8
    c57e:	783c      	rts

0000c580 <spi_read>:

int spi_read(void *buff, unsigned long addr, unsigned long size)
{
    c580:	14d1      	push      	r4, r15
    c582:	1424      	subi      	sp, sp, 16
    c584:	1b02      	addi      	r3, sp, 8
    c586:	b300      	st.w      	r0, (r3, 0x0)
    c588:	1b01      	addi      	r3, sp, 4
    c58a:	b320      	st.w      	r1, (r3, 0x0)
    c58c:	6cfb      	mov      	r3, sp
    c58e:	b340      	st.w      	r2, (r3, 0x0)
    int read_bytes;
	
    if (addr < 0x1000000)
    c590:	1b01      	addi      	r3, sp, 4
    c592:	9340      	ld.w      	r2, (r3, 0x0)
    c594:	c6e05023 	bmaski      	r3, 24      	//0x18
    c598:	648c      	cmphs      	r3, r2
    c59a:	0c08      	bf      	0xc5aa	//c5aa <spi_read+0x2a>
		flash_reg_write8(0xc5, 0);
    c59c:	30c5      	movi      	r0, 197      	//0xc5
    c59e:	3100      	movi      	r1, 0      	//0x0
    c5a0:	e3fffdee 	bsr      	0xc17c	//c17c <flash_reg_write8>
    c5a4:	c4004820 	lsli      	r0, r0, 0
    c5a8:	040e      	br      	0xc5c4	//c5c4 <spi_read+0x44>
	else
	{
		flash_reg_write8(0xc5, 1);
    c5aa:	30c5      	movi      	r0, 197      	//0xc5
    c5ac:	3101      	movi      	r1, 1      	//0x1
    c5ae:	e3fffde7 	bsr      	0xc17c	//c17c <flash_reg_write8>
    c5b2:	c4004820 	lsli      	r0, r0, 0
		addr -= 0x1000000;
    c5b6:	1b01      	addi      	r3, sp, 4
    c5b8:	1a01      	addi      	r2, sp, 4
    c5ba:	9240      	ld.w      	r2, (r2, 0x0)
    c5bc:	31ff      	movi      	r1, 255      	//0xff
    c5be:	4138      	lsli      	r1, r1, 24
    c5c0:	5a44      	addu      	r2, r2, r1
    c5c2:	b340      	st.w      	r2, (r3, 0x0)
	}
	
	read_bytes = flash_read(addr, buff, size);
    c5c4:	6cfb      	mov      	r3, sp
    c5c6:	9360      	ld.w      	r3, (r3, 0x0)
    c5c8:	1c03      	addi      	r4, sp, 12
    c5ca:	1901      	addi      	r1, sp, 4
    c5cc:	1a02      	addi      	r2, sp, 8
    c5ce:	9100      	ld.w      	r0, (r1, 0x0)
    c5d0:	9220      	ld.w      	r1, (r2, 0x0)
    c5d2:	6c8f      	mov      	r2, r3
    c5d4:	e3fffe32 	bsr      	0xc238	//c238 <flash_read>
    c5d8:	c4004820 	lsli      	r0, r0, 0
    c5dc:	b400      	st.w      	r0, (r4, 0x0)
		
	return read_bytes;
    c5de:	1b03      	addi      	r3, sp, 12
    c5e0:	9360      	ld.w      	r3, (r3, 0x0)
}
    c5e2:	6c0f      	mov      	r0, r3
    c5e4:	1404      	addi      	sp, sp, 16
    c5e6:	1491      	pop      	r4, r15

0000c5e8 <spi_write>:

int spi_write(void *buff, unsigned long addr, unsigned long size)
{
    c5e8:	1423      	subi      	sp, sp, 12
    c5ea:	1b02      	addi      	r3, sp, 8
    c5ec:	b300      	st.w      	r0, (r3, 0x0)
    c5ee:	1b01      	addi      	r3, sp, 4
    c5f0:	b320      	st.w      	r1, (r3, 0x0)
    c5f2:	6cfb      	mov      	r3, sp
    c5f4:	b340      	st.w      	r2, (r3, 0x0)
	Bit32u i;
	Bit32u *dest_addr = (Bit32u *)addr;
	for(i=0; i< size; i++)
		*dest_addr++ = *buff++;
	*/
	return size;
    c5f6:	6cfb      	mov      	r3, sp
    c5f8:	9360      	ld.w      	r3, (r3, 0x0)
}
    c5fa:	6c0f      	mov      	r0, r3
    c5fc:	1403      	addi      	sp, sp, 12
    c5fe:	783c      	rts
    c600:	0001139c 	.long	0x0001139c
    c604:	0000c17c 	.long	0x0000c17c
    c608:	0000c238 	.long	0x0000c238

0000c60c <spi_flash_check>:

int spi_flash_check(void)
{
    c60c:	14d1      	push      	r4, r15
    c60e:	1421      	subi      	sp, sp, 4
    unsigned int id = read_id();
    c610:	6d3b      	mov      	r4, sp
    c612:	e3ffff4f 	bsr      	0xc4b0	//c4b0 <read_id>
    c616:	c4004820 	lsli      	r0, r0, 0
    c61a:	b400      	st.w      	r0, (r4, 0x0)

    if (id == 0x20bb19)
    c61c:	6cfb      	mov      	r3, sp
    c61e:	9340      	ld.w      	r2, (r3, 0x0)
    c620:	ea03bb19 	movi      	r3, 47897      	//0xbb19
    c624:	3bb5      	bseti      	r3, 21
    c626:	64ca      	cmpne      	r2, r3
    c628:	0803      	bt      	0xc62e	//c62e <spi_flash_check+0x22>
    {
        return 0;
    c62a:	3300      	movi      	r3, 0      	//0x0
    c62c:	040f      	br      	0xc64a	//c64a <spi_flash_check+0x3e>
    }
    else
    {
        printf("SPI flash check failed \n");
    c62e:	100a      	lrw      	r0, 0x10dcc	//10dcc <__etext+0x121c>
    c630:	e0001190 	bsr      	0xe950	//e950 <printf>
    c634:	c4004820 	lsli      	r0, r0, 0
        printf("read id is %x \n",id);
    c638:	6cfb      	mov      	r3, sp
    c63a:	1009      	lrw      	r0, 0x10de8	//10de8 <__etext+0x1238>
    c63c:	9320      	ld.w      	r1, (r3, 0x0)
    c63e:	e0001189 	bsr      	0xe950	//e950 <printf>
    c642:	c4004820 	lsli      	r0, r0, 0
        return -1;
    c646:	3300      	movi      	r3, 0      	//0x0
    c648:	2b00      	subi      	r3, 1      	//0x1
    }

    return 0;
}
    c64a:	6c0f      	mov      	r0, r3
    c64c:	1401      	addi      	sp, sp, 4
    c64e:	1491      	pop      	r4, r15
    c650:	0000c4b0 	.long	0x0000c4b0
    c654:	00010dcc 	.long	0x00010dcc
    c658:	0000e950 	.long	0x0000e950
    c65c:	00010de8 	.long	0x00010de8

0000c660 <spi_init>:

int spi_init(void)
{
    c660:	14d0      	push      	r15
    printf("Initialize SPI flash ...\r\n");    
    c662:	1005      	lrw      	r0, 0x10df8	//10df8 <__etext+0x1248>
    c664:	e0001176 	bsr      	0xe950	//e950 <printf>
    c668:	c4004820 	lsli      	r0, r0, 0
    return 0;
    c66c:	3300      	movi      	r3, 0      	//0x0
}
    c66e:	6c0f      	mov      	r0, r3
    c670:	1490      	pop      	r15
    c672:	0000      	.short	0x0000
    c674:	00010df8 	.long	0x00010df8
    c678:	0000e950 	.long	0x0000e950

0000c67c <spi_test>:
#include "spi.h"
#include "io.h"

Bit32u spi_test(void)
{
    c67c:	14d0      	push      	r15
    c67e:	1726      	subi      	sp, sp, 408
	Bit32u b[100]={0};
    c680:	ea030197 	movi      	r3, 407      	//0x197
    c684:	6cce      	nor      	r3, r3
    c686:	1966      	addi      	r1, sp, 408
    c688:	594c      	addu      	r2, r1, r3
    c68a:	33c8      	movi      	r3, 200      	//0xc8
    c68c:	4361      	lsli      	r3, r3, 1
    c68e:	6c0b      	mov      	r0, r2
    c690:	3100      	movi      	r1, 0      	//0x0
    c692:	6c8f      	mov      	r2, r3
    c694:	e00016bc 	bsr      	0xf40c	//f40c <__memset_fast>
    c698:	c4004820 	lsli      	r0, r0, 0
	Bit32u i = 0;
    c69c:	1b65      	addi      	r3, sp, 404
    c69e:	3200      	movi      	r2, 0      	//0x0
    c6a0:	b340      	st.w      	r2, (r3, 0x0)
	Bit32u addr = 0;
    c6a2:	1b64      	addi      	r3, sp, 400
    c6a4:	3200      	movi      	r2, 0      	//0x0
    c6a6:	b340      	st.w      	r2, (r3, 0x0)
	spi_init();
    c6a8:	e3ffffdc 	bsr      	0xc660	//c660 <spi_init>
    c6ac:	c4004820 	lsli      	r0, r0, 0
	spi_flash_check();
    c6b0:	e3ffffae 	bsr      	0xc60c	//c60c <spi_flash_check>
    c6b4:	c4004820 	lsli      	r0, r0, 0
	spi_read(b, addr, 100);
    c6b8:	6cbb      	mov      	r2, sp
    c6ba:	1b64      	addi      	r3, sp, 400
    c6bc:	6c0b      	mov      	r0, r2
    c6be:	9320      	ld.w      	r1, (r3, 0x0)
    c6c0:	3264      	movi      	r2, 100      	//0x64
    c6c2:	e3ffff5f 	bsr      	0xc580	//c580 <spi_read>
    c6c6:	c4004820 	lsli      	r0, r0, 0
	for(i=0;i<100;i++)
    c6ca:	1b65      	addi      	r3, sp, 404
    c6cc:	3200      	movi      	r2, 0      	//0x0
    c6ce:	b340      	st.w      	r2, (r3, 0x0)
    c6d0:	0416      	br      	0xc6fc	//c6fc <spi_test+0x80>
	{
		printf("Read data:%x \n",b[i]);
    c6d2:	ea030197 	movi      	r3, 407      	//0x197
    c6d6:	6cce      	nor      	r3, r3
    c6d8:	1a65      	addi      	r2, sp, 404
    c6da:	9240      	ld.w      	r2, (r2, 0x0)
    c6dc:	4242      	lsli      	r2, r2, 2
    c6de:	1966      	addi      	r1, sp, 408
    c6e0:	5948      	addu      	r2, r1, r2
    c6e2:	d0620823 	ldr.w      	r3, (r2, r3<<0)
    c6e6:	100f      	lrw      	r0, 0x10e14	//10e14 <__etext+0x1264>
    c6e8:	6c4f      	mov      	r1, r3
    c6ea:	e0001133 	bsr      	0xe950	//e950 <printf>
    c6ee:	c4004820 	lsli      	r0, r0, 0
	Bit32u i = 0;
	Bit32u addr = 0;
	spi_init();
	spi_flash_check();
	spi_read(b, addr, 100);
	for(i=0;i<100;i++)
    c6f2:	1b65      	addi      	r3, sp, 404
    c6f4:	1a65      	addi      	r2, sp, 404
    c6f6:	9240      	ld.w      	r2, (r2, 0x0)
    c6f8:	2200      	addi      	r2, 1      	//0x1
    c6fa:	b340      	st.w      	r2, (r3, 0x0)
    c6fc:	1b65      	addi      	r3, sp, 404
    c6fe:	9340      	ld.w      	r2, (r3, 0x0)
    c700:	3363      	movi      	r3, 99      	//0x63
    c702:	648c      	cmphs      	r3, r2
    c704:	0be7      	bt      	0xc6d2	//c6d2 <spi_test+0x56>
	{
		printf("Read data:%x \n",b[i]);
	}
	return 0;
    c706:	3300      	movi      	r3, 0      	//0x0
}
    c708:	6c0f      	mov      	r0, r3
    c70a:	1706      	addi      	sp, sp, 408
    c70c:	1490      	pop      	r15
    c70e:	0000      	.short	0x0000
    c710:	0000f40c 	.long	0x0000f40c
    c714:	0000c660 	.long	0x0000c660
    c718:	0000c60c 	.long	0x0000c60c
    c71c:	0000c580 	.long	0x0000c580
    c720:	00010e14 	.long	0x00010e14
    c724:	0000e950 	.long	0x0000e950

0000c728 <CK_TIMER_Handler>:

/*
 * Callback function for timer interrupt, set timer_flag.
 */
static void CK_TIMER_Handler(Bit32u irqid)
{
    c728:	14d0      	push      	r15
    c72a:	1421      	subi      	sp, sp, 4
    c72c:	6cfb      	mov      	r3, sp
    c72e:	b300      	st.w      	r0, (r3, 0x0)
  CK_Timer_ClearIrqFlag(t_timerid);
    c730:	1066      	lrw      	r3, 0x13a84	//13a84 <t_timerid>
    c732:	9360      	ld.w      	r3, (r3, 0x0)
    c734:	6c0f      	mov      	r0, r3
    c736:	e00002bb 	bsr      	0xccac	//ccac <CK_Timer_ClearIrqFlag>
    c73a:	c4004820 	lsli      	r0, r0, 0
  timer_test = 0;
    c73e:	1065      	lrw      	r3, 0x13a80	//13a80 <timer_test>
    c740:	3200      	movi      	r2, 0      	//0x0
    c742:	a340      	st.b      	r2, (r3, 0x0)
}
    c744:	1401      	addi      	sp, sp, 4
    c746:	1490      	pop      	r15
    c748:	00013a84 	.long	0x00013a84
    c74c:	0000ccac 	.long	0x0000ccac
    c750:	00013a80 	.long	0x00013a80

0000c754 <CK_Timer_Test>:

/*
 * main function of timer test program.
 */
void CK_Timer_Test()
{
    c754:	14d1      	push      	r4, r15
    c756:	1425      	subi      	sp, sp, 20
  Bit64u currentvalue;
  Bit64u lastvalue;
  Bit32u i;

  printf("Timer test begin \n");
    c758:	1209      	lrw      	r0, 0x10e24	//10e24 <__etext+0x1274>
    c75a:	e00010fb 	bsr      	0xe950	//e950 <printf>
    c75e:	c4004820 	lsli      	r0, r0, 0
  for(i = 0; i < TIMERID_MAX; i++)
    c762:	1b02      	addi      	r3, sp, 8
    c764:	3200      	movi      	r2, 0      	//0x0
    c766:	b340      	st.w      	r2, (r3, 0x0)
    c768:	0482      	br      	0xc86c	//c86c <CK_Timer_Test+0x118>
  {
    t_timerid = i;
    c76a:	1267      	lrw      	r3, 0x13a84	//13a84 <t_timerid>
    c76c:	1a02      	addi      	r2, sp, 8
    c76e:	9240      	ld.w      	r2, (r2, 0x0)
    c770:	b340      	st.w      	r2, (r3, 0x0)
    printf(" Testing Timer%d \n ", t_timerid);
    c772:	1265      	lrw      	r3, 0x13a84	//13a84 <t_timerid>
    c774:	9360      	ld.w      	r3, (r3, 0x0)
    c776:	1205      	lrw      	r0, 0x10e38	//10e38 <__etext+0x1288>
    c778:	6c4f      	mov      	r1, r3
    c77a:	e00010eb 	bsr      	0xe950	//e950 <printf>
    c77e:	c4004820 	lsli      	r0, r0, 0
    timer_test = 1;
    c782:	1263      	lrw      	r3, 0x13a80	//13a80 <timer_test>
    c784:	3201      	movi      	r2, 1      	//0x1
    c786:	a340      	st.b      	r2, (r3, 0x0)
    {
      CK_Timer_Open(t_timerid,CK_TIMER_Handler);
    c788:	117f      	lrw      	r3, 0x13a84	//13a84 <t_timerid>
    c78a:	9360      	ld.w      	r3, (r3, 0x0)
    c78c:	6c0f      	mov      	r0, r3
    c78e:	1221      	lrw      	r1, 0xc728	//c728 <CK_TIMER_Handler>
    c790:	e0000120 	bsr      	0xc9d0	//c9d0 <CK_Timer_Open>
    c794:	c4004820 	lsli      	r0, r0, 0
    }

    CK_Timer_Start(t_timerid, CK_TIMER_TEST_TIME);
    c798:	117b      	lrw      	r3, 0x13a84	//13a84 <t_timerid>
    c79a:	9360      	ld.w      	r3, (r3, 0x0)
    c79c:	6c0f      	mov      	r0, r3
    c79e:	ea01f424 	movi      	r1, 62500      	//0xf424
    c7a2:	c4814901 	rotli      	r1, r1, 4
    c7a6:	3200      	movi      	r2, 0      	//0x0
    c7a8:	e00001a4 	bsr      	0xcaf0	//caf0 <CK_Timer_Start>
    c7ac:	c4004820 	lsli      	r0, r0, 0
    currentvalue = CK_Timer_CurrentValue(t_timerid);
    c7b0:	1175      	lrw      	r3, 0x13a84	//13a84 <t_timerid>
    c7b2:	9360      	ld.w      	r3, (r3, 0x0)
    c7b4:	1c03      	addi      	r4, sp, 12
    c7b6:	6c0f      	mov      	r0, r3
    c7b8:	e0000294 	bsr      	0xcce0	//cce0 <CK_Timer_CurrentValue>
    c7bc:	c4004820 	lsli      	r0, r0, 0
    c7c0:	b400      	st.w      	r0, (r4, 0x0)
    c7c2:	b421      	st.w      	r1, (r4, 0x4)
    /* if currentvalue > lastvalue, it means that it's time out
        but there is no interrupt generate. */
    while(timer_test)
    c7c4:	0422      	br      	0xc808	//c808 <CK_Timer_Test+0xb4>
    {
      lastvalue = currentvalue;
    c7c6:	6cbb      	mov      	r2, sp
    c7c8:	1b03      	addi      	r3, sp, 12
    c7ca:	9381      	ld.w      	r4, (r3, 0x4)
    c7cc:	9360      	ld.w      	r3, (r3, 0x0)
    c7ce:	b260      	st.w      	r3, (r2, 0x0)
    c7d0:	b281      	st.w      	r4, (r2, 0x4)
      currentvalue = CK_Timer_CurrentValue(t_timerid);
    c7d2:	116d      	lrw      	r3, 0x13a84	//13a84 <t_timerid>
    c7d4:	9360      	ld.w      	r3, (r3, 0x0)
    c7d6:	1c03      	addi      	r4, sp, 12
    c7d8:	6c0f      	mov      	r0, r3
    c7da:	e0000283 	bsr      	0xcce0	//cce0 <CK_Timer_CurrentValue>
    c7de:	c4004820 	lsli      	r0, r0, 0
    c7e2:	b400      	st.w      	r0, (r4, 0x0)
    c7e4:	b421      	st.w      	r1, (r4, 0x4)
      if(currentvalue > lastvalue)
    c7e6:	1a03      	addi      	r2, sp, 12
    c7e8:	6cfb      	mov      	r3, sp
    c7ea:	9201      	ld.w      	r0, (r2, 0x4)
    c7ec:	9321      	ld.w      	r1, (r3, 0x4)
    c7ee:	6404      	cmphs      	r1, r0
    c7f0:	0c12      	bf      	0xc814	//c814 <CK_Timer_Test+0xc0>
    c7f2:	9201      	ld.w      	r0, (r2, 0x4)
    c7f4:	9321      	ld.w      	r1, (r3, 0x4)
    c7f6:	6442      	cmpne      	r0, r1
    c7f8:	0808      	bt      	0xc808	//c808 <CK_Timer_Test+0xb4>
    c7fa:	9200      	ld.w      	r0, (r2, 0x0)
    c7fc:	9320      	ld.w      	r1, (r3, 0x0)
    c7fe:	6404      	cmphs      	r1, r0
    c800:	0c0c      	bf      	0xc818	//c818 <CK_Timer_Test+0xc4>
    c802:	9240      	ld.w      	r2, (r2, 0x0)
    c804:	9360      	ld.w      	r3, (r3, 0x0)
    c806:	64ca      	cmpne      	r2, r3

    CK_Timer_Start(t_timerid, CK_TIMER_TEST_TIME);
    currentvalue = CK_Timer_CurrentValue(t_timerid);
    /* if currentvalue > lastvalue, it means that it's time out
        but there is no interrupt generate. */
    while(timer_test)
    c808:	1161      	lrw      	r3, 0x13a80	//13a80 <timer_test>
    c80a:	8360      	ld.b      	r3, (r3, 0x0)
    c80c:	74cc      	zextb      	r3, r3
    c80e:	e923ffdc 	bnez      	r3, 0xc7c6	//c7c6 <CK_Timer_Test+0x72>
    c812:	0404      	br      	0xc81a	//c81a <CK_Timer_Test+0xc6>
    {
      lastvalue = currentvalue;
      currentvalue = CK_Timer_CurrentValue(t_timerid);
      if(currentvalue > lastvalue)
      {
        break;
    c814:	6c00      	or      	r0, r0
    c816:	0402      	br      	0xc81a	//c81a <CK_Timer_Test+0xc6>
    c818:	6c00      	or      	r0, r0
      }
    }
    CK_Timer_Stop(t_timerid);
    c81a:	107b      	lrw      	r3, 0x13a84	//13a84 <t_timerid>
    c81c:	9360      	ld.w      	r3, (r3, 0x0)
    c81e:	6c0f      	mov      	r0, r3
    c820:	e00001e2 	bsr      	0xcbe4	//cbe4 <CK_Timer_Stop>
    c824:	c4004820 	lsli      	r0, r0, 0
    CK_Timer_Close(t_timerid);
    c828:	1077      	lrw      	r3, 0x13a84	//13a84 <t_timerid>
    c82a:	9360      	ld.w      	r3, (r3, 0x0)
    c82c:	6c0f      	mov      	r0, r3
    c82e:	e0000113 	bsr      	0xca54	//ca54 <CK_Timer_Close>
    c832:	c4004820 	lsli      	r0, r0, 0
    if(timer_test == 0)
    c836:	1076      	lrw      	r3, 0x13a80	//13a80 <timer_test>
    c838:	8360      	ld.b      	r3, (r3, 0x0)
    c83a:	74cc      	zextb      	r3, r3
    c83c:	e923000b 	bnez      	r3, 0xc852	//c852 <CK_Timer_Test+0xfe>
        printf("Testing Timer%d success\n", t_timerid);
    c840:	1071      	lrw      	r3, 0x13a84	//13a84 <t_timerid>
    c842:	9360      	ld.w      	r3, (r3, 0x0)
    c844:	1019      	lrw      	r0, 0x10e4c	//10e4c <__etext+0x129c>
    c846:	6c4f      	mov      	r1, r3
    c848:	e0001084 	bsr      	0xe950	//e950 <printf>
    c84c:	c4004820 	lsli      	r0, r0, 0
    c850:	0409      	br      	0xc862	//c862 <CK_Timer_Test+0x10e>
    else
        printf("Testing Timer%d failure\n", t_timerid);
    c852:	106d      	lrw      	r3, 0x13a84	//13a84 <t_timerid>
    c854:	9360      	ld.w      	r3, (r3, 0x0)
    c856:	1016      	lrw      	r0, 0x10e68	//10e68 <__etext+0x12b8>
    c858:	6c4f      	mov      	r1, r3
    c85a:	e000107b 	bsr      	0xe950	//e950 <printf>
    c85e:	c4004820 	lsli      	r0, r0, 0
  Bit64u currentvalue;
  Bit64u lastvalue;
  Bit32u i;

  printf("Timer test begin \n");
  for(i = 0; i < TIMERID_MAX; i++)
    c862:	1b02      	addi      	r3, sp, 8
    c864:	1a02      	addi      	r2, sp, 8
    c866:	9240      	ld.w      	r2, (r2, 0x0)
    c868:	2200      	addi      	r2, 1      	//0x1
    c86a:	b340      	st.w      	r2, (r3, 0x0)
    c86c:	1b02      	addi      	r3, sp, 8
    c86e:	9340      	ld.w      	r2, (r3, 0x0)
    c870:	3303      	movi      	r3, 3      	//0x3
    c872:	648c      	cmphs      	r3, r2
    c874:	0b7b      	bt      	0xc76a	//c76a <CK_Timer_Test+0x16>
    if(timer_test == 0)
        printf("Testing Timer%d success\n", t_timerid);
    else
        printf("Testing Timer%d failure\n", t_timerid);
  }
}
    c876:	1405      	addi      	sp, sp, 20
    c878:	1491      	pop      	r4, r15
    c87a:	0000      	.short	0x0000
    c87c:	00010e24 	.long	0x00010e24
    c880:	0000e950 	.long	0x0000e950
    c884:	00013a84 	.long	0x00013a84
    c888:	00010e38 	.long	0x00010e38
    c88c:	00013a80 	.long	0x00013a80
    c890:	0000c728 	.long	0x0000c728
    c894:	0000c9d0 	.long	0x0000c9d0
    c898:	0000caf0 	.long	0x0000caf0
    c89c:	0000cce0 	.long	0x0000cce0
    c8a0:	0000cbe4 	.long	0x0000cbe4
    c8a4:	0000ca54 	.long	0x0000ca54
    c8a8:	00010e4c 	.long	0x00010e4c
    c8ac:	00010e68 	.long	0x00010e68

0000c8b0 <readl>:
{
    *(volatile Bit16u *)addr = value;
}

static inline Bit32u readl(const volatile void *addr)
{
    c8b0:	1421      	subi      	sp, sp, 4
    c8b2:	6cfb      	mov      	r3, sp
    c8b4:	b300      	st.w      	r0, (r3, 0x0)
    return *(const volatile Bit32u *)addr;
    c8b6:	6cfb      	mov      	r3, sp
    c8b8:	9360      	ld.w      	r3, (r3, 0x0)
    c8ba:	9360      	ld.w      	r3, (r3, 0x0)
}
    c8bc:	6c0f      	mov      	r0, r3
    c8be:	1401      	addi      	sp, sp, 4
    c8c0:	783c      	rts
	...

0000c8c4 <writel>:

static inline void writel(Bit32u value, volatile void *addr)
{
    c8c4:	1422      	subi      	sp, sp, 8
    c8c6:	1b01      	addi      	r3, sp, 4
    c8c8:	b300      	st.w      	r0, (r3, 0x0)
    c8ca:	6cfb      	mov      	r3, sp
    c8cc:	b320      	st.w      	r1, (r3, 0x0)
    *(volatile Bit32u *)addr = value;
    c8ce:	6cfb      	mov      	r3, sp
    c8d0:	9360      	ld.w      	r3, (r3, 0x0)
    c8d2:	1a01      	addi      	r2, sp, 4
    c8d4:	9240      	ld.w      	r2, (r2, 0x0)
    c8d6:	b340      	st.w      	r2, (r3, 0x0)
}
    c8d8:	1402      	addi      	sp, sp, 8
    c8da:	783c      	rts

0000c8dc <dw_write>:

static inline void dw_write(Bit32u val, void* addr)
{
    c8dc:	14d1      	push      	r4, r15
    c8de:	1423      	subi      	sp, sp, 12
    c8e0:	1b01      	addi      	r3, sp, 4
    c8e2:	b300      	st.w      	r0, (r3, 0x0)
    c8e4:	6cfb      	mov      	r3, sp
    c8e6:	b320      	st.w      	r1, (r3, 0x0)
	Bit32u value;
	value =readl(addr);
    c8e8:	1c02      	addi      	r4, sp, 8
    c8ea:	6cfb      	mov      	r3, sp
    c8ec:	9300      	ld.w      	r0, (r3, 0x0)
    c8ee:	e3ffffe1 	bsr      	0xc8b0	//c8b0 <readl>
    c8f2:	c4004820 	lsli      	r0, r0, 0
    c8f6:	b400      	st.w      	r0, (r4, 0x0)
	value |= val;
    c8f8:	1b02      	addi      	r3, sp, 8
    c8fa:	1902      	addi      	r1, sp, 8
    c8fc:	1a01      	addi      	r2, sp, 4
    c8fe:	9120      	ld.w      	r1, (r1, 0x0)
    c900:	9240      	ld.w      	r2, (r2, 0x0)
    c902:	6c84      	or      	r2, r1
    c904:	b340      	st.w      	r2, (r3, 0x0)
	writel(value, addr);
    c906:	1a02      	addi      	r2, sp, 8
    c908:	6cfb      	mov      	r3, sp
    c90a:	9200      	ld.w      	r0, (r2, 0x0)
    c90c:	9320      	ld.w      	r1, (r3, 0x0)
    c90e:	e3ffffdb 	bsr      	0xc8c4	//c8c4 <writel>
    c912:	c4004820 	lsli      	r0, r0, 0
}
    c916:	1403      	addi      	sp, sp, 12
    c918:	1491      	pop      	r4, r15
	...

0000c91c <dw_clear>:

static inline void dw_clear(Bit32u val, void* addr)
{
    c91c:	14d1      	push      	r4, r15
    c91e:	1423      	subi      	sp, sp, 12
    c920:	1b01      	addi      	r3, sp, 4
    c922:	b300      	st.w      	r0, (r3, 0x0)
    c924:	6cfb      	mov      	r3, sp
    c926:	b320      	st.w      	r1, (r3, 0x0)
	Bit32u value;
	value =readl(addr);
    c928:	1c02      	addi      	r4, sp, 8
    c92a:	6cfb      	mov      	r3, sp
    c92c:	9300      	ld.w      	r0, (r3, 0x0)
    c92e:	e3ffffc1 	bsr      	0xc8b0	//c8b0 <readl>
    c932:	c4004820 	lsli      	r0, r0, 0
    c936:	b400      	st.w      	r0, (r4, 0x0)
	value &= ~val;
    c938:	1b01      	addi      	r3, sp, 4
    c93a:	9360      	ld.w      	r3, (r3, 0x0)
    c93c:	c4632481 	nor      	r1, r3, r3
    c940:	1b02      	addi      	r3, sp, 8
    c942:	1a02      	addi      	r2, sp, 8
    c944:	9240      	ld.w      	r2, (r2, 0x0)
    c946:	6884      	and      	r2, r1
    c948:	b340      	st.w      	r2, (r3, 0x0)
	writel(value, addr);
    c94a:	1a02      	addi      	r2, sp, 8
    c94c:	6cfb      	mov      	r3, sp
    c94e:	9200      	ld.w      	r0, (r2, 0x0)
    c950:	9320      	ld.w      	r1, (r3, 0x0)
    c952:	e3ffffb9 	bsr      	0xc8c4	//c8c4 <writel>
    c956:	c4004820 	lsli      	r0, r0, 0
}
    c95a:	1403      	addi      	sp, sp, 12
    c95c:	1491      	pop      	r4, r15
    c95e:	0000      	.short	0x0000
    c960:	0000c8b0 	.long	0x0000c8b0
    c964:	0000c8c4 	.long	0x0000c8c4

0000c968 <CK_Deactive_TimerModule>:
 * this function should be called before
 * INTC module working;
 */

void CK_Deactive_TimerModule()
{
    c968:	14d0      	push      	r15
    c96a:	1422      	subi      	sp, sp, 8
    int i;
    PCKPStruct_TIMER ptimer;
    for( i = 0; i < TIMERID_MAX; i++ )
    c96c:	1b01      	addi      	r3, sp, 4
    c96e:	3200      	movi      	r2, 0      	//0x0
    c970:	b340      	st.w      	r2, (r3, 0x0)
    c972:	0421      	br      	0xc9b4	//c9b4 <CK_Deactive_TimerModule+0x4c>
    {
        ptimer = CK_Timer_Table[i].addr;
    c974:	6cfb      	mov      	r3, sp
    c976:	1239      	lrw      	r1, 0x113a0	//113a0 <CK_Timer_Table>
    c978:	1a01      	addi      	r2, sp, 4
    c97a:	9240      	ld.w      	r2, (r2, 0x0)
    c97c:	4245      	lsli      	r2, r2, 5
    c97e:	5948      	addu      	r2, r1, r2
    c980:	2203      	addi      	r2, 4      	//0x4
    c982:	9240      	ld.w      	r2, (r2, 0x0)
    c984:	b340      	st.w      	r2, (r3, 0x0)
		/* stop the corresponding timer */
		//ptimer->TxControl &= ~CK_TIMER_TXCONTROL_ENABLE;
        reg_clearl(CK_TIMER_TXCONTROL_ENABLE,ptimer,TxControl);
    c986:	6cfb      	mov      	r3, sp
    c988:	9360      	ld.w      	r3, (r3, 0x0)
    c98a:	230f      	addi      	r3, 16      	//0x10
    c98c:	3001      	movi      	r0, 1      	//0x1
    c98e:	6c4f      	mov      	r1, r3
    c990:	e3ffffc6 	bsr      	0xc91c	//c91c <dw_clear>
    c994:	c4004820 	lsli      	r0, r0, 0
		/* Disable interrupt. */
		//ptimer->TxControl |= CK_TIMER_TXCONTROL_INTMASK;
        reg_writel(CK_TIMER_TXCONTROL_INTMASK,ptimer,TxControl);
    c998:	6cfb      	mov      	r3, sp
    c99a:	9360      	ld.w      	r3, (r3, 0x0)
    c99c:	230f      	addi      	r3, 16      	//0x10
    c99e:	3004      	movi      	r0, 4      	//0x4
    c9a0:	6c4f      	mov      	r1, r3
    c9a2:	e3ffff9d 	bsr      	0xc8dc	//c8dc <dw_write>
    c9a6:	c4004820 	lsli      	r0, r0, 0

void CK_Deactive_TimerModule()
{
    int i;
    PCKPStruct_TIMER ptimer;
    for( i = 0; i < TIMERID_MAX; i++ )
    c9aa:	1b01      	addi      	r3, sp, 4
    c9ac:	1a01      	addi      	r2, sp, 4
    c9ae:	9240      	ld.w      	r2, (r2, 0x0)
    c9b0:	2200      	addi      	r2, 1      	//0x1
    c9b2:	b340      	st.w      	r2, (r3, 0x0)
    c9b4:	1b01      	addi      	r3, sp, 4
    c9b6:	9340      	ld.w      	r2, (r3, 0x0)
    c9b8:	3302      	movi      	r3, 2      	//0x2
    c9ba:	648c      	cmphs      	r3, r2
    c9bc:	0bdc      	bt      	0xc974	//c974 <CK_Deactive_TimerModule+0xc>
        reg_clearl(CK_TIMER_TXCONTROL_ENABLE,ptimer,TxControl);
		/* Disable interrupt. */
		//ptimer->TxControl |= CK_TIMER_TXCONTROL_INTMASK;
        reg_writel(CK_TIMER_TXCONTROL_INTMASK,ptimer,TxControl);
    }
}
    c9be:	1402      	addi      	sp, sp, 8
    c9c0:	1490      	pop      	r15
	...

0000c9c4 <CK_Timer_Init>:

/*
 * intilize the timer driver.
 */
void CK_Timer_Init(void)
{
    c9c4:	14d0      	push      	r15
   CK_Deactive_TimerModule();
    c9c6:	e3ffffd1 	bsr      	0xc968	//c968 <CK_Deactive_TimerModule>
    c9ca:	c4004820 	lsli      	r0, r0, 0
}
    c9ce:	1490      	pop      	r15

0000c9d0 <CK_Timer_Open>:
 * bfast: indicate whether the fast interrupt ornot;
 * bopened: indicate the state whether be opened ornot
 */
Bit32u CK_Timer_Open ( CKEnum_Timer_Device timerid,
		         IN void(*handler)(Bit32u irqid))
{
    c9d0:	14d0      	push      	r15
    c9d2:	1424      	subi      	sp, sp, 16
    c9d4:	1b01      	addi      	r3, sp, 4
    c9d6:	b300      	st.w      	r0, (r3, 0x0)
    c9d8:	6cfb      	mov      	r3, sp
    c9da:	b320      	st.w      	r1, (r3, 0x0)
   PCKStruct_TimerInfo info;
   PCKPStruct_TIMER ptimer;

   if ((timerid < 0) || (timerid > TIMERID_MAX))
    c9dc:	1b01      	addi      	r3, sp, 4
    c9de:	9340      	ld.w      	r2, (r3, 0x0)
    c9e0:	3303      	movi      	r3, 3      	//0x3
    c9e2:	648c      	cmphs      	r3, r2
    c9e4:	0804      	bt      	0xc9ec	//c9ec <CK_Timer_Open+0x1c>
   {
	return FAILURE;
    c9e6:	3300      	movi      	r3, 0      	//0x0
    c9e8:	2b00      	subi      	r3, 1      	//0x1
    c9ea:	0431      	br      	0xca4c	//ca4c <CK_Timer_Open+0x7c>
   }
   info = &(CK_Timer_Table[timerid]);
    c9ec:	1b01      	addi      	r3, sp, 4
    c9ee:	9360      	ld.w      	r3, (r3, 0x0)
    c9f0:	4325      	lsli      	r1, r3, 5
    c9f2:	1b03      	addi      	r3, sp, 12
    c9f4:	1159      	lrw      	r2, 0x113a0	//113a0 <CK_Timer_Table>
    c9f6:	5948      	addu      	r2, r1, r2
    c9f8:	b340      	st.w      	r2, (r3, 0x0)
   ptimer = info->addr ;
    c9fa:	1b02      	addi      	r3, sp, 8
    c9fc:	1a03      	addi      	r2, sp, 12
    c9fe:	9240      	ld.w      	r2, (r2, 0x0)
    ca00:	9241      	ld.w      	r2, (r2, 0x4)
    ca02:	b340      	st.w      	r2, (r3, 0x0)
   if(info->bopened)
    ca04:	1b03      	addi      	r3, sp, 12
    ca06:	9360      	ld.w      	r3, (r3, 0x0)
    ca08:	9363      	ld.w      	r3, (r3, 0xc)
    ca0a:	e9030005 	bez      	r3, 0xca14	//ca14 <CK_Timer_Open+0x44>
   {
	return FAILURE;
    ca0e:	3300      	movi      	r3, 0      	//0x0
    ca10:	2b00      	subi      	r3, 1      	//0x1
    ca12:	041d      	br      	0xca4c	//ca4c <CK_Timer_Open+0x7c>
   }
   /* intilize irqhandler */
   if (NULL != handler)
    ca14:	6cfb      	mov      	r3, sp
    ca16:	9360      	ld.w      	r3, (r3, 0x0)
    ca18:	e903000c 	bez      	r3, 0xca30	//ca30 <CK_Timer_Open+0x60>
   {
     CK_INTC_RequestIrq(info->irq, handler);
    ca1c:	1b03      	addi      	r3, sp, 12
    ca1e:	9360      	ld.w      	r3, (r3, 0x0)
    ca20:	9342      	ld.w      	r2, (r3, 0x8)
    ca22:	6cfb      	mov      	r3, sp
    ca24:	6c0b      	mov      	r0, r2
    ca26:	9320      	ld.w      	r1, (r3, 0x0)
    ca28:	e3ffcde8 	bsr      	0x65f8	//65f8 <CK_INTC_RequestIrq>
    ca2c:	c4004820 	lsli      	r0, r0, 0
   }
   info->bopened = TRUE;
    ca30:	1b03      	addi      	r3, sp, 12
    ca32:	9360      	ld.w      	r3, (r3, 0x0)
    ca34:	3201      	movi      	r2, 1      	//0x1
    ca36:	b343      	st.w      	r2, (r3, 0xc)
   /* Enable Timer interrupt. */
  // ptimer->TxControl &= ~(CK_TIMER_TXCONTROL_INTMASK);
   reg_clearl(CK_TIMER_TXCONTROL_INTMASK,ptimer,TxControl);
    ca38:	1b02      	addi      	r3, sp, 8
    ca3a:	9360      	ld.w      	r3, (r3, 0x0)
    ca3c:	230f      	addi      	r3, 16      	//0x10
    ca3e:	3004      	movi      	r0, 4      	//0x4
    ca40:	6c4f      	mov      	r1, r3
    ca42:	e3ffff6d 	bsr      	0xc91c	//c91c <dw_clear>
    ca46:	c4004820 	lsli      	r0, r0, 0
  return SUCCESS;
    ca4a:	3300      	movi      	r3, 0      	//0x0
}
    ca4c:	6c0f      	mov      	r0, r3
    ca4e:	1404      	addi      	sp, sp, 16
    ca50:	1490      	pop      	r15
	...

0000ca54 <CK_Timer_Close>:
 *
 * timerid: the mumber of the corresponding timer port;
 * bopened: indicate the state whether be opened ornot
 */
Bit32u CK_Timer_Close(CKEnum_Timer_Device timerid)
{
    ca54:	14d0      	push      	r15
    ca56:	1423      	subi      	sp, sp, 12
    ca58:	6cfb      	mov      	r3, sp
    ca5a:	b300      	st.w      	r0, (r3, 0x0)
    PCKStruct_TimerInfo info;
	PCKPStruct_TIMER ptimer;

    if ((timerid < 0) || (timerid > TIMERID_MAX))
    ca5c:	6cfb      	mov      	r3, sp
    ca5e:	9340      	ld.w      	r2, (r3, 0x0)
    ca60:	3303      	movi      	r3, 3      	//0x3
    ca62:	648c      	cmphs      	r3, r2
    ca64:	0804      	bt      	0xca6c	//ca6c <CK_Timer_Close+0x18>
    {
	return FAILURE;
    ca66:	3300      	movi      	r3, 0      	//0x0
    ca68:	2b00      	subi      	r3, 1      	//0x1
    ca6a:	0434      	br      	0xcad2	//cad2 <CK_Timer_Close+0x7e>
    }
    info = &(CK_Timer_Table[timerid]);
    ca6c:	6cfb      	mov      	r3, sp
    ca6e:	9360      	ld.w      	r3, (r3, 0x0)
    ca70:	4325      	lsli      	r1, r3, 5
    ca72:	1b02      	addi      	r3, sp, 8
    ca74:	1059      	lrw      	r2, 0x113a0	//113a0 <CK_Timer_Table>
    ca76:	5948      	addu      	r2, r1, r2
    ca78:	b340      	st.w      	r2, (r3, 0x0)
    ptimer = info->addr;
    ca7a:	1b01      	addi      	r3, sp, 4
    ca7c:	1a02      	addi      	r2, sp, 8
    ca7e:	9240      	ld.w      	r2, (r2, 0x0)
    ca80:	9241      	ld.w      	r2, (r2, 0x4)
    ca82:	b340      	st.w      	r2, (r3, 0x0)
    if(!(info->bopened))
    ca84:	1b02      	addi      	r3, sp, 8
    ca86:	9360      	ld.w      	r3, (r3, 0x0)
    ca88:	9363      	ld.w      	r3, (r3, 0xc)
    ca8a:	e9230005 	bnez      	r3, 0xca94	//ca94 <CK_Timer_Close+0x40>
    {
	return FAILURE;
    ca8e:	3300      	movi      	r3, 0      	//0x0
    ca90:	2b00      	subi      	r3, 1      	//0x1
    ca92:	0420      	br      	0xcad2	//cad2 <CK_Timer_Close+0x7e>
    }

   /* stop the corresponding timer */
   //ptimer->TxControl &= ~CK_TIMER_TXCONTROL_ENABLE;
    reg_clearl(CK_TIMER_TXCONTROL_ENABLE,ptimer,TxControl);
    ca94:	1b01      	addi      	r3, sp, 4
    ca96:	9360      	ld.w      	r3, (r3, 0x0)
    ca98:	230f      	addi      	r3, 16      	//0x10
    ca9a:	3001      	movi      	r0, 1      	//0x1
    ca9c:	6c4f      	mov      	r1, r3
    ca9e:	e3ffff3f 	bsr      	0xc91c	//c91c <dw_clear>
    caa2:	c4004820 	lsli      	r0, r0, 0
   /* Disable interrupt. */
  // ptimer->TxControl |= CK_TIMER_TXCONTROL_INTMASK;
    reg_writel(CK_TIMER_TXCONTROL_INTMASK,ptimer,TxControl);
    caa6:	1b01      	addi      	r3, sp, 4
    caa8:	9360      	ld.w      	r3, (r3, 0x0)
    caaa:	230f      	addi      	r3, 16      	//0x10
    caac:	3004      	movi      	r0, 4      	//0x4
    caae:	6c4f      	mov      	r1, r3
    cab0:	e3ffff16 	bsr      	0xc8dc	//c8dc <dw_write>
    cab4:	c4004820 	lsli      	r0, r0, 0
   /*clear the backcall function*/
   CK_INTC_FreeIrq(info->irq);
    cab8:	1b02      	addi      	r3, sp, 8
    caba:	9360      	ld.w      	r3, (r3, 0x0)
    cabc:	9362      	ld.w      	r3, (r3, 0x8)
    cabe:	6c0f      	mov      	r0, r3
    cac0:	e3ffce2c 	bsr      	0x6718	//6718 <CK_INTC_FreeIrq>
    cac4:	c4004820 	lsli      	r0, r0, 0
   info->bopened = FALSE;
    cac8:	1b02      	addi      	r3, sp, 8
    caca:	9360      	ld.w      	r3, (r3, 0x0)
    cacc:	3200      	movi      	r2, 0      	//0x0
    cace:	b343      	st.w      	r2, (r3, 0xc)
   return SUCCESS;
    cad0:	3300      	movi      	r3, 0      	//0x0
}
    cad2:	6c0f      	mov      	r0, r3
    cad4:	1403      	addi      	sp, sp, 12
    cad6:	1490      	pop      	r15
    cad8:	000113a0 	.long	0x000113a0
    cadc:	0000c91c 	.long	0x0000c91c
    cae0:	0000c8dc 	.long	0x0000c8dc
    cae4:	0000c968 	.long	0x0000c968
    cae8:	000065f8 	.long	0x000065f8
    caec:	00006718 	.long	0x00006718

0000caf0 <CK_Timer_Start>:
 *
 * timerid: the mumber of the corresponding timer port;
 * timeout: the set time (uS)
 */
Bit32u CK_Timer_Start(CKEnum_Timer_Device timerid,IN Bit64u timeout)
{
    caf0:	14d1      	push      	r4, r15
    caf2:	1427      	subi      	sp, sp, 28
    caf4:	1b02      	addi      	r3, sp, 8
    caf6:	b300      	st.w      	r0, (r3, 0x0)
    caf8:	6cfb      	mov      	r3, sp
    cafa:	b320      	st.w      	r1, (r3, 0x0)
    cafc:	b341      	st.w      	r2, (r3, 0x4)
   Bit64u load;
   PCKStruct_TimerInfo info;
   PCKPStruct_TIMER ptimer;

   if ((timerid < 0) || (timerid > TIMERID_MAX))
    cafe:	1b02      	addi      	r3, sp, 8
    cb00:	9340      	ld.w      	r2, (r3, 0x0)
    cb02:	3303      	movi      	r3, 3      	//0x3
    cb04:	648c      	cmphs      	r3, r2
    cb06:	0804      	bt      	0xcb0e	//cb0e <CK_Timer_Start+0x1e>
   {
	return FAILURE;
    cb08:	3300      	movi      	r3, 0      	//0x0
    cb0a:	2b00      	subi      	r3, 1      	//0x1
    cb0c:	0469      	br      	0xcbde	//cbde <CK_Timer_Start+0xee>
   }

   info = &(CK_Timer_Table[timerid]);
    cb0e:	1b02      	addi      	r3, sp, 8
    cb10:	9360      	ld.w      	r3, (r3, 0x0)
    cb12:	4325      	lsli      	r1, r3, 5
    cb14:	1b06      	addi      	r3, sp, 24
    cb16:	1341      	lrw      	r2, 0x113a0	//113a0 <CK_Timer_Table>
    cb18:	5948      	addu      	r2, r1, r2
    cb1a:	b340      	st.w      	r2, (r3, 0x0)
   ptimer = info->addr;
    cb1c:	1b05      	addi      	r3, sp, 20
    cb1e:	1a06      	addi      	r2, sp, 24
    cb20:	9240      	ld.w      	r2, (r2, 0x0)
    cb22:	9241      	ld.w      	r2, (r2, 0x4)
    cb24:	b340      	st.w      	r2, (r3, 0x0)
   if(!(info->bopened))
    cb26:	1b06      	addi      	r3, sp, 24
    cb28:	9360      	ld.w      	r3, (r3, 0x0)
    cb2a:	9363      	ld.w      	r3, (r3, 0xc)
    cb2c:	e9230005 	bnez      	r3, 0xcb36	//cb36 <CK_Timer_Start+0x46>
   {
	return FAILURE;
    cb30:	3300      	movi      	r3, 0      	//0x0
    cb32:	2b00      	subi      	r3, 1      	//0x1
    cb34:	0455      	br      	0xcbde	//cbde <CK_Timer_Start+0xee>
   }

   load = (Bit64u)((APB_DEFAULT_FREQ / 1000000) * timeout);
    cb36:	1803      	addi      	r0, sp, 12
    cb38:	6cfb      	mov      	r3, sp
    cb3a:	9320      	ld.w      	r1, (r3, 0x0)
    cb3c:	9341      	ld.w      	r2, (r3, 0x4)
    cb3e:	6cc7      	mov      	r3, r1
    cb40:	6d0b      	mov      	r4, r2
    cb42:	c7c34856 	lsri      	r22, r3, 30
    cb46:	c4444833 	lsli      	r19, r4, 2
    cb4a:	c6762433 	or      	r19, r22, r19
    cb4e:	c4434832 	lsli      	r18, r3, 2
    cb52:	64cd      	cmplt      	r3, r3
    cb54:	c4320043 	addc      	r3, r18, r1
    cb58:	c4530044 	addc      	r4, r19, r2
    cb5c:	4b5e      	lsri      	r2, r3, 30
    cb5e:	c444482d 	lsli      	r13, r4, 2
    cb62:	6f48      	or      	r13, r2
    cb64:	c443482c 	lsli      	r12, r3, 2
    cb68:	64cd      	cmplt      	r3, r3
    cb6a:	60f1      	addc      	r3, r12
    cb6c:	6135      	addc      	r4, r13
    cb6e:	b060      	st.w      	r3, (r0, 0x0)
    cb70:	b081      	st.w      	r4, (r0, 0x4)
     /*  load time(us)  */

   //ptimer->TxLoadCount_H = load>>32;
   reg_direct_writel(load>>32,ptimer,TxLoadCount_H);
    cb72:	1b03      	addi      	r3, sp, 12
    cb74:	9361      	ld.w      	r3, (r3, 0x4)
    cb76:	3200      	movi      	r2, 0      	//0x0
    cb78:	c4434054 	lsr      	r20, r3, r2
    cb7c:	ea150000 	movi      	r21, 0      	//0x0
    cb80:	c4144822 	lsli      	r2, r20, 0
    cb84:	1b05      	addi      	r3, sp, 20
    cb86:	9360      	ld.w      	r3, (r3, 0x0)
    cb88:	2303      	addi      	r3, 4      	//0x4
    cb8a:	6c0b      	mov      	r0, r2
    cb8c:	6c4f      	mov      	r1, r3
    cb8e:	e3fffe9b 	bsr      	0xc8c4	//c8c4 <writel>
    cb92:	c4004820 	lsli      	r0, r0, 0
   //printf("load_h is %d \n",(Bit32u)(load>>32));
   //ptimer->TxLoadCount_L = load;
   reg_direct_writel(load,ptimer,TxLoadCount_L);
    cb96:	1b03      	addi      	r3, sp, 12
    cb98:	9340      	ld.w      	r2, (r3, 0x0)
    cb9a:	1b05      	addi      	r3, sp, 20
    cb9c:	9360      	ld.w      	r3, (r3, 0x0)
    cb9e:	6c0b      	mov      	r0, r2
    cba0:	6c4f      	mov      	r1, r3
    cba2:	e3fffe91 	bsr      	0xc8c4	//c8c4 <writel>
    cba6:	c4004820 	lsli      	r0, r0, 0
   //printf("load_l is %d \n",(Bit32u)load);
   info->timeout = timeout;
    cbaa:	1b06      	addi      	r3, sp, 24
    cbac:	9340      	ld.w      	r2, (r3, 0x0)
    cbae:	6cfb      	mov      	r3, sp
    cbb0:	9381      	ld.w      	r4, (r3, 0x4)
    cbb2:	9360      	ld.w      	r3, (r3, 0x0)
    cbb4:	b264      	st.w      	r3, (r2, 0x10)
    cbb6:	b285      	st.w      	r4, (r2, 0x14)
   /*in user-defined running mode*/
   //ptimer->TxControl |= CK_TIMER_TXCONTROL_MODE;
   reg_writel(CK_TIMER_TXCONTROL_MODE,ptimer,TxControl);
    cbb8:	1b05      	addi      	r3, sp, 20
    cbba:	9360      	ld.w      	r3, (r3, 0x0)
    cbbc:	230f      	addi      	r3, 16      	//0x10
    cbbe:	3002      	movi      	r0, 2      	//0x2
    cbc0:	6c4f      	mov      	r1, r3
    cbc2:	e3fffe8d 	bsr      	0xc8dc	//c8dc <dw_write>
    cbc6:	c4004820 	lsli      	r0, r0, 0
   /* enable the corresponding timer */
   //ptimer->TxControl |= CK_TIMER_TXCONTROL_ENABLE;
   reg_writel(CK_TIMER_TXCONTROL_ENABLE,ptimer,TxControl);
    cbca:	1b05      	addi      	r3, sp, 20
    cbcc:	9360      	ld.w      	r3, (r3, 0x0)
    cbce:	230f      	addi      	r3, 16      	//0x10
    cbd0:	3001      	movi      	r0, 1      	//0x1
    cbd2:	6c4f      	mov      	r1, r3
    cbd4:	e3fffe84 	bsr      	0xc8dc	//c8dc <dw_write>
    cbd8:	c4004820 	lsli      	r0, r0, 0
   return SUCCESS;
    cbdc:	3300      	movi      	r3, 0      	//0x0
}
    cbde:	6c0f      	mov      	r0, r3
    cbe0:	1407      	addi      	sp, sp, 28
    cbe2:	1491      	pop      	r4, r15

0000cbe4 <CK_Timer_Stop>:
 *
 * timerid: the mumber of the corresponding timer port;
 * stop_val: the count value when the timer stops
 */
Bit64u CK_Timer_Stop(CKEnum_Timer_Device timerid)
{
    cbe4:	14d3      	push      	r4-r6, r15
    cbe6:	1427      	subi      	sp, sp, 28
    cbe8:	6f3b      	mov      	r12, sp
    cbea:	dc0c2000 	st.w      	r0, (r12, 0x0)
   Bit64u stop_val,stop_val_H=0;
    cbee:	1805      	addi      	r0, sp, 20
    cbf0:	3100      	movi      	r1, 0      	//0x0
    cbf2:	3200      	movi      	r2, 0      	//0x0
    cbf4:	b020      	st.w      	r1, (r0, 0x0)
    cbf6:	b041      	st.w      	r2, (r0, 0x4)
   PCKStruct_TimerInfo info;
   PCKPStruct_TIMER ptimer;

   /* if the timer does not open,return failure */
   info = &(CK_Timer_Table[timerid]);
    cbf8:	6cbb      	mov      	r2, sp
    cbfa:	9240      	ld.w      	r2, (r2, 0x0)
    cbfc:	4205      	lsli      	r0, r2, 5
    cbfe:	1a04      	addi      	r2, sp, 16
    cc00:	1126      	lrw      	r1, 0x113a0	//113a0 <CK_Timer_Table>
    cc02:	5824      	addu      	r1, r0, r1
    cc04:	b220      	st.w      	r1, (r2, 0x0)
   if(!(info->bopened))
    cc06:	1a04      	addi      	r2, sp, 16
    cc08:	9240      	ld.w      	r2, (r2, 0x0)
    cc0a:	9243      	ld.w      	r2, (r2, 0xc)
    cc0c:	e9220007 	bnez      	r2, 0xcc1a	//cc1a <CK_Timer_Stop+0x36>
   {
	return FAILURE;
    cc10:	3300      	movi      	r3, 0      	//0x0
    cc12:	2b00      	subi      	r3, 1      	//0x1
    cc14:	3400      	movi      	r4, 0      	//0x0
    cc16:	2c00      	subi      	r4, 1      	//0x1
    cc18:	043b      	br      	0xcc8e	//cc8e <CK_Timer_Stop+0xaa>
   }

   ptimer = info->addr;
    cc1a:	1b03      	addi      	r3, sp, 12
    cc1c:	1a04      	addi      	r2, sp, 16
    cc1e:	9240      	ld.w      	r2, (r2, 0x0)
    cc20:	9241      	ld.w      	r2, (r2, 0x4)
    cc22:	b340      	st.w      	r2, (r3, 0x0)
   /* disable the timer*/
   //ptimer->TxControl &= ~CK_TIMER_TXCONTROL_ENABLE;
   reg_clearl(CK_TIMER_TXCONTROL_ENABLE,ptimer,TxControl);
    cc24:	1b03      	addi      	r3, sp, 12
    cc26:	9360      	ld.w      	r3, (r3, 0x0)
    cc28:	230f      	addi      	r3, 16      	//0x10
    cc2a:	3001      	movi      	r0, 1      	//0x1
    cc2c:	6c4f      	mov      	r1, r3
    cc2e:	e3fffe77 	bsr      	0xc91c	//c91c <dw_clear>
    cc32:	c4004820 	lsli      	r0, r0, 0
   //stop_val = ptimer->TxCurrentValue_L;
   //stop_val_H = ptimer->TxCurrentValue_H;
   stop_val = reg_readl(ptimer,TxCurrentValue_L);
    cc36:	1b03      	addi      	r3, sp, 12
    cc38:	9360      	ld.w      	r3, (r3, 0x0)
    cc3a:	2307      	addi      	r3, 8      	//0x8
    cc3c:	6c0f      	mov      	r0, r3
    cc3e:	e3fffe39 	bsr      	0xc8b0	//c8b0 <readl>
    cc42:	c4004820 	lsli      	r0, r0, 0
    cc46:	6c83      	mov      	r2, r0
    cc48:	1b01      	addi      	r3, sp, 4
    cc4a:	b340      	st.w      	r2, (r3, 0x0)
    cc4c:	3200      	movi      	r2, 0      	//0x0
    cc4e:	b341      	st.w      	r2, (r3, 0x4)
   stop_val_H = reg_readl(ptimer,TxCurrentValue_H);
    cc50:	1b03      	addi      	r3, sp, 12
    cc52:	9360      	ld.w      	r3, (r3, 0x0)
    cc54:	230b      	addi      	r3, 12      	//0xc
    cc56:	6c0f      	mov      	r0, r3
    cc58:	e3fffe2c 	bsr      	0xc8b0	//c8b0 <readl>
    cc5c:	c4004820 	lsli      	r0, r0, 0
    cc60:	6c83      	mov      	r2, r0
    cc62:	1b05      	addi      	r3, sp, 20
    cc64:	b340      	st.w      	r2, (r3, 0x0)
    cc66:	3200      	movi      	r2, 0      	//0x0
    cc68:	b341      	st.w      	r2, (r3, 0x4)
   stop_val = stop_val + (stop_val_H<<32);
    cc6a:	1b05      	addi      	r3, sp, 20
    cc6c:	9360      	ld.w      	r3, (r3, 0x0)
    cc6e:	3200      	movi      	r2, 0      	//0x0
    cc70:	c4434026 	lsl      	r6, r3, r2
    cc74:	3500      	movi      	r5, 0      	//0x0
    cc76:	1a01      	addi      	r2, sp, 4
    cc78:	1b01      	addi      	r3, sp, 4
    cc7a:	9381      	ld.w      	r4, (r3, 0x4)
    cc7c:	9360      	ld.w      	r3, (r3, 0x0)
    cc7e:	64cd      	cmplt      	r3, r3
    cc80:	60d5      	addc      	r3, r5
    cc82:	6119      	addc      	r4, r6
    cc84:	b260      	st.w      	r3, (r2, 0x0)
    cc86:	b281      	st.w      	r4, (r2, 0x4)
   return stop_val;
    cc88:	1b01      	addi      	r3, sp, 4
    cc8a:	9381      	ld.w      	r4, (r3, 0x4)
    cc8c:	9360      	ld.w      	r3, (r3, 0x0)
}
    cc8e:	6c0f      	mov      	r0, r3
    cc90:	6c53      	mov      	r1, r4
    cc92:	1407      	addi      	sp, sp, 28
    cc94:	1493      	pop      	r4-r6, r15
    cc96:	0000      	.short	0x0000
    cc98:	000113a0 	.long	0x000113a0
    cc9c:	0000c8c4 	.long	0x0000c8c4
    cca0:	0000c8dc 	.long	0x0000c8dc
    cca4:	0000c91c 	.long	0x0000c91c
    cca8:	0000c8b0 	.long	0x0000c8b0

0000ccac <CK_Timer_ClearIrqFlag>:
/*
 * clear a timer interrupt
 * by reading its End of Interrupt register(EOI)
 */
void  CK_Timer_ClearIrqFlag(CKEnum_Timer_Device timerid)
{
    ccac:	14d0      	push      	r15
    ccae:	1423      	subi      	sp, sp, 12
    ccb0:	6cfb      	mov      	r3, sp
    ccb2:	b300      	st.w      	r0, (r3, 0x0)
   PCKStruct_TimerInfo info;
   PCKPStruct_TIMER ptimer;

   info = &(CK_Timer_Table[timerid]);
    ccb4:	6cfb      	mov      	r3, sp
    ccb6:	9360      	ld.w      	r3, (r3, 0x0)
    ccb8:	4325      	lsli      	r1, r3, 5
    ccba:	1b02      	addi      	r3, sp, 8
    ccbc:	114e      	lrw      	r2, 0x113a0	//113a0 <CK_Timer_Table>
    ccbe:	5948      	addu      	r2, r1, r2
    ccc0:	b340      	st.w      	r2, (r3, 0x0)
   ptimer = info->addr ;
    ccc2:	1b01      	addi      	r3, sp, 4
    ccc4:	1a02      	addi      	r2, sp, 8
    ccc6:	9240      	ld.w      	r2, (r2, 0x0)
    ccc8:	9241      	ld.w      	r2, (r2, 0x4)
    ccca:	b340      	st.w      	r2, (r3, 0x0)
   //*((volatile Bit32u *)(&(ptimer->TxEOI)));
   reg_readl(ptimer,TxEOI);
    cccc:	1b01      	addi      	r3, sp, 4
    ccce:	9360      	ld.w      	r3, (r3, 0x0)
    ccd0:	2317      	addi      	r3, 24      	//0x18
    ccd2:	6c0f      	mov      	r0, r3
    ccd4:	e3fffdee 	bsr      	0xc8b0	//c8b0 <readl>
    ccd8:	c4004820 	lsli      	r0, r0, 0
}
    ccdc:	1403      	addi      	sp, sp, 12
    ccde:	1490      	pop      	r15

0000cce0 <CK_Timer_CurrentValue>:
 *
 * timerid: the mumber of the corresponding timer;
 * current_val: the current count-value
 */
Bit64u CK_Timer_CurrentValue(CKEnum_Timer_Device timerid)
{
    cce0:	14d2      	push      	r4-r5, r15
    cce2:	1427      	subi      	sp, sp, 28
    cce4:	6c7b      	mov      	r1, sp
    cce6:	b100      	st.w      	r0, (r1, 0x0)
   Bit64u current_val,current_val_H=0;
    cce8:	1905      	addi      	r1, sp, 20
    ccea:	3200      	movi      	r2, 0      	//0x0
    ccec:	3300      	movi      	r3, 0      	//0x0
    ccee:	b140      	st.w      	r2, (r1, 0x0)
    ccf0:	b161      	st.w      	r3, (r1, 0x4)
   PCKStruct_TimerInfo info;
   PCKPStruct_TIMER ptimer;

   info = &(CK_Timer_Table[timerid]);
    ccf2:	6cfb      	mov      	r3, sp
    ccf4:	9360      	ld.w      	r3, (r3, 0x0)
    ccf6:	4325      	lsli      	r1, r3, 5
    ccf8:	1b04      	addi      	r3, sp, 16
    ccfa:	105f      	lrw      	r2, 0x113a0	//113a0 <CK_Timer_Table>
    ccfc:	5948      	addu      	r2, r1, r2
    ccfe:	b340      	st.w      	r2, (r3, 0x0)
   ptimer = info->addr;
    cd00:	1b03      	addi      	r3, sp, 12
    cd02:	1a04      	addi      	r2, sp, 16
    cd04:	9240      	ld.w      	r2, (r2, 0x0)
    cd06:	9241      	ld.w      	r2, (r2, 0x4)
    cd08:	b340      	st.w      	r2, (r3, 0x0)
   //current_val = ptimer->TxCurrentValue_L;
   //current_val_H = ptimer->TxCurrentValue_H;
   current_val=reg_readl(ptimer,TxCurrentValue_L);
    cd0a:	1b03      	addi      	r3, sp, 12
    cd0c:	9360      	ld.w      	r3, (r3, 0x0)
    cd0e:	2307      	addi      	r3, 8      	//0x8
    cd10:	6c0f      	mov      	r0, r3
    cd12:	e3fffdcf 	bsr      	0xc8b0	//c8b0 <readl>
    cd16:	c4004820 	lsli      	r0, r0, 0
    cd1a:	6c83      	mov      	r2, r0
    cd1c:	1b01      	addi      	r3, sp, 4
    cd1e:	b340      	st.w      	r2, (r3, 0x0)
    cd20:	3200      	movi      	r2, 0      	//0x0
    cd22:	b341      	st.w      	r2, (r3, 0x4)
   current_val_H=reg_readl(ptimer,TxCurrentValue_H);
    cd24:	1b03      	addi      	r3, sp, 12
    cd26:	9360      	ld.w      	r3, (r3, 0x0)
    cd28:	230b      	addi      	r3, 12      	//0xc
    cd2a:	6c0f      	mov      	r0, r3
    cd2c:	e3fffdc2 	bsr      	0xc8b0	//c8b0 <readl>
    cd30:	c4004820 	lsli      	r0, r0, 0
    cd34:	6c83      	mov      	r2, r0
    cd36:	1b05      	addi      	r3, sp, 20
    cd38:	b340      	st.w      	r2, (r3, 0x0)
    cd3a:	3200      	movi      	r2, 0      	//0x0
    cd3c:	b341      	st.w      	r2, (r3, 0x4)
   current_val = current_val+(current_val_H<<32);
    cd3e:	1b05      	addi      	r3, sp, 20
    cd40:	9360      	ld.w      	r3, (r3, 0x0)
    cd42:	3200      	movi      	r2, 0      	//0x0
    cd44:	c4434025 	lsl      	r5, r3, r2
    cd48:	3400      	movi      	r4, 0      	//0x0
    cd4a:	1901      	addi      	r1, sp, 4
    cd4c:	1b01      	addi      	r3, sp, 4
    cd4e:	9340      	ld.w      	r2, (r3, 0x0)
    cd50:	9361      	ld.w      	r3, (r3, 0x4)
    cd52:	6731      	cmplt      	r12, r12
    cd54:	c444004c 	addc      	r12, r4, r2
    cd58:	c465004d 	addc      	r13, r5, r3
    cd5c:	6cf3      	mov      	r3, r12
    cd5e:	6d37      	mov      	r4, r13
    cd60:	b160      	st.w      	r3, (r1, 0x0)
    cd62:	b181      	st.w      	r4, (r1, 0x4)
   return current_val ;
    cd64:	1b01      	addi      	r3, sp, 4
    cd66:	9381      	ld.w      	r4, (r3, 0x4)
    cd68:	9360      	ld.w      	r3, (r3, 0x0)
}
    cd6a:	6c0f      	mov      	r0, r3
    cd6c:	6c53      	mov      	r1, r4
    cd6e:	1407      	addi      	sp, sp, 28
    cd70:	1492      	pop      	r4-r5, r15
    cd72:	0000      	.short	0x0000
    cd74:	000113a0 	.long	0x000113a0
    cd78:	0000c8b0 	.long	0x0000c8b0

0000cd7c <CK_Deactive_UartModule>:
 * Make all the uarts in the idle state;
 * this function should be called before
 * INTC module working;
 */
void CK_Deactive_UartModule()
{
    cd7c:	1422      	subi      	sp, sp, 8
   int i;
   CKStruct_UartInfo *info;
   
   for( i = 0; i < 1; i++)
    cd7e:	1b01      	addi      	r3, sp, 4
    cd80:	3200      	movi      	r2, 0      	//0x0
    cd82:	b340      	st.w      	r2, (r3, 0x0)
    cd84:	0421      	br      	0xcdc6	//cdc6 <CK_Deactive_UartModule+0x4a>
   {	   
       info = &(CK_Uart_Table[i]);
    cd86:	1b01      	addi      	r3, sp, 4
    cd88:	9340      	ld.w      	r2, (r3, 0x0)
    cd8a:	ea032054 	movi      	r3, 8276      	//0x2054
    cd8e:	c4628421 	mult      	r1, r2, r3
    cd92:	6cfb      	mov      	r3, sp
    cd94:	1353      	lrw      	r2, 0x11420	//11420 <CK_Uart_Table>
    cd96:	5948      	addu      	r2, r1, r2
    cd98:	b340      	st.w      	r2, (r3, 0x0)
	   info->addr[CK_UART_LCR] = 0x83;
    cd9a:	6cfb      	mov      	r3, sp
    cd9c:	9360      	ld.w      	r3, (r3, 0x0)
    cd9e:	9361      	ld.w      	r3, (r3, 0x4)
    cda0:	230b      	addi      	r3, 12      	//0xc
    cda2:	3283      	movi      	r2, 131      	//0x83
    cda4:	b340      	st.w      	r2, (r3, 0x0)
	   info->addr[CK_UART_DLL] = 0x1;
    cda6:	6cfb      	mov      	r3, sp
    cda8:	9360      	ld.w      	r3, (r3, 0x0)
    cdaa:	9361      	ld.w      	r3, (r3, 0x4)
    cdac:	3201      	movi      	r2, 1      	//0x1
    cdae:	b340      	st.w      	r2, (r3, 0x0)
	   info->addr[CK_UART_DLH] = 0x0;
    cdb0:	6cfb      	mov      	r3, sp
    cdb2:	9360      	ld.w      	r3, (r3, 0x0)
    cdb4:	9361      	ld.w      	r3, (r3, 0x4)
    cdb6:	2303      	addi      	r3, 4      	//0x4
    cdb8:	3200      	movi      	r2, 0      	//0x0
    cdba:	b340      	st.w      	r2, (r3, 0x0)
void CK_Deactive_UartModule()
{
   int i;
   CKStruct_UartInfo *info;
   
   for( i = 0; i < 1; i++)
    cdbc:	1b01      	addi      	r3, sp, 4
    cdbe:	1a01      	addi      	r2, sp, 4
    cdc0:	9240      	ld.w      	r2, (r2, 0x0)
    cdc2:	2200      	addi      	r2, 1      	//0x1
    cdc4:	b340      	st.w      	r2, (r3, 0x0)
    cdc6:	1b01      	addi      	r3, sp, 4
    cdc8:	9360      	ld.w      	r3, (r3, 0x0)
    cdca:	e963ffde 	blsz      	r3, 0xcd86	//cd86 <CK_Deactive_UartModule+0xa>
	   info->addr[CK_UART_LCR] = 0x83;
	   info->addr[CK_UART_DLL] = 0x1;
	   info->addr[CK_UART_DLH] = 0x0;
   }

}
    cdce:	1402      	addi      	sp, sp, 8
    cdd0:	783c      	rts
	...

0000cdd4 <CK_Uart_Init>:
 * number of stop bits: 1 stop bit
 * query mode
 * return: SUCCESS
 */
CK_INT32 CK_Uart_Init( CK_Uart_Device uartid)
{
    cdd4:	14d0      	push      	r15
    cdd6:	1421      	subi      	sp, sp, 4
    cdd8:	6cfb      	mov      	r3, sp
    cdda:	b300      	st.w      	r0, (r3, 0x0)
  CK_Uart_ChangeBaudrate(uartid,B115200);
    cddc:	6cfb      	mov      	r3, sp
    cdde:	9300      	ld.w      	r0, (r3, 0x0)
    cde0:	31e1      	movi      	r1, 225      	//0xe1
    cde2:	4129      	lsli      	r1, r1, 9
    cde4:	e00000dc 	bsr      	0xcf9c	//cf9c <CK_Uart_ChangeBaudrate>
    cde8:	c4004820 	lsli      	r0, r0, 0
  CK_Uart_SetParity(uartid,NONE);
    cdec:	6cfb      	mov      	r3, sp
    cdee:	9300      	ld.w      	r0, (r3, 0x0)
    cdf0:	3102      	movi      	r1, 2      	//0x2
    cdf2:	e0000177 	bsr      	0xd0e0	//d0e0 <CK_Uart_SetParity>
    cdf6:	c4004820 	lsli      	r0, r0, 0
  CK_Uart_SetWordSize(uartid,LCR_WORD_SIZE_8);
    cdfa:	6cfb      	mov      	r3, sp
    cdfc:	9300      	ld.w      	r0, (r3, 0x0)
    cdfe:	3103      	movi      	r1, 3      	//0x3
    ce00:	e0000252 	bsr      	0xd2a4	//d2a4 <CK_Uart_SetWordSize>
    ce04:	c4004820 	lsli      	r0, r0, 0
  CK_Uart_SetStopBit(uartid,LCR_STOP_BIT_1);
    ce08:	6cfb      	mov      	r3, sp
    ce0a:	9300      	ld.w      	r0, (r3, 0x0)
    ce0c:	3100      	movi      	r1, 0      	//0x0
    ce0e:	e00001ef 	bsr      	0xd1ec	//d1ec <CK_Uart_SetStopBit>
    ce12:	c4004820 	lsli      	r0, r0, 0
  CK_Uart_SetRXMode(uartid,TRUE);
    ce16:	6cfb      	mov      	r3, sp
    ce18:	9300      	ld.w      	r0, (r3, 0x0)
    ce1a:	3101      	movi      	r1, 1      	//0x1
    ce1c:	e000032e 	bsr      	0xd478	//d478 <CK_Uart_SetRXMode>
    ce20:	c4004820 	lsli      	r0, r0, 0
  CK_Uart_SetTXMode(uartid,TRUE);
    ce24:	6cfb      	mov      	r3, sp
    ce26:	9300      	ld.w      	r0, (r3, 0x0)
    ce28:	3101      	movi      	r1, 1      	//0x1
    ce2a:	e00002d1 	bsr      	0xd3cc	//d3cc <CK_Uart_SetTXMode>
    ce2e:	c4004820 	lsli      	r0, r0, 0
  return SUCCESS;
    ce32:	3300      	movi      	r3, 0      	//0x0
}
    ce34:	6c0f      	mov      	r0, r3
    ce36:	1401      	addi      	sp, sp, 4
    ce38:	1490      	pop      	r15
	...

0000ce3c <CK_Uart_Open>:
 * intilize irqhandler ;
 * register irqhandler
 * return: SUCCESS or FAILURE
 */
CK_INT32 CK_Uart_Open(CK_Uart_Device uartid,void (*handler)(CK_INT8 error))
{
    ce3c:	14d0      	push      	r15
    ce3e:	1423      	subi      	sp, sp, 12
    ce40:	1b01      	addi      	r3, sp, 4
    ce42:	b300      	st.w      	r0, (r3, 0x0)
    ce44:	6cfb      	mov      	r3, sp
    ce46:	b320      	st.w      	r1, (r3, 0x0)
  CKStruct_UartInfo *info;
 // PCKStruct_IRQHandler irqhander;
  info = &(CK_Uart_Table[uartid]);
    ce48:	1b01      	addi      	r3, sp, 4
    ce4a:	9340      	ld.w      	r2, (r3, 0x0)
    ce4c:	ea032054 	movi      	r3, 8276      	//0x2054
    ce50:	c4628421 	mult      	r1, r2, r3
    ce54:	1b02      	addi      	r3, sp, 8
    ce56:	1243      	lrw      	r2, 0x11420	//11420 <CK_Uart_Table>
    ce58:	5948      	addu      	r2, r1, r2
    ce5a:	b340      	st.w      	r2, (r3, 0x0)
  if ((uartid < 0) || (uartid >= UARTID_MAX))
    ce5c:	1b01      	addi      	r3, sp, 4
    ce5e:	9360      	ld.w      	r3, (r3, 0x0)
    ce60:	e9030005 	bez      	r3, 0xce6a	//ce6a <CK_Uart_Open+0x2e>
  {
    return FAILURE;
    ce64:	3300      	movi      	r3, 0      	//0x0
    ce66:	2b00      	subi      	r3, 1      	//0x1
    ce68:	0444      	br      	0xcef0	//cef0 <CK_Uart_Open+0xb4>
  }
  
  if (info->bopened)
    ce6a:	1b02      	addi      	r3, sp, 8
    ce6c:	9360      	ld.w      	r3, (r3, 0x0)
    ce6e:	9363      	ld.w      	r3, (r3, 0xc)
    ce70:	e9030005 	bez      	r3, 0xce7a	//ce7a <CK_Uart_Open+0x3e>
  {
    return FAILURE;
    ce74:	3300      	movi      	r3, 0      	//0x0
    ce76:	2b00      	subi      	r3, 1      	//0x1
    ce78:	043c      	br      	0xcef0	//cef0 <CK_Uart_Open+0xb4>
  }
  CK_Uart_Init(uartid);
    ce7a:	1b01      	addi      	r3, sp, 4
    ce7c:	9300      	ld.w      	r0, (r3, 0x0)
    ce7e:	e3ffffab 	bsr      	0xcdd4	//cdd4 <CK_Uart_Init>
    ce82:	c4004820 	lsli      	r0, r0, 0
  
  
  /* intilize the sending and receiving buffers */
  CK_CircleBuffer_Init(
    &(info->txcirclebuffer), info->txbuffer, CK_UART_TXBUFFERSIZE);
    ce86:	1b02      	addi      	r3, sp, 8
    ce88:	9360      	ld.w      	r3, (r3, 0x0)
    ce8a:	ea01202c 	movi      	r1, 8236      	//0x202c
    ce8e:	5b44      	addu      	r2, r3, r1
  }
  CK_Uart_Init(uartid);
  
  
  /* intilize the sending and receiving buffers */
  CK_CircleBuffer_Init(
    ce90:	1b02      	addi      	r3, sp, 8
    ce92:	9360      	ld.w      	r3, (r3, 0x0)
    ce94:	232b      	addi      	r3, 44      	//0x2c
    ce96:	6c0b      	mov      	r0, r2
    ce98:	6c4f      	mov      	r1, r3
    ce9a:	3280      	movi      	r2, 128      	//0x80
    ce9c:	4245      	lsli      	r2, r2, 5
    ce9e:	e0000e37 	bsr      	0xeb0c	//eb0c <CK_CircleBuffer_Init>
    cea2:	c4004820 	lsli      	r0, r0, 0
    &(info->txcirclebuffer), info->txbuffer, CK_UART_TXBUFFERSIZE);
  CK_CircleBuffer_Init(
    &(info->rxcirclebuffer), info->rxbuffer, CK_UART_RXBUFFERSIZE);
    cea6:	1b02      	addi      	r3, sp, 8
    cea8:	9360      	ld.w      	r3, (r3, 0x0)
    ceaa:	ea01203c 	movi      	r1, 8252      	//0x203c
    ceae:	5b44      	addu      	r2, r3, r1
  
  
  /* intilize the sending and receiving buffers */
  CK_CircleBuffer_Init(
    &(info->txcirclebuffer), info->txbuffer, CK_UART_TXBUFFERSIZE);
  CK_CircleBuffer_Init(
    ceb0:	1b02      	addi      	r3, sp, 8
    ceb2:	9360      	ld.w      	r3, (r3, 0x0)
    ceb4:	ea01102c 	movi      	r1, 4140      	//0x102c
    ceb8:	5b64      	addu      	r3, r3, r1
    ceba:	6c0b      	mov      	r0, r2
    cebc:	6c4f      	mov      	r1, r3
    cebe:	3280      	movi      	r2, 128      	//0x80
    cec0:	4245      	lsli      	r2, r2, 5
    cec2:	e0000e25 	bsr      	0xeb0c	//eb0c <CK_CircleBuffer_Init>
    cec6:	c4004820 	lsli      	r0, r0, 0
    &(info->rxcirclebuffer), info->rxbuffer, CK_UART_RXBUFFERSIZE);
  info->handler = handler;
    ceca:	1b02      	addi      	r3, sp, 8
    cecc:	9360      	ld.w      	r3, (r3, 0x0)
    cece:	6cbb      	mov      	r2, sp
    ced0:	9240      	ld.w      	r2, (r2, 0x0)
    ced2:	b344      	st.w      	r2, (r3, 0x10)

  /* register uart isr */
  CK_INTC_RequestIrq(info->irq, CK_Uart_Interrupt);
    ced4:	1b02      	addi      	r3, sp, 8
    ced6:	9360      	ld.w      	r3, (r3, 0x0)
    ced8:	9362      	ld.w      	r3, (r3, 0x8)
    ceda:	6c0f      	mov      	r0, r3
    cedc:	112a      	lrw      	r1, 0xd7bc	//d7bc <CK_Uart_Interrupt>
    cede:	e3ffcb8d 	bsr      	0x65f8	//65f8 <CK_INTC_RequestIrq>
    cee2:	c4004820 	lsli      	r0, r0, 0
  info->bopened = TRUE;
    cee6:	1b02      	addi      	r3, sp, 8
    cee8:	9360      	ld.w      	r3, (r3, 0x0)
    ceea:	3201      	movi      	r2, 1      	//0x1
    ceec:	b343      	st.w      	r2, (r3, 0xc)
  return SUCCESS;
    ceee:	3300      	movi      	r3, 0      	//0x0
}
    cef0:	6c0f      	mov      	r0, r3
    cef2:	1403      	addi      	sp, sp, 12
    cef4:	1490      	pop      	r15
	...

0000cef8 <CK_Uart_Close>:
 * clear the callback function
 * free the irq
 * return: SUCCESS or FAILURE
 */
 CK_INT32 CK_Uart_Close(CK_Uart_Device uartid) 
{
    cef8:	14d0      	push      	r15
    cefa:	1422      	subi      	sp, sp, 8
    cefc:	6cfb      	mov      	r3, sp
    cefe:	b300      	st.w      	r0, (r3, 0x0)
  CKStruct_UartInfo *info;
  
  info = &(CK_Uart_Table[uartid]);	
    cf00:	6cfb      	mov      	r3, sp
    cf02:	9340      	ld.w      	r2, (r3, 0x0)
    cf04:	ea032054 	movi      	r3, 8276      	//0x2054
    cf08:	c4628421 	mult      	r1, r2, r3
    cf0c:	1b01      	addi      	r3, sp, 4
    cf0e:	1055      	lrw      	r2, 0x11420	//11420 <CK_Uart_Table>
    cf10:	5948      	addu      	r2, r1, r2
    cf12:	b340      	st.w      	r2, (r3, 0x0)
  if ((uartid >= 0) && (uartid < UARTID_MAX) && (info->bopened))
    cf14:	6cfb      	mov      	r3, sp
    cf16:	9360      	ld.w      	r3, (r3, 0x0)
    cf18:	e923003c 	bnez      	r3, 0xcf90	//cf90 <CK_Uart_Close+0x98>
    cf1c:	1b01      	addi      	r3, sp, 4
    cf1e:	9360      	ld.w      	r3, (r3, 0x0)
    cf20:	9363      	ld.w      	r3, (r3, 0xc)
    cf22:	e9030037 	bez      	r3, 0xcf90	//cf90 <CK_Uart_Close+0x98>
  {
    /* Stop UART interrupt. */
    /* Clear TX & RX circle buffer. */
    info->addr[CK_UART_IER] &= ~IER_RDA_INT_ENABLE;
    cf26:	1b01      	addi      	r3, sp, 4
    cf28:	9360      	ld.w      	r3, (r3, 0x0)
    cf2a:	9361      	ld.w      	r3, (r3, 0x4)
    cf2c:	2303      	addi      	r3, 4      	//0x4
    cf2e:	1a01      	addi      	r2, sp, 4
    cf30:	9240      	ld.w      	r2, (r2, 0x0)
    cf32:	9241      	ld.w      	r2, (r2, 0x4)
    cf34:	2203      	addi      	r2, 4      	//0x4
    cf36:	9240      	ld.w      	r2, (r2, 0x0)
    cf38:	3a80      	bclri      	r2, 0
    cf3a:	b340      	st.w      	r2, (r3, 0x0)
    info->handler = NULL;
    cf3c:	1b01      	addi      	r3, sp, 4
    cf3e:	9360      	ld.w      	r3, (r3, 0x0)
    cf40:	3200      	movi      	r2, 0      	//0x0
    cf42:	b344      	st.w      	r2, (r3, 0x10)
    CK_INTC_FreeIrq(info->irq);
    cf44:	1b01      	addi      	r3, sp, 4
    cf46:	9360      	ld.w      	r3, (r3, 0x0)
    cf48:	9362      	ld.w      	r3, (r3, 0x8)
    cf4a:	6c0f      	mov      	r0, r3
    cf4c:	e3ffcbe6 	bsr      	0x6718	//6718 <CK_INTC_FreeIrq>
    cf50:	c4004820 	lsli      	r0, r0, 0
    info->bopened = 0;
    cf54:	1b01      	addi      	r3, sp, 4
    cf56:	9360      	ld.w      	r3, (r3, 0x0)
    cf58:	3200      	movi      	r2, 0      	//0x0
    cf5a:	b343      	st.w      	r2, (r3, 0xc)
    return SUCCESS;
    cf5c:	3300      	movi      	r3, 0      	//0x0
    cf5e:	041b      	br      	0xcf94	//cf94 <CK_Uart_Close+0x9c>
    cf60:	00011420 	.long	0x00011420
    cf64:	0000cf9c 	.long	0x0000cf9c
    cf68:	0000d0e0 	.long	0x0000d0e0
    cf6c:	0000d2a4 	.long	0x0000d2a4
    cf70:	0000d1ec 	.long	0x0000d1ec
    cf74:	0000d478 	.long	0x0000d478
    cf78:	0000d3cc 	.long	0x0000d3cc
    cf7c:	0000cdd4 	.long	0x0000cdd4
    cf80:	0000eb0c 	.long	0x0000eb0c
    cf84:	0000d7bc 	.long	0x0000d7bc
    cf88:	000065f8 	.long	0x000065f8
    cf8c:	00006718 	.long	0x00006718
  }
  return FAILURE;
    cf90:	3300      	movi      	r3, 0      	//0x0
    cf92:	2b00      	subi      	r3, 1      	//0x1
}  
    cf94:	6c0f      	mov      	r0, r3
    cf96:	1402      	addi      	sp, sp, 8
    cf98:	1490      	pop      	r15
	...

0000cf9c <CK_Uart_ChangeBaudrate>:

CK_INT32 CK_Uart_ChangeBaudrate(
  CK_Uart_Device uartid, 
  CK_Uart_Baudrate baudrate
)
{
    cf9c:	1425      	subi      	sp, sp, 20
    cf9e:	1b01      	addi      	r3, sp, 4
    cfa0:	b300      	st.w      	r0, (r3, 0x0)
    cfa2:	6cfb      	mov      	r3, sp
    cfa4:	b320      	st.w      	r1, (r3, 0x0)
  CK_INT32 divisor;		
  CK_INT32 timecount;
  CKStruct_UartInfo *info;
  
  timecount=0; 	
    cfa6:	1b04      	addi      	r3, sp, 16
    cfa8:	3200      	movi      	r2, 0      	//0x0
    cfaa:	b340      	st.w      	r2, (r3, 0x0)
  info = &(CK_Uart_Table[uartid]);	
    cfac:	1b01      	addi      	r3, sp, 4
    cfae:	9340      	ld.w      	r2, (r3, 0x0)
    cfb0:	ea032054 	movi      	r3, 8276      	//0x2054
    cfb4:	c4628421 	mult      	r1, r2, r3
    cfb8:	1b03      	addi      	r3, sp, 12
    cfba:	134c      	lrw      	r2, 0x11420	//11420 <CK_Uart_Table>
    cfbc:	5948      	addu      	r2, r1, r2
    cfbe:	b340      	st.w      	r2, (r3, 0x0)
  /*the baudrates that uart surported as follows:*/  
  if((baudrate == B4800) || (baudrate == B9600) ||
    cfc0:	6cfb      	mov      	r3, sp
    cfc2:	9360      	ld.w      	r3, (r3, 0x0)
    cfc4:	eb4312c0 	cmpnei      	r3, 4800      	//0x12c0
    cfc8:	0c2c      	bf      	0xd020	//d020 <CK_Uart_ChangeBaudrate+0x84>
    cfca:	6cfb      	mov      	r3, sp
    cfcc:	9360      	ld.w      	r3, (r3, 0x0)
    cfce:	eb432580 	cmpnei      	r3, 9600      	//0x2580
    cfd2:	0c29      	bf      	0xd024	//d024 <CK_Uart_ChangeBaudrate+0x88>
    cfd4:	6cfb      	mov      	r3, sp
    cfd6:	9360      	ld.w      	r3, (r3, 0x0)
    cfd8:	eb433840 	cmpnei      	r3, 14400      	//0x3840
    cfdc:	0c26      	bf      	0xd028	//d028 <CK_Uart_ChangeBaudrate+0x8c>
     (baudrate == B14400) || (baudrate == B19200) ||
    cfde:	6cfb      	mov      	r3, sp
    cfe0:	9360      	ld.w      	r3, (r3, 0x0)
    cfe2:	eb434b00 	cmpnei      	r3, 19200      	//0x4b00
    cfe6:	0c23      	bf      	0xd02c	//d02c <CK_Uart_ChangeBaudrate+0x90>
    cfe8:	6cfb      	mov      	r3, sp
    cfea:	9360      	ld.w      	r3, (r3, 0x0)
    cfec:	eb439600 	cmpnei      	r3, 38400      	//0x9600
    cff0:	0c20      	bf      	0xd030	//d030 <CK_Uart_ChangeBaudrate+0x94>
     (baudrate == B38400) || (baudrate == B56000) ||
    cff2:	6cfb      	mov      	r3, sp
    cff4:	9360      	ld.w      	r3, (r3, 0x0)
    cff6:	eb43dac0 	cmpnei      	r3, 56000      	//0xdac0
    cffa:	0c1d      	bf      	0xd034	//d034 <CK_Uart_ChangeBaudrate+0x98>
    cffc:	6cfb      	mov      	r3, sp
    cffe:	9360      	ld.w      	r3, (r3, 0x0)
    d000:	eb43e100 	cmpnei      	r3, 57600      	//0xe100
    d004:	0c1a      	bf      	0xd038	//d038 <CK_Uart_ChangeBaudrate+0x9c>
     (baudrate == B57600) || (baudrate == B115200))           
    d006:	6cfb      	mov      	r3, sp
    d008:	9340      	ld.w      	r2, (r3, 0x0)
    d00a:	33e1      	movi      	r3, 225      	//0xe1
    d00c:	4369      	lsli      	r3, r3, 9
    d00e:	64ca      	cmpne      	r2, r3
    d010:	0863      	bt      	0xd0d6	//d0d6 <CK_Uart_ChangeBaudrate+0x13a>
  {
    /*
     * DLH and DLL may be accessed when the UART is not 
     * busy(USR[0]=0) and the DLAB bit(LCR[7]) is set.
     */
    while((info->addr[CK_UART_USR] & USR_UART_BUSY)
    d012:	0414      	br      	0xd03a	//d03a <CK_Uart_ChangeBaudrate+0x9e>
  	  && (timecount < UART_BUSY_TIMEOUT))
    {
      timecount++;
    d014:	1b04      	addi      	r3, sp, 16
    d016:	1a04      	addi      	r2, sp, 16
    d018:	9240      	ld.w      	r2, (r2, 0x0)
    d01a:	2200      	addi      	r2, 1      	//0x1
    d01c:	b340      	st.w      	r2, (r3, 0x0)
    d01e:	040e      	br      	0xd03a	//d03a <CK_Uart_ChangeBaudrate+0x9e>
  {
    /*
     * DLH and DLL may be accessed when the UART is not 
     * busy(USR[0]=0) and the DLAB bit(LCR[7]) is set.
     */
    while((info->addr[CK_UART_USR] & USR_UART_BUSY)
    d020:	6c00      	or      	r0, r0
    d022:	040c      	br      	0xd03a	//d03a <CK_Uart_ChangeBaudrate+0x9e>
    d024:	6c00      	or      	r0, r0
    d026:	040a      	br      	0xd03a	//d03a <CK_Uart_ChangeBaudrate+0x9e>
    d028:	6c00      	or      	r0, r0
    d02a:	0408      	br      	0xd03a	//d03a <CK_Uart_ChangeBaudrate+0x9e>
    d02c:	6c00      	or      	r0, r0
    d02e:	0406      	br      	0xd03a	//d03a <CK_Uart_ChangeBaudrate+0x9e>
    d030:	6c00      	or      	r0, r0
    d032:	0404      	br      	0xd03a	//d03a <CK_Uart_ChangeBaudrate+0x9e>
    d034:	6c00      	or      	r0, r0
    d036:	0402      	br      	0xd03a	//d03a <CK_Uart_ChangeBaudrate+0x9e>
    d038:	6c00      	or      	r0, r0
    d03a:	1b03      	addi      	r3, sp, 12
    d03c:	9360      	ld.w      	r3, (r3, 0x0)
    d03e:	9361      	ld.w      	r3, (r3, 0x4)
    d040:	237b      	addi      	r3, 124      	//0x7c
    d042:	9360      	ld.w      	r3, (r3, 0x0)
    d044:	e4632001 	andi      	r3, r3, 1
    d048:	74cc      	zextb      	r3, r3
    d04a:	e9030007 	bez      	r3, 0xd058	//d058 <CK_Uart_ChangeBaudrate+0xbc>
  	  && (timecount < UART_BUSY_TIMEOUT))
    d04e:	1b04      	addi      	r3, sp, 16
    d050:	9340      	ld.w      	r2, (r3, 0x0)
    d052:	1267      	lrw      	r3, 0xf423f	//f423f <__DTOR_END__+0xe076f>
    d054:	648d      	cmplt      	r3, r2
    d056:	0fdf      	bf      	0xd014	//d014 <CK_Uart_ChangeBaudrate+0x78>
    {
      timecount++;
    }
    if(timecount >= UART_BUSY_TIMEOUT)
    d058:	1b04      	addi      	r3, sp, 16
    d05a:	9340      	ld.w      	r2, (r3, 0x0)
    d05c:	1264      	lrw      	r3, 0xf423f	//f423f <__DTOR_END__+0xe076f>
    d05e:	648d      	cmplt      	r3, r2
    d060:	0c04      	bf      	0xd068	//d068 <CK_Uart_ChangeBaudrate+0xcc>
    {
      return FAILURE;
    d062:	3300      	movi      	r3, 0      	//0x0
    d064:	2b00      	subi      	r3, 1      	//0x1
    d066:	043a      	br      	0xd0da	//d0da <CK_Uart_ChangeBaudrate+0x13e>
    }
    else
    {
      /*baudrate=(seriak clock freq)/(16*divisor).*/
      divisor = ((UART_DEFAULT_FREQ / baudrate) >> 4);
    d068:	6cfb      	mov      	r3, sp
    d06a:	1242      	lrw      	r2, 0x17d7840	//17d7840 <__stack+0x13d7848>
    d06c:	9360      	ld.w      	r3, (r3, 0x0)
    d06e:	c4628023 	divu      	r3, r2, r3
    d072:	4b44      	lsri      	r2, r3, 4
    d074:	1b02      	addi      	r3, sp, 8
    d076:	b340      	st.w      	r2, (r3, 0x0)
      info->addr[CK_UART_LCR] |= LCR_SET_DLAB;
    d078:	1b03      	addi      	r3, sp, 12
    d07a:	9360      	ld.w      	r3, (r3, 0x0)
    d07c:	9361      	ld.w      	r3, (r3, 0x4)
    d07e:	230b      	addi      	r3, 12      	//0xc
    d080:	1a03      	addi      	r2, sp, 12
    d082:	9240      	ld.w      	r2, (r2, 0x0)
    d084:	9241      	ld.w      	r2, (r2, 0x4)
    d086:	220b      	addi      	r2, 12      	//0xc
    d088:	9240      	ld.w      	r2, (r2, 0x0)
    d08a:	3aa7      	bseti      	r2, 7
    d08c:	b340      	st.w      	r2, (r3, 0x0)
      /* DLL and DLH is lower 8-bits and higher 8-bits of divisor.*/
      info->addr[CK_UART_DLL] = divisor & 0xff;         
    d08e:	1b03      	addi      	r3, sp, 12
    d090:	9360      	ld.w      	r3, (r3, 0x0)
    d092:	9361      	ld.w      	r3, (r3, 0x4)
    d094:	1a02      	addi      	r2, sp, 8
    d096:	9240      	ld.w      	r2, (r2, 0x0)
    d098:	e44220ff 	andi      	r2, r2, 255
    d09c:	b340      	st.w      	r2, (r3, 0x0)
      info->addr[CK_UART_DLH] = (divisor >> 8) & 0xff;     
    d09e:	1b03      	addi      	r3, sp, 12
    d0a0:	9360      	ld.w      	r3, (r3, 0x0)
    d0a2:	9361      	ld.w      	r3, (r3, 0x4)
    d0a4:	2303      	addi      	r3, 4      	//0x4
    d0a6:	1a02      	addi      	r2, sp, 8
    d0a8:	9240      	ld.w      	r2, (r2, 0x0)
    d0aa:	5248      	asri      	r2, r2, 8
    d0ac:	e44220ff 	andi      	r2, r2, 255
    d0b0:	b340      	st.w      	r2, (r3, 0x0)
      /* 
       * The DLAB must be cleared after the baudrate is setted
       * to access other registers. 
       */    
      info->addr[CK_UART_LCR] &= (~LCR_SET_DLAB);
    d0b2:	1b03      	addi      	r3, sp, 12
    d0b4:	9360      	ld.w      	r3, (r3, 0x0)
    d0b6:	9361      	ld.w      	r3, (r3, 0x4)
    d0b8:	230b      	addi      	r3, 12      	//0xc
    d0ba:	1a03      	addi      	r2, sp, 12
    d0bc:	9240      	ld.w      	r2, (r2, 0x0)
    d0be:	9241      	ld.w      	r2, (r2, 0x4)
    d0c0:	220b      	addi      	r2, 12      	//0xc
    d0c2:	9240      	ld.w      	r2, (r2, 0x0)
    d0c4:	3a87      	bclri      	r2, 7
    d0c6:	b340      	st.w      	r2, (r3, 0x0)
      info->baudrate = baudrate;
    d0c8:	1b03      	addi      	r3, sp, 12
    d0ca:	9360      	ld.w      	r3, (r3, 0x0)
    d0cc:	6cbb      	mov      	r2, sp
    d0ce:	9240      	ld.w      	r2, (r2, 0x0)
    d0d0:	b345      	st.w      	r2, (r3, 0x14)
      return SUCCESS;
    d0d2:	3300      	movi      	r3, 0      	//0x0
    d0d4:	0403      	br      	0xd0da	//d0da <CK_Uart_ChangeBaudrate+0x13e>
      }
    }
    return FAILURE;
    d0d6:	3300      	movi      	r3, 0      	//0x0
    d0d8:	2b00      	subi      	r3, 1      	//0x1
}
    d0da:	6c0f      	mov      	r0, r3
    d0dc:	1405      	addi      	sp, sp, 20
    d0de:	783c      	rts

0000d0e0 <CK_Uart_SetParity>:

CK_INT32 CK_Uart_SetParity(
  CK_Uart_Device uartid, 
  CK_Uart_Parity parity
)
{
    d0e0:	1424      	subi      	sp, sp, 16
    d0e2:	1b01      	addi      	r3, sp, 4
    d0e4:	b300      	st.w      	r0, (r3, 0x0)
    d0e6:	6cfb      	mov      	r3, sp
    d0e8:	b320      	st.w      	r1, (r3, 0x0)
  CKStruct_UartInfo *info;
	
  info = &(CK_Uart_Table[uartid]);	
    d0ea:	1b01      	addi      	r3, sp, 4
    d0ec:	9340      	ld.w      	r2, (r3, 0x0)
    d0ee:	ea032054 	movi      	r3, 8276      	//0x2054
    d0f2:	c4628421 	mult      	r1, r2, r3
    d0f6:	1b02      	addi      	r3, sp, 8
    d0f8:	105c      	lrw      	r2, 0x11420	//11420 <CK_Uart_Table>
    d0fa:	5948      	addu      	r2, r1, r2
    d0fc:	b340      	st.w      	r2, (r3, 0x0)
  CK_INT32 timecount;
  timecount = 0;
    d0fe:	1b03      	addi      	r3, sp, 12
    d100:	3200      	movi      	r2, 0      	//0x0
    d102:	b340      	st.w      	r2, (r3, 0x0)
  /* PEN bit(LCR[3]) is writeable when the UART is not busy(USR[0]=0).*/
  while((info->addr[CK_UART_USR] & USR_UART_BUSY) &&
    d104:	0406      	br      	0xd110	//d110 <CK_Uart_SetParity+0x30>
        (timecount < UART_BUSY_TIMEOUT))
  {
    timecount++;
    d106:	1b03      	addi      	r3, sp, 12
    d108:	1a03      	addi      	r2, sp, 12
    d10a:	9240      	ld.w      	r2, (r2, 0x0)
    d10c:	2200      	addi      	r2, 1      	//0x1
    d10e:	b340      	st.w      	r2, (r3, 0x0)
	
  info = &(CK_Uart_Table[uartid]);	
  CK_INT32 timecount;
  timecount = 0;
  /* PEN bit(LCR[3]) is writeable when the UART is not busy(USR[0]=0).*/
  while((info->addr[CK_UART_USR] & USR_UART_BUSY) &&
    d110:	1b02      	addi      	r3, sp, 8
    d112:	9360      	ld.w      	r3, (r3, 0x0)
    d114:	9361      	ld.w      	r3, (r3, 0x4)
    d116:	237b      	addi      	r3, 124      	//0x7c
    d118:	9360      	ld.w      	r3, (r3, 0x0)
    d11a:	e4632001 	andi      	r3, r3, 1
    d11e:	74cc      	zextb      	r3, r3
    d120:	e9030007 	bez      	r3, 0xd12e	//d12e <CK_Uart_SetParity+0x4e>
    d124:	1b03      	addi      	r3, sp, 12
    d126:	9340      	ld.w      	r2, (r3, 0x0)
    d128:	1071      	lrw      	r3, 0xf423f	//f423f <__DTOR_END__+0xe076f>
    d12a:	648d      	cmplt      	r3, r2
    d12c:	0fed      	bf      	0xd106	//d106 <CK_Uart_SetParity+0x26>
        (timecount < UART_BUSY_TIMEOUT))
  {
    timecount++;
  }
  if(timecount >= UART_BUSY_TIMEOUT)
    d12e:	1b03      	addi      	r3, sp, 12
    d130:	9340      	ld.w      	r2, (r3, 0x0)
    d132:	106f      	lrw      	r3, 0xf423f	//f423f <__DTOR_END__+0xe076f>
    d134:	648d      	cmplt      	r3, r2
    d136:	0c04      	bf      	0xd13e	//d13e <CK_Uart_SetParity+0x5e>
  {
    return FAILURE;
    d138:	3300      	movi      	r3, 0      	//0x0
    d13a:	2b00      	subi      	r3, 1      	//0x1
    d13c:	0454      	br      	0xd1e4	//d1e4 <CK_Uart_SetParity+0x104>
  }
  else
  {
    switch(parity)
    d13e:	6cfb      	mov      	r3, sp
    d140:	9360      	ld.w      	r3, (r3, 0x0)
    d142:	3b41      	cmpnei      	r3, 1
    d144:	0c30      	bf      	0xd1a4	//d1a4 <CK_Uart_SetParity+0xc4>
    d146:	3b00      	cmphsi      	r3, 1      	//0x1
    d148:	0c16      	bf      	0xd174	//d174 <CK_Uart_SetParity+0x94>
    d14a:	3b42      	cmpnei      	r3, 2
    d14c:	0843      	bt      	0xd1d2	//d1d2 <CK_Uart_SetParity+0xf2>
    {
      case NONE:     
	        /*CLear the PEN bit(LCR[3]) to disable parity.*/
	        info->addr[CK_UART_LCR] &= (~LCR_PARITY_ENABLE);
    d14e:	1b02      	addi      	r3, sp, 8
    d150:	9360      	ld.w      	r3, (r3, 0x0)
    d152:	9361      	ld.w      	r3, (r3, 0x4)
    d154:	230b      	addi      	r3, 12      	//0xc
    d156:	1a02      	addi      	r2, sp, 8
    d158:	9240      	ld.w      	r2, (r2, 0x0)
    d15a:	9241      	ld.w      	r2, (r2, 0x4)
    d15c:	220b      	addi      	r2, 12      	//0xc
    d15e:	9240      	ld.w      	r2, (r2, 0x0)
    d160:	3a83      	bclri      	r2, 3
    d162:	b340      	st.w      	r2, (r3, 0x0)
	  	break;
    d164:	043a      	br      	0xd1d8	//d1d8 <CK_Uart_SetParity+0xf8>
    d166:	0000      	.short	0x0000
    d168:	00011420 	.long	0x00011420
    d16c:	000f423f 	.long	0x000f423f
    d170:	017d7840 	.long	0x017d7840
					
      case ODD:
		/* Set PEN and clear EPS(LCR[4]) to set the ODD parity. */  
		info->addr[CK_UART_LCR] |= LCR_PARITY_ENABLE;
    d174:	1b02      	addi      	r3, sp, 8
    d176:	9360      	ld.w      	r3, (r3, 0x0)
    d178:	9361      	ld.w      	r3, (r3, 0x4)
    d17a:	230b      	addi      	r3, 12      	//0xc
    d17c:	1a02      	addi      	r2, sp, 8
    d17e:	9240      	ld.w      	r2, (r2, 0x0)
    d180:	9241      	ld.w      	r2, (r2, 0x4)
    d182:	220b      	addi      	r2, 12      	//0xc
    d184:	9240      	ld.w      	r2, (r2, 0x0)
    d186:	3aa3      	bseti      	r2, 3
    d188:	b340      	st.w      	r2, (r3, 0x0)
		info->addr[CK_UART_LCR] &= LCR_PARITY_ODD; 
    d18a:	1b02      	addi      	r3, sp, 8
    d18c:	9360      	ld.w      	r3, (r3, 0x0)
    d18e:	9361      	ld.w      	r3, (r3, 0x4)
    d190:	230b      	addi      	r3, 12      	//0xc
    d192:	1a02      	addi      	r2, sp, 8
    d194:	9240      	ld.w      	r2, (r2, 0x0)
    d196:	9241      	ld.w      	r2, (r2, 0x4)
    d198:	220b      	addi      	r2, 12      	//0xc
    d19a:	9240      	ld.w      	r2, (r2, 0x0)
    d19c:	e44220ef 	andi      	r2, r2, 239
    d1a0:	b340      	st.w      	r2, (r3, 0x0)
	  	break;
    d1a2:	041b      	br      	0xd1d8	//d1d8 <CK_Uart_SetParity+0xf8>
				  
      case EVEN:
		/* Set PEN and EPS(LCR[4]) to set the EVEN parity.*/
		info->addr[CK_UART_LCR] |= LCR_PARITY_ENABLE;
    d1a4:	1b02      	addi      	r3, sp, 8
    d1a6:	9360      	ld.w      	r3, (r3, 0x0)
    d1a8:	9361      	ld.w      	r3, (r3, 0x4)
    d1aa:	230b      	addi      	r3, 12      	//0xc
    d1ac:	1a02      	addi      	r2, sp, 8
    d1ae:	9240      	ld.w      	r2, (r2, 0x0)
    d1b0:	9241      	ld.w      	r2, (r2, 0x4)
    d1b2:	220b      	addi      	r2, 12      	//0xc
    d1b4:	9240      	ld.w      	r2, (r2, 0x0)
    d1b6:	3aa3      	bseti      	r2, 3
    d1b8:	b340      	st.w      	r2, (r3, 0x0)
		info->addr[CK_UART_LCR] |= LCR_PARITY_EVEN;
    d1ba:	1b02      	addi      	r3, sp, 8
    d1bc:	9360      	ld.w      	r3, (r3, 0x0)
    d1be:	9361      	ld.w      	r3, (r3, 0x4)
    d1c0:	230b      	addi      	r3, 12      	//0xc
    d1c2:	1a02      	addi      	r2, sp, 8
    d1c4:	9240      	ld.w      	r2, (r2, 0x0)
    d1c6:	9241      	ld.w      	r2, (r2, 0x4)
    d1c8:	220b      	addi      	r2, 12      	//0xc
    d1ca:	9240      	ld.w      	r2, (r2, 0x0)
    d1cc:	3aa4      	bseti      	r2, 4
    d1ce:	b340      	st.w      	r2, (r3, 0x0)
		break;
    d1d0:	0404      	br      	0xd1d8	//d1d8 <CK_Uart_SetParity+0xf8>
				             
      default:
	        return FAILURE;
    d1d2:	3300      	movi      	r3, 0      	//0x0
    d1d4:	2b00      	subi      	r3, 1      	//0x1
    d1d6:	0407      	br      	0xd1e4	//d1e4 <CK_Uart_SetParity+0x104>
		break;				 
    }
    info->parity = parity;
    d1d8:	1b02      	addi      	r3, sp, 8
    d1da:	9360      	ld.w      	r3, (r3, 0x0)
    d1dc:	6cbb      	mov      	r2, sp
    d1de:	9240      	ld.w      	r2, (r2, 0x0)
    d1e0:	b346      	st.w      	r2, (r3, 0x18)
    return SUCCESS;
    d1e2:	3300      	movi      	r3, 0      	//0x0
  }
}
    d1e4:	6c0f      	mov      	r0, r3
    d1e6:	1404      	addi      	sp, sp, 16
    d1e8:	783c      	rts
	...

0000d1ec <CK_Uart_SetStopBit>:

CK_INT32 CK_Uart_SetStopBit(
  CK_Uart_Device uartid,  
  CK_Uart_StopBit stopbit
)
{
    d1ec:	1424      	subi      	sp, sp, 16
    d1ee:	1b01      	addi      	r3, sp, 4
    d1f0:	b300      	st.w      	r0, (r3, 0x0)
    d1f2:	6cfb      	mov      	r3, sp
    d1f4:	b320      	st.w      	r1, (r3, 0x0)
  CKStruct_UartInfo *info;
	
  info = &(CK_Uart_Table[uartid]);	
    d1f6:	1b01      	addi      	r3, sp, 4
    d1f8:	9340      	ld.w      	r2, (r3, 0x0)
    d1fa:	ea032054 	movi      	r3, 8276      	//0x2054
    d1fe:	c4628421 	mult      	r1, r2, r3
    d202:	1b02      	addi      	r3, sp, 8
    d204:	1345      	lrw      	r2, 0x11420	//11420 <CK_Uart_Table>
    d206:	5948      	addu      	r2, r1, r2
    d208:	b340      	st.w      	r2, (r3, 0x0)
  CK_INT32 timecount;
  timecount = 0;
    d20a:	1b03      	addi      	r3, sp, 12
    d20c:	3200      	movi      	r2, 0      	//0x0
    d20e:	b340      	st.w      	r2, (r3, 0x0)
  /* PEN bit(LCR[3]) is writeable when the UART is not busy(USR[0]=0).*/
  while((info->addr[CK_UART_USR] & USR_UART_BUSY) && 
    d210:	0406      	br      	0xd21c	//d21c <CK_Uart_SetStopBit+0x30>
        (timecount < UART_BUSY_TIMEOUT))
  {
    timecount++;
    d212:	1b03      	addi      	r3, sp, 12
    d214:	1a03      	addi      	r2, sp, 12
    d216:	9240      	ld.w      	r2, (r2, 0x0)
    d218:	2200      	addi      	r2, 1      	//0x1
    d21a:	b340      	st.w      	r2, (r3, 0x0)
	
  info = &(CK_Uart_Table[uartid]);	
  CK_INT32 timecount;
  timecount = 0;
  /* PEN bit(LCR[3]) is writeable when the UART is not busy(USR[0]=0).*/
  while((info->addr[CK_UART_USR] & USR_UART_BUSY) && 
    d21c:	1b02      	addi      	r3, sp, 8
    d21e:	9360      	ld.w      	r3, (r3, 0x0)
    d220:	9361      	ld.w      	r3, (r3, 0x4)
    d222:	237b      	addi      	r3, 124      	//0x7c
    d224:	9360      	ld.w      	r3, (r3, 0x0)
    d226:	e4632001 	andi      	r3, r3, 1
    d22a:	74cc      	zextb      	r3, r3
    d22c:	e9030007 	bez      	r3, 0xd23a	//d23a <CK_Uart_SetStopBit+0x4e>
    d230:	1b03      	addi      	r3, sp, 12
    d232:	9340      	ld.w      	r2, (r3, 0x0)
    d234:	127a      	lrw      	r3, 0xf423f	//f423f <__DTOR_END__+0xe076f>
    d236:	648d      	cmplt      	r3, r2
    d238:	0fed      	bf      	0xd212	//d212 <CK_Uart_SetStopBit+0x26>
        (timecount < UART_BUSY_TIMEOUT))
  {
    timecount++;
  }
  if(timecount >= UART_BUSY_TIMEOUT)
    d23a:	1b03      	addi      	r3, sp, 12
    d23c:	9340      	ld.w      	r2, (r3, 0x0)
    d23e:	1278      	lrw      	r3, 0xf423f	//f423f <__DTOR_END__+0xe076f>
    d240:	648d      	cmplt      	r3, r2
    d242:	0c04      	bf      	0xd24a	//d24a <CK_Uart_SetStopBit+0x5e>
  {
    return FAILURE;
    d244:	3300      	movi      	r3, 0      	//0x0
    d246:	2b00      	subi      	r3, 1      	//0x1
    d248:	042b      	br      	0xd29e	//d29e <CK_Uart_SetStopBit+0xb2>
  }
  else
  {
    switch(info->stop)
    d24a:	1b02      	addi      	r3, sp, 8
    d24c:	9360      	ld.w      	r3, (r3, 0x0)
    d24e:	9368      	ld.w      	r3, (r3, 0x20)
    d250:	e9030005 	bez      	r3, 0xd25a	//d25a <CK_Uart_SetStopBit+0x6e>
    d254:	3b41      	cmpnei      	r3, 1
    d256:	0c0f      	bf      	0xd274	//d274 <CK_Uart_SetStopBit+0x88>
    d258:	041a      	br      	0xd28c	//d28c <CK_Uart_SetStopBit+0xa0>
    {
      case LCR_STOP_BIT_1:
        /* Clear the STOP bit to set 1 stop bit*/
        info->addr[CK_UART_LCR] &= LCR_STOP_BIT1;
    d25a:	1b02      	addi      	r3, sp, 8
    d25c:	9360      	ld.w      	r3, (r3, 0x0)
    d25e:	9361      	ld.w      	r3, (r3, 0x4)
    d260:	230b      	addi      	r3, 12      	//0xc
    d262:	1a02      	addi      	r2, sp, 8
    d264:	9240      	ld.w      	r2, (r2, 0x0)
    d266:	9241      	ld.w      	r2, (r2, 0x4)
    d268:	220b      	addi      	r2, 12      	//0xc
    d26a:	9240      	ld.w      	r2, (r2, 0x0)
    d26c:	e44220fb 	andi      	r2, r2, 251
    d270:	b340      	st.w      	r2, (r3, 0x0)
        break;
    d272:	0410      	br      	0xd292	//d292 <CK_Uart_SetStopBit+0xa6>
      case LCR_STOP_BIT_2:
        /* 
         * If the STOP bit is set "1",we'd gotten 1.5 stop  
         * bits when DLS(LCR[1:0]) is zero, else 2 stop bits.
         */
         info->addr[CK_UART_LCR] |= LCR_STOP_BIT2;
    d274:	1b02      	addi      	r3, sp, 8
    d276:	9360      	ld.w      	r3, (r3, 0x0)
    d278:	9361      	ld.w      	r3, (r3, 0x4)
    d27a:	230b      	addi      	r3, 12      	//0xc
    d27c:	1a02      	addi      	r2, sp, 8
    d27e:	9240      	ld.w      	r2, (r2, 0x0)
    d280:	9241      	ld.w      	r2, (r2, 0x4)
    d282:	220b      	addi      	r2, 12      	//0xc
    d284:	9240      	ld.w      	r2, (r2, 0x0)
    d286:	3aa2      	bseti      	r2, 2
    d288:	b340      	st.w      	r2, (r3, 0x0)
         break;
    d28a:	0404      	br      	0xd292	//d292 <CK_Uart_SetStopBit+0xa6>
				
      default:
	return FAILURE;
    d28c:	3300      	movi      	r3, 0      	//0x0
    d28e:	2b00      	subi      	r3, 1      	//0x1
    d290:	0407      	br      	0xd29e	//d29e <CK_Uart_SetStopBit+0xb2>
        break;
					
    }
  }
  info->stop = stopbit;
    d292:	1b02      	addi      	r3, sp, 8
    d294:	9360      	ld.w      	r3, (r3, 0x0)
    d296:	6cbb      	mov      	r2, sp
    d298:	9240      	ld.w      	r2, (r2, 0x0)
    d29a:	b348      	st.w      	r2, (r3, 0x20)
  return SUCCESS;
    d29c:	3300      	movi      	r3, 0      	//0x0
}
    d29e:	6c0f      	mov      	r0, r3
    d2a0:	1404      	addi      	sp, sp, 16
    d2a2:	783c      	rts

0000d2a4 <CK_Uart_SetWordSize>:
*/

CK_INT32 CK_Uart_SetWordSize(
  CK_Uart_Device uartid, 
  CK_Uart_WordSize wordsize)
{
    d2a4:	1424      	subi      	sp, sp, 16
    d2a6:	1b01      	addi      	r3, sp, 4
    d2a8:	b300      	st.w      	r0, (r3, 0x0)
    d2aa:	6cfb      	mov      	r3, sp
    d2ac:	b320      	st.w      	r1, (r3, 0x0)
  CKStruct_UartInfo *info;
  int timecount=0;
    d2ae:	1b03      	addi      	r3, sp, 12
    d2b0:	3200      	movi      	r2, 0      	//0x0
    d2b2:	b340      	st.w      	r2, (r3, 0x0)

  info = &(CK_Uart_Table[uartid]);	
    d2b4:	1b01      	addi      	r3, sp, 4
    d2b6:	9340      	ld.w      	r2, (r3, 0x0)
    d2b8:	ea032054 	movi      	r3, 8276      	//0x2054
    d2bc:	c4628421 	mult      	r1, r2, r3
    d2c0:	1b02      	addi      	r3, sp, 8
    d2c2:	1156      	lrw      	r2, 0x11420	//11420 <CK_Uart_Table>
    d2c4:	5948      	addu      	r2, r1, r2
    d2c6:	b340      	st.w      	r2, (r3, 0x0)
  /* DLS(LCR[1:0]) is writeable when the UART is not busy(USR[0]=0).*/
  while((info->addr[CK_UART_USR] & USR_UART_BUSY) &&
    d2c8:	0406      	br      	0xd2d4	//d2d4 <CK_Uart_SetWordSize+0x30>
        (timecount < UART_BUSY_TIMEOUT))
  {
    timecount++;
    d2ca:	1b03      	addi      	r3, sp, 12
    d2cc:	1a03      	addi      	r2, sp, 12
    d2ce:	9240      	ld.w      	r2, (r2, 0x0)
    d2d0:	2200      	addi      	r2, 1      	//0x1
    d2d2:	b340      	st.w      	r2, (r3, 0x0)
  CKStruct_UartInfo *info;
  int timecount=0;

  info = &(CK_Uart_Table[uartid]);	
  /* DLS(LCR[1:0]) is writeable when the UART is not busy(USR[0]=0).*/
  while((info->addr[CK_UART_USR] & USR_UART_BUSY) &&
    d2d4:	1b02      	addi      	r3, sp, 8
    d2d6:	9360      	ld.w      	r3, (r3, 0x0)
    d2d8:	9361      	ld.w      	r3, (r3, 0x4)
    d2da:	237b      	addi      	r3, 124      	//0x7c
    d2dc:	9360      	ld.w      	r3, (r3, 0x0)
    d2de:	e4632001 	andi      	r3, r3, 1
    d2e2:	74cc      	zextb      	r3, r3
    d2e4:	e9030007 	bez      	r3, 0xd2f2	//d2f2 <CK_Uart_SetWordSize+0x4e>
    d2e8:	1b03      	addi      	r3, sp, 12
    d2ea:	9340      	ld.w      	r2, (r3, 0x0)
    d2ec:	116c      	lrw      	r3, 0xf423f	//f423f <__DTOR_END__+0xe076f>
    d2ee:	648d      	cmplt      	r3, r2
    d2f0:	0fed      	bf      	0xd2ca	//d2ca <CK_Uart_SetWordSize+0x26>
        (timecount < UART_BUSY_TIMEOUT))
  {
    timecount++;
  }
  if(timecount >= UART_BUSY_TIMEOUT)
    d2f2:	1b03      	addi      	r3, sp, 12
    d2f4:	9340      	ld.w      	r2, (r3, 0x0)
    d2f6:	116a      	lrw      	r3, 0xf423f	//f423f <__DTOR_END__+0xe076f>
    d2f8:	648d      	cmplt      	r3, r2
    d2fa:	0c04      	bf      	0xd302	//d302 <CK_Uart_SetWordSize+0x5e>
  {
    return FAILURE;
    d2fc:	3300      	movi      	r3, 0      	//0x0
    d2fe:	2b00      	subi      	r3, 1      	//0x1
    d300:	0463      	br      	0xd3c6	//d3c6 <CK_Uart_SetWordSize+0x122>
     *	  00 -- 5 bits
     *		01 -- 6 bits
     *		10 -- 7 bits
     *		11 -- 8 bits
     */
    timecount = 0;
    d302:	1b03      	addi      	r3, sp, 12
    d304:	3200      	movi      	r2, 0      	//0x0
    d306:	b340      	st.w      	r2, (r3, 0x0)
    switch(wordsize)
    d308:	6cfb      	mov      	r3, sp
    d30a:	9360      	ld.w      	r3, (r3, 0x0)
    d30c:	3b41      	cmpnei      	r3, 1
    d30e:	0c15      	bf      	0xd338	//d338 <CK_Uart_SetWordSize+0x94>
    d310:	3b00      	cmphsi      	r3, 1      	//0x1
    d312:	0c06      	bf      	0xd31e	//d31e <CK_Uart_SetWordSize+0x7a>
    d314:	3b42      	cmpnei      	r3, 2
    d316:	0c29      	bf      	0xd368	//d368 <CK_Uart_SetWordSize+0xc4>
    d318:	3b43      	cmpnei      	r3, 3
    d31a:	0c43      	bf      	0xd3a0	//d3a0 <CK_Uart_SetWordSize+0xfc>
      case WORD_SIZE_8:
        info->addr[CK_UART_LCR]|= LCR_WORD_SIZE_8;
        break;
               				
      default:
        break;
    d31c:	044f      	br      	0xd3ba	//d3ba <CK_Uart_SetWordSize+0x116>
     */
    timecount = 0;
    switch(wordsize)
    {
      case WORD_SIZE_5:
        info->addr[CK_UART_LCR] &= LCR_WORD_SIZE_5;
    d31e:	1b02      	addi      	r3, sp, 8
    d320:	9360      	ld.w      	r3, (r3, 0x0)
    d322:	9361      	ld.w      	r3, (r3, 0x4)
    d324:	230b      	addi      	r3, 12      	//0xc
    d326:	1a02      	addi      	r2, sp, 8
    d328:	9240      	ld.w      	r2, (r2, 0x0)
    d32a:	9241      	ld.w      	r2, (r2, 0x4)
    d32c:	220b      	addi      	r2, 12      	//0xc
    d32e:	9240      	ld.w      	r2, (r2, 0x0)
    d330:	e44220fc 	andi      	r2, r2, 252
    d334:	b340      	st.w      	r2, (r3, 0x0)
        break;
    d336:	0442      	br      	0xd3ba	//d3ba <CK_Uart_SetWordSize+0x116>
				
      case WORD_SIZE_6:
        info->addr[CK_UART_LCR] &= 0xfd;
    d338:	1b02      	addi      	r3, sp, 8
    d33a:	9360      	ld.w      	r3, (r3, 0x0)
    d33c:	9361      	ld.w      	r3, (r3, 0x4)
    d33e:	230b      	addi      	r3, 12      	//0xc
    d340:	1a02      	addi      	r2, sp, 8
    d342:	9240      	ld.w      	r2, (r2, 0x0)
    d344:	9241      	ld.w      	r2, (r2, 0x4)
    d346:	220b      	addi      	r2, 12      	//0xc
    d348:	9240      	ld.w      	r2, (r2, 0x0)
    d34a:	e44220fd 	andi      	r2, r2, 253
    d34e:	b340      	st.w      	r2, (r3, 0x0)
        info->addr[CK_UART_LCR] |= LCR_WORD_SIZE_6;
    d350:	1b02      	addi      	r3, sp, 8
    d352:	9360      	ld.w      	r3, (r3, 0x0)
    d354:	9361      	ld.w      	r3, (r3, 0x4)
    d356:	230b      	addi      	r3, 12      	//0xc
    d358:	1a02      	addi      	r2, sp, 8
    d35a:	9240      	ld.w      	r2, (r2, 0x0)
    d35c:	9241      	ld.w      	r2, (r2, 0x4)
    d35e:	220b      	addi      	r2, 12      	//0xc
    d360:	9240      	ld.w      	r2, (r2, 0x0)
    d362:	3aa0      	bseti      	r2, 0
    d364:	b340      	st.w      	r2, (r3, 0x0)
        break;
    d366:	042a      	br      	0xd3ba	//d3ba <CK_Uart_SetWordSize+0x116>
				
      case WORD_SIZE_7:
        info->addr[CK_UART_LCR] &= 0xfe;
    d368:	1b02      	addi      	r3, sp, 8
    d36a:	9360      	ld.w      	r3, (r3, 0x0)
    d36c:	9361      	ld.w      	r3, (r3, 0x4)
    d36e:	230b      	addi      	r3, 12      	//0xc
    d370:	1a02      	addi      	r2, sp, 8
    d372:	9240      	ld.w      	r2, (r2, 0x0)
    d374:	9241      	ld.w      	r2, (r2, 0x4)
    d376:	220b      	addi      	r2, 12      	//0xc
    d378:	9240      	ld.w      	r2, (r2, 0x0)
    d37a:	e44220fe 	andi      	r2, r2, 254
    d37e:	b340      	st.w      	r2, (r3, 0x0)
        info->addr[CK_UART_LCR] |= LCR_WORD_SIZE_7;
    d380:	1b02      	addi      	r3, sp, 8
    d382:	9360      	ld.w      	r3, (r3, 0x0)
    d384:	9361      	ld.w      	r3, (r3, 0x4)
    d386:	230b      	addi      	r3, 12      	//0xc
    d388:	1a02      	addi      	r2, sp, 8
    d38a:	9240      	ld.w      	r2, (r2, 0x0)
    d38c:	9241      	ld.w      	r2, (r2, 0x4)
    d38e:	220b      	addi      	r2, 12      	//0xc
    d390:	9240      	ld.w      	r2, (r2, 0x0)
    d392:	3aa1      	bseti      	r2, 1
    d394:	b340      	st.w      	r2, (r3, 0x0)
        break;
    d396:	0412      	br      	0xd3ba	//d3ba <CK_Uart_SetWordSize+0x116>
    d398:	00011420 	.long	0x00011420
    d39c:	000f423f 	.long	0x000f423f
               				
      case WORD_SIZE_8:
        info->addr[CK_UART_LCR]|= LCR_WORD_SIZE_8;
    d3a0:	1b02      	addi      	r3, sp, 8
    d3a2:	9360      	ld.w      	r3, (r3, 0x0)
    d3a4:	9361      	ld.w      	r3, (r3, 0x4)
    d3a6:	230b      	addi      	r3, 12      	//0xc
    d3a8:	1a02      	addi      	r2, sp, 8
    d3aa:	9240      	ld.w      	r2, (r2, 0x0)
    d3ac:	9241      	ld.w      	r2, (r2, 0x4)
    d3ae:	220b      	addi      	r2, 12      	//0xc
    d3b0:	9240      	ld.w      	r2, (r2, 0x0)
    d3b2:	ec420003 	ori      	r2, r2, 3
    d3b6:	b340      	st.w      	r2, (r3, 0x0)
        break;
    d3b8:	6c00      	or      	r0, r0
               				
      default:
        break;
    }			
  }
  info->word = wordsize;
    d3ba:	1b02      	addi      	r3, sp, 8
    d3bc:	9360      	ld.w      	r3, (r3, 0x0)
    d3be:	6cbb      	mov      	r2, sp
    d3c0:	9240      	ld.w      	r2, (r2, 0x0)
    d3c2:	b347      	st.w      	r2, (r3, 0x1c)
  return SUCCESS;
    d3c4:	3300      	movi      	r3, 0      	//0x0
}
    d3c6:	6c0f      	mov      	r0, r3
    d3c8:	1404      	addi      	sp, sp, 16
    d3ca:	783c      	rts

0000d3cc <CK_Uart_SetTXMode>:
 *  inerrupt mode
 * return: SUCCESS or FAILURE
*/

CK_INT32 CK_Uart_SetTXMode(CK_Uart_Device uartid, BOOL bQuery)
{
    d3cc:	1424      	subi      	sp, sp, 16
    d3ce:	1b01      	addi      	r3, sp, 4
    d3d0:	b300      	st.w      	r0, (r3, 0x0)
    d3d2:	6cfb      	mov      	r3, sp
    d3d4:	b320      	st.w      	r1, (r3, 0x0)
  CKStruct_UartInfo *info;
	
  info = &(CK_Uart_Table[uartid]);	
    d3d6:	1b01      	addi      	r3, sp, 4
    d3d8:	9340      	ld.w      	r2, (r3, 0x0)
    d3da:	ea032054 	movi      	r3, 8276      	//0x2054
    d3de:	c4628421 	mult      	r1, r2, r3
    d3e2:	1b02      	addi      	r3, sp, 8
    d3e4:	1254      	lrw      	r2, 0x11420	//11420 <CK_Uart_Table>
    d3e6:	5948      	addu      	r2, r1, r2
    d3e8:	b340      	st.w      	r2, (r3, 0x0)
  CK_INT32 timecount;
  timecount = 0;
    d3ea:	1b03      	addi      	r3, sp, 12
    d3ec:	3200      	movi      	r2, 0      	//0x0
    d3ee:	b340      	st.w      	r2, (r3, 0x0)
  while((info->addr[CK_UART_USR] & USR_UART_BUSY) && 
    d3f0:	0406      	br      	0xd3fc	//d3fc <CK_Uart_SetTXMode+0x30>
        (timecount < UART_BUSY_TIMEOUT))
  {
    timecount++;
    d3f2:	1b03      	addi      	r3, sp, 12
    d3f4:	1a03      	addi      	r2, sp, 12
    d3f6:	9240      	ld.w      	r2, (r2, 0x0)
    d3f8:	2200      	addi      	r2, 1      	//0x1
    d3fa:	b340      	st.w      	r2, (r3, 0x0)
  CKStruct_UartInfo *info;
	
  info = &(CK_Uart_Table[uartid]);	
  CK_INT32 timecount;
  timecount = 0;
  while((info->addr[CK_UART_USR] & USR_UART_BUSY) && 
    d3fc:	1b02      	addi      	r3, sp, 8
    d3fe:	9360      	ld.w      	r3, (r3, 0x0)
    d400:	9361      	ld.w      	r3, (r3, 0x4)
    d402:	237b      	addi      	r3, 124      	//0x7c
    d404:	9360      	ld.w      	r3, (r3, 0x0)
    d406:	e4632001 	andi      	r3, r3, 1
    d40a:	74cc      	zextb      	r3, r3
    d40c:	e9030007 	bez      	r3, 0xd41a	//d41a <CK_Uart_SetTXMode+0x4e>
    d410:	1b03      	addi      	r3, sp, 12
    d412:	9340      	ld.w      	r2, (r3, 0x0)
    d414:	1269      	lrw      	r3, 0xf423f	//f423f <__DTOR_END__+0xe076f>
    d416:	648d      	cmplt      	r3, r2
    d418:	0fed      	bf      	0xd3f2	//d3f2 <CK_Uart_SetTXMode+0x26>
        (timecount < UART_BUSY_TIMEOUT))
  {
    timecount++;
  }
  if(timecount >= UART_BUSY_TIMEOUT)
    d41a:	1b03      	addi      	r3, sp, 12
    d41c:	9340      	ld.w      	r2, (r3, 0x0)
    d41e:	1267      	lrw      	r3, 0xf423f	//f423f <__DTOR_END__+0xe076f>
    d420:	648d      	cmplt      	r3, r2
    d422:	0c04      	bf      	0xd42a	//d42a <CK_Uart_SetTXMode+0x5e>
  {
    return FAILURE;
    d424:	3300      	movi      	r3, 0      	//0x0
    d426:	2b00      	subi      	r3, 1      	//0x1
    d428:	0425      	br      	0xd472	//d472 <CK_Uart_SetTXMode+0xa6>
  }
  else
  {
    if(bQuery)
    d42a:	6cfb      	mov      	r3, sp
    d42c:	9360      	ld.w      	r3, (r3, 0x0)
    d42e:	e9030012 	bez      	r3, 0xd452	//d452 <CK_Uart_SetTXMode+0x86>
    {
      /* When query mode, disable the Transmit Holding Register Empty
       * Interrupt. To do this, we clear the ETBEI bit(IER[1]).
       */
      info->addr[CK_UART_IER] &= (~IER_THRE_INT_ENABLE);
    d432:	1b02      	addi      	r3, sp, 8
    d434:	9360      	ld.w      	r3, (r3, 0x0)
    d436:	9361      	ld.w      	r3, (r3, 0x4)
    d438:	2303      	addi      	r3, 4      	//0x4
    d43a:	1a02      	addi      	r2, sp, 8
    d43c:	9240      	ld.w      	r2, (r2, 0x0)
    d43e:	9241      	ld.w      	r2, (r2, 0x4)
    d440:	2203      	addi      	r2, 4      	//0x4
    d442:	9240      	ld.w      	r2, (r2, 0x0)
    d444:	3a81      	bclri      	r2, 1
    d446:	b340      	st.w      	r2, (r3, 0x0)
      /* Refresh the uart info: transmit mode - query.*/
      info->btxquery = TRUE;
    d448:	1b02      	addi      	r3, sp, 8
    d44a:	9360      	ld.w      	r3, (r3, 0x0)
    d44c:	3201      	movi      	r2, 1      	//0x1
    d44e:	b349      	st.w      	r2, (r3, 0x24)
    d450:	0410      	br      	0xd470	//d470 <CK_Uart_SetTXMode+0xa4>
    else
    {
      /* When interrupt mode, inable the Transmit Holding Register 
       * Empty Interrupt. To do this, we set the ETBEI bit(IER[1]).
       */
      info->addr[CK_UART_IER] |= IER_THRE_INT_ENABLE;
    d452:	1b02      	addi      	r3, sp, 8
    d454:	9360      	ld.w      	r3, (r3, 0x0)
    d456:	9361      	ld.w      	r3, (r3, 0x4)
    d458:	2303      	addi      	r3, 4      	//0x4
    d45a:	1a02      	addi      	r2, sp, 8
    d45c:	9240      	ld.w      	r2, (r2, 0x0)
    d45e:	9241      	ld.w      	r2, (r2, 0x4)
    d460:	2203      	addi      	r2, 4      	//0x4
    d462:	9240      	ld.w      	r2, (r2, 0x0)
    d464:	3aa1      	bseti      	r2, 1
    d466:	b340      	st.w      	r2, (r3, 0x0)
      /* Refresh the uart info: transmit mode - interrupt.*/
      info->btxquery = FALSE;
    d468:	1b02      	addi      	r3, sp, 8
    d46a:	9360      	ld.w      	r3, (r3, 0x0)
    d46c:	3200      	movi      	r2, 0      	//0x0
    d46e:	b349      	st.w      	r2, (r3, 0x24)
    }
  }
  return SUCCESS;
    d470:	3300      	movi      	r3, 0      	//0x0
}
    d472:	6c0f      	mov      	r0, r3
    d474:	1404      	addi      	sp, sp, 16
    d476:	783c      	rts

0000d478 <CK_Uart_SetRXMode>:
 *  interrupt mode
 * return: SUCCESS or FAILURE

*/
CK_INT32 CK_Uart_SetRXMode(CK_Uart_Device uartid, BOOL  bQuery)
{
    d478:	1424      	subi      	sp, sp, 16
    d47a:	1b01      	addi      	r3, sp, 4
    d47c:	b300      	st.w      	r0, (r3, 0x0)
    d47e:	6cfb      	mov      	r3, sp
    d480:	b320      	st.w      	r1, (r3, 0x0)
  CKStruct_UartInfo *info;
	
  info = &(CK_Uart_Table[uartid]);	
    d482:	1b01      	addi      	r3, sp, 4
    d484:	9340      	ld.w      	r2, (r3, 0x0)
    d486:	ea032054 	movi      	r3, 8276      	//0x2054
    d48a:	c4628421 	mult      	r1, r2, r3
    d48e:	1b02      	addi      	r3, sp, 8
    d490:	1149      	lrw      	r2, 0x11420	//11420 <CK_Uart_Table>
    d492:	5948      	addu      	r2, r1, r2
    d494:	b340      	st.w      	r2, (r3, 0x0)
  CK_INT32 timecount;
  timecount = 0;
    d496:	1b03      	addi      	r3, sp, 12
    d498:	3200      	movi      	r2, 0      	//0x0
    d49a:	b340      	st.w      	r2, (r3, 0x0)
  /* PEN bit(LCR[3]) is writeable when the UART is not busy(USR[0]=0).*/
  while((info->addr[CK_UART_USR] & USR_UART_BUSY) && 
    d49c:	0406      	br      	0xd4a8	//d4a8 <CK_Uart_SetRXMode+0x30>
        (timecount < UART_BUSY_TIMEOUT))
  {
    timecount++;
    d49e:	1b03      	addi      	r3, sp, 12
    d4a0:	1a03      	addi      	r2, sp, 12
    d4a2:	9240      	ld.w      	r2, (r2, 0x0)
    d4a4:	2200      	addi      	r2, 1      	//0x1
    d4a6:	b340      	st.w      	r2, (r3, 0x0)
	
  info = &(CK_Uart_Table[uartid]);	
  CK_INT32 timecount;
  timecount = 0;
  /* PEN bit(LCR[3]) is writeable when the UART is not busy(USR[0]=0).*/
  while((info->addr[CK_UART_USR] & USR_UART_BUSY) && 
    d4a8:	1b02      	addi      	r3, sp, 8
    d4aa:	9360      	ld.w      	r3, (r3, 0x0)
    d4ac:	9361      	ld.w      	r3, (r3, 0x4)
    d4ae:	237b      	addi      	r3, 124      	//0x7c
    d4b0:	9360      	ld.w      	r3, (r3, 0x0)
    d4b2:	e4632001 	andi      	r3, r3, 1
    d4b6:	74cc      	zextb      	r3, r3
    d4b8:	e9030007 	bez      	r3, 0xd4c6	//d4c6 <CK_Uart_SetRXMode+0x4e>
    d4bc:	1b03      	addi      	r3, sp, 12
    d4be:	9340      	ld.w      	r2, (r3, 0x0)
    d4c0:	107e      	lrw      	r3, 0xf423f	//f423f <__DTOR_END__+0xe076f>
    d4c2:	648d      	cmplt      	r3, r2
    d4c4:	0fed      	bf      	0xd49e	//d49e <CK_Uart_SetRXMode+0x26>
        (timecount < UART_BUSY_TIMEOUT))
  {
    timecount++;
  }
  if(timecount >= UART_BUSY_TIMEOUT)
    d4c6:	1b03      	addi      	r3, sp, 12
    d4c8:	9340      	ld.w      	r2, (r3, 0x0)
    d4ca:	107c      	lrw      	r3, 0xf423f	//f423f <__DTOR_END__+0xe076f>
    d4cc:	648d      	cmplt      	r3, r2
    d4ce:	0c04      	bf      	0xd4d6	//d4d6 <CK_Uart_SetRXMode+0x5e>
  {
    return FAILURE;
    d4d0:	3300      	movi      	r3, 0      	//0x0
    d4d2:	2b00      	subi      	r3, 1      	//0x1
    d4d4:	0425      	br      	0xd51e	//d51e <CK_Uart_SetRXMode+0xa6>
  }
  else
  {
    if(bQuery)
    d4d6:	6cfb      	mov      	r3, sp
    d4d8:	9360      	ld.w      	r3, (r3, 0x0)
    d4da:	e9030012 	bez      	r3, 0xd4fe	//d4fe <CK_Uart_SetRXMode+0x86>
    {
       /* When query mode, disable the Received Data Available 
       * Interrupt. To do this, we clear the ERBFI bit(IER[0]).
       */
      info->addr[CK_UART_IER] &= (~IER_RDA_INT_ENABLE);
    d4de:	1b02      	addi      	r3, sp, 8
    d4e0:	9360      	ld.w      	r3, (r3, 0x0)
    d4e2:	9361      	ld.w      	r3, (r3, 0x4)
    d4e4:	2303      	addi      	r3, 4      	//0x4
    d4e6:	1a02      	addi      	r2, sp, 8
    d4e8:	9240      	ld.w      	r2, (r2, 0x0)
    d4ea:	9241      	ld.w      	r2, (r2, 0x4)
    d4ec:	2203      	addi      	r2, 4      	//0x4
    d4ee:	9240      	ld.w      	r2, (r2, 0x0)
    d4f0:	3a80      	bclri      	r2, 0
    d4f2:	b340      	st.w      	r2, (r3, 0x0)
      /* Refresh the uart info: receive mode - query.*/
      info->brxquery = TRUE;
    d4f4:	1b02      	addi      	r3, sp, 8
    d4f6:	9360      	ld.w      	r3, (r3, 0x0)
    d4f8:	3201      	movi      	r2, 1      	//0x1
    d4fa:	b34a      	st.w      	r2, (r3, 0x28)
    d4fc:	0410      	br      	0xd51c	//d51c <CK_Uart_SetRXMode+0xa4>
    else
    {
      /* When interrupt mode, inable the Received Data Available 
       * Interrupt. To do this, we set the ERBFI bit(IER[0]).
       */
      info->addr[CK_UART_IER] |= IER_RDA_INT_ENABLE;
    d4fe:	1b02      	addi      	r3, sp, 8
    d500:	9360      	ld.w      	r3, (r3, 0x0)
    d502:	9361      	ld.w      	r3, (r3, 0x4)
    d504:	2303      	addi      	r3, 4      	//0x4
    d506:	1a02      	addi      	r2, sp, 8
    d508:	9240      	ld.w      	r2, (r2, 0x0)
    d50a:	9241      	ld.w      	r2, (r2, 0x4)
    d50c:	2203      	addi      	r2, 4      	//0x4
    d50e:	9240      	ld.w      	r2, (r2, 0x0)
    d510:	3aa0      	bseti      	r2, 0
    d512:	b340      	st.w      	r2, (r3, 0x0)
      /* Refresh the uart info: receive mode - interrupt.*/
      info->brxquery = FALSE;
    d514:	1b02      	addi      	r3, sp, 8
    d516:	9360      	ld.w      	r3, (r3, 0x0)
    d518:	3200      	movi      	r2, 0      	//0x0
    d51a:	b34a      	st.w      	r2, (r3, 0x28)
    }
  }
  return SUCCESS;
    d51c:	3300      	movi      	r3, 0      	//0x0
}
    d51e:	6c0f      	mov      	r0, r3
    d520:	1404      	addi      	sp, sp, 16
    d522:	783c      	rts

0000d524 <CK_Uart_DriverInit>:

/*
 * Register uart into powermanager.
 */
CK_INT32 CK_Uart_DriverInit()
{
    d524:	14d0      	push      	r15
  CK_Deactive_UartModule();
    d526:	e3fffc2b 	bsr      	0xcd7c	//cd7c <CK_Deactive_UartModule>
    d52a:	c4004820 	lsli      	r0, r0, 0
  return SUCCESS;
    d52e:	3300      	movi      	r3, 0      	//0x0
}
    d530:	6c0f      	mov      	r0, r3
    d532:	1490      	pop      	r15
    d534:	00011420 	.long	0x00011420
    d538:	000f423f 	.long	0x000f423f
    d53c:	0000cd7c 	.long	0x0000cd7c

0000d540 <CK_Uart_GetChar>:
 *   brxquery--it indicates the receive mode: TRUE - query mode, FALSE - 
 *   interrupt mode
 * return: SUCCESS or FAILURE
 */
CK_INT32 CK_Uart_GetChar(IN CK_Uart_Device uartid, OUT CK_UINT8 *ch)
{
    d540:	14d0      	push      	r15
    d542:	1423      	subi      	sp, sp, 12
    d544:	1b01      	addi      	r3, sp, 4
    d546:	b300      	st.w      	r0, (r3, 0x0)
    d548:	6cfb      	mov      	r3, sp
    d54a:	b320      	st.w      	r1, (r3, 0x0)
  CKStruct_UartInfo *info;
  
  if ((uartid < 0) || (uartid >= UARTID_MAX))
    d54c:	1b01      	addi      	r3, sp, 4
    d54e:	9360      	ld.w      	r3, (r3, 0x0)
    d550:	e9030005 	bez      	r3, 0xd55a	//d55a <CK_Uart_GetChar+0x1a>
  {
    return FAILURE;
    d554:	3300      	movi      	r3, 0      	//0x0
    d556:	2b00      	subi      	r3, 1      	//0x1
    d558:	043f      	br      	0xd5d6	//d5d6 <CK_Uart_GetChar+0x96>
  }
  info = &(CK_Uart_Table[uartid]);
    d55a:	1b01      	addi      	r3, sp, 4
    d55c:	9340      	ld.w      	r2, (r3, 0x0)
    d55e:	ea032054 	movi      	r3, 8276      	//0x2054
    d562:	c4628421 	mult      	r1, r2, r3
    d566:	1b02      	addi      	r3, sp, 8
    d568:	1348      	lrw      	r2, 0x11420	//11420 <CK_Uart_Table>
    d56a:	5948      	addu      	r2, r1, r2
    d56c:	b340      	st.w      	r2, (r3, 0x0)
  if (!(info->bopened))
    d56e:	1b02      	addi      	r3, sp, 8
    d570:	9360      	ld.w      	r3, (r3, 0x0)
    d572:	9363      	ld.w      	r3, (r3, 0xc)
    d574:	e9230005 	bnez      	r3, 0xd57e	//d57e <CK_Uart_GetChar+0x3e>
  {
    return FAILURE;
    d578:	3300      	movi      	r3, 0      	//0x0
    d57a:	2b00      	subi      	r3, 1      	//0x1
    d57c:	042d      	br      	0xd5d6	//d5d6 <CK_Uart_GetChar+0x96>
  }

  /*query mode*/ 
  if (info->brxquery)
    d57e:	1b02      	addi      	r3, sp, 8
    d580:	9360      	ld.w      	r3, (r3, 0x0)
    d582:	936a      	ld.w      	r3, (r3, 0x28)
    d584:	e9030016 	bez      	r3, 0xd5b0	//d5b0 <CK_Uart_GetChar+0x70>
  {
//  	printf("11addr=0x%x, val=0x%x\n", &info->addr[CK_UART_LSR], info->addr[CK_UART_LSR]);
    while (!(info->addr[CK_UART_LSR] & LSR_DATA_READY)){
    d588:	6c00      	or      	r0, r0
    d58a:	1b02      	addi      	r3, sp, 8
    d58c:	9360      	ld.w      	r3, (r3, 0x0)
    d58e:	9361      	ld.w      	r3, (r3, 0x4)
    d590:	2313      	addi      	r3, 20      	//0x14
    d592:	9360      	ld.w      	r3, (r3, 0x0)
    d594:	e4632001 	andi      	r3, r3, 1
    d598:	e903fff9 	bez      	r3, 0xd58a	//d58a <CK_Uart_GetChar+0x4a>
//    	printf("22addr=0x%x, val=0x%x", &info->addr[CK_UART_LSR], info->addr[CK_UART_LSR]);
    };
//	printf("33addr=0x%x, val=0x%x\n", &info->addr[CK_UART_LSR], info->addr[CK_UART_LSR]);
  *ch = info->addr[CK_UART_RBR];
    d59c:	1b02      	addi      	r3, sp, 8
    d59e:	9360      	ld.w      	r3, (r3, 0x0)
    d5a0:	9361      	ld.w      	r3, (r3, 0x4)
    d5a2:	9360      	ld.w      	r3, (r3, 0x0)
    d5a4:	748c      	zextb      	r2, r3
    d5a6:	6cfb      	mov      	r3, sp
    d5a8:	9360      	ld.w      	r3, (r3, 0x0)
    d5aa:	a340      	st.b      	r2, (r3, 0x0)
//  printf("44addr=0x%x, val=0x%x\n", &info->addr[CK_UART_RBR], info->addr[CK_UART_RBR]);
//  printf("55chaddr=0x%x, ch=%c\n", ch, *ch);
  return SUCCESS;	
    d5ac:	3300      	movi      	r3, 0      	//0x0
    d5ae:	0414      	br      	0xd5d6	//d5d6 <CK_Uart_GetChar+0x96>
  }
  else
  { /*irq mode*/
    if(TRUE == CK_CircleBuffer_Read(&(info->rxcirclebuffer), ch))
    d5b0:	1b02      	addi      	r3, sp, 8
    d5b2:	9360      	ld.w      	r3, (r3, 0x0)
    d5b4:	ea01203c 	movi      	r1, 8252      	//0x203c
    d5b8:	5b44      	addu      	r2, r3, r1
    d5ba:	6cfb      	mov      	r3, sp
    d5bc:	6c0b      	mov      	r0, r2
    d5be:	9320      	ld.w      	r1, (r3, 0x0)
    d5c0:	e0000af8 	bsr      	0xebb0	//ebb0 <CK_CircleBuffer_Read>
    d5c4:	c4004820 	lsli      	r0, r0, 0
    d5c8:	6cc3      	mov      	r3, r0
    d5ca:	3b41      	cmpnei      	r3, 1
    d5cc:	0803      	bt      	0xd5d2	//d5d2 <CK_Uart_GetChar+0x92>
    return SUCCESS;
    d5ce:	3300      	movi      	r3, 0      	//0x0
    d5d0:	0403      	br      	0xd5d6	//d5d6 <CK_Uart_GetChar+0x96>
  }
  return FAILURE;
    d5d2:	3300      	movi      	r3, 0      	//0x0
    d5d4:	2b00      	subi      	r3, 1      	//0x1
}
    d5d6:	6c0f      	mov      	r0, r3
    d5d8:	1403      	addi      	sp, sp, 12
    d5da:	1490      	pop      	r15

0000d5dc <CK_Uart_GetCharUnBlock>:
 *   brxquery--it indicates the receive mode: TRUE - query mode, FALSE - 
 *   interrupt mode
 * return: SUCCESS or FAILURE
 */
CK_INT32 CK_Uart_GetCharUnBlock(IN CK_Uart_Device uartid, OUT CK_UINT8 *ch)
{
    d5dc:	14d0      	push      	r15
    d5de:	1423      	subi      	sp, sp, 12
    d5e0:	1b01      	addi      	r3, sp, 4
    d5e2:	b300      	st.w      	r0, (r3, 0x0)
    d5e4:	6cfb      	mov      	r3, sp
    d5e6:	b320      	st.w      	r1, (r3, 0x0)
  CKStruct_UartInfo *info;

  if ((uartid < 0) || (uartid >= UARTID_MAX))
    d5e8:	1b01      	addi      	r3, sp, 4
    d5ea:	9360      	ld.w      	r3, (r3, 0x0)
    d5ec:	e9030005 	bez      	r3, 0xd5f6	//d5f6 <CK_Uart_GetCharUnBlock+0x1a>
  {
    return FAILURE;
    d5f0:	3300      	movi      	r3, 0      	//0x0
    d5f2:	2b00      	subi      	r3, 1      	//0x1
    d5f4:	043f      	br      	0xd672	//d672 <CK_Uart_GetCharUnBlock+0x96>
  }
  info = &(CK_Uart_Table[uartid]);
    d5f6:	1b01      	addi      	r3, sp, 4
    d5f8:	9340      	ld.w      	r2, (r3, 0x0)
    d5fa:	ea032054 	movi      	r3, 8276      	//0x2054
    d5fe:	c4628421 	mult      	r1, r2, r3
    d602:	1b02      	addi      	r3, sp, 8
    d604:	1241      	lrw      	r2, 0x11420	//11420 <CK_Uart_Table>
    d606:	5948      	addu      	r2, r1, r2
    d608:	b340      	st.w      	r2, (r3, 0x0)
  if (!(info->bopened))
    d60a:	1b02      	addi      	r3, sp, 8
    d60c:	9360      	ld.w      	r3, (r3, 0x0)
    d60e:	9363      	ld.w      	r3, (r3, 0xc)
    d610:	e9230005 	bnez      	r3, 0xd61a	//d61a <CK_Uart_GetCharUnBlock+0x3e>
  {
    return FAILURE;
    d614:	3300      	movi      	r3, 0      	//0x0
    d616:	2b00      	subi      	r3, 1      	//0x1
    d618:	042d      	br      	0xd672	//d672 <CK_Uart_GetCharUnBlock+0x96>
  }

  /*query mode*/
  if (info->brxquery)
    d61a:	1b02      	addi      	r3, sp, 8
    d61c:	9360      	ld.w      	r3, (r3, 0x0)
    d61e:	936a      	ld.w      	r3, (r3, 0x28)
    d620:	e9030016 	bez      	r3, 0xd64c	//d64c <CK_Uart_GetCharUnBlock+0x70>
  {
    if (info->addr[CK_UART_LSR] & LSR_DATA_READY)
    d624:	1b02      	addi      	r3, sp, 8
    d626:	9360      	ld.w      	r3, (r3, 0x0)
    d628:	9361      	ld.w      	r3, (r3, 0x4)
    d62a:	2313      	addi      	r3, 20      	//0x14
    d62c:	9360      	ld.w      	r3, (r3, 0x0)
    d62e:	e4632001 	andi      	r3, r3, 1
    d632:	74cc      	zextb      	r3, r3
    d634:	e903001d 	bez      	r3, 0xd66e	//d66e <CK_Uart_GetCharUnBlock+0x92>
    {
      *ch = info->addr[CK_UART_RBR];
    d638:	1b02      	addi      	r3, sp, 8
    d63a:	9360      	ld.w      	r3, (r3, 0x0)
    d63c:	9361      	ld.w      	r3, (r3, 0x4)
    d63e:	9360      	ld.w      	r3, (r3, 0x0)
    d640:	748c      	zextb      	r2, r3
    d642:	6cfb      	mov      	r3, sp
    d644:	9360      	ld.w      	r3, (r3, 0x0)
    d646:	a340      	st.b      	r2, (r3, 0x0)
      return SUCCESS;
    d648:	3300      	movi      	r3, 0      	//0x0
    d64a:	0414      	br      	0xd672	//d672 <CK_Uart_GetCharUnBlock+0x96>
    }
  }
  else
  { /*irq mode*/
    if(TRUE == CK_CircleBuffer_Read(&(info->rxcirclebuffer), ch))
    d64c:	1b02      	addi      	r3, sp, 8
    d64e:	9360      	ld.w      	r3, (r3, 0x0)
    d650:	ea01203c 	movi      	r1, 8252      	//0x203c
    d654:	5b44      	addu      	r2, r3, r1
    d656:	6cfb      	mov      	r3, sp
    d658:	6c0b      	mov      	r0, r2
    d65a:	9320      	ld.w      	r1, (r3, 0x0)
    d65c:	e0000aaa 	bsr      	0xebb0	//ebb0 <CK_CircleBuffer_Read>
    d660:	c4004820 	lsli      	r0, r0, 0
    d664:	6cc3      	mov      	r3, r0
    d666:	3b41      	cmpnei      	r3, 1
    d668:	0803      	bt      	0xd66e	//d66e <CK_Uart_GetCharUnBlock+0x92>
    return SUCCESS;
    d66a:	3300      	movi      	r3, 0      	//0x0
    d66c:	0403      	br      	0xd672	//d672 <CK_Uart_GetCharUnBlock+0x96>
  }
  return FAILURE;
    d66e:	3300      	movi      	r3, 0      	//0x0
    d670:	2b00      	subi      	r3, 1      	//0x1
}
    d672:	6c0f      	mov      	r0, r3
    d674:	1403      	addi      	sp, sp, 12
    d676:	1490      	pop      	r15

0000d678 <CK_Uart_PutChar>:
 *   brxquery--it indicates the receive mode: TRUE - query mode, FALSE - 
 *   interrupt mode
 * Return: SUCCESS or FAILURE.
 */
CK_INT32 CK_Uart_PutChar(CK_Uart_Device uartid, CK_UINT8 ch)
{
    d678:	14d0      	push      	r15
    d67a:	1424      	subi      	sp, sp, 16
    d67c:	1b01      	addi      	r3, sp, 4
    d67e:	b300      	st.w      	r0, (r3, 0x0)
    d680:	6c87      	mov      	r2, r1
    d682:	6cfb      	mov      	r3, sp
    d684:	a340      	st.b      	r2, (r3, 0x0)
  CKStruct_UartInfo *info;
  CK_UINT8 temp;

  if ((uartid < 0) || (uartid >= UARTID_MAX))
    d686:	1b01      	addi      	r3, sp, 4
    d688:	9360      	ld.w      	r3, (r3, 0x0)
    d68a:	e9030005 	bez      	r3, 0xd694	//d694 <CK_Uart_PutChar+0x1c>
  {
    return FAILURE;
    d68e:	3300      	movi      	r3, 0      	//0x0
    d690:	2b00      	subi      	r3, 1      	//0x1
    d692:	048d      	br      	0xd7ac	//d7ac <CK_Uart_PutChar+0x134>
  }
  info = &(CK_Uart_Table[uartid]);
    d694:	1b01      	addi      	r3, sp, 4
    d696:	9340      	ld.w      	r2, (r3, 0x0)
    d698:	ea032054 	movi      	r3, 8276      	//0x2054
    d69c:	c4628421 	mult      	r1, r2, r3
    d6a0:	1b03      	addi      	r3, sp, 12
    d6a2:	105a      	lrw      	r2, 0x11420	//11420 <CK_Uart_Table>
    d6a4:	5948      	addu      	r2, r1, r2
    d6a6:	b340      	st.w      	r2, (r3, 0x0)
  if (!(info->bopened))
    d6a8:	1b03      	addi      	r3, sp, 12
    d6aa:	9360      	ld.w      	r3, (r3, 0x0)
    d6ac:	9363      	ld.w      	r3, (r3, 0xc)
    d6ae:	e9230005 	bnez      	r3, 0xd6b8	//d6b8 <CK_Uart_PutChar+0x40>
  {
    return FAILURE;
    d6b2:	3300      	movi      	r3, 0      	//0x0
    d6b4:	2b00      	subi      	r3, 1      	//0x1
    d6b6:	047b      	br      	0xd7ac	//d7ac <CK_Uart_PutChar+0x134>
  }
  /*query mode*/
  if (info->btxquery)
    d6b8:	1b03      	addi      	r3, sp, 12
    d6ba:	9360      	ld.w      	r3, (r3, 0x0)
    d6bc:	9369      	ld.w      	r3, (r3, 0x24)
    d6be:	e903002b 	bez      	r3, 0xd714	//d714 <CK_Uart_PutChar+0x9c>
  {
    while ((!(info->addr[CK_UART_LSR] & CK_LSR_TRANS_EMPTY)));
    d6c2:	6c00      	or      	r0, r0
    d6c4:	1b03      	addi      	r3, sp, 12
    d6c6:	9360      	ld.w      	r3, (r3, 0x0)
    d6c8:	9361      	ld.w      	r3, (r3, 0x4)
    d6ca:	2313      	addi      	r3, 20      	//0x14
    d6cc:	9360      	ld.w      	r3, (r3, 0x0)
    d6ce:	e4632020 	andi      	r3, r3, 32
    d6d2:	e903fff9 	bez      	r3, 0xd6c4	//d6c4 <CK_Uart_PutChar+0x4c>
    if(ch == '\n')
    d6d6:	6cfb      	mov      	r3, sp
    d6d8:	8360      	ld.b      	r3, (r3, 0x0)
    d6da:	74cc      	zextb      	r3, r3
    d6dc:	3b4a      	cmpnei      	r3, 10
    d6de:	080b      	bt      	0xd6f4	//d6f4 <CK_Uart_PutChar+0x7c>
    {
      info->addr[CK_UART_THR] = '\r';
    d6e0:	1b03      	addi      	r3, sp, 12
    d6e2:	9360      	ld.w      	r3, (r3, 0x0)
    d6e4:	9361      	ld.w      	r3, (r3, 0x4)
    d6e6:	320d      	movi      	r2, 13      	//0xd
    d6e8:	b340      	st.w      	r2, (r3, 0x0)
      delay(10);
    d6ea:	300a      	movi      	r0, 10      	//0xa
    d6ec:	e0000c54 	bsr      	0xef94	//ef94 <delay>
    d6f0:	c4004820 	lsli      	r0, r0, 0
    }
    
    
    info->addr[CK_UART_THR] = ch;
    d6f4:	1b03      	addi      	r3, sp, 12
    d6f6:	9360      	ld.w      	r3, (r3, 0x0)
    d6f8:	9361      	ld.w      	r3, (r3, 0x4)
    d6fa:	6cbb      	mov      	r2, sp
    d6fc:	8240      	ld.b      	r2, (r2, 0x0)
    d6fe:	7488      	zextb      	r2, r2
    d700:	b340      	st.w      	r2, (r3, 0x0)
    
    return SUCCESS;
    d702:	3300      	movi      	r3, 0      	//0x0
    d704:	0454      	br      	0xd7ac	//d7ac <CK_Uart_PutChar+0x134>
    d706:	0000      	.short	0x0000
    d708:	00011420 	.long	0x00011420
    d70c:	0000ebb0 	.long	0x0000ebb0
    d710:	0000ef94 	.long	0x0000ef94
  }
   
  /*irq mode*/
  else
  {
    if(ch == '\n')
    d714:	6cfb      	mov      	r3, sp
    d716:	8360      	ld.b      	r3, (r3, 0x0)
    d718:	74cc      	zextb      	r3, r3
    d71a:	3b4a      	cmpnei      	r3, 10
    d71c:	081b      	bt      	0xd752	//d752 <CK_Uart_PutChar+0xda>
    {
      CK_CircleBuffer_Write(&(info->txcirclebuffer), '\r');
    d71e:	1b03      	addi      	r3, sp, 12
    d720:	9360      	ld.w      	r3, (r3, 0x0)
    d722:	ea01202c 	movi      	r1, 8236      	//0x202c
    d726:	5b64      	addu      	r3, r3, r1
    d728:	6c0f      	mov      	r0, r3
    d72a:	310d      	movi      	r1, 13      	//0xd
    d72c:	e0000a72 	bsr      	0xec10	//ec10 <CK_CircleBuffer_Write>
    d730:	c4004820 	lsli      	r0, r0, 0
      CK_CircleBuffer_Write(&(info->txcirclebuffer), ch);
    d734:	1b03      	addi      	r3, sp, 12
    d736:	9360      	ld.w      	r3, (r3, 0x0)
    d738:	ea01202c 	movi      	r1, 8236      	//0x202c
    d73c:	5b44      	addu      	r2, r3, r1
    d73e:	6cfb      	mov      	r3, sp
    d740:	8360      	ld.b      	r3, (r3, 0x0)
    d742:	74cc      	zextb      	r3, r3
    d744:	6c0b      	mov      	r0, r2
    d746:	6c4f      	mov      	r1, r3
    d748:	e0000a64 	bsr      	0xec10	//ec10 <CK_CircleBuffer_Write>
    d74c:	c4004820 	lsli      	r0, r0, 0
    d750:	040f      	br      	0xd76e	//d76e <CK_Uart_PutChar+0xf6>
     }
     else
     {
       CK_CircleBuffer_Write(&(info->txcirclebuffer), ch);
    d752:	1b03      	addi      	r3, sp, 12
    d754:	9360      	ld.w      	r3, (r3, 0x0)
    d756:	ea01202c 	movi      	r1, 8236      	//0x202c
    d75a:	5b44      	addu      	r2, r3, r1
    d75c:	6cfb      	mov      	r3, sp
    d75e:	8360      	ld.b      	r3, (r3, 0x0)
    d760:	74cc      	zextb      	r3, r3
    d762:	6c0b      	mov      	r0, r2
    d764:	6c4f      	mov      	r1, r3
    d766:	e0000a55 	bsr      	0xec10	//ec10 <CK_CircleBuffer_Write>
    d76a:	c4004820 	lsli      	r0, r0, 0
     } 
     if(info->addr[CK_UART_LSR] & 0x20)
    d76e:	1b03      	addi      	r3, sp, 12
    d770:	9360      	ld.w      	r3, (r3, 0x0)
    d772:	9361      	ld.w      	r3, (r3, 0x4)
    d774:	2313      	addi      	r3, 20      	//0x14
    d776:	9360      	ld.w      	r3, (r3, 0x0)
    d778:	e4632020 	andi      	r3, r3, 32
    d77c:	e9030017 	bez      	r3, 0xd7aa	//d7aa <CK_Uart_PutChar+0x132>
     {
       CK_CircleBuffer_Read(&(info->txcirclebuffer), &temp);
    d780:	1b03      	addi      	r3, sp, 12
    d782:	9360      	ld.w      	r3, (r3, 0x0)
    d784:	ea01202c 	movi      	r1, 8236      	//0x202c
    d788:	5b44      	addu      	r2, r3, r1
    d78a:	e46e000a 	addi      	r3, sp, 11      	//0xb
    d78e:	6c0b      	mov      	r0, r2
    d790:	6c4f      	mov      	r1, r3
    d792:	e0000a0f 	bsr      	0xebb0	//ebb0 <CK_CircleBuffer_Read>
    d796:	c4004820 	lsli      	r0, r0, 0
       info->addr[CK_UART_THR] = temp;
    d79a:	1b03      	addi      	r3, sp, 12
    d79c:	9360      	ld.w      	r3, (r3, 0x0)
    d79e:	9361      	ld.w      	r3, (r3, 0x4)
    d7a0:	e44e000a 	addi      	r2, sp, 11      	//0xb
    d7a4:	8240      	ld.b      	r2, (r2, 0x0)
    d7a6:	7488      	zextb      	r2, r2
    d7a8:	b340      	st.w      	r2, (r3, 0x0)
     }
  }
  return SUCCESS;
    d7aa:	3300      	movi      	r3, 0      	//0x0
}
    d7ac:	6c0f      	mov      	r0, r3
    d7ae:	1404      	addi      	sp, sp, 16
    d7b0:	1490      	pop      	r15
    d7b2:	0000      	.short	0x0000
    d7b4:	0000ec10 	.long	0x0000ec10
    d7b8:	0000ebb0 	.long	0x0000ebb0

0000d7bc <CK_Uart_Interrupt>:
 * Parameters:
 *            irqid - Interrupt number of uart.
 * Return: NULL.
 */
static void CK_Uart_Interrupt(CK_UINT32 irqid)
{
    d7bc:	14d0      	push      	r15
    d7be:	1425      	subi      	sp, sp, 20
    d7c0:	6cfb      	mov      	r3, sp
    d7c2:	b300      	st.w      	r0, (r3, 0x0)
  CK_INT8 int_state;
  CK_UINT8 txrxdata;
  CKEnum_Uart_Error error;
  CK_INT8 i;

  for(i = 0; i < UARTID_MAX; i++)
    d7c4:	e46e000e 	addi      	r3, sp, 15      	//0xf
    d7c8:	3200      	movi      	r2, 0      	//0x0
    d7ca:	a340      	st.b      	r2, (r3, 0x0)
    d7cc:	041b      	br      	0xd802	//d802 <CK_Uart_Interrupt+0x46>
  {
    info = &(CK_Uart_Table[i]);
    d7ce:	e46e000e 	addi      	r3, sp, 15      	//0xf
    d7d2:	8360      	ld.b      	r3, (r3, 0x0)
    d7d4:	748e      	sextb      	r2, r3
    d7d6:	ea032054 	movi      	r3, 8276      	//0x2054
    d7da:	c4628421 	mult      	r1, r2, r3
    d7de:	1b04      	addi      	r3, sp, 16
    d7e0:	1259      	lrw      	r2, 0x11420	//11420 <CK_Uart_Table>
    d7e2:	5948      	addu      	r2, r1, r2
    d7e4:	b340      	st.w      	r2, (r3, 0x0)
    if(info->irq == irqid)
    d7e6:	1b04      	addi      	r3, sp, 16
    d7e8:	9360      	ld.w      	r3, (r3, 0x0)
    d7ea:	9342      	ld.w      	r2, (r3, 0x8)
    d7ec:	6cfb      	mov      	r3, sp
    d7ee:	9360      	ld.w      	r3, (r3, 0x0)
    d7f0:	64ca      	cmpne      	r2, r3
    d7f2:	0c0f      	bf      	0xd810	//d810 <CK_Uart_Interrupt+0x54>
  CK_INT8 int_state;
  CK_UINT8 txrxdata;
  CKEnum_Uart_Error error;
  CK_INT8 i;

  for(i = 0; i < UARTID_MAX; i++)
    d7f4:	e46e000e 	addi      	r3, sp, 15      	//0xf
    d7f8:	e44e000e 	addi      	r2, sp, 15      	//0xf
    d7fc:	8240      	ld.b      	r2, (r2, 0x0)
    d7fe:	2200      	addi      	r2, 1      	//0x1
    d800:	a340      	st.b      	r2, (r3, 0x0)
    d802:	e46e000e 	addi      	r3, sp, 15      	//0xf
    d806:	8360      	ld.b      	r3, (r3, 0x0)
    d808:	74ce      	sextb      	r3, r3
    d80a:	e903ffe2 	bez      	r3, 0xd7ce	//d7ce <CK_Uart_Interrupt+0x12>
    d80e:	0402      	br      	0xd812	//d812 <CK_Uart_Interrupt+0x56>
  {
    info = &(CK_Uart_Table[i]);
    if(info->irq == irqid)
    {
       break;
    d810:	6c00      	or      	r0, r0
    }
  }
  if(i >= UARTID_MAX)
    d812:	e46e000e 	addi      	r3, sp, 15      	//0xf
    d816:	8360      	ld.b      	r3, (r3, 0x0)
    d818:	74ce      	sextb      	r3, r3
    d81a:	e903000c 	bez      	r3, 0xd832	//d832 <CK_Uart_Interrupt+0x76>
  {
    printf("Uart%d not exist\n",i);
    d81e:	e46e000e 	addi      	r3, sp, 15      	//0xf
    d822:	8360      	ld.b      	r3, (r3, 0x0)
    d824:	74ce      	sextb      	r3, r3
    d826:	1209      	lrw      	r0, 0x10e84	//10e84 <__etext+0x12d4>
    d828:	6c4f      	mov      	r1, r3
    d82a:	e0000893 	bsr      	0xe950	//e950 <printf>
    d82e:	c4004820 	lsli      	r0, r0, 0
  }
  int_state = info->addr[CK_UART_IIR] & 0xf;
    d832:	1b04      	addi      	r3, sp, 16
    d834:	9360      	ld.w      	r3, (r3, 0x0)
    d836:	9361      	ld.w      	r3, (r3, 0x4)
    d838:	2307      	addi      	r3, 8      	//0x8
    d83a:	9360      	ld.w      	r3, (r3, 0x0)
    d83c:	748c      	zextb      	r2, r3
    d83e:	e46e000d 	addi      	r3, sp, 14      	//0xe
    d842:	e442200f 	andi      	r2, r2, 15
    d846:	a340      	st.b      	r2, (r3, 0x0)
  if((int_state == 0x2) && !(info->btxquery))
    d848:	e46e000d 	addi      	r3, sp, 14      	//0xe
    d84c:	8360      	ld.b      	r3, (r3, 0x0)
    d84e:	74ce      	sextb      	r3, r3
    d850:	3b42      	cmpnei      	r3, 2
    d852:	0828      	bt      	0xd8a2	//d8a2 <CK_Uart_Interrupt+0xe6>
    d854:	1b04      	addi      	r3, sp, 16
    d856:	9360      	ld.w      	r3, (r3, 0x0)
    d858:	9369      	ld.w      	r3, (r3, 0x24)
    d85a:	e9230024 	bnez      	r3, 0xd8a2	//d8a2 <CK_Uart_Interrupt+0xe6>
  {
    if(!CK_CircleBuffer_IsEmpty(&(info->txcirclebuffer)))
    d85e:	1b04      	addi      	r3, sp, 16
    d860:	9360      	ld.w      	r3, (r3, 0x0)
    d862:	ea01202c 	movi      	r1, 8236      	//0x202c
    d866:	5b64      	addu      	r3, r3, r1
    d868:	6c0f      	mov      	r0, r3
    d86a:	e000097f 	bsr      	0xeb68	//eb68 <CK_CircleBuffer_IsEmpty>
    d86e:	c4004820 	lsli      	r0, r0, 0
    d872:	6cc3      	mov      	r3, r0
    d874:	e9230017 	bnez      	r3, 0xd8a2	//d8a2 <CK_Uart_Interrupt+0xe6>
    {
      CK_CircleBuffer_Read(&(info->txcirclebuffer), &txrxdata);
    d878:	1b04      	addi      	r3, sp, 16
    d87a:	9360      	ld.w      	r3, (r3, 0x0)
    d87c:	ea01202c 	movi      	r1, 8236      	//0x202c
    d880:	5b44      	addu      	r2, r3, r1
    d882:	e46e0006 	addi      	r3, sp, 7      	//0x7
    d886:	6c0b      	mov      	r0, r2
    d888:	6c4f      	mov      	r1, r3
    d88a:	e0000993 	bsr      	0xebb0	//ebb0 <CK_CircleBuffer_Read>
    d88e:	c4004820 	lsli      	r0, r0, 0
      info->addr[CK_UART_THR] = txrxdata;
    d892:	1b04      	addi      	r3, sp, 16
    d894:	9360      	ld.w      	r3, (r3, 0x0)
    d896:	9361      	ld.w      	r3, (r3, 0x4)
    d898:	e44e0006 	addi      	r2, sp, 7      	//0x7
    d89c:	8240      	ld.b      	r2, (r2, 0x0)
    d89e:	7488      	zextb      	r2, r2
    d8a0:	b340      	st.w      	r2, (r3, 0x0)
    }
  }
  if((int_state == 0x4) && !(info->brxquery))
    d8a2:	e46e000d 	addi      	r3, sp, 14      	//0xe
    d8a6:	8360      	ld.b      	r3, (r3, 0x0)
    d8a8:	74ce      	sextb      	r3, r3
    d8aa:	3b44      	cmpnei      	r3, 4
    d8ac:	082f      	bt      	0xd90a	//d90a <CK_Uart_Interrupt+0x14e>
    d8ae:	1b04      	addi      	r3, sp, 16
    d8b0:	9360      	ld.w      	r3, (r3, 0x0)
    d8b2:	936a      	ld.w      	r3, (r3, 0x28)
    d8b4:	e923002b 	bnez      	r3, 0xd90a	//d90a <CK_Uart_Interrupt+0x14e>
  {
    txrxdata = info->addr[CK_UART_RBR];
    d8b8:	1b04      	addi      	r3, sp, 16
    d8ba:	9360      	ld.w      	r3, (r3, 0x0)
    d8bc:	9361      	ld.w      	r3, (r3, 0x4)
    d8be:	9360      	ld.w      	r3, (r3, 0x0)
    d8c0:	748c      	zextb      	r2, r3
    d8c2:	e46e0006 	addi      	r3, sp, 7      	//0x7
    d8c6:	a340      	st.b      	r2, (r3, 0x0)
    CK_CircleBuffer_Write(&(info->rxcirclebuffer), txrxdata);
    d8c8:	1b04      	addi      	r3, sp, 16
    d8ca:	9360      	ld.w      	r3, (r3, 0x0)
    d8cc:	ea01203c 	movi      	r1, 8252      	//0x203c
    d8d0:	5b44      	addu      	r2, r3, r1
    d8d2:	e46e0006 	addi      	r3, sp, 7      	//0x7
    d8d6:	8360      	ld.b      	r3, (r3, 0x0)
    d8d8:	74cc      	zextb      	r3, r3
    d8da:	6c0b      	mov      	r0, r2
    d8dc:	6c4f      	mov      	r1, r3
    d8de:	e0000999 	bsr      	0xec10	//ec10 <CK_CircleBuffer_Write>
    d8e2:	c4004820 	lsli      	r0, r0, 0
    if(txrxdata == 3 )           /*CTRL+C ASCII code is 3 */
    d8e6:	e46e0006 	addi      	r3, sp, 7      	//0x7
    d8ea:	8360      	ld.b      	r3, (r3, 0x0)
    d8ec:	74cc      	zextb      	r3, r3
    d8ee:	3b43      	cmpnei      	r3, 3
    d8f0:	080d      	bt      	0xd90a	//d90a <CK_Uart_Interrupt+0x14e>
    {
      error = CK_Uart_CTRL_C;
    d8f2:	1b02      	addi      	r3, sp, 8
    d8f4:	3200      	movi      	r2, 0      	//0x0
    d8f6:	b340      	st.w      	r2, (r3, 0x0)
      info->handler(error);
    d8f8:	1b04      	addi      	r3, sp, 16
    d8fa:	9360      	ld.w      	r3, (r3, 0x0)
    d8fc:	9364      	ld.w      	r3, (r3, 0x10)
    d8fe:	1a02      	addi      	r2, sp, 8
    d900:	9240      	ld.w      	r2, (r2, 0x0)
    d902:	7488      	zextb      	r2, r2
    d904:	748a      	sextb      	r2, r2
    d906:	6c0b      	mov      	r0, r2
    d908:	7bcd      	jsr      	r3
    }
  }
}
    d90a:	1405      	addi      	sp, sp, 20
    d90c:	1490      	pop      	r15
	...

0000d910 <CK_UART_ClearRxBuffer>:

void CK_UART_ClearRxBuffer(CK_Uart_Device uartid)
{
    d910:	14d0      	push      	r15
    d912:	1422      	subi      	sp, sp, 8
    d914:	6cfb      	mov      	r3, sp
    d916:	b300      	st.w      	r0, (r3, 0x0)
  CKStruct_UartInfo *info;
  info = &(CK_Uart_Table[uartid]);
    d918:	6cfb      	mov      	r3, sp
    d91a:	9340      	ld.w      	r2, (r3, 0x0)
    d91c:	ea032054 	movi      	r3, 8276      	//0x2054
    d920:	c4628421 	mult      	r1, r2, r3
    d924:	1b01      	addi      	r3, sp, 4
    d926:	1048      	lrw      	r2, 0x11420	//11420 <CK_Uart_Table>
    d928:	5948      	addu      	r2, r1, r2
    d92a:	b340      	st.w      	r2, (r3, 0x0)
  CK_CircleBuffer_Clear(&(info->rxcirclebuffer));
    d92c:	1b01      	addi      	r3, sp, 4
    d92e:	9360      	ld.w      	r3, (r3, 0x0)
    d930:	ea02203c 	movi      	r2, 8252      	//0x203c
    d934:	5b68      	addu      	r3, r3, r2
    d936:	6c0f      	mov      	r0, r3
    d938:	e0000908 	bsr      	0xeb48	//eb48 <CK_CircleBuffer_Clear>
    d93c:	c4004820 	lsli      	r0, r0, 0
}
    d940:	1402      	addi      	sp, sp, 8
    d942:	1490      	pop      	r15
    d944:	00011420 	.long	0x00011420
    d948:	00010e84 	.long	0x00010e84
    d94c:	0000e950 	.long	0x0000e950
    d950:	0000eb68 	.long	0x0000eb68
    d954:	0000ebb0 	.long	0x0000ebb0
    d958:	0000ec10 	.long	0x0000ec10
    d95c:	0000eb48 	.long	0x0000eb48

0000d960 <CK_UART_TestMode>:

RETURN: NULL

*****************************************************************************/
static void CK_UART_TestMode(CK_Uart_Device uartid)
{
    d960:	14d0      	push      	r15
    d962:	1423      	subi      	sp, sp, 12
    d964:	6cfb      	mov      	r3, sp
    d966:	b300      	st.w      	r0, (r3, 0x0)
  CK_UINT32 i;
  CK_UINT32 get;
  
///////////////////* Query mode *////////////////////////// 
  printf("\n\n\t- - - Testing uart mode...\n");
    d968:	121d      	lrw      	r0, 0x10e98	//10e98 <__etext+0x12e8>
    d96a:	e00007f3 	bsr      	0xe950	//e950 <printf>
    d96e:	c4004820 	lsli      	r0, r0, 0
  printf("\r\t(query mode ): Output is---\n\t\t");
    d972:	121d      	lrw      	r0, 0x10eb8	//10eb8 <__etext+0x1308>
    d974:	e00007ee 	bsr      	0xe950	//e950 <printf>
    d978:	c4004820 	lsli      	r0, r0, 0
  for(i = 0; i < 14; i++)
    d97c:	1b02      	addi      	r3, sp, 8
    d97e:	3200      	movi      	r2, 0      	//0x0
    d980:	b340      	st.w      	r2, (r3, 0x0)
    d982:	0413      	br      	0xd9a8	//d9a8 <CK_UART_TestMode+0x48>
  {
    CK_Uart_PutChar(uartid, data[i]);
    d984:	1259      	lrw      	r2, 0x13474	//13474 <data>
    d986:	1b02      	addi      	r3, sp, 8
    d988:	9360      	ld.w      	r3, (r3, 0x0)
    d98a:	5a6c      	addu      	r3, r2, r3
    d98c:	8360      	ld.b      	r3, (r3, 0x0)
    d98e:	74cc      	zextb      	r3, r3
    d990:	6cbb      	mov      	r2, sp
    d992:	9200      	ld.w      	r0, (r2, 0x0)
    d994:	6c4f      	mov      	r1, r3
    d996:	e3fffe71 	bsr      	0xd678	//d678 <CK_Uart_PutChar>
    d99a:	c4004820 	lsli      	r0, r0, 0
  CK_UINT32 get;
  
///////////////////* Query mode *////////////////////////// 
  printf("\n\n\t- - - Testing uart mode...\n");
  printf("\r\t(query mode ): Output is---\n\t\t");
  for(i = 0; i < 14; i++)
    d99e:	1b02      	addi      	r3, sp, 8
    d9a0:	1a02      	addi      	r2, sp, 8
    d9a2:	9240      	ld.w      	r2, (r2, 0x0)
    d9a4:	2200      	addi      	r2, 1      	//0x1
    d9a6:	b340      	st.w      	r2, (r3, 0x0)
    d9a8:	1b02      	addi      	r3, sp, 8
    d9aa:	9340      	ld.w      	r2, (r3, 0x0)
    d9ac:	330d      	movi      	r3, 13      	//0xd
    d9ae:	648c      	cmphs      	r3, r2
    d9b0:	0bea      	bt      	0xd984	//d984 <CK_UART_TestMode+0x24>
  {
    CK_Uart_PutChar(uartid, data[i]);
  }
  printf("- - - [y/n] ");
    d9b2:	1210      	lrw      	r0, 0x10edc	//10edc <__etext+0x132c>
    d9b4:	e00007ce 	bsr      	0xe950	//e950 <printf>
    d9b8:	c4004820 	lsli      	r0, r0, 0
  while(1)
  {
    get = CK_WaitForReply();
    d9bc:	e0000b0c 	bsr      	0xefd4	//efd4 <CK_WaitForReply>
    d9c0:	c4004820 	lsli      	r0, r0, 0
    d9c4:	6c83      	mov      	r2, r0
    d9c6:	1b01      	addi      	r3, sp, 4
    d9c8:	b340      	st.w      	r2, (r3, 0x0)
    if((get == 1) ||(get == 0))
    d9ca:	1b01      	addi      	r3, sp, 4
    d9cc:	9360      	ld.w      	r3, (r3, 0x0)
    d9ce:	3b41      	cmpnei      	r3, 1
    d9d0:	0c0b      	bf      	0xd9e6	//d9e6 <CK_UART_TestMode+0x86>
    d9d2:	1b01      	addi      	r3, sp, 4
    d9d4:	9360      	ld.w      	r3, (r3, 0x0)
    d9d6:	e9030008 	bez      	r3, 0xd9e6	//d9e6 <CK_UART_TestMode+0x86>
    {
       break;
    }
    else
    {
      printf("\n\tPlease enter 'y' or 'n'   ");
    d9da:	1208      	lrw      	r0, 0x10eec	//10eec <__etext+0x133c>
    d9dc:	e00007ba 	bsr      	0xe950	//e950 <printf>
    d9e0:	c4004820 	lsli      	r0, r0, 0
    }
  }
    d9e4:	07ec      	br      	0xd9bc	//d9bc <CK_UART_TestMode+0x5c>
  if(get == 1)
    d9e6:	1b01      	addi      	r3, sp, 4
    d9e8:	9360      	ld.w      	r3, (r3, 0x0)
    d9ea:	3b41      	cmpnei      	r3, 1
    d9ec:	0807      	bt      	0xd9fa	//d9fa <CK_UART_TestMode+0x9a>
  {
    printf("\t- - -PASS\n");
    d9ee:	1204      	lrw      	r0, 0x10f0c	//10f0c <__etext+0x135c>
    d9f0:	e00007b0 	bsr      	0xe950	//e950 <printf>
    d9f4:	c4004820 	lsli      	r0, r0, 0
    d9f8:	0406      	br      	0xda04	//da04 <CK_UART_TestMode+0xa4>
  }
  else 
  {
    printf("\t- - -FAILURE\n");
    d9fa:	1202      	lrw      	r0, 0x10f18	//10f18 <__etext+0x1368>
    d9fc:	e00007aa 	bsr      	0xe950	//e950 <printf>
    da00:	c4004820 	lsli      	r0, r0, 0
  }
///////////////////* Interrupt mode *////////////////////////
  printf("\r\t(interrupt mode ): Output is---\n\t\t");
    da04:	1200      	lrw      	r0, 0x10f28	//10f28 <__etext+0x1378>
    da06:	e00007a5 	bsr      	0xe950	//e950 <printf>
    da0a:	c4004820 	lsli      	r0, r0, 0
  /* Insure prompt information is displayed */
  delay(5000);
    da0e:	ea001388 	movi      	r0, 5000      	//0x1388
    da12:	e0000ac1 	bsr      	0xef94	//ef94 <delay>
    da16:	c4004820 	lsli      	r0, r0, 0
  /* Changes uart mode to interrupt mode */
  CK_Uart_Close(uartid);
    da1a:	6cfb      	mov      	r3, sp
    da1c:	9300      	ld.w      	r0, (r3, 0x0)
    da1e:	e3fffa6d 	bsr      	0xcef8	//cef8 <CK_Uart_Close>
    da22:	c4004820 	lsli      	r0, r0, 0
  CK_Uart_Open(uartid, NULL);
    da26:	6cfb      	mov      	r3, sp
    da28:	9300      	ld.w      	r0, (r3, 0x0)
    da2a:	3100      	movi      	r1, 0      	//0x0
    da2c:	e3fffa08 	bsr      	0xce3c	//ce3c <CK_Uart_Open>
    da30:	c4004820 	lsli      	r0, r0, 0
  CK_Uart_SetRXMode(uartid, FALSE);
    da34:	6cfb      	mov      	r3, sp
    da36:	9300      	ld.w      	r0, (r3, 0x0)
    da38:	3100      	movi      	r1, 0      	//0x0
    da3a:	e3fffd1f 	bsr      	0xd478	//d478 <CK_Uart_SetRXMode>
    da3e:	c4004820 	lsli      	r0, r0, 0
  CK_Uart_SetTXMode(uartid, FALSE);
    da42:	6cfb      	mov      	r3, sp
    da44:	9300      	ld.w      	r0, (r3, 0x0)
    da46:	3100      	movi      	r1, 0      	//0x0
    da48:	e3fffcc2 	bsr      	0xd3cc	//d3cc <CK_Uart_SetTXMode>
    da4c:	c4004820 	lsli      	r0, r0, 0
  for(i = 0; i < 14; i++)
    da50:	1b02      	addi      	r3, sp, 8
    da52:	3200      	movi      	r2, 0      	//0x0
    da54:	b340      	st.w      	r2, (r3, 0x0)
    da56:	0413      	br      	0xda7c	//da7c <CK_UART_TestMode+0x11c>
  {
    CK_Uart_PutChar(uartid, data[i]);
    da58:	1144      	lrw      	r2, 0x13474	//13474 <data>
    da5a:	1b02      	addi      	r3, sp, 8
    da5c:	9360      	ld.w      	r3, (r3, 0x0)
    da5e:	5a6c      	addu      	r3, r2, r3
    da60:	8360      	ld.b      	r3, (r3, 0x0)
    da62:	74cc      	zextb      	r3, r3
    da64:	6cbb      	mov      	r2, sp
    da66:	9200      	ld.w      	r0, (r2, 0x0)
    da68:	6c4f      	mov      	r1, r3
    da6a:	e3fffe07 	bsr      	0xd678	//d678 <CK_Uart_PutChar>
    da6e:	c4004820 	lsli      	r0, r0, 0
  /* Changes uart mode to interrupt mode */
  CK_Uart_Close(uartid);
  CK_Uart_Open(uartid, NULL);
  CK_Uart_SetRXMode(uartid, FALSE);
  CK_Uart_SetTXMode(uartid, FALSE);
  for(i = 0; i < 14; i++)
    da72:	1b02      	addi      	r3, sp, 8
    da74:	1a02      	addi      	r2, sp, 8
    da76:	9240      	ld.w      	r2, (r2, 0x0)
    da78:	2200      	addi      	r2, 1      	//0x1
    da7a:	b340      	st.w      	r2, (r3, 0x0)
    da7c:	1b02      	addi      	r3, sp, 8
    da7e:	9340      	ld.w      	r2, (r3, 0x0)
    da80:	330d      	movi      	r3, 13      	//0xd
    da82:	648c      	cmphs      	r3, r2
    da84:	0bea      	bt      	0xda58	//da58 <CK_UART_TestMode+0xf8>
  {
    CK_Uart_PutChar(uartid, data[i]);
  }
  printf("- - - [y/n] ");
    da86:	101b      	lrw      	r0, 0x10edc	//10edc <__etext+0x132c>
    da88:	e0000764 	bsr      	0xe950	//e950 <printf>
    da8c:	c4004820 	lsli      	r0, r0, 0
    while(1)
  {
    get = CK_WaitForReply();
    da90:	e0000aa2 	bsr      	0xefd4	//efd4 <CK_WaitForReply>
    da94:	c4004820 	lsli      	r0, r0, 0
    da98:	6c83      	mov      	r2, r0
    da9a:	1b01      	addi      	r3, sp, 4
    da9c:	b340      	st.w      	r2, (r3, 0x0)
    if((get == 1) ||(get == 0))
    da9e:	1b01      	addi      	r3, sp, 4
    daa0:	9360      	ld.w      	r3, (r3, 0x0)
    daa2:	3b41      	cmpnei      	r3, 1
    daa4:	0c0b      	bf      	0xdaba	//daba <CK_UART_TestMode+0x15a>
    daa6:	1b01      	addi      	r3, sp, 4
    daa8:	9360      	ld.w      	r3, (r3, 0x0)
    daaa:	e9030008 	bez      	r3, 0xdaba	//daba <CK_UART_TestMode+0x15a>
    {
       break;
    }
    else
    {
      printf("\n\tPlease enter 'y' or 'n'   ");
    daae:	1013      	lrw      	r0, 0x10eec	//10eec <__etext+0x133c>
    dab0:	e0000750 	bsr      	0xe950	//e950 <printf>
    dab4:	c4004820 	lsli      	r0, r0, 0
    }
  }
    dab8:	07ec      	br      	0xda90	//da90 <CK_UART_TestMode+0x130>
  if(get == 1)
    daba:	1b01      	addi      	r3, sp, 4
    dabc:	9360      	ld.w      	r3, (r3, 0x0)
    dabe:	3b41      	cmpnei      	r3, 1
    dac0:	0807      	bt      	0xdace	//dace <CK_UART_TestMode+0x16e>
  {
    printf("\t- - -PASS\n");
    dac2:	100f      	lrw      	r0, 0x10f0c	//10f0c <__etext+0x135c>
    dac4:	e0000746 	bsr      	0xe950	//e950 <printf>
    dac8:	c4004820 	lsli      	r0, r0, 0
    dacc:	0406      	br      	0xdad8	//dad8 <CK_UART_TestMode+0x178>
  }
  else 
  {
    printf("\t- - -FAILURE\n");
    dace:	100d      	lrw      	r0, 0x10f18	//10f18 <__etext+0x1368>
    dad0:	e0000740 	bsr      	0xe950	//e950 <printf>
    dad4:	c4004820 	lsli      	r0, r0, 0
  }
}
    dad8:	1403      	addi      	sp, sp, 12
    dada:	1490      	pop      	r15
    dadc:	00010e98 	.long	0x00010e98
    dae0:	0000e950 	.long	0x0000e950
    dae4:	00010eb8 	.long	0x00010eb8
    dae8:	00013474 	.long	0x00013474
    daec:	0000d678 	.long	0x0000d678
    daf0:	00010edc 	.long	0x00010edc
    daf4:	0000efd4 	.long	0x0000efd4
    daf8:	00010eec 	.long	0x00010eec
    dafc:	00010f0c 	.long	0x00010f0c
    db00:	00010f18 	.long	0x00010f18
    db04:	00010f28 	.long	0x00010f28
    db08:	0000ef94 	.long	0x0000ef94
    db0c:	0000cef8 	.long	0x0000cef8
    db10:	0000ce3c 	.long	0x0000ce3c
    db14:	0000d478 	.long	0x0000d478
    db18:	0000d3cc 	.long	0x0000d3cc

0000db1c <CK_UART_TestBaudrate>:

RETURN: NULL

*****************************************************************************/
static void CK_UART_TestBaudrate(CK_Uart_Device uartid)
{
    db1c:	14d0      	push      	r15
    db1e:	142a      	subi      	sp, sp, 40
    db20:	6cfb      	mov      	r3, sp
    db22:	b300      	st.w      	r0, (r3, 0x0)
  CK_UINT32 i;
  CK_UINT32 baudrate;
  CK_UINT32 get;  

  CK_UINT32 pB[] = {B9600, B14400, B38400, B57600, B115200, B19200};
    db24:	1a01      	addi      	r2, sp, 4
    db26:	3396      	movi      	r3, 150      	//0x96
    db28:	4366      	lsli      	r3, r3, 6
    db2a:	b260      	st.w      	r3, (r2, 0x0)
    db2c:	1a01      	addi      	r2, sp, 4
    db2e:	33e1      	movi      	r3, 225      	//0xe1
    db30:	4366      	lsli      	r3, r3, 6
    db32:	b261      	st.w      	r3, (r2, 0x4)
    db34:	1a01      	addi      	r2, sp, 4
    db36:	3396      	movi      	r3, 150      	//0x96
    db38:	4368      	lsli      	r3, r3, 8
    db3a:	b262      	st.w      	r3, (r2, 0x8)
    db3c:	1a01      	addi      	r2, sp, 4
    db3e:	33e1      	movi      	r3, 225      	//0xe1
    db40:	4368      	lsli      	r3, r3, 8
    db42:	b263      	st.w      	r3, (r2, 0xc)
    db44:	1a01      	addi      	r2, sp, 4
    db46:	33e1      	movi      	r3, 225      	//0xe1
    db48:	4369      	lsli      	r3, r3, 9
    db4a:	b264      	st.w      	r3, (r2, 0x10)
    db4c:	1a01      	addi      	r2, sp, 4
    db4e:	3396      	movi      	r3, 150      	//0x96
    db50:	4367      	lsli      	r3, r3, 7
    db52:	b265      	st.w      	r3, (r2, 0x14)

  printf("\n\t- - - Test uart baudrate.\n");
    db54:	1201      	lrw      	r0, 0x10f50	//10f50 <__etext+0x13a0>
    db56:	e00006fd 	bsr      	0xe950	//e950 <printf>
    db5a:	c4004820 	lsli      	r0, r0, 0
  for(baudrate = 0; baudrate < sizeof(pB) / 4; baudrate++)
    db5e:	1b08      	addi      	r3, sp, 32
    db60:	3200      	movi      	r2, 0      	//0x0
    db62:	b340      	st.w      	r2, (r3, 0x0)
    db64:	0473      	br      	0xdc4a	//dc4a <CK_UART_TestBaudrate+0x12e>
  {
    printf("\tBaudrate is %d? [y] ", pB[baudrate]);
    db66:	1b01      	addi      	r3, sp, 4
    db68:	1a08      	addi      	r2, sp, 32
    db6a:	9240      	ld.w      	r2, (r2, 0x0)
    db6c:	d0430883 	ldr.w      	r3, (r3, r2<<2)
    db70:	111c      	lrw      	r0, 0x10f70	//10f70 <__etext+0x13c0>
    db72:	6c4f      	mov      	r1, r3
    db74:	e00006ee 	bsr      	0xe950	//e950 <printf>
    db78:	c4004820 	lsli      	r0, r0, 0
    CK_Uart_ChangeBaudrate(uartid, pB[baudrate]);
    db7c:	1b01      	addi      	r3, sp, 4
    db7e:	1a08      	addi      	r2, sp, 32
    db80:	9240      	ld.w      	r2, (r2, 0x0)
    db82:	d0430883 	ldr.w      	r3, (r3, r2<<2)
    db86:	6cbb      	mov      	r2, sp
    db88:	9200      	ld.w      	r0, (r2, 0x0)
    db8a:	6c4f      	mov      	r1, r3
    db8c:	e3fffa08 	bsr      	0xcf9c	//cf9c <CK_Uart_ChangeBaudrate>
    db90:	c4004820 	lsli      	r0, r0, 0
    while(CK_WaitForReply() != 1)
    db94:	0406      	br      	0xdba0	//dba0 <CK_UART_TestBaudrate+0x84>
    {
      printf("\n\tPlease enter 'y'   ");
    db96:	1115      	lrw      	r0, 0x10f88	//10f88 <__etext+0x13d8>
    db98:	e00006dc 	bsr      	0xe950	//e950 <printf>
    db9c:	c4004820 	lsli      	r0, r0, 0
  printf("\n\t- - - Test uart baudrate.\n");
  for(baudrate = 0; baudrate < sizeof(pB) / 4; baudrate++)
  {
    printf("\tBaudrate is %d? [y] ", pB[baudrate]);
    CK_Uart_ChangeBaudrate(uartid, pB[baudrate]);
    while(CK_WaitForReply() != 1)
    dba0:	e0000a1a 	bsr      	0xefd4	//efd4 <CK_WaitForReply>
    dba4:	c4004820 	lsli      	r0, r0, 0
    dba8:	6cc3      	mov      	r3, r0
    dbaa:	3b41      	cmpnei      	r3, 1
    dbac:	0bf5      	bt      	0xdb96	//db96 <CK_UART_TestBaudrate+0x7a>
    {
      printf("\n\tPlease enter 'y'   ");
    }
    printf(" :Output is ---\n\t\t");
    dbae:	1111      	lrw      	r0, 0x10fa0	//10fa0 <__etext+0x13f0>
    dbb0:	e00006d0 	bsr      	0xe950	//e950 <printf>
    dbb4:	c4004820 	lsli      	r0, r0, 0
    for(i = 0; i < 14; i++)
    dbb8:	1b09      	addi      	r3, sp, 36
    dbba:	3200      	movi      	r2, 0      	//0x0
    dbbc:	b340      	st.w      	r2, (r3, 0x0)
    dbbe:	0413      	br      	0xdbe4	//dbe4 <CK_UART_TestBaudrate+0xc8>
    { 
      CK_Uart_PutChar(uartid, data[i]);
    dbc0:	114d      	lrw      	r2, 0x13474	//13474 <data>
    dbc2:	1b09      	addi      	r3, sp, 36
    dbc4:	9360      	ld.w      	r3, (r3, 0x0)
    dbc6:	5a6c      	addu      	r3, r2, r3
    dbc8:	8360      	ld.b      	r3, (r3, 0x0)
    dbca:	74cc      	zextb      	r3, r3
    dbcc:	6cbb      	mov      	r2, sp
    dbce:	9200      	ld.w      	r0, (r2, 0x0)
    dbd0:	6c4f      	mov      	r1, r3
    dbd2:	e3fffd53 	bsr      	0xd678	//d678 <CK_Uart_PutChar>
    dbd6:	c4004820 	lsli      	r0, r0, 0
    while(CK_WaitForReply() != 1)
    {
      printf("\n\tPlease enter 'y'   ");
    }
    printf(" :Output is ---\n\t\t");
    for(i = 0; i < 14; i++)
    dbda:	1b09      	addi      	r3, sp, 36
    dbdc:	1a09      	addi      	r2, sp, 36
    dbde:	9240      	ld.w      	r2, (r2, 0x0)
    dbe0:	2200      	addi      	r2, 1      	//0x1
    dbe2:	b340      	st.w      	r2, (r3, 0x0)
    dbe4:	1b09      	addi      	r3, sp, 36
    dbe6:	9340      	ld.w      	r2, (r3, 0x0)
    dbe8:	330d      	movi      	r3, 13      	//0xd
    dbea:	648c      	cmphs      	r3, r2
    dbec:	0bea      	bt      	0xdbc0	//dbc0 <CK_UART_TestBaudrate+0xa4>
    { 
      CK_Uart_PutChar(uartid, data[i]);
      
    }
    printf("- - -[y/n] ");
    dbee:	1104      	lrw      	r0, 0x10fb4	//10fb4 <__etext+0x1404>
    dbf0:	e00006b0 	bsr      	0xe950	//e950 <printf>
    dbf4:	c4004820 	lsli      	r0, r0, 0
    while(1)
    {
      get = CK_WaitForReply();
    dbf8:	e00009ee 	bsr      	0xefd4	//efd4 <CK_WaitForReply>
    dbfc:	c4004820 	lsli      	r0, r0, 0
    dc00:	6c83      	mov      	r2, r0
    dc02:	1b07      	addi      	r3, sp, 28
    dc04:	b340      	st.w      	r2, (r3, 0x0)
      if(get == 1 || get == 0)
    dc06:	1b07      	addi      	r3, sp, 28
    dc08:	9360      	ld.w      	r3, (r3, 0x0)
    dc0a:	3b41      	cmpnei      	r3, 1
    dc0c:	0c0b      	bf      	0xdc22	//dc22 <CK_UART_TestBaudrate+0x106>
    dc0e:	1b07      	addi      	r3, sp, 28
    dc10:	9360      	ld.w      	r3, (r3, 0x0)
    dc12:	e9030008 	bez      	r3, 0xdc22	//dc22 <CK_UART_TestBaudrate+0x106>
      {
	break;
      }
      else
      {
        printf("\n\tPlease enter 'y' or 'n'   ");
    dc16:	101b      	lrw      	r0, 0x10eec	//10eec <__etext+0x133c>
    dc18:	e000069c 	bsr      	0xe950	//e950 <printf>
    dc1c:	c4004820 	lsli      	r0, r0, 0
      }
    }
    dc20:	07ec      	br      	0xdbf8	//dbf8 <CK_UART_TestBaudrate+0xdc>
    if(get == 1)
    dc22:	1b07      	addi      	r3, sp, 28
    dc24:	9360      	ld.w      	r3, (r3, 0x0)
    dc26:	3b41      	cmpnei      	r3, 1
    dc28:	0807      	bt      	0xdc36	//dc36 <CK_UART_TestBaudrate+0x11a>
    {
      printf("\t- - -PASS\n");
    dc2a:	1017      	lrw      	r0, 0x10f0c	//10f0c <__etext+0x135c>
    dc2c:	e0000692 	bsr      	0xe950	//e950 <printf>
    dc30:	c4004820 	lsli      	r0, r0, 0
    dc34:	0406      	br      	0xdc40	//dc40 <CK_UART_TestBaudrate+0x124>
    }
    else 
   {
      printf("\t- - -FAILURE\n");
    dc36:	1015      	lrw      	r0, 0x10f18	//10f18 <__etext+0x1368>
    dc38:	e000068c 	bsr      	0xe950	//e950 <printf>
    dc3c:	c4004820 	lsli      	r0, r0, 0
  CK_UINT32 get;  

  CK_UINT32 pB[] = {B9600, B14400, B38400, B57600, B115200, B19200};

  printf("\n\t- - - Test uart baudrate.\n");
  for(baudrate = 0; baudrate < sizeof(pB) / 4; baudrate++)
    dc40:	1b08      	addi      	r3, sp, 32
    dc42:	1a08      	addi      	r2, sp, 32
    dc44:	9240      	ld.w      	r2, (r2, 0x0)
    dc46:	2200      	addi      	r2, 1      	//0x1
    dc48:	b340      	st.w      	r2, (r3, 0x0)
    dc4a:	1b08      	addi      	r3, sp, 32
    dc4c:	9340      	ld.w      	r2, (r3, 0x0)
    dc4e:	3305      	movi      	r3, 5      	//0x5
    dc50:	648c      	cmphs      	r3, r2
    dc52:	0b8a      	bt      	0xdb66	//db66 <CK_UART_TestBaudrate+0x4a>
      printf("\t- - -FAILURE\n");
    }

  }
  
}
    dc54:	140a      	addi      	sp, sp, 40
    dc56:	1490      	pop      	r15
    dc58:	00010f50 	.long	0x00010f50
    dc5c:	0000e950 	.long	0x0000e950
    dc60:	00010f70 	.long	0x00010f70
    dc64:	0000cf9c 	.long	0x0000cf9c
    dc68:	00010f88 	.long	0x00010f88
    dc6c:	0000efd4 	.long	0x0000efd4
    dc70:	00010fa0 	.long	0x00010fa0
    dc74:	00013474 	.long	0x00013474
    dc78:	0000d678 	.long	0x0000d678
    dc7c:	00010fb4 	.long	0x00010fb4
    dc80:	00010eec 	.long	0x00010eec
    dc84:	00010f0c 	.long	0x00010f0c
    dc88:	00010f18 	.long	0x00010f18

0000dc8c <CK_UART_TestParity>:

RETURN: NULL

*****************************************************************************/
static void CK_UART_TestParity(CK_Uart_Device uartid)
{
    dc8c:	14d0      	push      	r15
    dc8e:	1424      	subi      	sp, sp, 16
    dc90:	6cfb      	mov      	r3, sp
    dc92:	b300      	st.w      	r0, (r3, 0x0)
  CK_Uart_Parity parity;
  CK_UINT32 i;
  CK_UINT32 get;

  printf("\n\t- - - Test uart parity. (Parity: 0 --- ODD, 1 --- EVEN, 2 --- NONE)\n");
    dc94:	111d      	lrw      	r0, 0x10fc0	//10fc0 <__etext+0x1410>
    dc96:	e000065d 	bsr      	0xe950	//e950 <printf>
    dc9a:	c4004820 	lsli      	r0, r0, 0
  for(parity = 0; parity < 3; parity++)
    dc9e:	1b03      	addi      	r3, sp, 12
    dca0:	3200      	movi      	r2, 0      	//0x0
    dca2:	b340      	st.w      	r2, (r3, 0x0)
    dca4:	046b      	br      	0xdd7a	//dd7a <CK_UART_TestParity+0xee>
  {
    printf("\tParity is %d? [y] ", parity);
    dca6:	1b03      	addi      	r3, sp, 12
    dca8:	111a      	lrw      	r0, 0x11008	//11008 <__etext+0x1458>
    dcaa:	9320      	ld.w      	r1, (r3, 0x0)
    dcac:	e0000652 	bsr      	0xe950	//e950 <printf>
    dcb0:	c4004820 	lsli      	r0, r0, 0
    CK_Uart_SetParity(uartid, parity);
    dcb4:	6cbb      	mov      	r2, sp
    dcb6:	1b03      	addi      	r3, sp, 12
    dcb8:	9200      	ld.w      	r0, (r2, 0x0)
    dcba:	9320      	ld.w      	r1, (r3, 0x0)
    dcbc:	e3fffa12 	bsr      	0xd0e0	//d0e0 <CK_Uart_SetParity>
    dcc0:	c4004820 	lsli      	r0, r0, 0
    while(CK_WaitForReply() != 1)
    dcc4:	0406      	br      	0xdcd0	//dcd0 <CK_UART_TestParity+0x44>
    {
      printf("\n\tPlease enter 'y'   ");
    dcc6:	1115      	lrw      	r0, 0x10f88	//10f88 <__etext+0x13d8>
    dcc8:	e0000644 	bsr      	0xe950	//e950 <printf>
    dccc:	c4004820 	lsli      	r0, r0, 0
  printf("\n\t- - - Test uart parity. (Parity: 0 --- ODD, 1 --- EVEN, 2 --- NONE)\n");
  for(parity = 0; parity < 3; parity++)
  {
    printf("\tParity is %d? [y] ", parity);
    CK_Uart_SetParity(uartid, parity);
    while(CK_WaitForReply() != 1)
    dcd0:	e0000982 	bsr      	0xefd4	//efd4 <CK_WaitForReply>
    dcd4:	c4004820 	lsli      	r0, r0, 0
    dcd8:	6cc3      	mov      	r3, r0
    dcda:	3b41      	cmpnei      	r3, 1
    dcdc:	0bf5      	bt      	0xdcc6	//dcc6 <CK_UART_TestParity+0x3a>
    {
      printf("\n\tPlease enter 'y'   ");
    }
    printf(" :Output is ---\n\t\t");
    dcde:	1111      	lrw      	r0, 0x10fa0	//10fa0 <__etext+0x13f0>
    dce0:	e0000638 	bsr      	0xe950	//e950 <printf>
    dce4:	c4004820 	lsli      	r0, r0, 0
    for(i = 0; i < 14; i++)
    dce8:	1b02      	addi      	r3, sp, 8
    dcea:	3200      	movi      	r2, 0      	//0x0
    dcec:	b340      	st.w      	r2, (r3, 0x0)
    dcee:	0413      	br      	0xdd14	//dd14 <CK_UART_TestParity+0x88>
    {
      CK_Uart_PutChar(uartid, data[i]);
    dcf0:	114d      	lrw      	r2, 0x13474	//13474 <data>
    dcf2:	1b02      	addi      	r3, sp, 8
    dcf4:	9360      	ld.w      	r3, (r3, 0x0)
    dcf6:	5a6c      	addu      	r3, r2, r3
    dcf8:	8360      	ld.b      	r3, (r3, 0x0)
    dcfa:	74cc      	zextb      	r3, r3
    dcfc:	6cbb      	mov      	r2, sp
    dcfe:	9200      	ld.w      	r0, (r2, 0x0)
    dd00:	6c4f      	mov      	r1, r3
    dd02:	e3fffcbb 	bsr      	0xd678	//d678 <CK_Uart_PutChar>
    dd06:	c4004820 	lsli      	r0, r0, 0
    while(CK_WaitForReply() != 1)
    {
      printf("\n\tPlease enter 'y'   ");
    }
    printf(" :Output is ---\n\t\t");
    for(i = 0; i < 14; i++)
    dd0a:	1b02      	addi      	r3, sp, 8
    dd0c:	1a02      	addi      	r2, sp, 8
    dd0e:	9240      	ld.w      	r2, (r2, 0x0)
    dd10:	2200      	addi      	r2, 1      	//0x1
    dd12:	b340      	st.w      	r2, (r3, 0x0)
    dd14:	1b02      	addi      	r3, sp, 8
    dd16:	9340      	ld.w      	r2, (r3, 0x0)
    dd18:	330d      	movi      	r3, 13      	//0xd
    dd1a:	648c      	cmphs      	r3, r2
    dd1c:	0bea      	bt      	0xdcf0	//dcf0 <CK_UART_TestParity+0x64>
    {
      CK_Uart_PutChar(uartid, data[i]);
    }

    printf("- - -[y/n] ");
    dd1e:	1104      	lrw      	r0, 0x10fb4	//10fb4 <__etext+0x1404>
    dd20:	e0000618 	bsr      	0xe950	//e950 <printf>
    dd24:	c4004820 	lsli      	r0, r0, 0
    while(1)
    {
      get = CK_WaitForReply();
    dd28:	e0000956 	bsr      	0xefd4	//efd4 <CK_WaitForReply>
    dd2c:	c4004820 	lsli      	r0, r0, 0
    dd30:	6c83      	mov      	r2, r0
    dd32:	1b01      	addi      	r3, sp, 4
    dd34:	b340      	st.w      	r2, (r3, 0x0)
      if(get == 1 || get == 0)
    dd36:	1b01      	addi      	r3, sp, 4
    dd38:	9360      	ld.w      	r3, (r3, 0x0)
    dd3a:	3b41      	cmpnei      	r3, 1
    dd3c:	0c0b      	bf      	0xdd52	//dd52 <CK_UART_TestParity+0xc6>
    dd3e:	1b01      	addi      	r3, sp, 4
    dd40:	9360      	ld.w      	r3, (r3, 0x0)
    dd42:	e9030008 	bez      	r3, 0xdd52	//dd52 <CK_UART_TestParity+0xc6>
      {
        break;
      }
      else
      {
        printf("\n\tPlease enter 'y' or 'n'   ");
    dd46:	101b      	lrw      	r0, 0x10eec	//10eec <__etext+0x133c>
    dd48:	e0000604 	bsr      	0xe950	//e950 <printf>
    dd4c:	c4004820 	lsli      	r0, r0, 0
      }
     }
    dd50:	07ec      	br      	0xdd28	//dd28 <CK_UART_TestParity+0x9c>
    if(get == 1)
    dd52:	1b01      	addi      	r3, sp, 4
    dd54:	9360      	ld.w      	r3, (r3, 0x0)
    dd56:	3b41      	cmpnei      	r3, 1
    dd58:	0807      	bt      	0xdd66	//dd66 <CK_UART_TestParity+0xda>
    {
      printf("\t- - -PASS\n");
    dd5a:	1017      	lrw      	r0, 0x10f0c	//10f0c <__etext+0x135c>
    dd5c:	e00005fa 	bsr      	0xe950	//e950 <printf>
    dd60:	c4004820 	lsli      	r0, r0, 0
    dd64:	0406      	br      	0xdd70	//dd70 <CK_UART_TestParity+0xe4>
    }
    else
   {
      printf("\t- - -FAILURE\n");
    dd66:	1015      	lrw      	r0, 0x10f18	//10f18 <__etext+0x1368>
    dd68:	e00005f4 	bsr      	0xe950	//e950 <printf>
    dd6c:	c4004820 	lsli      	r0, r0, 0
  CK_Uart_Parity parity;
  CK_UINT32 i;
  CK_UINT32 get;

  printf("\n\t- - - Test uart parity. (Parity: 0 --- ODD, 1 --- EVEN, 2 --- NONE)\n");
  for(parity = 0; parity < 3; parity++)
    dd70:	1b03      	addi      	r3, sp, 12
    dd72:	1a03      	addi      	r2, sp, 12
    dd74:	9240      	ld.w      	r2, (r2, 0x0)
    dd76:	2200      	addi      	r2, 1      	//0x1
    dd78:	b340      	st.w      	r2, (r3, 0x0)
    dd7a:	1b03      	addi      	r3, sp, 12
    dd7c:	9340      	ld.w      	r2, (r3, 0x0)
    dd7e:	3302      	movi      	r3, 2      	//0x2
    dd80:	648c      	cmphs      	r3, r2
    dd82:	0b92      	bt      	0xdca6	//dca6 <CK_UART_TestParity+0x1a>
      printf("\t- - -FAILURE\n");
    }

  }

}
    dd84:	1404      	addi      	sp, sp, 16
    dd86:	1490      	pop      	r15
    dd88:	00010fc0 	.long	0x00010fc0
    dd8c:	0000e950 	.long	0x0000e950
    dd90:	00011008 	.long	0x00011008
    dd94:	0000d0e0 	.long	0x0000d0e0
    dd98:	00010f88 	.long	0x00010f88
    dd9c:	0000efd4 	.long	0x0000efd4
    dda0:	00010fa0 	.long	0x00010fa0
    dda4:	00013474 	.long	0x00013474
    dda8:	0000d678 	.long	0x0000d678
    ddac:	00010fb4 	.long	0x00010fb4
    ddb0:	00010eec 	.long	0x00010eec
    ddb4:	00010f0c 	.long	0x00010f0c
    ddb8:	00010f18 	.long	0x00010f18

0000ddbc <CK_UART_TestWordSize>:

*****************************************************************************/
static void CK_UART_TestWordSize(
  CK_Uart_Device uartid
)
{
    ddbc:	14d0      	push      	r15
    ddbe:	1424      	subi      	sp, sp, 16
    ddc0:	6cfb      	mov      	r3, sp
    ddc2:	b300      	st.w      	r0, (r3, 0x0)
  CK_Uart_WordSize wordsize;
  CK_UINT32 i;
  CK_UINT32 get;  

  printf("\n\t- - - Test uart wordsize.\n");
    ddc4:	1200      	lrw      	r0, 0x1101c	//1101c <__etext+0x146c>
    ddc6:	e00005c5 	bsr      	0xe950	//e950 <printf>
    ddca:	c4004820 	lsli      	r0, r0, 0
  printf("\t0 --- WORD_SIZE_5,\n\t1 --- WORD_SIZE_6,\n"
    ddce:	1200      	lrw      	r0, 0x1103c	//1103c <__etext+0x148c>
    ddd0:	e00005c0 	bsr      	0xe950	//e950 <printf>
    ddd4:	c4004820 	lsli      	r0, r0, 0
         "\t2 --- WORD_SIZE_7,\n\t3 --- WORD_SIZE_8\n");
  for(wordsize = 2; wordsize < 4; wordsize++)
    ddd8:	1b03      	addi      	r3, sp, 12
    ddda:	3202      	movi      	r2, 2      	//0x2
    dddc:	b340      	st.w      	r2, (r3, 0x0)
    ddde:	046b      	br      	0xdeb4	//deb4 <CK_UART_TestWordSize+0xf8>
  {
    printf("\tWordsize is %d? [y] ", wordsize);
    dde0:	1b03      	addi      	r3, sp, 12
    dde2:	111c      	lrw      	r0, 0x1108c	//1108c <__etext+0x14dc>
    dde4:	9320      	ld.w      	r1, (r3, 0x0)
    dde6:	e00005b5 	bsr      	0xe950	//e950 <printf>
    ddea:	c4004820 	lsli      	r0, r0, 0
    CK_Uart_SetWordSize(uartid, wordsize);
    ddee:	6cbb      	mov      	r2, sp
    ddf0:	1b03      	addi      	r3, sp, 12
    ddf2:	9200      	ld.w      	r0, (r2, 0x0)
    ddf4:	9320      	ld.w      	r1, (r3, 0x0)
    ddf6:	e3fffa57 	bsr      	0xd2a4	//d2a4 <CK_Uart_SetWordSize>
    ddfa:	c4004820 	lsli      	r0, r0, 0
    while(CK_WaitForReply() != 1)
    ddfe:	0406      	br      	0xde0a	//de0a <CK_UART_TestWordSize+0x4e>
    {
      printf("\n\tPlease enter 'y'   ");
    de00:	1116      	lrw      	r0, 0x10f88	//10f88 <__etext+0x13d8>
    de02:	e00005a7 	bsr      	0xe950	//e950 <printf>
    de06:	c4004820 	lsli      	r0, r0, 0
         "\t2 --- WORD_SIZE_7,\n\t3 --- WORD_SIZE_8\n");
  for(wordsize = 2; wordsize < 4; wordsize++)
  {
    printf("\tWordsize is %d? [y] ", wordsize);
    CK_Uart_SetWordSize(uartid, wordsize);
    while(CK_WaitForReply() != 1)
    de0a:	e00008e5 	bsr      	0xefd4	//efd4 <CK_WaitForReply>
    de0e:	c4004820 	lsli      	r0, r0, 0
    de12:	6cc3      	mov      	r3, r0
    de14:	3b41      	cmpnei      	r3, 1
    de16:	0bf5      	bt      	0xde00	//de00 <CK_UART_TestWordSize+0x44>
    {
      printf("\n\tPlease enter 'y'   ");
    }
    printf(" :Output is ---\n\t\t");
    de18:	1112      	lrw      	r0, 0x10fa0	//10fa0 <__etext+0x13f0>
    de1a:	e000059b 	bsr      	0xe950	//e950 <printf>
    de1e:	c4004820 	lsli      	r0, r0, 0
    for(i = 0; i < 14; i++)
    de22:	1b02      	addi      	r3, sp, 8
    de24:	3200      	movi      	r2, 0      	//0x0
    de26:	b340      	st.w      	r2, (r3, 0x0)
    de28:	0413      	br      	0xde4e	//de4e <CK_UART_TestWordSize+0x92>
    {
      CK_Uart_PutChar(uartid, data[i]);
    de2a:	114f      	lrw      	r2, 0x13474	//13474 <data>
    de2c:	1b02      	addi      	r3, sp, 8
    de2e:	9360      	ld.w      	r3, (r3, 0x0)
    de30:	5a6c      	addu      	r3, r2, r3
    de32:	8360      	ld.b      	r3, (r3, 0x0)
    de34:	74cc      	zextb      	r3, r3
    de36:	6cbb      	mov      	r2, sp
    de38:	9200      	ld.w      	r0, (r2, 0x0)
    de3a:	6c4f      	mov      	r1, r3
    de3c:	e3fffc1e 	bsr      	0xd678	//d678 <CK_Uart_PutChar>
    de40:	c4004820 	lsli      	r0, r0, 0
    while(CK_WaitForReply() != 1)
    {
      printf("\n\tPlease enter 'y'   ");
    }
    printf(" :Output is ---\n\t\t");
    for(i = 0; i < 14; i++)
    de44:	1b02      	addi      	r3, sp, 8
    de46:	1a02      	addi      	r2, sp, 8
    de48:	9240      	ld.w      	r2, (r2, 0x0)
    de4a:	2200      	addi      	r2, 1      	//0x1
    de4c:	b340      	st.w      	r2, (r3, 0x0)
    de4e:	1b02      	addi      	r3, sp, 8
    de50:	9340      	ld.w      	r2, (r3, 0x0)
    de52:	330d      	movi      	r3, 13      	//0xd
    de54:	648c      	cmphs      	r3, r2
    de56:	0bea      	bt      	0xde2a	//de2a <CK_UART_TestWordSize+0x6e>
    {
      CK_Uart_PutChar(uartid, data[i]);
    }

    printf("- - -[y/n] ");
    de58:	1105      	lrw      	r0, 0x10fb4	//10fb4 <__etext+0x1404>
    de5a:	e000057b 	bsr      	0xe950	//e950 <printf>
    de5e:	c4004820 	lsli      	r0, r0, 0
    while(1)
    {
      get = CK_WaitForReply();
    de62:	e00008b9 	bsr      	0xefd4	//efd4 <CK_WaitForReply>
    de66:	c4004820 	lsli      	r0, r0, 0
    de6a:	6c83      	mov      	r2, r0
    de6c:	1b01      	addi      	r3, sp, 4
    de6e:	b340      	st.w      	r2, (r3, 0x0)
      if(get == 1 || get == 0)
    de70:	1b01      	addi      	r3, sp, 4
    de72:	9360      	ld.w      	r3, (r3, 0x0)
    de74:	3b41      	cmpnei      	r3, 1
    de76:	0c0b      	bf      	0xde8c	//de8c <CK_UART_TestWordSize+0xd0>
    de78:	1b01      	addi      	r3, sp, 4
    de7a:	9360      	ld.w      	r3, (r3, 0x0)
    de7c:	e9030008 	bez      	r3, 0xde8c	//de8c <CK_UART_TestWordSize+0xd0>
      {
        break;
      }
      else
      {
        printf("\n\tPlease enter 'y' or 'n'   ");
    de80:	101c      	lrw      	r0, 0x10eec	//10eec <__etext+0x133c>
    de82:	e0000567 	bsr      	0xe950	//e950 <printf>
    de86:	c4004820 	lsli      	r0, r0, 0
      }
     }
    de8a:	07ec      	br      	0xde62	//de62 <CK_UART_TestWordSize+0xa6>
    if(get == 1)
    de8c:	1b01      	addi      	r3, sp, 4
    de8e:	9360      	ld.w      	r3, (r3, 0x0)
    de90:	3b41      	cmpnei      	r3, 1
    de92:	0807      	bt      	0xdea0	//dea0 <CK_UART_TestWordSize+0xe4>
    {
      printf("\t- - -PASS\n");
    de94:	1018      	lrw      	r0, 0x10f0c	//10f0c <__etext+0x135c>
    de96:	e000055d 	bsr      	0xe950	//e950 <printf>
    de9a:	c4004820 	lsli      	r0, r0, 0
    de9e:	0406      	br      	0xdeaa	//deaa <CK_UART_TestWordSize+0xee>
    }
    else
   {
      printf("\t- - -FAILURE\n");
    dea0:	1016      	lrw      	r0, 0x10f18	//10f18 <__etext+0x1368>
    dea2:	e0000557 	bsr      	0xe950	//e950 <printf>
    dea6:	c4004820 	lsli      	r0, r0, 0
  CK_UINT32 get;  

  printf("\n\t- - - Test uart wordsize.\n");
  printf("\t0 --- WORD_SIZE_5,\n\t1 --- WORD_SIZE_6,\n"
         "\t2 --- WORD_SIZE_7,\n\t3 --- WORD_SIZE_8\n");
  for(wordsize = 2; wordsize < 4; wordsize++)
    deaa:	1b03      	addi      	r3, sp, 12
    deac:	1a03      	addi      	r2, sp, 12
    deae:	9240      	ld.w      	r2, (r2, 0x0)
    deb0:	2200      	addi      	r2, 1      	//0x1
    deb2:	b340      	st.w      	r2, (r3, 0x0)
    deb4:	1b03      	addi      	r3, sp, 12
    deb6:	9340      	ld.w      	r2, (r3, 0x0)
    deb8:	3303      	movi      	r3, 3      	//0x3
    deba:	648c      	cmphs      	r3, r2
    debc:	0b92      	bt      	0xdde0	//dde0 <CK_UART_TestWordSize+0x24>
      printf("\t- - -FAILURE\n");
    }

  }
 
}
    debe:	1404      	addi      	sp, sp, 16
    dec0:	1490      	pop      	r15
    dec2:	0000      	.short	0x0000
    dec4:	0001101c 	.long	0x0001101c
    dec8:	0000e950 	.long	0x0000e950
    decc:	0001103c 	.long	0x0001103c
    ded0:	0001108c 	.long	0x0001108c
    ded4:	0000d2a4 	.long	0x0000d2a4
    ded8:	00010f88 	.long	0x00010f88
    dedc:	0000efd4 	.long	0x0000efd4
    dee0:	00010fa0 	.long	0x00010fa0
    dee4:	00013474 	.long	0x00013474
    dee8:	0000d678 	.long	0x0000d678
    deec:	00010fb4 	.long	0x00010fb4
    def0:	00010eec 	.long	0x00010eec
    def4:	00010f0c 	.long	0x00010f0c
    def8:	00010f18 	.long	0x00010f18

0000defc <CK_UART_Test>:

RETURN: NULL

*****************************************************************************/
void CK_UART_Test()
{
    defc:	14d0      	push      	r15
    defe:	1422      	subi      	sp, sp, 8
  CK_UINT32 get;
  CK_Uart_Device uartid = consoleuart;
    df00:	1b01      	addi      	r3, sp, 4
    df02:	114b      	lrw      	r2, 0x134c0	//134c0 <__bss_start>
    df04:	9240      	ld.w      	r2, (r2, 0x0)
    df06:	b340      	st.w      	r2, (r3, 0x0)

  printf("Testing uart...");
    df08:	110a      	lrw      	r0, 0x110a4	//110a4 <__etext+0x14f4>
    df0a:	e0000523 	bsr      	0xe950	//e950 <printf>
    df0e:	c4004820 	lsli      	r0, r0, 0
  printf("\nDefault configure: Baudrate --- 19200,");
    df12:	110a      	lrw      	r0, 0x110b4	//110b4 <__etext+0x1504>
    df14:	e000051e 	bsr      	0xe950	//e950 <printf>
    df18:	c4004820 	lsli      	r0, r0, 0
  printf("Parity --- NONE,");
    df1c:	1108      	lrw      	r0, 0x110dc	//110dc <__etext+0x152c>
    df1e:	e0000519 	bsr      	0xe950	//e950 <printf>
    df22:	c4004820 	lsli      	r0, r0, 0
  printf("Wordsize --- 8. ");
    df26:	1107      	lrw      	r0, 0x110f0	//110f0 <__etext+0x1540>
    df28:	e0000514 	bsr      	0xe950	//e950 <printf>
    df2c:	c4004820 	lsli      	r0, r0, 0
  printf("\n- - -UART%d ready? [y] ", uartid);
    df30:	1b01      	addi      	r3, sp, 4
    df32:	1105      	lrw      	r0, 0x11104	//11104 <__etext+0x1554>
    df34:	9320      	ld.w      	r1, (r3, 0x0)
    df36:	e000050d 	bsr      	0xe950	//e950 <printf>
    df3a:	c4004820 	lsli      	r0, r0, 0

  while(1)
  {
    get = CK_WaitForReply();
    df3e:	e000084b 	bsr      	0xefd4	//efd4 <CK_WaitForReply>
    df42:	c4004820 	lsli      	r0, r0, 0
    df46:	6c83      	mov      	r2, r0
    df48:	6cfb      	mov      	r3, sp
    df4a:	b340      	st.w      	r2, (r3, 0x0)
    if((get == 1))
    df4c:	6cfb      	mov      	r3, sp
    df4e:	9360      	ld.w      	r3, (r3, 0x0)
    df50:	3b41      	cmpnei      	r3, 1
    df52:	0827      	bt      	0xdfa0	//dfa0 <CK_UART_Test+0xa4>
    else
    {
      printf("\nPlease enter 'y'   ");
    }
  }
  CK_UART_TestMode(uartid);
    df54:	1b01      	addi      	r3, sp, 4
    df56:	9300      	ld.w      	r0, (r3, 0x0)
    df58:	e3fffd04 	bsr      	0xd960	//d960 <CK_UART_TestMode>
    df5c:	c4004820 	lsli      	r0, r0, 0
  /*
   * After have tested uart mode, Baudrate, Parity and WordSize are tested in
   * interrupt mode here, so you can stop testing process by press CTRL+C.
   */
  CK_UART_TestBaudrate(uartid);
    df60:	1b01      	addi      	r3, sp, 4
    df62:	9300      	ld.w      	r0, (r3, 0x0)
    df64:	e3fffddc 	bsr      	0xdb1c	//db1c <CK_UART_TestBaudrate>
    df68:	c4004820 	lsli      	r0, r0, 0
  CK_UART_TestParity(uartid);
    df6c:	1b01      	addi      	r3, sp, 4
    df6e:	9300      	ld.w      	r0, (r3, 0x0)
    df70:	e3fffe8e 	bsr      	0xdc8c	//dc8c <CK_UART_TestParity>
    df74:	c4004820 	lsli      	r0, r0, 0
  CK_UART_TestWordSize(uartid);
    df78:	1b01      	addi      	r3, sp, 4
    df7a:	9300      	ld.w      	r0, (r3, 0x0)
    df7c:	e3ffff20 	bsr      	0xddbc	//ddbc <CK_UART_TestWordSize>
    df80:	c4004820 	lsli      	r0, r0, 0
  
  /* Recover uart to default configure.*/
  delay(10000);
    df84:	ea002710 	movi      	r0, 10000      	//0x2710
    df88:	e0000806 	bsr      	0xef94	//ef94 <delay>
    df8c:	c4004820 	lsli      	r0, r0, 0
  CK_Uart_Close(uartid);
    df90:	1b01      	addi      	r3, sp, 4
    df92:	9300      	ld.w      	r0, (r3, 0x0)
    df94:	e3fff7b2 	bsr      	0xcef8	//cef8 <CK_Uart_Close>
    df98:	c4004820 	lsli      	r0, r0, 0
}
    df9c:	1402      	addi      	sp, sp, 8
    df9e:	1490      	pop      	r15
    {
       break;
    }
    else
    {
      printf("\nPlease enter 'y'   ");
    dfa0:	1011      	lrw      	r0, 0x11120	//11120 <__etext+0x1570>
    dfa2:	e00004d7 	bsr      	0xe950	//e950 <printf>
    dfa6:	c4004820 	lsli      	r0, r0, 0
    }
  }
    dfaa:	07ca      	br      	0xdf3e	//df3e <CK_UART_Test+0x42>
    dfac:	000134c0 	.long	0x000134c0
    dfb0:	000110a4 	.long	0x000110a4
    dfb4:	0000e950 	.long	0x0000e950
    dfb8:	000110b4 	.long	0x000110b4
    dfbc:	000110dc 	.long	0x000110dc
    dfc0:	000110f0 	.long	0x000110f0
    dfc4:	00011104 	.long	0x00011104
    dfc8:	0000efd4 	.long	0x0000efd4
    dfcc:	0000d960 	.long	0x0000d960
    dfd0:	0000db1c 	.long	0x0000db1c
    dfd4:	0000dc8c 	.long	0x0000dc8c
    dfd8:	0000ddbc 	.long	0x0000ddbc
    dfdc:	0000ef94 	.long	0x0000ef94
    dfe0:	0000cef8 	.long	0x0000cef8
    dfe4:	00011120 	.long	0x00011120

0000dfe8 <readl>:
{
    *(volatile Bit16u *)addr = value;
}

static inline Bit32u readl(const volatile void *addr)
{
    dfe8:	1421      	subi      	sp, sp, 4
    dfea:	6cfb      	mov      	r3, sp
    dfec:	b300      	st.w      	r0, (r3, 0x0)
    return *(const volatile Bit32u *)addr;
    dfee:	6cfb      	mov      	r3, sp
    dff0:	9360      	ld.w      	r3, (r3, 0x0)
    dff2:	9360      	ld.w      	r3, (r3, 0x0)
}
    dff4:	6c0f      	mov      	r0, r3
    dff6:	1401      	addi      	sp, sp, 4
    dff8:	783c      	rts
	...

0000dffc <CK_WDT_Handler>:
#include "io.h"
#include "misc.h"

Bit32u wdttestflag=0;
void CK_WDT_Handler(Bit32u irqid)
{
    dffc:	14d1      	push      	r4, r15
    dffe:	1424      	subi      	sp, sp, 16
    e000:	6cfb      	mov      	r3, sp
    e002:	b300      	st.w      	r0, (r3, 0x0)
	Bit32u temp,i;
	ITStatus_TypeDef state;

	state=WDT_GetITStatus();
    e004:	1c02      	addi      	r4, sp, 8
    e006:	e000034d 	bsr      	0xe6a0	//e6a0 <WDT_GetITStatus>
    e00a:	c4004820 	lsli      	r0, r0, 0
    e00e:	b400      	st.w      	r0, (r4, 0x0)
	printf(" IT state:%x \n", state);
    e010:	1b02      	addi      	r3, sp, 8
    e012:	101f      	lrw      	r0, 0x11138	//11138 <__etext+0x1588>
    e014:	9320      	ld.w      	r1, (r3, 0x0)
    e016:	e000049d 	bsr      	0xe950	//e950 <printf>
    e01a:	c4004820 	lsli      	r0, r0, 0
	temp=WDT_GetCNTValue();
    e01e:	1c01      	addi      	r4, sp, 4
    e020:	e000032c 	bsr      	0xe678	//e678 <WDT_GetCNTValue>
    e024:	c4004820 	lsli      	r0, r0, 0
    e028:	b400      	st.w      	r0, (r4, 0x0)
	printf(" Counter Value is:%x \n", temp);
    e02a:	1b01      	addi      	r3, sp, 4
    e02c:	101b      	lrw      	r0, 0x11148	//11148 <__etext+0x1598>
    e02e:	9320      	ld.w      	r1, (r3, 0x0)
    e030:	e0000490 	bsr      	0xe950	//e950 <printf>
    e034:	c4004820 	lsli      	r0, r0, 0

	WDT_ClearFlag();
    e038:	e0000358 	bsr      	0xe6e8	//e6e8 <WDT_ClearFlag>
    e03c:	c4004820 	lsli      	r0, r0, 0
	WDT_CNT_RStart();
    e040:	e0000204 	bsr      	0xe448	//e448 <WDT_CNT_RStart>
    e044:	c4004820 	lsli      	r0, r0, 0

	for(i=0;i<=4;i++)
    e048:	1b03      	addi      	r3, sp, 12
    e04a:	3200      	movi      	r2, 0      	//0x0
    e04c:	b340      	st.w      	r2, (r3, 0x0)
    e04e:	0413      	br      	0xe074	//e074 <CK_WDT_Handler+0x78>
	{
		temp=WDT_GetCNTValue();
    e050:	1c01      	addi      	r4, sp, 4
    e052:	e0000313 	bsr      	0xe678	//e678 <WDT_GetCNTValue>
    e056:	c4004820 	lsli      	r0, r0, 0
    e05a:	b400      	st.w      	r0, (r4, 0x0)
		printf(" Counter Value is:%x \n", temp);
    e05c:	1b01      	addi      	r3, sp, 4
    e05e:	100f      	lrw      	r0, 0x11148	//11148 <__etext+0x1598>
    e060:	9320      	ld.w      	r1, (r3, 0x0)
    e062:	e0000477 	bsr      	0xe950	//e950 <printf>
    e066:	c4004820 	lsli      	r0, r0, 0
	printf(" Counter Value is:%x \n", temp);

	WDT_ClearFlag();
	WDT_CNT_RStart();

	for(i=0;i<=4;i++)
    e06a:	1b03      	addi      	r3, sp, 12
    e06c:	1a03      	addi      	r2, sp, 12
    e06e:	9240      	ld.w      	r2, (r2, 0x0)
    e070:	2200      	addi      	r2, 1      	//0x1
    e072:	b340      	st.w      	r2, (r3, 0x0)
    e074:	1b03      	addi      	r3, sp, 12
    e076:	9340      	ld.w      	r2, (r3, 0x0)
    e078:	3304      	movi      	r3, 4      	//0x4
    e07a:	648c      	cmphs      	r3, r2
    e07c:	0bea      	bt      	0xe050	//e050 <CK_WDT_Handler+0x54>
	{
		temp=WDT_GetCNTValue();
		printf(" Counter Value is:%x \n", temp);
	}

	wdttestflag=1;
    e07e:	106a      	lrw      	r3, 0x136e8	//136e8 <wdttestflag>
    e080:	3201      	movi      	r2, 1      	//0x1
    e082:	b340      	st.w      	r2, (r3, 0x0)
}
    e084:	1404      	addi      	sp, sp, 16
    e086:	1491      	pop      	r4, r15
    e088:	0000e6a0 	.long	0x0000e6a0
    e08c:	00011138 	.long	0x00011138
    e090:	0000e950 	.long	0x0000e950
    e094:	0000e678 	.long	0x0000e678
    e098:	00011148 	.long	0x00011148
    e09c:	0000e6e8 	.long	0x0000e6e8
    e0a0:	0000e448 	.long	0x0000e448
    e0a4:	000136e8 	.long	0x000136e8

0000e0a8 <WDT_Test1>:
/*
 * GER_IT mode,set TOP_INIT and TOP
 *
 */
void WDT_Test1(void )
{
    e0a8:	14d1      	push      	r4, r15
    e0aa:	1422      	subi      	sp, sp, 8
	wdttestflag=0;
    e0ac:	1174      	lrw      	r3, 0x136e8	//136e8 <wdttestflag>
    e0ae:	3200      	movi      	r2, 0      	//0x0
    e0b0:	b340      	st.w      	r2, (r3, 0x0)
	Bit32u temp,i;
	printf (" wdt test begins \n");
    e0b2:	1114      	lrw      	r0, 0x11160	//11160 <__etext+0x15b0>
    e0b4:	e000044e 	bsr      	0xe950	//e950 <printf>
    e0b8:	c4004820 	lsli      	r0, r0, 0
	WDT_Deactive();
    e0bc:	e000012a 	bsr      	0xe310	//e310 <WDT_Deactive>
    e0c0:	c4004820 	lsli      	r0, r0, 0
	temp = reg_readl(WDT,WDT_TORR);
    e0c4:	6d3b      	mov      	r4, sp
    e0c6:	ea201907 	movih      	r0, 6407      	//0x1907
    e0ca:	38a2      	bseti      	r0, 2
    e0cc:	e3ffff8e 	bsr      	0xdfe8	//dfe8 <readl>
    e0d0:	c4004820 	lsli      	r0, r0, 0
    e0d4:	b400      	st.w      	r0, (r4, 0x0)
	printf(" TORR_1:%x \n", temp);
    e0d6:	6cfb      	mov      	r3, sp
    e0d8:	110e      	lrw      	r0, 0x11174	//11174 <__etext+0x15c4>
    e0da:	9320      	ld.w      	r1, (r3, 0x0)
    e0dc:	e000043a 	bsr      	0xe950	//e950 <printf>
    e0e0:	c4004820 	lsli      	r0, r0, 0
	WDT_Configuation(GER_IT,PCLK_CYC_2,10,10);
    e0e4:	3002      	movi      	r0, 2      	//0x2
    e0e6:	3100      	movi      	r1, 0      	//0x0
    e0e8:	320a      	movi      	r2, 10      	//0xa
    e0ea:	330a      	movi      	r3, 10      	//0xa
    e0ec:	e000011c 	bsr      	0xe324	//e324 <WDT_Configuation>
    e0f0:	c4004820 	lsli      	r0, r0, 0
	WDT_CNT_RStart();
    e0f4:	e00001aa 	bsr      	0xe448	//e448 <WDT_CNT_RStart>
    e0f8:	c4004820 	lsli      	r0, r0, 0
	temp = reg_readl(WDT,WDT_TORR);
    e0fc:	6d3b      	mov      	r4, sp
    e0fe:	ea201907 	movih      	r0, 6407      	//0x1907
    e102:	38a2      	bseti      	r0, 2
    e104:	e3ffff72 	bsr      	0xdfe8	//dfe8 <readl>
    e108:	c4004820 	lsli      	r0, r0, 0
    e10c:	b400      	st.w      	r0, (r4, 0x0)
	printf(" TORR_2:%x \n", temp);
    e10e:	6cfb      	mov      	r3, sp
    e110:	1103      	lrw      	r0, 0x11184	//11184 <__etext+0x15d4>
    e112:	9320      	ld.w      	r1, (r3, 0x0)
    e114:	e000041e 	bsr      	0xe950	//e950 <printf>
    e118:	c4004820 	lsli      	r0, r0, 0

	WDT_IT_Register();
    e11c:	e0000134 	bsr      	0xe384	//e384 <WDT_IT_Register>
    e120:	c4004820 	lsli      	r0, r0, 0
	//printf("INTC Regis state is:%x \n", temp);

	WDT_Start();
    e124:	e000014a 	bsr      	0xe3b8	//e3b8 <WDT_Start>
    e128:	c4004820 	lsli      	r0, r0, 0
	//temp = WDT->WDT_CR;
	//printf("CR_4:%x \n", temp);


	for(i=0;i<=4;i++)
    e12c:	1b01      	addi      	r3, sp, 4
    e12e:	3200      	movi      	r2, 0      	//0x0
    e130:	b340      	st.w      	r2, (r3, 0x0)
    e132:	0413      	br      	0xe158	//e158 <WDT_Test1+0xb0>
	//for(;;)
	{
		temp=WDT_GetCNTValue();
    e134:	6d3b      	mov      	r4, sp
    e136:	e00002a1 	bsr      	0xe678	//e678 <WDT_GetCNTValue>
    e13a:	c4004820 	lsli      	r0, r0, 0
    e13e:	b400      	st.w      	r0, (r4, 0x0)
		printf(" Counter Value is:%x \n", temp);
    e140:	6cfb      	mov      	r3, sp
    e142:	101b      	lrw      	r0, 0x11148	//11148 <__etext+0x1598>
    e144:	9320      	ld.w      	r1, (r3, 0x0)
    e146:	e0000405 	bsr      	0xe950	//e950 <printf>
    e14a:	c4004820 	lsli      	r0, r0, 0
	WDT_Start();
	//temp = WDT->WDT_CR;
	//printf("CR_4:%x \n", temp);


	for(i=0;i<=4;i++)
    e14e:	1b01      	addi      	r3, sp, 4
    e150:	1a01      	addi      	r2, sp, 4
    e152:	9240      	ld.w      	r2, (r2, 0x0)
    e154:	2200      	addi      	r2, 1      	//0x1
    e156:	b340      	st.w      	r2, (r3, 0x0)
    e158:	1b01      	addi      	r3, sp, 4
    e15a:	9340      	ld.w      	r2, (r3, 0x0)
    e15c:	3304      	movi      	r3, 4      	//0x4
    e15e:	648c      	cmphs      	r3, r2
    e160:	0bea      	bt      	0xe134	//e134 <WDT_Test1+0x8c>
	{
		temp=WDT_GetCNTValue();
		printf(" Counter Value is:%x \n", temp);
	}

	while(!wdttestflag);
    e162:	6c00      	or      	r0, r0
    e164:	1066      	lrw      	r3, 0x136e8	//136e8 <wdttestflag>
    e166:	9360      	ld.w      	r3, (r3, 0x0)
    e168:	e903fffe 	bez      	r3, 0xe164	//e164 <WDT_Test1+0xbc>
	//CK_INTC_FreeIrq(CK_WDT_IRQ);
	printf(" wdt test success \n");
    e16c:	1011      	lrw      	r0, 0x11194	//11194 <__etext+0x15e4>
    e16e:	e00003f1 	bsr      	0xe950	//e950 <printf>
    e172:	c4004820 	lsli      	r0, r0, 0
}
    e176:	1402      	addi      	sp, sp, 8
    e178:	1491      	pop      	r4, r15
    e17a:	0000      	.short	0x0000
    e17c:	000136e8 	.long	0x000136e8
    e180:	00011160 	.long	0x00011160
    e184:	0000e950 	.long	0x0000e950
    e188:	0000e310 	.long	0x0000e310
    e18c:	0000dfe8 	.long	0x0000dfe8
    e190:	00011174 	.long	0x00011174
    e194:	0000e324 	.long	0x0000e324
    e198:	0000e448 	.long	0x0000e448
    e19c:	00011184 	.long	0x00011184
    e1a0:	0000e384 	.long	0x0000e384
    e1a4:	0000e3b8 	.long	0x0000e3b8
    e1a8:	0000e678 	.long	0x0000e678
    e1ac:	00011148 	.long	0x00011148
    e1b0:	00011194 	.long	0x00011194

0000e1b4 <WDT_Test2>:
/*
 * GER_RST mode,set TOP_INIT and TOP
 *
 */
void WDT_Test2(void )
{
    e1b4:	14d1      	push      	r4, r15
    e1b6:	1422      	subi      	sp, sp, 8
	Bit32u temp,i;
	//temp = WDT->WDT_CR;
	//printf("CR_1:%x \n", temp);
	WDT_Deactive();
    e1b8:	e00000ac 	bsr      	0xe310	//e310 <WDT_Deactive>
    e1bc:	c4004820 	lsli      	r0, r0, 0
	//temp = WDT->WDT_CR;
	//printf("CR_2:%x \n", temp);

	//temp = WDT->WDT_TORR;
	//printf("TORR_1:%x \n", temp);
	WDT_Configuation(GER_RST,PCLK_CYC_8,0,0);
    e1c0:	3000      	movi      	r0, 0      	//0x0
    e1c2:	3108      	movi      	r1, 8      	//0x8
    e1c4:	3200      	movi      	r2, 0      	//0x0
    e1c6:	3300      	movi      	r3, 0      	//0x0
    e1c8:	e00000ae 	bsr      	0xe324	//e324 <WDT_Configuation>
    e1cc:	c4004820 	lsli      	r0, r0, 0
	temp = WDT->WDT_CR;
    e1d0:	ea221907 	movih      	r2, 6407      	//0x1907
    e1d4:	6cfb      	mov      	r3, sp
    e1d6:	9240      	ld.w      	r2, (r2, 0x0)
    e1d8:	b340      	st.w      	r2, (r3, 0x0)
	//printf("CR_3:%x \n", temp);
	temp = WDT->WDT_TORR;
    e1da:	ea221907 	movih      	r2, 6407      	//0x1907
    e1de:	6cfb      	mov      	r3, sp
    e1e0:	9241      	ld.w      	r2, (r2, 0x4)
    e1e2:	b340      	st.w      	r2, (r3, 0x0)
	//printf("TORR_2:%x \n", temp);

	//printf("INTC Regis state is:%x \n", temp);

	WDT_Start();
    e1e4:	e00000ea 	bsr      	0xe3b8	//e3b8 <WDT_Start>
    e1e8:	c4004820 	lsli      	r0, r0, 0
	temp = WDT->WDT_CR;
    e1ec:	ea221907 	movih      	r2, 6407      	//0x1907
    e1f0:	6cfb      	mov      	r3, sp
    e1f2:	9240      	ld.w      	r2, (r2, 0x0)
    e1f4:	b340      	st.w      	r2, (r3, 0x0)
	printf("CR_4:%x \n", temp);
    e1f6:	6cfb      	mov      	r3, sp
    e1f8:	1014      	lrw      	r0, 0x111a8	//111a8 <__etext+0x15f8>
    e1fa:	9320      	ld.w      	r1, (r3, 0x0)
    e1fc:	e00003aa 	bsr      	0xe950	//e950 <printf>
    e200:	c4004820 	lsli      	r0, r0, 0

	for(i=0;i<=4;i++)
    e204:	1b01      	addi      	r3, sp, 4
    e206:	3200      	movi      	r2, 0      	//0x0
    e208:	b340      	st.w      	r2, (r3, 0x0)
    e20a:	0413      	br      	0xe230	//e230 <WDT_Test2+0x7c>
	{
		temp=WDT_GetCNTValue();
    e20c:	6d3b      	mov      	r4, sp
    e20e:	e0000235 	bsr      	0xe678	//e678 <WDT_GetCNTValue>
    e212:	c4004820 	lsli      	r0, r0, 0
    e216:	b400      	st.w      	r0, (r4, 0x0)
		printf("Counter Value is:%x \n", temp);
    e218:	6cfb      	mov      	r3, sp
    e21a:	100f      	lrw      	r0, 0x111b4	//111b4 <__etext+0x1604>
    e21c:	9320      	ld.w      	r1, (r3, 0x0)
    e21e:	e0000399 	bsr      	0xe950	//e950 <printf>
    e222:	c4004820 	lsli      	r0, r0, 0

	WDT_Start();
	temp = WDT->WDT_CR;
	printf("CR_4:%x \n", temp);

	for(i=0;i<=4;i++)
    e226:	1b01      	addi      	r3, sp, 4
    e228:	1a01      	addi      	r2, sp, 4
    e22a:	9240      	ld.w      	r2, (r2, 0x0)
    e22c:	2200      	addi      	r2, 1      	//0x1
    e22e:	b340      	st.w      	r2, (r3, 0x0)
    e230:	1b01      	addi      	r3, sp, 4
    e232:	9340      	ld.w      	r2, (r3, 0x0)
    e234:	3304      	movi      	r3, 4      	//0x4
    e236:	648c      	cmphs      	r3, r2
    e238:	0bea      	bt      	0xe20c	//e20c <WDT_Test2+0x58>
	{
		temp=WDT_GetCNTValue();
		printf("Counter Value is:%x \n", temp);
	}

	while(1);
    e23a:	0400      	br      	0xe23a	//e23a <WDT_Test2+0x86>
    e23c:	0000e310 	.long	0x0000e310
    e240:	0000e324 	.long	0x0000e324
    e244:	0000e3b8 	.long	0x0000e3b8
    e248:	000111a8 	.long	0x000111a8
    e24c:	0000e950 	.long	0x0000e950
    e250:	0000e678 	.long	0x0000e678
    e254:	000111b4 	.long	0x000111b4

0000e258 <readl>:
{
    *(volatile Bit16u *)addr = value;
}

static inline Bit32u readl(const volatile void *addr)
{
    e258:	1421      	subi      	sp, sp, 4
    e25a:	6cfb      	mov      	r3, sp
    e25c:	b300      	st.w      	r0, (r3, 0x0)
    return *(const volatile Bit32u *)addr;
    e25e:	6cfb      	mov      	r3, sp
    e260:	9360      	ld.w      	r3, (r3, 0x0)
    e262:	9360      	ld.w      	r3, (r3, 0x0)
}
    e264:	6c0f      	mov      	r0, r3
    e266:	1401      	addi      	sp, sp, 4
    e268:	783c      	rts
	...

0000e26c <writel>:

static inline void writel(Bit32u value, volatile void *addr)
{
    e26c:	1422      	subi      	sp, sp, 8
    e26e:	1b01      	addi      	r3, sp, 4
    e270:	b300      	st.w      	r0, (r3, 0x0)
    e272:	6cfb      	mov      	r3, sp
    e274:	b320      	st.w      	r1, (r3, 0x0)
    *(volatile Bit32u *)addr = value;
    e276:	6cfb      	mov      	r3, sp
    e278:	9360      	ld.w      	r3, (r3, 0x0)
    e27a:	1a01      	addi      	r2, sp, 4
    e27c:	9240      	ld.w      	r2, (r2, 0x0)
    e27e:	b340      	st.w      	r2, (r3, 0x0)
}
    e280:	1402      	addi      	sp, sp, 8
    e282:	783c      	rts

0000e284 <dw_write>:

static inline void dw_write(Bit32u val, void* addr)
{
    e284:	14d1      	push      	r4, r15
    e286:	1423      	subi      	sp, sp, 12
    e288:	1b01      	addi      	r3, sp, 4
    e28a:	b300      	st.w      	r0, (r3, 0x0)
    e28c:	6cfb      	mov      	r3, sp
    e28e:	b320      	st.w      	r1, (r3, 0x0)
	Bit32u value;
	value =readl(addr);
    e290:	1c02      	addi      	r4, sp, 8
    e292:	6cfb      	mov      	r3, sp
    e294:	9300      	ld.w      	r0, (r3, 0x0)
    e296:	e3ffffe1 	bsr      	0xe258	//e258 <readl>
    e29a:	c4004820 	lsli      	r0, r0, 0
    e29e:	b400      	st.w      	r0, (r4, 0x0)
	value |= val;
    e2a0:	1b02      	addi      	r3, sp, 8
    e2a2:	1902      	addi      	r1, sp, 8
    e2a4:	1a01      	addi      	r2, sp, 4
    e2a6:	9120      	ld.w      	r1, (r1, 0x0)
    e2a8:	9240      	ld.w      	r2, (r2, 0x0)
    e2aa:	6c84      	or      	r2, r1
    e2ac:	b340      	st.w      	r2, (r3, 0x0)
	writel(value, addr);
    e2ae:	1a02      	addi      	r2, sp, 8
    e2b0:	6cfb      	mov      	r3, sp
    e2b2:	9200      	ld.w      	r0, (r2, 0x0)
    e2b4:	9320      	ld.w      	r1, (r3, 0x0)
    e2b6:	e3ffffdb 	bsr      	0xe26c	//e26c <writel>
    e2ba:	c4004820 	lsli      	r0, r0, 0
}
    e2be:	1403      	addi      	sp, sp, 12
    e2c0:	1491      	pop      	r4, r15
	...

0000e2c4 <dw_clear>:

static inline void dw_clear(Bit32u val, void* addr)
{
    e2c4:	14d1      	push      	r4, r15
    e2c6:	1423      	subi      	sp, sp, 12
    e2c8:	1b01      	addi      	r3, sp, 4
    e2ca:	b300      	st.w      	r0, (r3, 0x0)
    e2cc:	6cfb      	mov      	r3, sp
    e2ce:	b320      	st.w      	r1, (r3, 0x0)
	Bit32u value;
	value =readl(addr);
    e2d0:	1c02      	addi      	r4, sp, 8
    e2d2:	6cfb      	mov      	r3, sp
    e2d4:	9300      	ld.w      	r0, (r3, 0x0)
    e2d6:	e3ffffc1 	bsr      	0xe258	//e258 <readl>
    e2da:	c4004820 	lsli      	r0, r0, 0
    e2de:	b400      	st.w      	r0, (r4, 0x0)
	value &= ~val;
    e2e0:	1b01      	addi      	r3, sp, 4
    e2e2:	9360      	ld.w      	r3, (r3, 0x0)
    e2e4:	c4632481 	nor      	r1, r3, r3
    e2e8:	1b02      	addi      	r3, sp, 8
    e2ea:	1a02      	addi      	r2, sp, 8
    e2ec:	9240      	ld.w      	r2, (r2, 0x0)
    e2ee:	6884      	and      	r2, r1
    e2f0:	b340      	st.w      	r2, (r3, 0x0)
	writel(value, addr);
    e2f2:	1a02      	addi      	r2, sp, 8
    e2f4:	6cfb      	mov      	r3, sp
    e2f6:	9200      	ld.w      	r0, (r2, 0x0)
    e2f8:	9320      	ld.w      	r1, (r3, 0x0)
    e2fa:	e3ffffb9 	bsr      	0xe26c	//e26c <writel>
    e2fe:	c4004820 	lsli      	r0, r0, 0
}
    e302:	1403      	addi      	sp, sp, 12
    e304:	1491      	pop      	r4, r15
    e306:	0000      	.short	0x0000
    e308:	0000e258 	.long	0x0000e258
    e30c:	0000e26c 	.long	0x0000e26c

0000e310 <WDT_Deactive>:
#include "misc.h"

static WDT_RMODTypeDef Mode;

Bit32u WDT_Deactive(void)
{
    e310:	14d0      	push      	r15
	WDT_CMD(DISABLE);
    e312:	3000      	movi      	r0, 0      	//0x0
    e314:	e0000072 	bsr      	0xe3f8	//e3f8 <WDT_CMD>
    e318:	c4004820 	lsli      	r0, r0, 0
	return 0;
    e31c:	3300      	movi      	r3, 0      	//0x0
}
    e31e:	6c0f      	mov      	r0, r3
    e320:	1490      	pop      	r15
	...

0000e324 <WDT_Configuation>:

/*set the ResponseMode,PluseLength,TOP_INIT_Value,TOP_Value*/
void WDT_Configuation(WDT_RMODTypeDef ResponseMode,WDT_PluLenTypeDef PluseLength,Bit32u TOP_INIT_Value,Bit32u TOP_Value)
{
    e324:	14d0      	push      	r15
    e326:	1424      	subi      	sp, sp, 16
    e328:	e58e000b 	addi      	r12, sp, 12      	//0xc
    e32c:	dc0c2000 	st.w      	r0, (r12, 0x0)
    e330:	1802      	addi      	r0, sp, 8
    e332:	b020      	st.w      	r1, (r0, 0x0)
    e334:	1901      	addi      	r1, sp, 4
    e336:	b140      	st.w      	r2, (r1, 0x0)
    e338:	6cbb      	mov      	r2, sp
    e33a:	b260      	st.w      	r3, (r2, 0x0)
	WDT_SetRepMode(ResponseMode);
    e33c:	1b03      	addi      	r3, sp, 12
    e33e:	9300      	ld.w      	r0, (r3, 0x0)
    e340:	e00000c0 	bsr      	0xe4c0	//e4c0 <WDT_SetRepMode>
    e344:	c4004820 	lsli      	r0, r0, 0
	WDT_SetRPLen(PluseLength);
    e348:	1b02      	addi      	r3, sp, 8
    e34a:	9300      	ld.w      	r0, (r3, 0x0)
    e34c:	e0000088 	bsr      	0xe45c	//e45c <WDT_SetRPLen>
    e350:	c4004820 	lsli      	r0, r0, 0
	WDT_SetTOP_INIT(TOP_INIT_Value );
    e354:	1b01      	addi      	r3, sp, 4
    e356:	9300      	ld.w      	r0, (r3, 0x0)
    e358:	e000010a 	bsr      	0xe56c	//e56c <WDT_SetTOP_INIT>
    e35c:	c4004820 	lsli      	r0, r0, 0
	WDT_SetTOP(TOP_Value);
    e360:	6cfb      	mov      	r3, sp
    e362:	9300      	ld.w      	r0, (r3, 0x0)
    e364:	e0000156 	bsr      	0xe610	//e610 <WDT_SetTOP>
    e368:	c4004820 	lsli      	r0, r0, 0
}
    e36c:	1404      	addi      	sp, sp, 16
    e36e:	1490      	pop      	r15
    e370:	0000e3f8 	.long	0x0000e3f8
    e374:	0000e4c0 	.long	0x0000e4c0
    e378:	0000e45c 	.long	0x0000e45c
    e37c:	0000e56c 	.long	0x0000e56c
    e380:	0000e610 	.long	0x0000e610

0000e384 <WDT_IT_Register>:

/* register wdt isq  */
Bit32u WDT_IT_Register(void)
{
    e384:	14d0      	push      	r15
  	/* clear interrupt flag */
    WDT_ClearFlag();
    e386:	e00001b1 	bsr      	0xe6e8	//e6e8 <WDT_ClearFlag>
    e38a:	c4004820 	lsli      	r0, r0, 0
	if(Mode==GER_IT)
    e38e:	1369      	lrw      	r3, 0x136ec	//136ec <Mode>
    e390:	9360      	ld.w      	r3, (r3, 0x0)
    e392:	3b42      	cmpnei      	r3, 2
    e394:	080e      	bt      	0xe3b0	//e3b0 <WDT_IT_Register+0x2c>
	{
		printf ("Begin to irq\n");
    e396:	1308      	lrw      	r0, 0x111cc	//111cc <__etext+0x161c>
    e398:	e00002dc 	bsr      	0xe950	//e950 <printf>
    e39c:	c4004820 	lsli      	r0, r0, 0
        /* register wdt isq  */
        CK_INTC_RequestIrq(CK_WDT_IRQ, CK_WDT_Handler);
    e3a0:	3012      	movi      	r0, 18      	//0x12
    e3a2:	1327      	lrw      	r1, 0xdffc	//dffc <CK_WDT_Handler>
    e3a4:	e3ffc12a 	bsr      	0x65f8	//65f8 <CK_INTC_RequestIrq>
    e3a8:	c4004820 	lsli      	r0, r0, 0
        return 0;
    e3ac:	3300      	movi      	r3, 0      	//0x0
    e3ae:	0402      	br      	0xe3b2	//e3b2 <WDT_IT_Register+0x2e>
	}
	else
		return 1;
    e3b0:	3301      	movi      	r3, 1      	//0x1
}
    e3b2:	6c0f      	mov      	r0, r3
    e3b4:	1490      	pop      	r15
	...

0000e3b8 <WDT_Start>:

/*set WDT enabled,write WDT_EN bits of WDT_CR when WDT_ALWAYS_EN = 0*/
Bit32u WDT_Start(void)
{
    e3b8:	14d0      	push      	r15
	WDT_CMD(ENABLE);
    e3ba:	3001      	movi      	r0, 1      	//0x1
    e3bc:	e000001e 	bsr      	0xe3f8	//e3f8 <WDT_CMD>
    e3c0:	c4004820 	lsli      	r0, r0, 0
	return 0;
    e3c4:	3300      	movi      	r3, 0      	//0x0
}
    e3c6:	6c0f      	mov      	r0, r3
    e3c8:	1490      	pop      	r15
	...

0000e3cc <WDT_INIT>:

void WDT_INIT(void)
{
    e3cc:	14d0      	push      	r15
	WDT_Deactive();
    e3ce:	e3ffffa1 	bsr      	0xe310	//e310 <WDT_Deactive>
    e3d2:	c4004820 	lsli      	r0, r0, 0
	WDT_Configuation(GER_IT,NULL,0,0);
    e3d6:	3002      	movi      	r0, 2      	//0x2
    e3d8:	3100      	movi      	r1, 0      	//0x0
    e3da:	3200      	movi      	r2, 0      	//0x0
    e3dc:	3300      	movi      	r3, 0      	//0x0
    e3de:	e3ffffa3 	bsr      	0xe324	//e324 <WDT_Configuation>
    e3e2:	c4004820 	lsli      	r0, r0, 0
	WDT_IT_Register();
    e3e6:	e3ffffcf 	bsr      	0xe384	//e384 <WDT_IT_Register>
    e3ea:	c4004820 	lsli      	r0, r0, 0
	WDT_Start();
    e3ee:	e3ffffe5 	bsr      	0xe3b8	//e3b8 <WDT_Start>
    e3f2:	c4004820 	lsli      	r0, r0, 0
}
    e3f6:	1490      	pop      	r15

0000e3f8 <WDT_CMD>:

/*set the WDT enabled or disabled,write WDT_EN bits of WDT_CR when WDT_ALWAYS_EN = 0*/
Bit32u WDT_CMD(State_TypeDef NewState)
{
    e3f8:	14d0      	push      	r15
    e3fa:	1421      	subi      	sp, sp, 4
    e3fc:	6cfb      	mov      	r3, sp
    e3fe:	b300      	st.w      	r0, (r3, 0x0)
	//if (((WDTCOMP->WDT_COMP_PARAMS_1) & WDT_ALWAYS_EN)== 0)      // WDT_ALWAYS_EN=0,CR_WDT_EN is useful
	if ((reg_readl(WDTCOMP,WDT_COMP_PARAMS_1) & WDT_ALWAYS_EN)== 0)      // WDT_ALWAYS_EN=0,CR_WDT_EN is useful
    e400:	1216      	lrw      	r0, 0x190700f4	//190700f4 <__stack+0x18c700fc>
    e402:	e3ffff2b 	bsr      	0xe258	//e258 <readl>
    e406:	c4004820 	lsli      	r0, r0, 0
    e40a:	6cc3      	mov      	r3, r0
    e40c:	e4632001 	andi      	r3, r3, 1
    e410:	e9230017 	bnez      	r3, 0xe43e	//e43e <WDT_CMD+0x46>
	{
		if (NewState == ENABLE)
    e414:	6cfb      	mov      	r3, sp
    e416:	9360      	ld.w      	r3, (r3, 0x0)
    e418:	3b41      	cmpnei      	r3, 1
    e41a:	0809      	bt      	0xe42c	//e42c <WDT_CMD+0x34>
		{
			//WDT->WDT_CR |= WDT_ENA;
			reg_writel(WDT_ENA,WDT,WDT_CR);
    e41c:	3001      	movi      	r0, 1      	//0x1
    e41e:	ea211907 	movih      	r1, 6407      	//0x1907
    e422:	e3ffff31 	bsr      	0xe284	//e284 <dw_write>
    e426:	c4004820 	lsli      	r0, r0, 0
    e42a:	0408      	br      	0xe43a	//e43a <WDT_CMD+0x42>
		}
		else
		{
			//WDT->WDT_CR &= ~WDT_ENA;
			reg_clearl(WDT_ENA,WDT,WDT_CR);
    e42c:	3001      	movi      	r0, 1      	//0x1
    e42e:	ea211907 	movih      	r1, 6407      	//0x1907
    e432:	e3ffff49 	bsr      	0xe2c4	//e2c4 <dw_clear>
    e436:	c4004820 	lsli      	r0, r0, 0
		}
		return 0;
    e43a:	3300      	movi      	r3, 0      	//0x0
    e43c:	0402      	br      	0xe440	//e440 <WDT_CMD+0x48>
	}
	else
		return 1;
    e43e:	3301      	movi      	r3, 1      	//0x1
}
    e440:	6c0f      	mov      	r0, r3
    e442:	1401      	addi      	sp, sp, 4
    e444:	1490      	pop      	r15
	...

0000e448 <WDT_CNT_RStart>:

/*restart the counter,clear the interrupt,feed the dog ,write 0x76 into WDT_CRR*/
void WDT_CNT_RStart(void )
{
    e448:	14d0      	push      	r15
	//WDT->WDT_CRR=0x76;                              //write  WDT_CRR
	reg_direct_writel(0x76,WDT,WDT_CRR);
    e44a:	3076      	movi      	r0, 118      	//0x76
    e44c:	ea211907 	movih      	r1, 6407      	//0x1907
    e450:	210b      	addi      	r1, 12      	//0xc
    e452:	e3ffff0d 	bsr      	0xe26c	//e26c <writel>
    e456:	c4004820 	lsli      	r0, r0, 0
}
    e45a:	1490      	pop      	r15

0000e45c <WDT_SetRPLen>:


/*set the Reset pulse length,write RPL bits of WDT_CR when WDT_HC_RPL!=1 */
Bit32u WDT_SetRPLen(WDT_PluLenTypeDef PluseLen)
{
    e45c:	14d1      	push      	r4, r15
    e45e:	1422      	subi      	sp, sp, 8
    e460:	6cfb      	mov      	r3, sp
    e462:	b300      	st.w      	r0, (r3, 0x0)
	//if ((WDTCOMP->WDT_COMP_PARAMS_1 & WDT_HC_RPL)== 0)     // WDT_HC_RPL=0,CR_RPL is useful
	if ((reg_readl(WDTCOMP,WDT_COMP_PARAMS_1) & WDT_HC_RPL)== 0)     // WDT_HC_RPL=0,CR_RPL is useful
    e464:	111d      	lrw      	r0, 0x190700f4	//190700f4 <__stack+0x18c700fc>
    e466:	e3fffef9 	bsr      	0xe258	//e258 <readl>
    e46a:	c4004820 	lsli      	r0, r0, 0
    e46e:	6cc3      	mov      	r3, r0
    e470:	e4632010 	andi      	r3, r3, 16
    e474:	e9230021 	bnez      	r3, 0xe4b6	//e4b6 <WDT_SetRPLen+0x5a>
	{
		Bit32u tmp;
		//tmp=WDT->WDT_CR;                                     //get original value of WDT_CR
		tmp=reg_readl(WDT,WDT_CR);
    e478:	1c01      	addi      	r4, sp, 4
    e47a:	ea201907 	movih      	r0, 6407      	//0x1907
    e47e:	e3fffeed 	bsr      	0xe258	//e258 <readl>
    e482:	c4004820 	lsli      	r0, r0, 0
    e486:	b400      	st.w      	r0, (r4, 0x0)
		tmp &= ~0x1C;                                        //clear RPL bits of WDT_CR
    e488:	1b01      	addi      	r3, sp, 4
    e48a:	1a01      	addi      	r2, sp, 4
    e48c:	9240      	ld.w      	r2, (r2, 0x0)
    e48e:	e442301c 	andni      	r2, r2, 28
    e492:	b340      	st.w      	r2, (r3, 0x0)
		tmp|= PluseLen;                                      //set RPL bits of WDT_CR
    e494:	1b01      	addi      	r3, sp, 4
    e496:	1901      	addi      	r1, sp, 4
    e498:	6cbb      	mov      	r2, sp
    e49a:	9120      	ld.w      	r1, (r1, 0x0)
    e49c:	9240      	ld.w      	r2, (r2, 0x0)
    e49e:	6c84      	or      	r2, r1
    e4a0:	b340      	st.w      	r2, (r3, 0x0)
		//WDT->WDT_CR=tmp;                                     //write  WDT_CR
		reg_direct_writel(tmp,WDT,WDT_CR);
    e4a2:	1b01      	addi      	r3, sp, 4
    e4a4:	9300      	ld.w      	r0, (r3, 0x0)
    e4a6:	ea211907 	movih      	r1, 6407      	//0x1907
    e4aa:	e3fffee1 	bsr      	0xe26c	//e26c <writel>
    e4ae:	c4004820 	lsli      	r0, r0, 0
		return 0;
    e4b2:	3300      	movi      	r3, 0      	//0x0
    e4b4:	0402      	br      	0xe4b8	//e4b8 <WDT_SetRPLen+0x5c>
	}
	else
		return 1;
    e4b6:	3301      	movi      	r3, 1      	//0x1
}
    e4b8:	6c0f      	mov      	r0, r3
    e4ba:	1402      	addi      	sp, sp, 8
    e4bc:	1491      	pop      	r4, r15
	...

0000e4c0 <WDT_SetRepMode>:

/*set the Response Mode,write RMOD bits of WDT_CR when WDT_HC_RMOD=0 */
Bit32u WDT_SetRepMode(WDT_RMODTypeDef RespMode)
{
    e4c0:	14d1      	push      	r4, r15
    e4c2:	1422      	subi      	sp, sp, 8
    e4c4:	6cfb      	mov      	r3, sp
    e4c6:	b300      	st.w      	r0, (r3, 0x0)
	//if (((WDTCOMP->WDT_COMP_PARAMS_1) & WDT_HC_RMOD)== 0)     // WDT_HC_RMOD=0,CR_RMOD is useful
	if ((reg_readl(WDTCOMP,WDT_COMP_PARAMS_1) & WDT_HC_RMOD)== 0)     // WDT_HC_RMOD=0,CR_RMOD is useful
    e4c8:	1104      	lrw      	r0, 0x190700f4	//190700f4 <__stack+0x18c700fc>
    e4ca:	e3fffec7 	bsr      	0xe258	//e258 <readl>
    e4ce:	c4004820 	lsli      	r0, r0, 0
    e4d2:	6cc3      	mov      	r3, r0
    e4d4:	e4632008 	andi      	r3, r3, 8
    e4d8:	e9230025 	bnez      	r3, 0xe522	//e522 <WDT_SetRepMode+0x62>
	{
		Bit32u tmp;
		//tmp=WDT->WDT_CR;                                      //get original value of WDT_CR
		tmp=reg_readl(WDT,WDT_CR);
    e4dc:	1c01      	addi      	r4, sp, 4
    e4de:	ea201907 	movih      	r0, 6407      	//0x1907
    e4e2:	e3fffebb 	bsr      	0xe258	//e258 <readl>
    e4e6:	c4004820 	lsli      	r0, r0, 0
    e4ea:	b400      	st.w      	r0, (r4, 0x0)
		tmp&= ~0x03;                                          //clear RMOD bits of WDT_CR
    e4ec:	1b01      	addi      	r3, sp, 4
    e4ee:	1a01      	addi      	r2, sp, 4
    e4f0:	9240      	ld.w      	r2, (r2, 0x0)
    e4f2:	3a80      	bclri      	r2, 0
    e4f4:	3a81      	bclri      	r2, 1
    e4f6:	b340      	st.w      	r2, (r3, 0x0)
		tmp|= RespMode;                                       //set RMOD bits of WDT_CR
    e4f8:	1b01      	addi      	r3, sp, 4
    e4fa:	1901      	addi      	r1, sp, 4
    e4fc:	6cbb      	mov      	r2, sp
    e4fe:	9120      	ld.w      	r1, (r1, 0x0)
    e500:	9240      	ld.w      	r2, (r2, 0x0)
    e502:	6c84      	or      	r2, r1
    e504:	b340      	st.w      	r2, (r3, 0x0)
		//WDT->WDT_CR=tmp;                                      //write  WDT_CR
		reg_direct_writel(tmp,WDT,WDT_CR);
    e506:	1b01      	addi      	r3, sp, 4
    e508:	9300      	ld.w      	r0, (r3, 0x0)
    e50a:	ea211907 	movih      	r1, 6407      	//0x1907
    e50e:	e3fffeaf 	bsr      	0xe26c	//e26c <writel>
    e512:	c4004820 	lsli      	r0, r0, 0
		Mode=RespMode;
    e516:	1067      	lrw      	r3, 0x136ec	//136ec <Mode>
    e518:	6cbb      	mov      	r2, sp
    e51a:	9240      	ld.w      	r2, (r2, 0x0)
    e51c:	b340      	st.w      	r2, (r3, 0x0)
		return 0;
    e51e:	3300      	movi      	r3, 0      	//0x0
    e520:	0402      	br      	0xe524	//e524 <WDT_SetRepMode+0x64>
	}
	else
		return 1;
    e522:	3301      	movi      	r3, 1      	//0x1
}
    e524:	6c0f      	mov      	r0, r3
    e526:	1402      	addi      	sp, sp, 8
    e528:	1491      	pop      	r4, r15
    e52a:	0000      	.short	0x0000
    e52c:	0000e6e8 	.long	0x0000e6e8
    e530:	000136ec 	.long	0x000136ec
    e534:	000111cc 	.long	0x000111cc
    e538:	0000e950 	.long	0x0000e950
    e53c:	0000dffc 	.long	0x0000dffc
    e540:	000065f8 	.long	0x000065f8
    e544:	0000e3f8 	.long	0x0000e3f8
    e548:	0000e310 	.long	0x0000e310
    e54c:	0000e324 	.long	0x0000e324
    e550:	0000e384 	.long	0x0000e384
    e554:	0000e3b8 	.long	0x0000e3b8
    e558:	190700f4 	.long	0x190700f4
    e55c:	0000e258 	.long	0x0000e258
    e560:	0000e284 	.long	0x0000e284
    e564:	0000e2c4 	.long	0x0000e2c4
    e568:	0000e26c 	.long	0x0000e26c

0000e56c <WDT_SetTOP_INIT>:

/*set the Timeout period for initialization.,write TOP_INIT bits of WDT_TOPR when WDT_ALWAYS_EN,WDT_HC_TOP=0;WDT_DUAL_TOP=1*/
Bit32u WDT_SetTOP_INIT(Bit32u TOP_INITVal )
{
    e56c:	14d1      	push      	r4, r15
    e56e:	1422      	subi      	sp, sp, 8
    e570:	6cfb      	mov      	r3, sp
    e572:	b300      	st.w      	r0, (r3, 0x0)
	//if((((WDTCOMP->WDT_COMP_PARAMS_1) & WDT_ALWAYS_EN)== 0)&
	//   (((WDTCOMP->WDT_COMP_PARAMS_1) & WDT_HC_TOP)== 0)&
	//   (((WDTCOMP->WDT_COMP_PARAMS_1) & WDT_DUAL_TOP)!= 0))  /*WDT_ALWAYS_EN,WDT_HC_TOP=0;WDT_DUAL_TOP=1*/
	if(((reg_readl(WDTCOMP,WDT_COMP_PARAMS_1) & WDT_ALWAYS_EN)== 0)&
    e574:	121a      	lrw      	r0, 0x190700f4	//190700f4 <__stack+0x18c700fc>
    e576:	e3fffe71 	bsr      	0xe258	//e258 <readl>
    e57a:	c4004820 	lsli      	r0, r0, 0
    e57e:	6cc3      	mov      	r3, r0
    e580:	e4632001 	andi      	r3, r3, 1
    e584:	3b40      	cmpnei      	r3, 0
    e586:	64c3      	mvcv      	r3
    e588:	750c      	zextb      	r4, r3
		((reg_readl(WDTCOMP,WDT_COMP_PARAMS_1) & WDT_HC_TOP)== 0)&
    e58a:	1215      	lrw      	r0, 0x190700f4	//190700f4 <__stack+0x18c700fc>
    e58c:	e3fffe66 	bsr      	0xe258	//e258 <readl>
    e590:	c4004820 	lsli      	r0, r0, 0
    e594:	6cc3      	mov      	r3, r0
    e596:	e4632020 	andi      	r3, r3, 32
    e59a:	3b40      	cmpnei      	r3, 0
    e59c:	64c3      	mvcv      	r3
    e59e:	74cc      	zextb      	r3, r3
Bit32u WDT_SetTOP_INIT(Bit32u TOP_INITVal )
{
	//if((((WDTCOMP->WDT_COMP_PARAMS_1) & WDT_ALWAYS_EN)== 0)&
	//   (((WDTCOMP->WDT_COMP_PARAMS_1) & WDT_HC_TOP)== 0)&
	//   (((WDTCOMP->WDT_COMP_PARAMS_1) & WDT_DUAL_TOP)!= 0))  /*WDT_ALWAYS_EN,WDT_HC_TOP=0;WDT_DUAL_TOP=1*/
	if(((reg_readl(WDTCOMP,WDT_COMP_PARAMS_1) & WDT_ALWAYS_EN)== 0)&
    e5a0:	68d0      	and      	r3, r4
    e5a2:	74cc      	zextb      	r3, r3
    e5a4:	6d0f      	mov      	r4, r3
		((reg_readl(WDTCOMP,WDT_COMP_PARAMS_1) & WDT_HC_TOP)== 0)&
		((reg_readl(WDTCOMP,WDT_COMP_PARAMS_1) & WDT_DUAL_TOP)!= 0))  /*WDT_ALWAYS_EN,WDT_HC_TOP=0;WDT_DUAL_TOP=1*/
    e5a6:	120e      	lrw      	r0, 0x190700f4	//190700f4 <__stack+0x18c700fc>
    e5a8:	e3fffe58 	bsr      	0xe258	//e258 <readl>
    e5ac:	c4004820 	lsli      	r0, r0, 0
    e5b0:	6cc3      	mov      	r3, r0
    e5b2:	e4632004 	andi      	r3, r3, 4
    e5b6:	3b40      	cmpnei      	r3, 0
    e5b8:	c4000503 	mvc      	r3
{
	//if((((WDTCOMP->WDT_COMP_PARAMS_1) & WDT_ALWAYS_EN)== 0)&
	//   (((WDTCOMP->WDT_COMP_PARAMS_1) & WDT_HC_TOP)== 0)&
	//   (((WDTCOMP->WDT_COMP_PARAMS_1) & WDT_DUAL_TOP)!= 0))  /*WDT_ALWAYS_EN,WDT_HC_TOP=0;WDT_DUAL_TOP=1*/
	if(((reg_readl(WDTCOMP,WDT_COMP_PARAMS_1) & WDT_ALWAYS_EN)== 0)&
		((reg_readl(WDTCOMP,WDT_COMP_PARAMS_1) & WDT_HC_TOP)== 0)&
    e5bc:	68d0      	and      	r3, r4
Bit32u WDT_SetTOP_INIT(Bit32u TOP_INITVal )
{
	//if((((WDTCOMP->WDT_COMP_PARAMS_1) & WDT_ALWAYS_EN)== 0)&
	//   (((WDTCOMP->WDT_COMP_PARAMS_1) & WDT_HC_TOP)== 0)&
	//   (((WDTCOMP->WDT_COMP_PARAMS_1) & WDT_DUAL_TOP)!= 0))  /*WDT_ALWAYS_EN,WDT_HC_TOP=0;WDT_DUAL_TOP=1*/
	if(((reg_readl(WDTCOMP,WDT_COMP_PARAMS_1) & WDT_ALWAYS_EN)== 0)&
    e5be:	e9030024 	bez      	r3, 0xe606	//e606 <WDT_SetTOP_INIT+0x9a>
		((reg_readl(WDTCOMP,WDT_COMP_PARAMS_1) & WDT_HC_TOP)== 0)&
		((reg_readl(WDTCOMP,WDT_COMP_PARAMS_1) & WDT_DUAL_TOP)!= 0))  /*WDT_ALWAYS_EN,WDT_HC_TOP=0;WDT_DUAL_TOP=1*/
	{
		Bit32u tmp;
		//tmp=WDT->WDT_TORR;                              //get original value of WDT_TORR
		tmp=reg_readl(WDT,WDT_TORR);
    e5c2:	1c01      	addi      	r4, sp, 4
    e5c4:	ea201907 	movih      	r0, 6407      	//0x1907
    e5c8:	38a2      	bseti      	r0, 2
    e5ca:	e3fffe47 	bsr      	0xe258	//e258 <readl>
    e5ce:	c4004820 	lsli      	r0, r0, 0
    e5d2:	b400      	st.w      	r0, (r4, 0x0)
		tmp&= ~0xF0;                                    //clear TOP_INIT bits of WDT_TORR
    e5d4:	1b01      	addi      	r3, sp, 4
    e5d6:	1a01      	addi      	r2, sp, 4
    e5d8:	9240      	ld.w      	r2, (r2, 0x0)
    e5da:	e44230f0 	andni      	r2, r2, 240
    e5de:	b340      	st.w      	r2, (r3, 0x0)
		tmp|= TOP_INT(TOP_INITVal);                     //set TOP_INIT bits of WDT_TORR
    e5e0:	6cfb      	mov      	r3, sp
    e5e2:	9360      	ld.w      	r3, (r3, 0x0)
    e5e4:	4324      	lsli      	r1, r3, 4
    e5e6:	1b01      	addi      	r3, sp, 4
    e5e8:	1a01      	addi      	r2, sp, 4
    e5ea:	9240      	ld.w      	r2, (r2, 0x0)
    e5ec:	6c84      	or      	r2, r1
    e5ee:	b340      	st.w      	r2, (r3, 0x0)
		//WDT->WDT_TORR=tmp;                              //write  WDT_TORR
		reg_direct_writel(tmp,WDT,WDT_TORR);
    e5f0:	1b01      	addi      	r3, sp, 4
    e5f2:	9300      	ld.w      	r0, (r3, 0x0)
    e5f4:	ea211907 	movih      	r1, 6407      	//0x1907
    e5f8:	39a2      	bseti      	r1, 2
    e5fa:	e3fffe39 	bsr      	0xe26c	//e26c <writel>
    e5fe:	c4004820 	lsli      	r0, r0, 0
		return 0;
    e602:	3300      	movi      	r3, 0      	//0x0
    e604:	0402      	br      	0xe608	//e608 <WDT_SetTOP_INIT+0x9c>
	}
	else
		return 1;
    e606:	3301      	movi      	r3, 1      	//0x1
}
    e608:	6c0f      	mov      	r0, r3
    e60a:	1402      	addi      	sp, sp, 8
    e60c:	1491      	pop      	r4, r15
	...

0000e610 <WDT_SetTOP>:

/*set the Timeout period ,write TOP bits of WDT_TOPR when WDT_HC_TOP= 0*/
Bit32u WDT_SetTOP(Bit32u TOPVal )
{
    e610:	14d1      	push      	r4, r15
    e612:	1422      	subi      	sp, sp, 8
    e614:	6cfb      	mov      	r3, sp
    e616:	b300      	st.w      	r0, (r3, 0x0)
	//if(((WDTCOMP->WDT_COMP_PARAMS_1) & WDT_HC_TOP)== 0)
	if((reg_readl(WDTCOMP,WDT_COMP_PARAMS_1) & WDT_HC_TOP)== 0)
    e618:	1111      	lrw      	r0, 0x190700f4	//190700f4 <__stack+0x18c700fc>
    e61a:	e3fffe1f 	bsr      	0xe258	//e258 <readl>
    e61e:	c4004820 	lsli      	r0, r0, 0
    e622:	6cc3      	mov      	r3, r0
    e624:	e4632020 	andi      	r3, r3, 32
    e628:	e9230023 	bnez      	r3, 0xe66e	//e66e <WDT_SetTOP+0x5e>
	{
		Bit32u tmp;
		//tmp=WDT->WDT_TORR;                              //get original value of WDT_TORR
		tmp=reg_readl(WDT,WDT_TORR);
    e62c:	1c01      	addi      	r4, sp, 4
    e62e:	ea201907 	movih      	r0, 6407      	//0x1907
    e632:	38a2      	bseti      	r0, 2
    e634:	e3fffe12 	bsr      	0xe258	//e258 <readl>
    e638:	c4004820 	lsli      	r0, r0, 0
    e63c:	b400      	st.w      	r0, (r4, 0x0)
		tmp&= ~0x0F;                                    //clear TOP bits of WDT_TORR
    e63e:	1b01      	addi      	r3, sp, 4
    e640:	1a01      	addi      	r2, sp, 4
    e642:	9240      	ld.w      	r2, (r2, 0x0)
    e644:	e442300f 	andni      	r2, r2, 15
    e648:	b340      	st.w      	r2, (r3, 0x0)
		tmp|= TOP(TOPVal);                              //set TOP bits of WDT_TORR
    e64a:	1b01      	addi      	r3, sp, 4
    e64c:	1901      	addi      	r1, sp, 4
    e64e:	6cbb      	mov      	r2, sp
    e650:	9120      	ld.w      	r1, (r1, 0x0)
    e652:	9240      	ld.w      	r2, (r2, 0x0)
    e654:	6c84      	or      	r2, r1
    e656:	b340      	st.w      	r2, (r3, 0x0)
		//WDT->WDT_TORR=tmp;                              //write  WDT_TORR
		reg_direct_writel(tmp,WDT,WDT_TORR);
    e658:	1b01      	addi      	r3, sp, 4
    e65a:	9300      	ld.w      	r0, (r3, 0x0)
    e65c:	ea211907 	movih      	r1, 6407      	//0x1907
    e660:	39a2      	bseti      	r1, 2
    e662:	e3fffe05 	bsr      	0xe26c	//e26c <writel>
    e666:	c4004820 	lsli      	r0, r0, 0
		return 0;
    e66a:	3300      	movi      	r3, 0      	//0x0
    e66c:	0402      	br      	0xe670	//e670 <WDT_SetTOP+0x60>
	}
	else
		return 1;
    e66e:	3301      	movi      	r3, 1      	//0x1
}
    e670:	6c0f      	mov      	r0, r3
    e672:	1402      	addi      	sp, sp, 8
    e674:	1491      	pop      	r4, r15
	...

0000e678 <WDT_GetCNTValue>:

/*get the value of the counter,read WDT_CCVR*/
Bit32u WDT_GetCNTValue(void)
{
    e678:	14d1      	push      	r4, r15
    e67a:	1421      	subi      	sp, sp, 4
  Bit32u tmp = 0;
    e67c:	6cfb      	mov      	r3, sp
    e67e:	3200      	movi      	r2, 0      	//0x0
    e680:	b340      	st.w      	r2, (r3, 0x0)
  //tmp = WDT->WDT_CCVR;
  tmp=reg_readl(WDT,WDT_CCVR);
    e682:	6d3b      	mov      	r4, sp
    e684:	ea201907 	movih      	r0, 6407      	//0x1907
    e688:	38a3      	bseti      	r0, 3
    e68a:	e3fffde7 	bsr      	0xe258	//e258 <readl>
    e68e:	c4004820 	lsli      	r0, r0, 0
    e692:	b400      	st.w      	r0, (r4, 0x0)
  return  tmp ;
    e694:	6cfb      	mov      	r3, sp
    e696:	9360      	ld.w      	r3, (r3, 0x0)
}
    e698:	6c0f      	mov      	r0, r3
    e69a:	1401      	addi      	sp, sp, 4
    e69c:	1491      	pop      	r4, r15
	...

0000e6a0 <WDT_GetITStatus>:

/*get the interrupt status of the WDT read WDT_STAT*/
ITStatus_TypeDef WDT_GetITStatus(void)
{
    e6a0:	14d0      	push      	r15
    e6a2:	1421      	subi      	sp, sp, 4
	FlagStatus_TypeDef bitstatus = INACTIVE;
    e6a4:	6cfb      	mov      	r3, sp
    e6a6:	3200      	movi      	r2, 0      	//0x0
    e6a8:	b340      	st.w      	r2, (r3, 0x0)
	//if ((WDT->WDT_STAT & WDT_ITSTAT) != (Bit32u) INACTIVE)
	if ((reg_readl(WDT,WDT_STAT) & WDT_ITSTAT) != (Bit32u) INACTIVE)
    e6aa:	ea201907 	movih      	r0, 6407      	//0x1907
    e6ae:	38a4      	bseti      	r0, 4
    e6b0:	e3fffdd4 	bsr      	0xe258	//e258 <readl>
    e6b4:	c4004820 	lsli      	r0, r0, 0
    e6b8:	6cc3      	mov      	r3, r0
    e6ba:	e4632001 	andi      	r3, r3, 1
    e6be:	74cc      	zextb      	r3, r3
    e6c0:	e9030006 	bez      	r3, 0xe6cc	//e6cc <WDT_GetITStatus+0x2c>
	{
		bitstatus = ACTIVE;                 /* Interrupt is active */
    e6c4:	6cfb      	mov      	r3, sp
    e6c6:	3201      	movi      	r2, 1      	//0x1
    e6c8:	b340      	st.w      	r2, (r3, 0x0)
    e6ca:	0404      	br      	0xe6d2	//e6d2 <WDT_GetITStatus+0x32>
	}
	else
	{
		bitstatus = INACTIVE;               /* Interrupt is inactive */
    e6cc:	6cfb      	mov      	r3, sp
    e6ce:	3200      	movi      	r2, 0      	//0x0
    e6d0:	b340      	st.w      	r2, (r3, 0x0)
	}
	return  bitstatus;                      /* Return the ITstatus */
    e6d2:	6cfb      	mov      	r3, sp
    e6d4:	9360      	ld.w      	r3, (r3, 0x0)
}
    e6d6:	6c0f      	mov      	r0, r3
    e6d8:	1401      	addi      	sp, sp, 4
    e6da:	1490      	pop      	r15
    e6dc:	190700f4 	.long	0x190700f4
    e6e0:	0000e258 	.long	0x0000e258
    e6e4:	0000e26c 	.long	0x0000e26c

0000e6e8 <WDT_ClearFlag>:

/*just clear IT flagstatus but not restart the WDT ,read WDT_EOI*/
void WDT_ClearFlag(void)
{
    e6e8:	14d1      	push      	r4, r15
    e6ea:	1421      	subi      	sp, sp, 4
	//Bit32u tmp = WDT->WDT_EOI;
	Bit32u tmp=reg_readl(WDT,WDT_EOI);
    e6ec:	6d3b      	mov      	r4, sp
    e6ee:	ea201907 	movih      	r0, 6407      	//0x1907
    e6f2:	2013      	addi      	r0, 20      	//0x14
    e6f4:	e3fffdb2 	bsr      	0xe258	//e258 <readl>
    e6f8:	c4004820 	lsli      	r0, r0, 0
    e6fc:	b400      	st.w      	r0, (r4, 0x0)
}
    e6fe:	1401      	addi      	sp, sp, 4
    e700:	1491      	pop      	r4, r15
    e702:	0000      	.short	0x0000
    e704:	0000e258 	.long	0x0000e258

0000e708 <numtostring>:
* base: the base of system(for example 2,8,10,16 as usual)
* buf: data buffer for change procedure and return result
* return value: the string  after change 
*********************************************************/
static char *numtostring (unsigned int uq, int base, char *buf )
{                               
    e708:	14c2      	push      	r4-r5
    e70a:	1425      	subi      	sp, sp, 20
    e70c:	1b02      	addi      	r3, sp, 8
    e70e:	b300      	st.w      	r0, (r3, 0x0)
    e710:	1b01      	addi      	r3, sp, 4
    e712:	b320      	st.w      	r1, (r3, 0x0)
    e714:	6cfb      	mov      	r3, sp
    e716:	b340      	st.w      	r2, (r3, 0x0)
  register char *p, *p0;
  int n = 0, i;
    e718:	1b04      	addi      	r3, sp, 16
    e71a:	3200      	movi      	r2, 0      	//0x0
    e71c:	b340      	st.w      	r2, (r3, 0x0)

  p = buf;
    e71e:	6cfb      	mov      	r3, sp
    e720:	93a0      	ld.w      	r5, (r3, 0x0)
  *buf = 0;
    e722:	6cfb      	mov      	r3, sp
    e724:	9360      	ld.w      	r3, (r3, 0x0)
    e726:	3200      	movi      	r2, 0      	//0x0
    e728:	a340      	st.b      	r2, (r3, 0x0)
  do 
  {
    *buf ++ = "0123456789abcdef"[uq % base];
    e72a:	1b01      	addi      	r3, sp, 4
    e72c:	9340      	ld.w      	r2, (r3, 0x0)
    e72e:	1b02      	addi      	r3, sp, 8
    e730:	9360      	ld.w      	r3, (r3, 0x0)
    e732:	c4438021 	divu      	r1, r3, r2
    e736:	7c84      	mult      	r2, r1
    e738:	5b69      	subu      	r3, r3, r2
    e73a:	1345      	lrw      	r2, 0x111dc	//111dc <__etext+0x162c>
    e73c:	d0620023 	ldr.b      	r3, (r2, r3<<0)
    e740:	748c      	zextb      	r2, r3
    e742:	6cfb      	mov      	r3, sp
    e744:	9360      	ld.w      	r3, (r3, 0x0)
    e746:	a340      	st.b      	r2, (r3, 0x0)
    e748:	6cfb      	mov      	r3, sp
    e74a:	6cbb      	mov      	r2, sp
    e74c:	9240      	ld.w      	r2, (r2, 0x0)
    e74e:	2200      	addi      	r2, 1      	//0x1
    e750:	b340      	st.w      	r2, (r3, 0x0)
    n++;
    e752:	1b04      	addi      	r3, sp, 16
    e754:	1a04      	addi      	r2, sp, 16
    e756:	9240      	ld.w      	r2, (r2, 0x0)
    e758:	2200      	addi      	r2, 1      	//0x1
    e75a:	b340      	st.w      	r2, (r3, 0x0)
  } while (uq /= base);
    e75c:	1b01      	addi      	r3, sp, 4
    e75e:	9340      	ld.w      	r2, (r3, 0x0)
    e760:	1b02      	addi      	r3, sp, 8
    e762:	1902      	addi      	r1, sp, 8
    e764:	9120      	ld.w      	r1, (r1, 0x0)
    e766:	c4418022 	divu      	r2, r1, r2
    e76a:	b340      	st.w      	r2, (r3, 0x0)
    e76c:	1b02      	addi      	r3, sp, 8
    e76e:	9360      	ld.w      	r3, (r3, 0x0)
    e770:	e923ffdd 	bnez      	r3, 0xe72a	//e72a <numtostring+0x22>
  p[n] = '\0';
    e774:	1b04      	addi      	r3, sp, 16
    e776:	9360      	ld.w      	r3, (r3, 0x0)
    e778:	5d6c      	addu      	r3, r5, r3
    e77a:	3200      	movi      	r2, 0      	//0x0
    e77c:	a340      	st.b      	r2, (r3, 0x0)
        
  p0 = ++buf;
    e77e:	6cfb      	mov      	r3, sp
    e780:	6cbb      	mov      	r2, sp
    e782:	9240      	ld.w      	r2, (r2, 0x0)
    e784:	2200      	addi      	r2, 1      	//0x1
    e786:	b340      	st.w      	r2, (r3, 0x0)
    e788:	6cfb      	mov      	r3, sp
    e78a:	9380      	ld.w      	r4, (r3, 0x0)
  if (base == 16 && n < 8)  //If Hex, the length is fixxed with 8 digitals
    e78c:	1b01      	addi      	r3, sp, 4
    e78e:	9360      	ld.w      	r3, (r3, 0x0)
    e790:	3b50      	cmpnei      	r3, 16
    e792:	0834      	bt      	0xe7fa	//e7fa <numtostring+0xf2>
    e794:	1b04      	addi      	r3, sp, 16
    e796:	9360      	ld.w      	r3, (r3, 0x0)
    e798:	3b27      	cmplti      	r3, 8      	//0x8
    e79a:	0c30      	bf      	0xe7fa	//e7fa <numtostring+0xf2>
  {
    for (i = 0; i < 8 - n; i++)
    e79c:	1b03      	addi      	r3, sp, 12
    e79e:	3200      	movi      	r2, 0      	//0x0
    e7a0:	b340      	st.w      	r2, (r3, 0x0)
    e7a2:	040b      	br      	0xe7b8	//e7b8 <numtostring+0xb0>
    {
      p0[i] = '0';
    e7a4:	1b03      	addi      	r3, sp, 12
    e7a6:	9360      	ld.w      	r3, (r3, 0x0)
    e7a8:	5c6c      	addu      	r3, r4, r3
    e7aa:	3230      	movi      	r2, 48      	//0x30
    e7ac:	a340      	st.b      	r2, (r3, 0x0)
  p[n] = '\0';
        
  p0 = ++buf;
  if (base == 16 && n < 8)  //If Hex, the length is fixxed with 8 digitals
  {
    for (i = 0; i < 8 - n; i++)
    e7ae:	1b03      	addi      	r3, sp, 12
    e7b0:	1a03      	addi      	r2, sp, 12
    e7b2:	9240      	ld.w      	r2, (r2, 0x0)
    e7b4:	2200      	addi      	r2, 1      	//0x1
    e7b6:	b340      	st.w      	r2, (r3, 0x0)
    e7b8:	1b04      	addi      	r3, sp, 16
    e7ba:	3208      	movi      	r2, 8      	//0x8
    e7bc:	9360      	ld.w      	r3, (r3, 0x0)
    e7be:	5a4d      	subu      	r2, r2, r3
    e7c0:	1b03      	addi      	r3, sp, 12
    e7c2:	9360      	ld.w      	r3, (r3, 0x0)
    e7c4:	648d      	cmplt      	r3, r2
    e7c6:	0bef      	bt      	0xe7a4	//e7a4 <numtostring+0x9c>
    {
      p0[i] = '0';
    }
    for (; i < 8; i++)
    e7c8:	0411      	br      	0xe7ea	//e7ea <numtostring+0xe2>
    {
      p0[i] = p[8 - i - 1];
    e7ca:	1b03      	addi      	r3, sp, 12
    e7cc:	9360      	ld.w      	r3, (r3, 0x0)
    e7ce:	5c6c      	addu      	r3, r4, r3
    e7d0:	1a03      	addi      	r2, sp, 12
    e7d2:	9240      	ld.w      	r2, (r2, 0x0)
    e7d4:	3107      	movi      	r1, 7      	//0x7
    e7d6:	5949      	subu      	r2, r1, r2
    e7d8:	5d48      	addu      	r2, r5, r2
    e7da:	8240      	ld.b      	r2, (r2, 0x0)
    e7dc:	7488      	zextb      	r2, r2
    e7de:	a340      	st.b      	r2, (r3, 0x0)
  {
    for (i = 0; i < 8 - n; i++)
    {
      p0[i] = '0';
    }
    for (; i < 8; i++)
    e7e0:	1b03      	addi      	r3, sp, 12
    e7e2:	1a03      	addi      	r2, sp, 12
    e7e4:	9240      	ld.w      	r2, (r2, 0x0)
    e7e6:	2200      	addi      	r2, 1      	//0x1
    e7e8:	b340      	st.w      	r2, (r3, 0x0)
    e7ea:	1b03      	addi      	r3, sp, 12
    e7ec:	9360      	ld.w      	r3, (r3, 0x0)
    e7ee:	3b27      	cmplti      	r3, 8      	//0x8
    e7f0:	0bed      	bt      	0xe7ca	//e7ca <numtostring+0xc2>
    {
      p0[i] = p[8 - i - 1];
    }
    p0[8] = '\0';
    e7f2:	5c7e      	addi      	r3, r4, 8      	//0x8
    e7f4:	3200      	movi      	r2, 0      	//0x0
    e7f6:	a340      	st.b      	r2, (r3, 0x0)
    e7f8:	0422      	br      	0xe83c	//e83c <numtostring+0x134>
  }
  else
  {
    for (i = 0; i < n; i++)
    e7fa:	1b03      	addi      	r3, sp, 12
    e7fc:	3200      	movi      	r2, 0      	//0x0
    e7fe:	b340      	st.w      	r2, (r3, 0x0)
    e800:	0413      	br      	0xe826	//e826 <numtostring+0x11e>
    {
      p0[i] = p[n - i - 1];
    e802:	1b03      	addi      	r3, sp, 12
    e804:	9360      	ld.w      	r3, (r3, 0x0)
    e806:	5c6c      	addu      	r3, r4, r3
    e808:	1904      	addi      	r1, sp, 16
    e80a:	1a03      	addi      	r2, sp, 12
    e80c:	9120      	ld.w      	r1, (r1, 0x0)
    e80e:	9240      	ld.w      	r2, (r2, 0x0)
    e810:	5949      	subu      	r2, r1, r2
    e812:	2a00      	subi      	r2, 1      	//0x1
    e814:	5d48      	addu      	r2, r5, r2
    e816:	8240      	ld.b      	r2, (r2, 0x0)
    e818:	7488      	zextb      	r2, r2
    e81a:	a340      	st.b      	r2, (r3, 0x0)
    }
    p0[8] = '\0';
  }
  else
  {
    for (i = 0; i < n; i++)
    e81c:	1b03      	addi      	r3, sp, 12
    e81e:	1a03      	addi      	r2, sp, 12
    e820:	9240      	ld.w      	r2, (r2, 0x0)
    e822:	2200      	addi      	r2, 1      	//0x1
    e824:	b340      	st.w      	r2, (r3, 0x0)
    e826:	1a03      	addi      	r2, sp, 12
    e828:	1b04      	addi      	r3, sp, 16
    e82a:	9240      	ld.w      	r2, (r2, 0x0)
    e82c:	9360      	ld.w      	r3, (r3, 0x0)
    e82e:	64c9      	cmplt      	r2, r3
    e830:	0be9      	bt      	0xe802	//e802 <numtostring+0xfa>
    {
      p0[i] = p[n - i - 1];
    }
    p0[n] = '\0';
    e832:	1b04      	addi      	r3, sp, 16
    e834:	9360      	ld.w      	r3, (r3, 0x0)
    e836:	5c6c      	addu      	r3, r4, r3
    e838:	3200      	movi      	r2, 0      	//0x0
    e83a:	a340      	st.b      	r2, (r3, 0x0)
  }

  return (p0);
    e83c:	6cd3      	mov      	r3, r4
}
    e83e:	6c0f      	mov      	r0, r3
    e840:	1405      	addi      	sp, sp, 20
    e842:	1482      	pop      	r4-r5

0000e844 <putchar>:
/*
 * display the char on the console
 * ch: the char need to display
 */
int putchar(int ch)
{
    e844:	14d0      	push      	r15
    e846:	1421      	subi      	sp, sp, 4
    e848:	6cfb      	mov      	r3, sp
    e84a:	b300      	st.w      	r0, (r3, 0x0)
  while(CK_Uart_PutChar(consoleuart,ch) != SUCCESS);
    e84c:	6c00      	or      	r0, r0
    e84e:	1161      	lrw      	r3, 0x134c0	//134c0 <__bss_start>
    e850:	9340      	ld.w      	r2, (r3, 0x0)
    e852:	6cfb      	mov      	r3, sp
    e854:	9360      	ld.w      	r3, (r3, 0x0)
    e856:	74cc      	zextb      	r3, r3
    e858:	6c0b      	mov      	r0, r2
    e85a:	6c4f      	mov      	r1, r3
    e85c:	e3fff70e 	bsr      	0xd678	//d678 <CK_Uart_PutChar>
    e860:	c4004820 	lsli      	r0, r0, 0
    e864:	6cc3      	mov      	r3, r0
    e866:	e923fff4 	bnez      	r3, 0xe84e	//e84e <putchar+0xa>
  return 0;
    e86a:	3300      	movi      	r3, 0      	//0x0
}
    e86c:	6c0f      	mov      	r0, r3
    e86e:	1401      	addi      	sp, sp, 4
    e870:	1490      	pop      	r15
	...

0000e874 <puts>:
/*
 * display a string on the console
 * ptr: the string need to display
 */
int puts(const char *ptr)
{
    e874:	14d0      	push      	r15
    e876:	1421      	subi      	sp, sp, 4
    e878:	6cfb      	mov      	r3, sp
    e87a:	b300      	st.w      	r0, (r3, 0x0)
   while(*ptr !='\0')
    e87c:	0415      	br      	0xe8a6	//e8a6 <puts+0x32>
   {
     if (SUCCESS == CK_Uart_PutChar(consoleuart,*ptr))
    e87e:	1075      	lrw      	r3, 0x134c0	//134c0 <__bss_start>
    e880:	9340      	ld.w      	r2, (r3, 0x0)
    e882:	6cfb      	mov      	r3, sp
    e884:	9360      	ld.w      	r3, (r3, 0x0)
    e886:	8360      	ld.b      	r3, (r3, 0x0)
    e888:	74cc      	zextb      	r3, r3
    e88a:	6c0b      	mov      	r0, r2
    e88c:	6c4f      	mov      	r1, r3
    e88e:	e3fff6f5 	bsr      	0xd678	//d678 <CK_Uart_PutChar>
    e892:	c4004820 	lsli      	r0, r0, 0
    e896:	6cc3      	mov      	r3, r0
    e898:	e9230007 	bnez      	r3, 0xe8a6	//e8a6 <puts+0x32>
       ptr++;
    e89c:	6cfb      	mov      	r3, sp
    e89e:	6cbb      	mov      	r2, sp
    e8a0:	9240      	ld.w      	r2, (r2, 0x0)
    e8a2:	2200      	addi      	r2, 1      	//0x1
    e8a4:	b340      	st.w      	r2, (r3, 0x0)
 * display a string on the console
 * ptr: the string need to display
 */
int puts(const char *ptr)
{
   while(*ptr !='\0')
    e8a6:	6cfb      	mov      	r3, sp
    e8a8:	9360      	ld.w      	r3, (r3, 0x0)
    e8aa:	8360      	ld.b      	r3, (r3, 0x0)
    e8ac:	74cc      	zextb      	r3, r3
    e8ae:	e923ffe8 	bnez      	r3, 0xe87e	//e87e <puts+0xa>
   {
     if (SUCCESS == CK_Uart_PutChar(consoleuart,*ptr))
       ptr++;
   }
   CK_Uart_PutChar(consoleuart,'\n');
    e8b2:	1068      	lrw      	r3, 0x134c0	//134c0 <__bss_start>
    e8b4:	9360      	ld.w      	r3, (r3, 0x0)
    e8b6:	6c0f      	mov      	r0, r3
    e8b8:	310a      	movi      	r1, 10      	//0xa
    e8ba:	e3fff6df 	bsr      	0xd678	//d678 <CK_Uart_PutChar>
    e8be:	c4004820 	lsli      	r0, r0, 0
   return 0;
    e8c2:	3300      	movi      	r3, 0      	//0x0
}
    e8c4:	6c0f      	mov      	r0, r3
    e8c6:	1401      	addi      	sp, sp, 4
    e8c8:	1490      	pop      	r15
    e8ca:	0000      	.short	0x0000
    e8cc:	000111dc 	.long	0x000111dc
    e8d0:	000134c0 	.long	0x000134c0
    e8d4:	0000d678 	.long	0x0000d678

0000e8d8 <puts_without_enter>:
/*
 * display a string on the console
 * ptr: the string need to display
 */
static int puts_without_enter(const char *ptr)
{
    e8d8:	14d0      	push      	r15
    e8da:	1421      	subi      	sp, sp, 4
    e8dc:	6cfb      	mov      	r3, sp
    e8de:	b300      	st.w      	r0, (r3, 0x0)
   while(*ptr !='\0')
    e8e0:	0415      	br      	0xe90a	//e90a <puts_without_enter+0x32>
   {
     if (SUCCESS == CK_Uart_PutChar(consoleuart,*ptr))
    e8e2:	1172      	lrw      	r3, 0x134c0	//134c0 <__bss_start>
    e8e4:	9340      	ld.w      	r2, (r3, 0x0)
    e8e6:	6cfb      	mov      	r3, sp
    e8e8:	9360      	ld.w      	r3, (r3, 0x0)
    e8ea:	8360      	ld.b      	r3, (r3, 0x0)
    e8ec:	74cc      	zextb      	r3, r3
    e8ee:	6c0b      	mov      	r0, r2
    e8f0:	6c4f      	mov      	r1, r3
    e8f2:	e3fff6c3 	bsr      	0xd678	//d678 <CK_Uart_PutChar>
    e8f6:	c4004820 	lsli      	r0, r0, 0
    e8fa:	6cc3      	mov      	r3, r0
    e8fc:	e9230007 	bnez      	r3, 0xe90a	//e90a <puts_without_enter+0x32>
       ptr++;
    e900:	6cfb      	mov      	r3, sp
    e902:	6cbb      	mov      	r2, sp
    e904:	9240      	ld.w      	r2, (r2, 0x0)
    e906:	2200      	addi      	r2, 1      	//0x1
    e908:	b340      	st.w      	r2, (r3, 0x0)
 * display a string on the console
 * ptr: the string need to display
 */
static int puts_without_enter(const char *ptr)
{
   while(*ptr !='\0')
    e90a:	6cfb      	mov      	r3, sp
    e90c:	9360      	ld.w      	r3, (r3, 0x0)
    e90e:	8360      	ld.b      	r3, (r3, 0x0)
    e910:	74cc      	zextb      	r3, r3
    e912:	e923ffe8 	bnez      	r3, 0xe8e2	//e8e2 <puts_without_enter+0xa>
   {
     if (SUCCESS == CK_Uart_PutChar(consoleuart,*ptr))
       ptr++;
   }
   return 0;
    e916:	3300      	movi      	r3, 0      	//0x0
}
    e918:	6c0f      	mov      	r0, r3
    e91a:	1401      	addi      	sp, sp, 4
    e91c:	1490      	pop      	r15
	...

0000e920 <getchar>:
/*
 * receive a char from the console
 *return value: the char received from the console
 */
int getchar(void)
{
    e920:	14d0      	push      	r15
    e922:	1421      	subi      	sp, sp, 4
  CK_UINT8 ch;
  while(CK_Uart_GetChar(consoleuart,&ch) != SUCCESS);
    e924:	6c00      	or      	r0, r0
    e926:	1161      	lrw      	r3, 0x134c0	//134c0 <__bss_start>
    e928:	9340      	ld.w      	r2, (r3, 0x0)
    e92a:	e46e0002 	addi      	r3, sp, 3      	//0x3
    e92e:	6c0b      	mov      	r0, r2
    e930:	6c4f      	mov      	r1, r3
    e932:	e3fff607 	bsr      	0xd540	//d540 <CK_Uart_GetChar>
    e936:	c4004820 	lsli      	r0, r0, 0
    e93a:	6cc3      	mov      	r3, r0
    e93c:	e923fff5 	bnez      	r3, 0xe926	//e926 <getchar+0x6>
  return ch;
    e940:	e46e0002 	addi      	r3, sp, 3      	//0x3
    e944:	8360      	ld.b      	r3, (r3, 0x0)
    e946:	74cc      	zextb      	r3, r3
}
    e948:	6c0f      	mov      	r0, r3
    e94a:	1401      	addi      	sp, sp, 4
    e94c:	1490      	pop      	r15
	...

0000e950 <printf>:

/*
 * print the result after translated according to the format
 */
int printf ( const char *fmt, ... )
{
    e950:	1424      	subi      	sp, sp, 16
    e952:	b863      	st.w      	r3, (sp, 0xc)
    e954:	b842      	st.w      	r2, (sp, 0x8)
    e956:	b821      	st.w      	r1, (sp, 0x4)
    e958:	b800      	st.w      	r0, (sp, 0x0)
    e95a:	14d1      	push      	r4, r15
    e95c:	1436      	subi      	sp, sp, 88
  int        value;
  CK_UINT32        ptr;
  char       ch, buf[64], *pbuf;
  va_list    ap;

  va_start(ap, fmt);
    e95e:	1a19      	addi      	r2, sp, 100
    e960:	6cfb      	mov      	r3, sp
    e962:	b340      	st.w      	r2, (r3, 0x0)
  while (*fmt) 
    e964:	04c1      	br      	0xeae6	//eae6 <printf+0x196>
  {
    if (*fmt != '%')
    e966:	9878      	ld.w      	r3, (sp, 0x60)
    e968:	8360      	ld.b      	r3, (r3, 0x0)
    e96a:	74cc      	zextb      	r3, r3
    e96c:	eb430025 	cmpnei      	r3, 37      	//0x25
    e970:	0c0d      	bf      	0xe98a	//e98a <printf+0x3a>
    {
      putchar(*fmt++);
    e972:	9878      	ld.w      	r3, (sp, 0x60)
    e974:	8360      	ld.b      	r3, (r3, 0x0)
    e976:	74cc      	zextb      	r3, r3
    e978:	9858      	ld.w      	r2, (sp, 0x60)
    e97a:	2200      	addi      	r2, 1      	//0x1
    e97c:	b858      	st.w      	r2, (sp, 0x60)
    e97e:	6c0f      	mov      	r0, r3
    e980:	e3ffff62 	bsr      	0xe844	//e844 <putchar>
    e984:	c4004820 	lsli      	r0, r0, 0
      continue;
    e988:	04af      	br      	0xeae6	//eae6 <printf+0x196>
    }

    switch (*++fmt)
    e98a:	9878      	ld.w      	r3, (sp, 0x60)
    e98c:	2300      	addi      	r3, 1      	//0x1
    e98e:	b878      	st.w      	r3, (sp, 0x60)
    e990:	9878      	ld.w      	r3, (sp, 0x60)
    e992:	8360      	ld.b      	r3, (r3, 0x0)
    e994:	74cc      	zextb      	r3, r3
    e996:	2b62      	subi      	r3, 99      	//0x63
    e998:	3b15      	cmphsi      	r3, 22      	//0x16
    e99a:	089a      	bt      	0xeace	//eace <printf+0x17e>
    e99c:	4342      	lsli      	r2, r3, 2
    e99e:	1067      	lrw      	r3, 0x111f0	//111f0 <__etext+0x1640>
    e9a0:	5a6c      	addu      	r3, r2, r3
    e9a2:	9360      	ld.w      	r3, (r3, 0x0)
    e9a4:	780c      	jmp      	r3
    e9a6:	0000      	.short	0x0000
    e9a8:	000134c0 	.long	0x000134c0
    e9ac:	0000d678 	.long	0x0000d678
    e9b0:	0000d540 	.long	0x0000d540
    e9b4:	0000e844 	.long	0x0000e844
    e9b8:	000111f0 	.long	0x000111f0
    {
      case 's':
        s = va_arg(ap, const char *);
    e9bc:	6cfb      	mov      	r3, sp
    e9be:	9360      	ld.w      	r3, (r3, 0x0)
    e9c0:	5b2e      	addi      	r1, r3, 4      	//0x4
    e9c2:	6cbb      	mov      	r2, sp
    e9c4:	b220      	st.w      	r1, (r2, 0x0)
    e9c6:	6c8f      	mov      	r2, r3
    e9c8:	1b14      	addi      	r3, sp, 80
    e9ca:	9240      	ld.w      	r2, (r2, 0x0)
    e9cc:	b340      	st.w      	r2, (r3, 0x0)
         puts_without_enter(s);
    e9ce:	1b14      	addi      	r3, sp, 80
    e9d0:	9300      	ld.w      	r0, (r3, 0x0)
    e9d2:	e3ffff83 	bsr      	0xe8d8	//e8d8 <puts_without_enter>
    e9d6:	c4004820 	lsli      	r0, r0, 0
         break;
    e9da:	0483      	br      	0xeae0	//eae0 <printf+0x190>
      case 'd':
         value = va_arg(ap, int);
    e9dc:	6cfb      	mov      	r3, sp
    e9de:	9360      	ld.w      	r3, (r3, 0x0)
    e9e0:	5b2e      	addi      	r1, r3, 4      	//0x4
    e9e2:	6cbb      	mov      	r2, sp
    e9e4:	b220      	st.w      	r1, (r2, 0x0)
    e9e6:	6c8f      	mov      	r2, r3
    e9e8:	1b15      	addi      	r3, sp, 84
    e9ea:	9240      	ld.w      	r2, (r2, 0x0)
    e9ec:	b340      	st.w      	r2, (r3, 0x0)
         if (value < 0)
    e9ee:	1b15      	addi      	r3, sp, 84
    e9f0:	9360      	ld.w      	r3, (r3, 0x0)
    e9f2:	e9a3000d 	bhsz      	r3, 0xea0c	//ea0c <printf+0xbc>
         {
            putchar('-');
    e9f6:	302d      	movi      	r0, 45      	//0x2d
    e9f8:	e3ffff26 	bsr      	0xe844	//e844 <putchar>
    e9fc:	c4004820 	lsli      	r0, r0, 0
            value = 0 - value;
    ea00:	1b15      	addi      	r3, sp, 84
    ea02:	1a15      	addi      	r2, sp, 84
    ea04:	3100      	movi      	r1, 0      	//0x0
    ea06:	9240      	ld.w      	r2, (r2, 0x0)
    ea08:	5949      	subu      	r2, r1, r2
    ea0a:	b340      	st.w      	r2, (r3, 0x0)
         }
         pbuf = numtostring((unsigned int)value, 10, buf);
    ea0c:	1b15      	addi      	r3, sp, 84
    ea0e:	9340      	ld.w      	r2, (r3, 0x0)
    ea10:	1c13      	addi      	r4, sp, 76
    ea12:	1b01      	addi      	r3, sp, 4
    ea14:	6c0b      	mov      	r0, r2
    ea16:	310a      	movi      	r1, 10      	//0xa
    ea18:	6c8f      	mov      	r2, r3
    ea1a:	e3fffe77 	bsr      	0xe708	//e708 <numtostring>
    ea1e:	c4004820 	lsli      	r0, r0, 0
    ea22:	b400      	st.w      	r0, (r4, 0x0)
         puts_without_enter(pbuf);
    ea24:	1b13      	addi      	r3, sp, 76
    ea26:	9300      	ld.w      	r0, (r3, 0x0)
    ea28:	e3ffff58 	bsr      	0xe8d8	//e8d8 <puts_without_enter>
    ea2c:	c4004820 	lsli      	r0, r0, 0
         break;
    ea30:	0458      	br      	0xeae0	//eae0 <printf+0x190>
       case 'x':
         value = va_arg(ap,int);
    ea32:	6cfb      	mov      	r3, sp
    ea34:	9360      	ld.w      	r3, (r3, 0x0)
    ea36:	5b2e      	addi      	r1, r3, 4      	//0x4
    ea38:	6cbb      	mov      	r2, sp
    ea3a:	b220      	st.w      	r1, (r2, 0x0)
    ea3c:	6c8f      	mov      	r2, r3
    ea3e:	1b15      	addi      	r3, sp, 84
    ea40:	9240      	ld.w      	r2, (r2, 0x0)
    ea42:	b340      	st.w      	r2, (r3, 0x0)
         pbuf = numtostring((unsigned int)value, 16, buf);
    ea44:	1b15      	addi      	r3, sp, 84
    ea46:	9340      	ld.w      	r2, (r3, 0x0)
    ea48:	1c13      	addi      	r4, sp, 76
    ea4a:	1b01      	addi      	r3, sp, 4
    ea4c:	6c0b      	mov      	r0, r2
    ea4e:	3110      	movi      	r1, 16      	//0x10
    ea50:	6c8f      	mov      	r2, r3
    ea52:	e3fffe5b 	bsr      	0xe708	//e708 <numtostring>
    ea56:	c4004820 	lsli      	r0, r0, 0
    ea5a:	b400      	st.w      	r0, (r4, 0x0)
         puts_without_enter(pbuf);
    ea5c:	1b13      	addi      	r3, sp, 76
    ea5e:	9300      	ld.w      	r0, (r3, 0x0)
    ea60:	e3ffff3c 	bsr      	0xe8d8	//e8d8 <puts_without_enter>
    ea64:	c4004820 	lsli      	r0, r0, 0
         break;
    ea68:	043c      	br      	0xeae0	//eae0 <printf+0x190>
       case 'c':
          ch = (unsigned char)va_arg(ap, int);
    ea6a:	6cfb      	mov      	r3, sp
    ea6c:	9360      	ld.w      	r3, (r3, 0x0)
    ea6e:	5b2e      	addi      	r1, r3, 4      	//0x4
    ea70:	6cbb      	mov      	r2, sp
    ea72:	b220      	st.w      	r1, (r2, 0x0)
    ea74:	9360      	ld.w      	r3, (r3, 0x0)
    ea76:	748c      	zextb      	r2, r3
    ea78:	e46e0046 	addi      	r3, sp, 71      	//0x47
    ea7c:	a340      	st.b      	r2, (r3, 0x0)
          pbuf = &ch;     
    ea7e:	1b13      	addi      	r3, sp, 76
    ea80:	e44e0046 	addi      	r2, sp, 71      	//0x47
    ea84:	b340      	st.w      	r2, (r3, 0x0)
          putchar(*pbuf);                         
    ea86:	1b13      	addi      	r3, sp, 76
    ea88:	9360      	ld.w      	r3, (r3, 0x0)
    ea8a:	8360      	ld.b      	r3, (r3, 0x0)
    ea8c:	74cc      	zextb      	r3, r3
    ea8e:	6c0f      	mov      	r0, r3
    ea90:	e3fffeda 	bsr      	0xe844	//e844 <putchar>
    ea94:	c4004820 	lsli      	r0, r0, 0
          break;                  
    ea98:	0424      	br      	0xeae0	//eae0 <printf+0x190>
//       {     
//          putchar(*s);                              
//        }
//        break;        
       case 'p':
         ptr = (unsigned) va_arg(ap, void *); 
    ea9a:	6cfb      	mov      	r3, sp
    ea9c:	9360      	ld.w      	r3, (r3, 0x0)
    ea9e:	5b2e      	addi      	r1, r3, 4      	//0x4
    eaa0:	6cbb      	mov      	r2, sp
    eaa2:	b220      	st.w      	r1, (r2, 0x0)
    eaa4:	9340      	ld.w      	r2, (r3, 0x0)
    eaa6:	1b12      	addi      	r3, sp, 72
    eaa8:	b340      	st.w      	r2, (r3, 0x0)
         pbuf = numtostring(ptr, 16, buf);
    eaaa:	1c13      	addi      	r4, sp, 76
    eaac:	1a12      	addi      	r2, sp, 72
    eaae:	1b01      	addi      	r3, sp, 4
    eab0:	9200      	ld.w      	r0, (r2, 0x0)
    eab2:	3110      	movi      	r1, 16      	//0x10
    eab4:	6c8f      	mov      	r2, r3
    eab6:	e3fffe29 	bsr      	0xe708	//e708 <numtostring>
    eaba:	c4004820 	lsli      	r0, r0, 0
    eabe:	b400      	st.w      	r0, (r4, 0x0)
         puts_without_enter(pbuf);
    eac0:	1b13      	addi      	r3, sp, 76
    eac2:	9300      	ld.w      	r0, (r3, 0x0)
    eac4:	e3ffff0a 	bsr      	0xe8d8	//e8d8 <puts_without_enter>
    eac8:	c4004820 	lsli      	r0, r0, 0
         break;  
    eacc:	040a      	br      	0xeae0	//eae0 <printf+0x190>
       default:  
         putchar(*fmt);
    eace:	9878      	ld.w      	r3, (sp, 0x60)
    ead0:	8360      	ld.b      	r3, (r3, 0x0)
    ead2:	74cc      	zextb      	r3, r3
    ead4:	6c0f      	mov      	r0, r3
    ead6:	e3fffeb7 	bsr      	0xe844	//e844 <putchar>
    eada:	c4004820 	lsli      	r0, r0, 0
         break;
    eade:	6c00      	or      	r0, r0
    }
    fmt ++;
    eae0:	9878      	ld.w      	r3, (sp, 0x60)
    eae2:	2300      	addi      	r3, 1      	//0x1
    eae4:	b878      	st.w      	r3, (sp, 0x60)
  CK_UINT32        ptr;
  char       ch, buf[64], *pbuf;
  va_list    ap;

  va_start(ap, fmt);
  while (*fmt) 
    eae6:	9878      	ld.w      	r3, (sp, 0x60)
    eae8:	8360      	ld.b      	r3, (r3, 0x0)
    eaea:	74cc      	zextb      	r3, r3
    eaec:	e923ff3d 	bnez      	r3, 0xe966	//e966 <printf+0x16>
         break;
    }
    fmt ++;
  }
  va_end(ap);
  return 0x01;   
    eaf0:	3301      	movi      	r3, 1      	//0x1
}
    eaf2:	6c0f      	mov      	r0, r3
    eaf4:	1416      	addi      	sp, sp, 88
    eaf6:	d9ee2001 	ld.w      	r15, (sp, 0x4)
    eafa:	9880      	ld.w      	r4, (sp, 0x0)
    eafc:	1406      	addi      	sp, sp, 24
    eafe:	783c      	rts
    eb00:	0000e8d8 	.long	0x0000e8d8
    eb04:	0000e844 	.long	0x0000e844
    eb08:	0000e708 	.long	0x0000e708

0000eb0c <CK_CircleBuffer_Init>:
void CK_CircleBuffer_Init(
        PCKStruct_CircleBuffer pcirclebuffer,
        CK_UINT8 * buffer,
        CK_INT32 buffersize
        )
{
    eb0c:	1423      	subi      	sp, sp, 12
    eb0e:	1b02      	addi      	r3, sp, 8
    eb10:	b300      	st.w      	r0, (r3, 0x0)
    eb12:	1b01      	addi      	r3, sp, 4
    eb14:	b320      	st.w      	r1, (r3, 0x0)
    eb16:	6cfb      	mov      	r3, sp
    eb18:	b340      	st.w      	r2, (r3, 0x0)
  pcirclebuffer->Buffer = buffer;
    eb1a:	1b02      	addi      	r3, sp, 8
    eb1c:	9360      	ld.w      	r3, (r3, 0x0)
    eb1e:	1a01      	addi      	r2, sp, 4
    eb20:	9240      	ld.w      	r2, (r2, 0x0)
    eb22:	b340      	st.w      	r2, (r3, 0x0)
  pcirclebuffer->BufferSize = buffersize;
    eb24:	1b02      	addi      	r3, sp, 8
    eb26:	9360      	ld.w      	r3, (r3, 0x0)
    eb28:	6cbb      	mov      	r2, sp
    eb2a:	9240      	ld.w      	r2, (r2, 0x0)
    eb2c:	b341      	st.w      	r2, (r3, 0x4)
  pcirclebuffer->ReadPtr = pcirclebuffer->WritePtr = 0;
    eb2e:	1b02      	addi      	r3, sp, 8
    eb30:	9360      	ld.w      	r3, (r3, 0x0)
    eb32:	3200      	movi      	r2, 0      	//0x0
    eb34:	b343      	st.w      	r2, (r3, 0xc)
    eb36:	1b02      	addi      	r3, sp, 8
    eb38:	9360      	ld.w      	r3, (r3, 0x0)
    eb3a:	9343      	ld.w      	r2, (r3, 0xc)
    eb3c:	1b02      	addi      	r3, sp, 8
    eb3e:	9360      	ld.w      	r3, (r3, 0x0)
    eb40:	b342      	st.w      	r2, (r3, 0x8)
}
    eb42:	1403      	addi      	sp, sp, 12
    eb44:	783c      	rts
	...

0000eb48 <CK_CircleBuffer_Clear>:
 *restrore the Read position and  write position  to initial position
 *
 * pcirclebuffer :point to the circlebuffer
 */
void CK_CircleBuffer_Clear( PCKStruct_CircleBuffer pcirclebuffer)
{
    eb48:	1421      	subi      	sp, sp, 4
    eb4a:	6cfb      	mov      	r3, sp
    eb4c:	b300      	st.w      	r0, (r3, 0x0)
  pcirclebuffer->ReadPtr = pcirclebuffer->WritePtr = 0;
    eb4e:	6cfb      	mov      	r3, sp
    eb50:	9360      	ld.w      	r3, (r3, 0x0)
    eb52:	3200      	movi      	r2, 0      	//0x0
    eb54:	b343      	st.w      	r2, (r3, 0xc)
    eb56:	6cfb      	mov      	r3, sp
    eb58:	9360      	ld.w      	r3, (r3, 0x0)
    eb5a:	9343      	ld.w      	r2, (r3, 0xc)
    eb5c:	6cfb      	mov      	r3, sp
    eb5e:	9360      	ld.w      	r3, (r3, 0x0)
    eb60:	b342      	st.w      	r2, (r3, 0x8)
}
    eb62:	1401      	addi      	sp, sp, 4
    eb64:	783c      	rts
	...

0000eb68 <CK_CircleBuffer_IsEmpty>:
 *
 * pcirclebuffer :point to the circlebuffer
 */

BOOL CK_CircleBuffer_IsEmpty(PCKStruct_CircleBuffer pcirclebuffer)
{
    eb68:	1421      	subi      	sp, sp, 4
    eb6a:	6cfb      	mov      	r3, sp
    eb6c:	b300      	st.w      	r0, (r3, 0x0)
  return( pcirclebuffer->ReadPtr == pcirclebuffer->WritePtr);
    eb6e:	6cfb      	mov      	r3, sp
    eb70:	9360      	ld.w      	r3, (r3, 0x0)
    eb72:	9342      	ld.w      	r2, (r3, 0x8)
    eb74:	6cfb      	mov      	r3, sp
    eb76:	9360      	ld.w      	r3, (r3, 0x0)
    eb78:	9363      	ld.w      	r3, (r3, 0xc)
    eb7a:	64ca      	cmpne      	r2, r3
    eb7c:	64c3      	mvcv      	r3
}
    eb7e:	6c0f      	mov      	r0, r3
    eb80:	1401      	addi      	sp, sp, 4
    eb82:	783c      	rts

0000eb84 <CK_CircleBuffer_IsFull>:
 * judge the circlebuffer is full,if full return TRUE else reutn FALSE.
 *
 * pcirclebuffer :point to the circlebuffer
 */
BOOL CK_CircleBuffer_IsFull(PCKStruct_CircleBuffer pcirclebuffer)
{
    eb84:	1421      	subi      	sp, sp, 4
    eb86:	6cfb      	mov      	r3, sp
    eb88:	b300      	st.w      	r0, (r3, 0x0)
  return((pcirclebuffer->WritePtr + 1) % pcirclebuffer->BufferSize == pcirclebuffer->ReadPtr);
    eb8a:	6cfb      	mov      	r3, sp
    eb8c:	9360      	ld.w      	r3, (r3, 0x0)
    eb8e:	9363      	ld.w      	r3, (r3, 0xc)
    eb90:	2300      	addi      	r3, 1      	//0x1
    eb92:	6cbb      	mov      	r2, sp
    eb94:	9240      	ld.w      	r2, (r2, 0x0)
    eb96:	9241      	ld.w      	r2, (r2, 0x4)
    eb98:	c4438041 	divs      	r1, r3, r2
    eb9c:	7c84      	mult      	r2, r1
    eb9e:	5b49      	subu      	r2, r3, r2
    eba0:	6cfb      	mov      	r3, sp
    eba2:	9360      	ld.w      	r3, (r3, 0x0)
    eba4:	9362      	ld.w      	r3, (r3, 0x8)
    eba6:	64ca      	cmpne      	r2, r3
    eba8:	64c3      	mvcv      	r3
}
    ebaa:	6c0f      	mov      	r0, r3
    ebac:	1401      	addi      	sp, sp, 4
    ebae:	783c      	rts

0000ebb0 <CK_CircleBuffer_Read>:
 *ch           : pos to put the read ch
 *return value : read a char success then return TRUE else reture FALSE		
 */
 
BOOL CK_CircleBuffer_Read(PCKStruct_CircleBuffer pcirclebuffer,CK_UINT8* ch)
{
    ebb0:	14d0      	push      	r15
    ebb2:	1422      	subi      	sp, sp, 8
    ebb4:	1b01      	addi      	r3, sp, 4
    ebb6:	b300      	st.w      	r0, (r3, 0x0)
    ebb8:	6cfb      	mov      	r3, sp
    ebba:	b320      	st.w      	r1, (r3, 0x0)
  if (CK_CircleBuffer_IsEmpty(pcirclebuffer))
    ebbc:	1b01      	addi      	r3, sp, 4
    ebbe:	9300      	ld.w      	r0, (r3, 0x0)
    ebc0:	e3ffffd4 	bsr      	0xeb68	//eb68 <CK_CircleBuffer_IsEmpty>
    ebc4:	c4004820 	lsli      	r0, r0, 0
    ebc8:	6cc3      	mov      	r3, r0
    ebca:	e9030004 	bez      	r3, 0xebd2	//ebd2 <CK_CircleBuffer_Read+0x22>
    return FALSE;
    ebce:	3300      	movi      	r3, 0      	//0x0
    ebd0:	041c      	br      	0xec08	//ec08 <CK_CircleBuffer_Read+0x58>
  *ch = pcirclebuffer->Buffer[pcirclebuffer->ReadPtr];
    ebd2:	1b01      	addi      	r3, sp, 4
    ebd4:	9360      	ld.w      	r3, (r3, 0x0)
    ebd6:	9340      	ld.w      	r2, (r3, 0x0)
    ebd8:	1b01      	addi      	r3, sp, 4
    ebda:	9360      	ld.w      	r3, (r3, 0x0)
    ebdc:	9362      	ld.w      	r3, (r3, 0x8)
    ebde:	5a6c      	addu      	r3, r2, r3
    ebe0:	8360      	ld.b      	r3, (r3, 0x0)
    ebe2:	748c      	zextb      	r2, r3
    ebe4:	6cfb      	mov      	r3, sp
    ebe6:	9360      	ld.w      	r3, (r3, 0x0)
    ebe8:	a340      	st.b      	r2, (r3, 0x0)
  pcirclebuffer->ReadPtr = (pcirclebuffer->ReadPtr + 1) % pcirclebuffer->BufferSize;
    ebea:	1b01      	addi      	r3, sp, 4
    ebec:	9360      	ld.w      	r3, (r3, 0x0)
    ebee:	9362      	ld.w      	r3, (r3, 0x8)
    ebf0:	2300      	addi      	r3, 1      	//0x1
    ebf2:	1a01      	addi      	r2, sp, 4
    ebf4:	9240      	ld.w      	r2, (r2, 0x0)
    ebf6:	9241      	ld.w      	r2, (r2, 0x4)
    ebf8:	c4438041 	divs      	r1, r3, r2
    ebfc:	7c84      	mult      	r2, r1
    ebfe:	5b49      	subu      	r2, r3, r2
    ec00:	1b01      	addi      	r3, sp, 4
    ec02:	9360      	ld.w      	r3, (r3, 0x0)
    ec04:	b342      	st.w      	r2, (r3, 0x8)
  return TRUE;
    ec06:	3301      	movi      	r3, 1      	//0x1
}
    ec08:	6c0f      	mov      	r0, r3
    ec0a:	1402      	addi      	sp, sp, 8
    ec0c:	1490      	pop      	r15
	...

0000ec10 <CK_CircleBuffer_Write>:
 *pcirclebuffer: point to the circlebuffer
 *ch           : the char will write to circlebuffer
 *return value : write success then return TRUE else reture FALSE   
 */
BOOL CK_CircleBuffer_Write(PCKStruct_CircleBuffer pcirclebuffer,CK_UINT8 ch)
{
    ec10:	14d0      	push      	r15
    ec12:	1422      	subi      	sp, sp, 8
    ec14:	1b01      	addi      	r3, sp, 4
    ec16:	b300      	st.w      	r0, (r3, 0x0)
    ec18:	6c87      	mov      	r2, r1
    ec1a:	6cfb      	mov      	r3, sp
    ec1c:	a340      	st.b      	r2, (r3, 0x0)
  if(CK_CircleBuffer_IsFull(pcirclebuffer))
    ec1e:	1b01      	addi      	r3, sp, 4
    ec20:	9300      	ld.w      	r0, (r3, 0x0)
    ec22:	e3ffffb1 	bsr      	0xeb84	//eb84 <CK_CircleBuffer_IsFull>
    ec26:	c4004820 	lsli      	r0, r0, 0
    ec2a:	6cc3      	mov      	r3, r0
    ec2c:	e9030004 	bez      	r3, 0xec34	//ec34 <CK_CircleBuffer_Write+0x24>
     return FALSE;
    ec30:	3300      	movi      	r3, 0      	//0x0
    ec32:	041a      	br      	0xec66	//ec66 <CK_CircleBuffer_Write+0x56>
  pcirclebuffer->Buffer[pcirclebuffer->WritePtr] = ch;
    ec34:	1b01      	addi      	r3, sp, 4
    ec36:	9360      	ld.w      	r3, (r3, 0x0)
    ec38:	9340      	ld.w      	r2, (r3, 0x0)
    ec3a:	1b01      	addi      	r3, sp, 4
    ec3c:	9360      	ld.w      	r3, (r3, 0x0)
    ec3e:	9363      	ld.w      	r3, (r3, 0xc)
    ec40:	5a6c      	addu      	r3, r2, r3
    ec42:	6cbb      	mov      	r2, sp
    ec44:	8240      	ld.b      	r2, (r2, 0x0)
    ec46:	a340      	st.b      	r2, (r3, 0x0)
  pcirclebuffer->WritePtr = (pcirclebuffer->WritePtr + 1) % pcirclebuffer->BufferSize;
    ec48:	1b01      	addi      	r3, sp, 4
    ec4a:	9360      	ld.w      	r3, (r3, 0x0)
    ec4c:	9363      	ld.w      	r3, (r3, 0xc)
    ec4e:	2300      	addi      	r3, 1      	//0x1
    ec50:	1a01      	addi      	r2, sp, 4
    ec52:	9240      	ld.w      	r2, (r2, 0x0)
    ec54:	9241      	ld.w      	r2, (r2, 0x4)
    ec56:	c4438041 	divs      	r1, r3, r2
    ec5a:	7c84      	mult      	r2, r1
    ec5c:	5b49      	subu      	r2, r3, r2
    ec5e:	1b01      	addi      	r3, sp, 4
    ec60:	9360      	ld.w      	r3, (r3, 0x0)
    ec62:	b343      	st.w      	r2, (r3, 0xc)
  return SUCCESS; 
    ec64:	3300      	movi      	r3, 0      	//0x0

}
    ec66:	6c0f      	mov      	r0, r3
    ec68:	1402      	addi      	sp, sp, 8
    ec6a:	1490      	pop      	r15
    ec6c:	0000eb68 	.long	0x0000eb68
    ec70:	0000eb84 	.long	0x0000eb84

0000ec74 <invertchar>:
 *
 * c     : the letter need to be translated
 *return value: the letter after translated
 */
char invertchar(char c)
{
    ec74:	1421      	subi      	sp, sp, 4
    ec76:	6c83      	mov      	r2, r0
    ec78:	6cfb      	mov      	r3, sp
    ec7a:	a340      	st.b      	r2, (r3, 0x0)
  if(c <= 'z' && c >= 'a')
    ec7c:	6cfb      	mov      	r3, sp
    ec7e:	8360      	ld.b      	r3, (r3, 0x0)
    ec80:	74cc      	zextb      	r3, r3
    ec82:	eb03007a 	cmphsi      	r3, 123      	//0x7b
    ec86:	080c      	bt      	0xec9e	//ec9e <invertchar+0x2a>
    ec88:	6cfb      	mov      	r3, sp
    ec8a:	8360      	ld.b      	r3, (r3, 0x0)
    ec8c:	748c      	zextb      	r2, r3
    ec8e:	3360      	movi      	r3, 96      	//0x60
    ec90:	648c      	cmphs      	r3, r2
    ec92:	0806      	bt      	0xec9e	//ec9e <invertchar+0x2a>
    return (c - 32);
    ec94:	6cfb      	mov      	r3, sp
    ec96:	8360      	ld.b      	r3, (r3, 0x0)
    ec98:	2b1f      	subi      	r3, 32      	//0x20
    ec9a:	74cc      	zextb      	r3, r3
    ec9c:	0415      	br      	0xecc6	//ecc6 <invertchar+0x52>
  if(c < 'Z' && c > 'A')
    ec9e:	6cfb      	mov      	r3, sp
    eca0:	8360      	ld.b      	r3, (r3, 0x0)
    eca2:	74cc      	zextb      	r3, r3
    eca4:	eb030059 	cmphsi      	r3, 90      	//0x5a
    eca8:	080c      	bt      	0xecc0	//ecc0 <invertchar+0x4c>
    ecaa:	6cfb      	mov      	r3, sp
    ecac:	8360      	ld.b      	r3, (r3, 0x0)
    ecae:	748c      	zextb      	r2, r3
    ecb0:	3341      	movi      	r3, 65      	//0x41
    ecb2:	648c      	cmphs      	r3, r2
    ecb4:	0806      	bt      	0xecc0	//ecc0 <invertchar+0x4c>
    return (c + 32);
    ecb6:	6cfb      	mov      	r3, sp
    ecb8:	8360      	ld.b      	r3, (r3, 0x0)
    ecba:	231f      	addi      	r3, 32      	//0x20
    ecbc:	74cc      	zextb      	r3, r3
    ecbe:	0404      	br      	0xecc6	//ecc6 <invertchar+0x52>
  return c;
    ecc0:	6cfb      	mov      	r3, sp
    ecc2:	8360      	ld.b      	r3, (r3, 0x0)
    ecc4:	74cc      	zextb      	r3, r3
}
    ecc6:	6c0f      	mov      	r0, r3
    ecc8:	1401      	addi      	sp, sp, 4
    ecca:	783c      	rts

0000eccc <tolower>:
 * translate capital letter in string  to small letter
 * str : the string need to be translated
 * return value : the string after translated
 */
char *tolower(char *str)
{
    eccc:	1422      	subi      	sp, sp, 8
    ecce:	6cfb      	mov      	r3, sp
    ecd0:	b300      	st.w      	r0, (r3, 0x0)
  char *sstr = str;
    ecd2:	1b01      	addi      	r3, sp, 4
    ecd4:	6cbb      	mov      	r2, sp
    ecd6:	9240      	ld.w      	r2, (r2, 0x0)
    ecd8:	b340      	st.w      	r2, (r3, 0x0)

  if (!str)
    ecda:	6cfb      	mov      	r3, sp
    ecdc:	9360      	ld.w      	r3, (r3, 0x0)
    ecde:	e9230022 	bnez      	r3, 0xed22	//ed22 <tolower+0x56>
  {
    return str;
    ece2:	6cfb      	mov      	r3, sp
    ece4:	9360      	ld.w      	r3, (r3, 0x0)
    ece6:	0427      	br      	0xed34	//ed34 <tolower+0x68>
  }
  for( ; *sstr ; sstr++)
  {
    if(*sstr<='Z' && *sstr >= 'A')
    ece8:	1b01      	addi      	r3, sp, 4
    ecea:	9360      	ld.w      	r3, (r3, 0x0)
    ecec:	8360      	ld.b      	r3, (r3, 0x0)
    ecee:	74cc      	zextb      	r3, r3
    ecf0:	eb03005a 	cmphsi      	r3, 91      	//0x5b
    ecf4:	0811      	bt      	0xed16	//ed16 <tolower+0x4a>
    ecf6:	1b01      	addi      	r3, sp, 4
    ecf8:	9360      	ld.w      	r3, (r3, 0x0)
    ecfa:	8360      	ld.b      	r3, (r3, 0x0)
    ecfc:	748c      	zextb      	r2, r3
    ecfe:	3340      	movi      	r3, 64      	//0x40
    ed00:	648c      	cmphs      	r3, r2
    ed02:	080a      	bt      	0xed16	//ed16 <tolower+0x4a>
    {
      *sstr = *sstr + 32;
    ed04:	1b01      	addi      	r3, sp, 4
    ed06:	9360      	ld.w      	r3, (r3, 0x0)
    ed08:	8360      	ld.b      	r3, (r3, 0x0)
    ed0a:	74cc      	zextb      	r3, r3
    ed0c:	231f      	addi      	r3, 32      	//0x20
    ed0e:	748c      	zextb      	r2, r3
    ed10:	1b01      	addi      	r3, sp, 4
    ed12:	9360      	ld.w      	r3, (r3, 0x0)
    ed14:	a340      	st.b      	r2, (r3, 0x0)

  if (!str)
  {
    return str;
  }
  for( ; *sstr ; sstr++)
    ed16:	1b01      	addi      	r3, sp, 4
    ed18:	1a01      	addi      	r2, sp, 4
    ed1a:	9240      	ld.w      	r2, (r2, 0x0)
    ed1c:	2200      	addi      	r2, 1      	//0x1
    ed1e:	b340      	st.w      	r2, (r3, 0x0)
    ed20:	0402      	br      	0xed24	//ed24 <tolower+0x58>
    ed22:	6c00      	or      	r0, r0
    ed24:	1b01      	addi      	r3, sp, 4
    ed26:	9360      	ld.w      	r3, (r3, 0x0)
    ed28:	8360      	ld.b      	r3, (r3, 0x0)
    ed2a:	74cc      	zextb      	r3, r3
    ed2c:	e923ffde 	bnez      	r3, 0xece8	//ece8 <tolower+0x1c>
    if(*sstr<='Z' && *sstr >= 'A')
    {
      *sstr = *sstr + 32;
    }
  }
  return str;
    ed30:	6cfb      	mov      	r3, sp
    ed32:	9360      	ld.w      	r3, (r3, 0x0)
}
    ed34:	6c0f      	mov      	r0, r3
    ed36:	1402      	addi      	sp, sp, 8
    ed38:	783c      	rts
	...

0000ed3c <toupper>:
 * translate small letter in string  to capital letter
 * str : the string need to be translated
 * return value : the string after translated 
 */
char *toupper(char *str)
{
    ed3c:	1422      	subi      	sp, sp, 8
    ed3e:	6cfb      	mov      	r3, sp
    ed40:	b300      	st.w      	r0, (r3, 0x0)
  char *sstr = str;
    ed42:	1b01      	addi      	r3, sp, 4
    ed44:	6cbb      	mov      	r2, sp
    ed46:	9240      	ld.w      	r2, (r2, 0x0)
    ed48:	b340      	st.w      	r2, (r3, 0x0)
  
  if (!str)
    ed4a:	6cfb      	mov      	r3, sp
    ed4c:	9360      	ld.w      	r3, (r3, 0x0)
    ed4e:	e9230022 	bnez      	r3, 0xed92	//ed92 <toupper+0x56>
  {
    return str;
    ed52:	6cfb      	mov      	r3, sp
    ed54:	9360      	ld.w      	r3, (r3, 0x0)
    ed56:	0427      	br      	0xeda4	//eda4 <toupper+0x68>
  }
  for( ; *sstr ; sstr++)
  {
     if(*sstr <= 'z' && *sstr >= 'a')
    ed58:	1b01      	addi      	r3, sp, 4
    ed5a:	9360      	ld.w      	r3, (r3, 0x0)
    ed5c:	8360      	ld.b      	r3, (r3, 0x0)
    ed5e:	74cc      	zextb      	r3, r3
    ed60:	eb03007a 	cmphsi      	r3, 123      	//0x7b
    ed64:	0811      	bt      	0xed86	//ed86 <toupper+0x4a>
    ed66:	1b01      	addi      	r3, sp, 4
    ed68:	9360      	ld.w      	r3, (r3, 0x0)
    ed6a:	8360      	ld.b      	r3, (r3, 0x0)
    ed6c:	748c      	zextb      	r2, r3
    ed6e:	3360      	movi      	r3, 96      	//0x60
    ed70:	648c      	cmphs      	r3, r2
    ed72:	080a      	bt      	0xed86	//ed86 <toupper+0x4a>
     {
       *sstr = *sstr - 32;
    ed74:	1b01      	addi      	r3, sp, 4
    ed76:	9360      	ld.w      	r3, (r3, 0x0)
    ed78:	8360      	ld.b      	r3, (r3, 0x0)
    ed7a:	74cc      	zextb      	r3, r3
    ed7c:	2b1f      	subi      	r3, 32      	//0x20
    ed7e:	748c      	zextb      	r2, r3
    ed80:	1b01      	addi      	r3, sp, 4
    ed82:	9360      	ld.w      	r3, (r3, 0x0)
    ed84:	a340      	st.b      	r2, (r3, 0x0)
  
  if (!str)
  {
    return str;
  }
  for( ; *sstr ; sstr++)
    ed86:	1b01      	addi      	r3, sp, 4
    ed88:	1a01      	addi      	r2, sp, 4
    ed8a:	9240      	ld.w      	r2, (r2, 0x0)
    ed8c:	2200      	addi      	r2, 1      	//0x1
    ed8e:	b340      	st.w      	r2, (r3, 0x0)
    ed90:	0402      	br      	0xed94	//ed94 <toupper+0x58>
    ed92:	6c00      	or      	r0, r0
    ed94:	1b01      	addi      	r3, sp, 4
    ed96:	9360      	ld.w      	r3, (r3, 0x0)
    ed98:	8360      	ld.b      	r3, (r3, 0x0)
    ed9a:	74cc      	zextb      	r3, r3
    ed9c:	e923ffde 	bnez      	r3, 0xed58	//ed58 <toupper+0x1c>
     if(*sstr <= 'z' && *sstr >= 'a')
     {
       *sstr = *sstr - 32;
     }
  }
  return str;
    eda0:	6cfb      	mov      	r3, sp
    eda2:	9360      	ld.w      	r3, (r3, 0x0)
}
    eda4:	6c0f      	mov      	r0, r3
    eda6:	1402      	addi      	sp, sp, 8
    eda8:	783c      	rts
	...

0000edac <asciitobcd>:
 * translate ASCII code to BCD code
 * ascii : the ASCII code need to be translated 
 * return value: the BCD code correspond with the ASCII code
 */
CK_UINT8 asciitobcd(CK_UINT8 ascii)
{
    edac:	1422      	subi      	sp, sp, 8
    edae:	6c83      	mov      	r2, r0
    edb0:	6cfb      	mov      	r3, sp
    edb2:	a340      	st.b      	r2, (r3, 0x0)
  CK_UINT8  bcd = 0;
    edb4:	e46e0006 	addi      	r3, sp, 7      	//0x7
    edb8:	3200      	movi      	r2, 0      	//0x0
    edba:	a340      	st.b      	r2, (r3, 0x0)
  if((ascii >= '0') && (ascii <= '9'))
    edbc:	6cfb      	mov      	r3, sp
    edbe:	8360      	ld.b      	r3, (r3, 0x0)
    edc0:	748c      	zextb      	r2, r3
    edc2:	332f      	movi      	r3, 47      	//0x2f
    edc4:	648c      	cmphs      	r3, r2
    edc6:	080e      	bt      	0xede2	//ede2 <asciitobcd+0x36>
    edc8:	6cfb      	mov      	r3, sp
    edca:	8360      	ld.b      	r3, (r3, 0x0)
    edcc:	74cc      	zextb      	r3, r3
    edce:	eb030039 	cmphsi      	r3, 58      	//0x3a
    edd2:	0808      	bt      	0xede2	//ede2 <asciitobcd+0x36>
  {
    bcd = ascii - '0';
    edd4:	e46e0006 	addi      	r3, sp, 7      	//0x7
    edd8:	6cbb      	mov      	r2, sp
    edda:	8240      	ld.b      	r2, (r2, 0x0)
    eddc:	2a2f      	subi      	r2, 48      	//0x30
    edde:	a340      	st.b      	r2, (r3, 0x0)
    ede0:	0426      	br      	0xee2c	//ee2c <asciitobcd+0x80>
  }
  else if((ascii >= 'A') && (ascii <= 'F'))
    ede2:	6cfb      	mov      	r3, sp
    ede4:	8360      	ld.b      	r3, (r3, 0x0)
    ede6:	748c      	zextb      	r2, r3
    ede8:	3340      	movi      	r3, 64      	//0x40
    edea:	648c      	cmphs      	r3, r2
    edec:	080e      	bt      	0xee08	//ee08 <asciitobcd+0x5c>
    edee:	6cfb      	mov      	r3, sp
    edf0:	8360      	ld.b      	r3, (r3, 0x0)
    edf2:	74cc      	zextb      	r3, r3
    edf4:	eb030046 	cmphsi      	r3, 71      	//0x47
    edf8:	0808      	bt      	0xee08	//ee08 <asciitobcd+0x5c>
  {
    bcd = ascii - 'A' + 10;
    edfa:	e46e0006 	addi      	r3, sp, 7      	//0x7
    edfe:	6cbb      	mov      	r2, sp
    ee00:	8240      	ld.b      	r2, (r2, 0x0)
    ee02:	2a36      	subi      	r2, 55      	//0x37
    ee04:	a340      	st.b      	r2, (r3, 0x0)
    ee06:	0413      	br      	0xee2c	//ee2c <asciitobcd+0x80>
  }
  else if((ascii >= 'a') && (ascii <= 'f'))
    ee08:	6cfb      	mov      	r3, sp
    ee0a:	8360      	ld.b      	r3, (r3, 0x0)
    ee0c:	748c      	zextb      	r2, r3
    ee0e:	3360      	movi      	r3, 96      	//0x60
    ee10:	648c      	cmphs      	r3, r2
    ee12:	080d      	bt      	0xee2c	//ee2c <asciitobcd+0x80>
    ee14:	6cfb      	mov      	r3, sp
    ee16:	8360      	ld.b      	r3, (r3, 0x0)
    ee18:	74cc      	zextb      	r3, r3
    ee1a:	eb030066 	cmphsi      	r3, 103      	//0x67
    ee1e:	0807      	bt      	0xee2c	//ee2c <asciitobcd+0x80>
  {
    bcd = ascii - 'a' + 10;
    ee20:	e46e0006 	addi      	r3, sp, 7      	//0x7
    ee24:	6cbb      	mov      	r2, sp
    ee26:	8240      	ld.b      	r2, (r2, 0x0)
    ee28:	2a56      	subi      	r2, 87      	//0x57
    ee2a:	a340      	st.b      	r2, (r3, 0x0)
  }

   return bcd;
    ee2c:	e46e0006 	addi      	r3, sp, 7      	//0x7
    ee30:	8360      	ld.b      	r3, (r3, 0x0)
    ee32:	74cc      	zextb      	r3, r3
}
    ee34:	6c0f      	mov      	r0, r3
    ee36:	1402      	addi      	sp, sp, 8
    ee38:	783c      	rts
	...

0000ee3c <asciitohex>:
  * 
  * pt: point to the string you want to translate
  * return value: the hex data correspond with the string
  */
CK_UINT32 asciitohex(CK_UINT8 *pt)
{
    ee3c:	14d1      	push      	r4, r15
    ee3e:	1423      	subi      	sp, sp, 12
    ee40:	6cfb      	mov      	r3, sp
    ee42:	b300      	st.w      	r0, (r3, 0x0)
  CK_UINT32 hex=0;
    ee44:	1b02      	addi      	r3, sp, 8
    ee46:	3200      	movi      	r2, 0      	//0x0
    ee48:	b340      	st.w      	r2, (r3, 0x0)
  CK_UINT8 bcd;

  if (!pt)
    ee4a:	6cfb      	mov      	r3, sp
    ee4c:	9360      	ld.w      	r3, (r3, 0x0)
    ee4e:	e9230025 	bnez      	r3, 0xee98	//ee98 <asciitohex+0x5c>
  {
    return 0;
    ee52:	3300      	movi      	r3, 0      	//0x0
    ee54:	042b      	br      	0xeeaa	//eeaa <asciitohex+0x6e>
  }
  while(*pt) 
  {
    bcd = asciitobcd(*pt++);
    ee56:	6cfb      	mov      	r3, sp
    ee58:	9360      	ld.w      	r3, (r3, 0x0)
    ee5a:	8360      	ld.b      	r3, (r3, 0x0)
    ee5c:	74cc      	zextb      	r3, r3
    ee5e:	6cbb      	mov      	r2, sp
    ee60:	6c7b      	mov      	r1, sp
    ee62:	9120      	ld.w      	r1, (r1, 0x0)
    ee64:	2100      	addi      	r1, 1      	//0x1
    ee66:	b220      	st.w      	r1, (r2, 0x0)
    ee68:	e48e0006 	addi      	r4, sp, 7      	//0x7
    ee6c:	6c0f      	mov      	r0, r3
    ee6e:	e3ffff9f 	bsr      	0xedac	//edac <asciitobcd>
    ee72:	c4004820 	lsli      	r0, r0, 0
    ee76:	6cc3      	mov      	r3, r0
    ee78:	a460      	st.b      	r3, (r4, 0x0)
    hex = hex << 4;
    ee7a:	1b02      	addi      	r3, sp, 8
    ee7c:	1a02      	addi      	r2, sp, 8
    ee7e:	9240      	ld.w      	r2, (r2, 0x0)
    ee80:	4244      	lsli      	r2, r2, 4
    ee82:	b340      	st.w      	r2, (r3, 0x0)
    hex = hex + bcd;
    ee84:	e46e0006 	addi      	r3, sp, 7      	//0x7
    ee88:	8360      	ld.b      	r3, (r3, 0x0)
    ee8a:	744c      	zextb      	r1, r3
    ee8c:	1b02      	addi      	r3, sp, 8
    ee8e:	1a02      	addi      	r2, sp, 8
    ee90:	9240      	ld.w      	r2, (r2, 0x0)
    ee92:	5948      	addu      	r2, r1, r2
    ee94:	b340      	st.w      	r2, (r3, 0x0)
    ee96:	0402      	br      	0xee9a	//ee9a <asciitohex+0x5e>

  if (!pt)
  {
    return 0;
  }
  while(*pt) 
    ee98:	6c00      	or      	r0, r0
    ee9a:	6cfb      	mov      	r3, sp
    ee9c:	9360      	ld.w      	r3, (r3, 0x0)
    ee9e:	8360      	ld.b      	r3, (r3, 0x0)
    eea0:	74cc      	zextb      	r3, r3
    eea2:	e923ffda 	bnez      	r3, 0xee56	//ee56 <asciitohex+0x1a>
    bcd = asciitobcd(*pt++);
    hex = hex << 4;
    hex = hex + bcd;
  }

  return hex;
    eea6:	1b02      	addi      	r3, sp, 8
    eea8:	9360      	ld.w      	r3, (r3, 0x0)
}
    eeaa:	6c0f      	mov      	r0, r3
    eeac:	1403      	addi      	sp, sp, 12
    eeae:	1491      	pop      	r4, r15

0000eeb0 <asciitodec>:
  *
  * pt: point to the string you want to translate
  * return value: the decimal data correspond with the string
  */
CK_UINT32 asciitodec(CK_UINT8 *pt)
{
    eeb0:	14d1      	push      	r4, r15
    eeb2:	1423      	subi      	sp, sp, 12
    eeb4:	6cfb      	mov      	r3, sp
    eeb6:	b300      	st.w      	r0, (r3, 0x0)
  CK_UINT32 dec=0;
    eeb8:	1b02      	addi      	r3, sp, 8
    eeba:	3200      	movi      	r2, 0      	//0x0
    eebc:	b340      	st.w      	r2, (r3, 0x0)
  CK_UINT8 bcd;

  if (!pt)
    eebe:	6cfb      	mov      	r3, sp
    eec0:	9360      	ld.w      	r3, (r3, 0x0)
    eec2:	e9230026 	bnez      	r3, 0xef0e	//ef0e <asciitodec+0x5e>
  {
    return 0;
    eec6:	3300      	movi      	r3, 0      	//0x0
    eec8:	042c      	br      	0xef20	//ef20 <asciitodec+0x70>
  }

  while(*pt) 
  {
    bcd = asciitobcd(*pt++);
    eeca:	6cfb      	mov      	r3, sp
    eecc:	9360      	ld.w      	r3, (r3, 0x0)
    eece:	8360      	ld.b      	r3, (r3, 0x0)
    eed0:	74cc      	zextb      	r3, r3
    eed2:	6cbb      	mov      	r2, sp
    eed4:	6c7b      	mov      	r1, sp
    eed6:	9120      	ld.w      	r1, (r1, 0x0)
    eed8:	2100      	addi      	r1, 1      	//0x1
    eeda:	b220      	st.w      	r1, (r2, 0x0)
    eedc:	e48e0006 	addi      	r4, sp, 7      	//0x7
    eee0:	6c0f      	mov      	r0, r3
    eee2:	e3ffff65 	bsr      	0xedac	//edac <asciitobcd>
    eee6:	c4004820 	lsli      	r0, r0, 0
    eeea:	6cc3      	mov      	r3, r0
    eeec:	a460      	st.b      	r3, (r4, 0x0)
    dec*=10;
    eeee:	1b02      	addi      	r3, sp, 8
    eef0:	1a02      	addi      	r2, sp, 8
    eef2:	9220      	ld.w      	r1, (r2, 0x0)
    eef4:	320a      	movi      	r2, 10      	//0xa
    eef6:	7c84      	mult      	r2, r1
    eef8:	b340      	st.w      	r2, (r3, 0x0)
    dec = dec + bcd;
    eefa:	e46e0006 	addi      	r3, sp, 7      	//0x7
    eefe:	8360      	ld.b      	r3, (r3, 0x0)
    ef00:	744c      	zextb      	r1, r3
    ef02:	1b02      	addi      	r3, sp, 8
    ef04:	1a02      	addi      	r2, sp, 8
    ef06:	9240      	ld.w      	r2, (r2, 0x0)
    ef08:	5948      	addu      	r2, r1, r2
    ef0a:	b340      	st.w      	r2, (r3, 0x0)
    ef0c:	0402      	br      	0xef10	//ef10 <asciitodec+0x60>
  if (!pt)
  {
    return 0;
  }

  while(*pt) 
    ef0e:	6c00      	or      	r0, r0
    ef10:	6cfb      	mov      	r3, sp
    ef12:	9360      	ld.w      	r3, (r3, 0x0)
    ef14:	8360      	ld.b      	r3, (r3, 0x0)
    ef16:	74cc      	zextb      	r3, r3
    ef18:	e923ffd9 	bnez      	r3, 0xeeca	//eeca <asciitodec+0x1a>
    bcd = asciitobcd(*pt++);
    dec*=10;
    dec = dec + bcd;
  }

  return dec;
    ef1c:	1b02      	addi      	r3, sp, 8
    ef1e:	9360      	ld.w      	r3, (r3, 0x0)
}
    ef20:	6c0f      	mov      	r0, r3
    ef22:	1403      	addi      	sp, sp, 12
    ef24:	1491      	pop      	r4, r15
	...

0000ef28 <asciitonum>:
 *
 * pt: point to the string you want to translate
 * retunr value: the number after translated
 */
CK_UINT32 asciitonum(CK_UINT8 *pt)
{
    ef28:	14d0      	push      	r15
    ef2a:	1421      	subi      	sp, sp, 4
    ef2c:	6cfb      	mov      	r3, sp
    ef2e:	b300      	st.w      	r0, (r3, 0x0)
  if (!pt)
    ef30:	6cfb      	mov      	r3, sp
    ef32:	9360      	ld.w      	r3, (r3, 0x0)
    ef34:	e9230004 	bnez      	r3, 0xef3c	//ef3c <asciitonum+0x14>
  {
    return 0;
    ef38:	3300      	movi      	r3, 0      	//0x0
    ef3a:	0429      	br      	0xef8c	//ef8c <asciitonum+0x64>
  }

  if((pt[0]=='0')&&(pt[1]=='x'||pt[1]=='X'))
    ef3c:	6cfb      	mov      	r3, sp
    ef3e:	9360      	ld.w      	r3, (r3, 0x0)
    ef40:	8360      	ld.b      	r3, (r3, 0x0)
    ef42:	74cc      	zextb      	r3, r3
    ef44:	eb430030 	cmpnei      	r3, 48      	//0x30
    ef48:	081b      	bt      	0xef7e	//ef7e <asciitonum+0x56>
    ef4a:	6cfb      	mov      	r3, sp
    ef4c:	9360      	ld.w      	r3, (r3, 0x0)
    ef4e:	2300      	addi      	r3, 1      	//0x1
    ef50:	8360      	ld.b      	r3, (r3, 0x0)
    ef52:	74cc      	zextb      	r3, r3
    ef54:	eb430078 	cmpnei      	r3, 120      	//0x78
    ef58:	0c09      	bf      	0xef6a	//ef6a <asciitonum+0x42>
    ef5a:	6cfb      	mov      	r3, sp
    ef5c:	9360      	ld.w      	r3, (r3, 0x0)
    ef5e:	2300      	addi      	r3, 1      	//0x1
    ef60:	8360      	ld.b      	r3, (r3, 0x0)
    ef62:	74cc      	zextb      	r3, r3
    ef64:	eb430058 	cmpnei      	r3, 88      	//0x58
    ef68:	080b      	bt      	0xef7e	//ef7e <asciitonum+0x56>
    return asciitohex(&pt[2]);
    ef6a:	6cfb      	mov      	r3, sp
    ef6c:	9360      	ld.w      	r3, (r3, 0x0)
    ef6e:	2301      	addi      	r3, 2      	//0x2
    ef70:	6c0f      	mov      	r0, r3
    ef72:	e3ffff65 	bsr      	0xee3c	//ee3c <asciitohex>
    ef76:	c4004820 	lsli      	r0, r0, 0
    ef7a:	6cc3      	mov      	r3, r0
    ef7c:	0408      	br      	0xef8c	//ef8c <asciitonum+0x64>
  return asciitodec(pt);
    ef7e:	6cfb      	mov      	r3, sp
    ef80:	9300      	ld.w      	r0, (r3, 0x0)
    ef82:	e3ffff97 	bsr      	0xeeb0	//eeb0 <asciitodec>
    ef86:	c4004820 	lsli      	r0, r0, 0
    ef8a:	6cc3      	mov      	r3, r0
}
    ef8c:	6c0f      	mov      	r0, r3
    ef8e:	1401      	addi      	sp, sp, 4
    ef90:	1490      	pop      	r15
	...

0000ef94 <delay>:
 * wait some time
 *sec :how much second need wait;
 *
 */
void delay ( int sec )
{
    ef94:	1423      	subi      	sp, sp, 12
    ef96:	6cfb      	mov      	r3, sp
    ef98:	b300      	st.w      	r0, (r3, 0x0)
    int i;
    volatile int j;

    for (i = 0x00; i < sec * 100; i ++)
    ef9a:	1b02      	addi      	r3, sp, 8
    ef9c:	3200      	movi      	r2, 0      	//0x0
    ef9e:	b340      	st.w      	r2, (r3, 0x0)
    efa0:	040a      	br      	0xefb4	//efb4 <delay+0x20>
        j = i;
    efa2:	1b01      	addi      	r3, sp, 4
    efa4:	1a02      	addi      	r2, sp, 8
    efa6:	9240      	ld.w      	r2, (r2, 0x0)
    efa8:	b340      	st.w      	r2, (r3, 0x0)
void delay ( int sec )
{
    int i;
    volatile int j;

    for (i = 0x00; i < sec * 100; i ++)
    efaa:	1b02      	addi      	r3, sp, 8
    efac:	1a02      	addi      	r2, sp, 8
    efae:	9240      	ld.w      	r2, (r2, 0x0)
    efb0:	2200      	addi      	r2, 1      	//0x1
    efb2:	b340      	st.w      	r2, (r3, 0x0)
    efb4:	6cfb      	mov      	r3, sp
    efb6:	9340      	ld.w      	r2, (r3, 0x0)
    efb8:	3364      	movi      	r3, 100      	//0x64
    efba:	7c8c      	mult      	r2, r3
    efbc:	1b02      	addi      	r3, sp, 8
    efbe:	9360      	ld.w      	r3, (r3, 0x0)
    efc0:	648d      	cmplt      	r3, r2
    efc2:	0bf0      	bt      	0xefa2	//efa2 <delay+0xe>
        j = i;
}
    efc4:	1403      	addi      	sp, sp, 12
    efc6:	783c      	rts
    efc8:	0000edac 	.long	0x0000edac
    efcc:	0000ee3c 	.long	0x0000ee3c
    efd0:	0000eeb0 	.long	0x0000eeb0

0000efd4 <CK_WaitForReply>:
 * Use for user's reply, y or n.
 * Waiting for user to input with an end of ENTER key.
 * If it's 'y', return 1; else if 'n', return 0; others 2.
 */
CK_INT32 CK_WaitForReply()
{
    efd4:	14d0      	push      	r15
    efd6:	1426      	subi      	sp, sp, 24
  CK_UINT8 i;
  CK_UINT8 ch;
  char answer[20];

  for(i = 0; i < 20; i++)
    efd8:	e46e0016 	addi      	r3, sp, 23      	//0x17
    efdc:	3200      	movi      	r2, 0      	//0x0
    efde:	a340      	st.b      	r2, (r3, 0x0)
    efe0:	0410      	br      	0xf000	//f000 <CK_WaitForReply+0x2c>
  {
    answer[i] = '\0';
    efe2:	e46e0016 	addi      	r3, sp, 23      	//0x17
    efe6:	8360      	ld.b      	r3, (r3, 0x0)
    efe8:	74cc      	zextb      	r3, r3
    efea:	6cbb      	mov      	r2, sp
    efec:	3100      	movi      	r1, 0      	//0x0
    efee:	d4620021 	str.b      	r1, (r2, r3<<0)
{
  CK_UINT8 i;
  CK_UINT8 ch;
  char answer[20];

  for(i = 0; i < 20; i++)
    eff2:	e46e0016 	addi      	r3, sp, 23      	//0x17
    eff6:	e44e0016 	addi      	r2, sp, 23      	//0x17
    effa:	8240      	ld.b      	r2, (r2, 0x0)
    effc:	2200      	addi      	r2, 1      	//0x1
    effe:	a340      	st.b      	r2, (r3, 0x0)
    f000:	e46e0016 	addi      	r3, sp, 23      	//0x17
    f004:	8360      	ld.b      	r3, (r3, 0x0)
    f006:	748c      	zextb      	r2, r3
    f008:	3313      	movi      	r3, 19      	//0x13
    f00a:	648c      	cmphs      	r3, r2
    f00c:	0beb      	bt      	0xefe2	//efe2 <CK_WaitForReply+0xe>
  {
    answer[i] = '\0';
  }
  i = 0;
    f00e:	e46e0016 	addi      	r3, sp, 23      	//0x17
    f012:	3200      	movi      	r2, 0      	//0x0
    f014:	a340      	st.b      	r2, (r3, 0x0)
    f016:	0404      	br      	0xf01e	//f01e <CK_WaitForReply+0x4a>
      {
        answer[i++] = ch;
        CK_Uart_PutChar(consoleuart,ch);
      }
    }
  }
    f018:	6c00      	or      	r0, r0
    f01a:	0402      	br      	0xf01e	//f01e <CK_WaitForReply+0x4a>
    f01c:	6c00      	or      	r0, r0
    answer[i] = '\0';
  }
  i = 0;
  while(1)
  {
    if(SUCCESS == CK_Uart_GetChar(consoleuart, &ch))
    f01e:	1261      	lrw      	r3, 0x134c0	//134c0 <__bss_start>
    f020:	9340      	ld.w      	r2, (r3, 0x0)
    f022:	e46e0015 	addi      	r3, sp, 22      	//0x16
    f026:	6c0b      	mov      	r0, r2
    f028:	6c4f      	mov      	r1, r3
    f02a:	e3fff28b 	bsr      	0xd540	//d540 <CK_Uart_GetChar>
    f02e:	c4004820 	lsli      	r0, r0, 0
    f032:	6cc3      	mov      	r3, r0
    f034:	e923fff2 	bnez      	r3, 0xf018	//f018 <CK_WaitForReply+0x44>
    {
      if (ch == '\n' || ch == '\r')
    f038:	e46e0015 	addi      	r3, sp, 22      	//0x16
    f03c:	8360      	ld.b      	r3, (r3, 0x0)
    f03e:	74cc      	zextb      	r3, r3
    f040:	3b4a      	cmpnei      	r3, 10
    f042:	0c07      	bf      	0xf050	//f050 <CK_WaitForReply+0x7c>
    f044:	e46e0015 	addi      	r3, sp, 22      	//0x16
    f048:	8360      	ld.b      	r3, (r3, 0x0)
    f04a:	74cc      	zextb      	r3, r3
    f04c:	3b4d      	cmpnei      	r3, 13
    f04e:	0810      	bt      	0xf06e	//f06e <CK_WaitForReply+0x9a>
      {
        answer[i] = '\0';
    f050:	e46e0016 	addi      	r3, sp, 23      	//0x17
    f054:	8360      	ld.b      	r3, (r3, 0x0)
    f056:	74cc      	zextb      	r3, r3
    f058:	6cbb      	mov      	r2, sp
    f05a:	3100      	movi      	r1, 0      	//0x0
    f05c:	d4620021 	str.b      	r1, (r2, r3<<0)
        answer[i++] = ch;
        CK_Uart_PutChar(consoleuart,ch);
      }
    }
  }
  if((i == 1) && (answer[0] == 'y'))
    f060:	e46e0016 	addi      	r3, sp, 23      	//0x17
    f064:	8360      	ld.b      	r3, (r3, 0x0)
    f066:	74cc      	zextb      	r3, r3
    f068:	3b41      	cmpnei      	r3, 1
    f06a:	0c41      	bf      	0xf0ec	//f0ec <CK_WaitForReply+0x118>
    f06c:	0448      	br      	0xf0fc	//f0fc <CK_WaitForReply+0x128>
      if (ch == '\n' || ch == '\r')
      {
        answer[i] = '\0';
        break;
      }
       if(ch == '\b')
    f06e:	e46e0015 	addi      	r3, sp, 22      	//0x16
    f072:	8360      	ld.b      	r3, (r3, 0x0)
    f074:	74cc      	zextb      	r3, r3
    f076:	3b48      	cmpnei      	r3, 8
    f078:	081b      	bt      	0xf0ae	//f0ae <CK_WaitForReply+0xda>
      {
         if(i > 0)
    f07a:	e46e0016 	addi      	r3, sp, 23      	//0x17
    f07e:	8360      	ld.b      	r3, (r3, 0x0)
    f080:	74cc      	zextb      	r3, r3
    f082:	e903ffcd 	bez      	r3, 0xf01c	//f01c <CK_WaitForReply+0x48>
         {
           i--;
    f086:	e46e0016 	addi      	r3, sp, 23      	//0x17
    f08a:	e44e0016 	addi      	r2, sp, 23      	//0x17
    f08e:	8240      	ld.b      	r2, (r2, 0x0)
    f090:	2a00      	subi      	r2, 1      	//0x1
    f092:	a340      	st.b      	r2, (r3, 0x0)
           CK_Uart_PutChar(consoleuart,ch);
    f094:	1163      	lrw      	r3, 0x134c0	//134c0 <__bss_start>
    f096:	9340      	ld.w      	r2, (r3, 0x0)
    f098:	e46e0015 	addi      	r3, sp, 22      	//0x16
    f09c:	8360      	ld.b      	r3, (r3, 0x0)
    f09e:	74cc      	zextb      	r3, r3
    f0a0:	6c0b      	mov      	r0, r2
    f0a2:	6c4f      	mov      	r1, r3
    f0a4:	e3fff2ea 	bsr      	0xd678	//d678 <CK_Uart_PutChar>
    f0a8:	c4004820 	lsli      	r0, r0, 0
      {
        answer[i++] = ch;
        CK_Uart_PutChar(consoleuart,ch);
      }
    }
  }
    f0ac:	07b9      	br      	0xf01e	//f01e <CK_WaitForReply+0x4a>
           CK_Uart_PutChar(consoleuart,ch);
         }
      }
      else
      {
        answer[i++] = ch;
    f0ae:	e46e0016 	addi      	r3, sp, 23      	//0x17
    f0b2:	8360      	ld.b      	r3, (r3, 0x0)
    f0b4:	74cc      	zextb      	r3, r3
    f0b6:	e44e0015 	addi      	r2, sp, 22      	//0x16
    f0ba:	8240      	ld.b      	r2, (r2, 0x0)
    f0bc:	7448      	zextb      	r1, r2
    f0be:	6cbb      	mov      	r2, sp
    f0c0:	d4620021 	str.b      	r1, (r2, r3<<0)
    f0c4:	e46e0016 	addi      	r3, sp, 23      	//0x17
    f0c8:	e44e0016 	addi      	r2, sp, 23      	//0x17
    f0cc:	8240      	ld.b      	r2, (r2, 0x0)
    f0ce:	2200      	addi      	r2, 1      	//0x1
    f0d0:	a340      	st.b      	r2, (r3, 0x0)
        CK_Uart_PutChar(consoleuart,ch);
    f0d2:	1074      	lrw      	r3, 0x134c0	//134c0 <__bss_start>
    f0d4:	9340      	ld.w      	r2, (r3, 0x0)
    f0d6:	e46e0015 	addi      	r3, sp, 22      	//0x16
    f0da:	8360      	ld.b      	r3, (r3, 0x0)
    f0dc:	74cc      	zextb      	r3, r3
    f0de:	6c0b      	mov      	r0, r2
    f0e0:	6c4f      	mov      	r1, r3
    f0e2:	e3fff2cb 	bsr      	0xd678	//d678 <CK_Uart_PutChar>
    f0e6:	c4004820 	lsli      	r0, r0, 0
      }
    }
  }
    f0ea:	079a      	br      	0xf01e	//f01e <CK_WaitForReply+0x4a>
  if((i == 1) && (answer[0] == 'y'))
    f0ec:	6cfb      	mov      	r3, sp
    f0ee:	8360      	ld.b      	r3, (r3, 0x0)
    f0f0:	74cc      	zextb      	r3, r3
    f0f2:	eb430079 	cmpnei      	r3, 121      	//0x79
    f0f6:	0803      	bt      	0xf0fc	//f0fc <CK_WaitForReply+0x128>
  {
    return 1;
    f0f8:	3301      	movi      	r3, 1      	//0x1
    f0fa:	0410      	br      	0xf11a	//f11a <CK_WaitForReply+0x146>
  }
  else if((i == 1) && (answer[0] == 'n'))
    f0fc:	e46e0016 	addi      	r3, sp, 23      	//0x17
    f100:	8360      	ld.b      	r3, (r3, 0x0)
    f102:	74cc      	zextb      	r3, r3
    f104:	3b41      	cmpnei      	r3, 1
    f106:	0809      	bt      	0xf118	//f118 <CK_WaitForReply+0x144>
    f108:	6cfb      	mov      	r3, sp
    f10a:	8360      	ld.b      	r3, (r3, 0x0)
    f10c:	74cc      	zextb      	r3, r3
    f10e:	eb43006e 	cmpnei      	r3, 110      	//0x6e
    f112:	0803      	bt      	0xf118	//f118 <CK_WaitForReply+0x144>
  {
    return 0;
    f114:	3300      	movi      	r3, 0      	//0x0
    f116:	0402      	br      	0xf11a	//f11a <CK_WaitForReply+0x146>
  }
  return 2;
    f118:	3302      	movi      	r3, 2      	//0x2
}
    f11a:	6c0f      	mov      	r0, r3
    f11c:	1406      	addi      	sp, sp, 24
    f11e:	1490      	pop      	r15
    f120:	000134c0 	.long	0x000134c0
    f124:	0000d540 	.long	0x0000d540
    f128:	0000d678 	.long	0x0000d678

0000f12c <__GI_sqrt>:
    f12c:	14d1      	push      	r4, r15
    f12e:	f4011b40 	fmtvrh      	fr0, r1
    f132:	f4001b60 	fmtvrl      	fr0, r0
    f136:	ea327ff0 	movih      	r18, 32752      	//0x7ff0
    f13a:	6c87      	mov      	r2, r1
    f13c:	6c43      	mov      	r1, r0
    f13e:	c6422033 	and      	r19, r2, r18
    f142:	c6530480 	cmpne      	r19, r18
    f146:	6c0b      	mov      	r0, r2
    f148:	c4014835 	lsli      	r21, r1, 0
    f14c:	0cfc      	bf      	0xf344	//f344 <__GI_sqrt+0x218>
    f14e:	e96200e1 	blsz      	r2, 0xf310	//f310 <__GI_sqrt+0x1e4>
    f152:	5234      	asri      	r1, r2, 20
    f154:	e90100b4 	bez      	r1, 0xf2bc	//f2bc <__GI_sqrt+0x190>
    f158:	e42113fe 	subi      	r1, r1, 1023      	//0x3ff
    f15c:	c6605034 	bmaski      	r20, 20      	//0x14
    f160:	c6802020 	and      	r0, r0, r20
    f164:	e5812001 	andi      	r12, r1, 1
    f168:	c6802842 	bseti      	r2, r0, 20
    f16c:	e92c009c 	bnez      	r12, 0xf2a4	//f2a4 <__GI_sqrt+0x178>
    f170:	5a48      	addu      	r2, r2, r2
    f172:	c7f54843 	lsri      	r3, r21, 31
    f176:	ea190080 	movi      	r25, 128      	//0x80
    f17a:	ea140000 	movi      	r20, 0      	//0x0
    f17e:	c4214898 	asri      	r24, r1, 1
    f182:	5a4c      	addu      	r2, r2, r3
    f184:	c6b50021 	addu      	r1, r21, r21
    f188:	ea0d0016 	movi      	r13, 22      	//0x16
    f18c:	c5d94820 	lsli      	r0, r25, 14
    f190:	c414482c 	lsli      	r12, r20, 0
    f194:	c40c0032 	addu      	r18, r12, r0
    f198:	c6420440 	cmplt      	r2, r18
    f19c:	c7e14853 	lsri      	r19, r1, 31
    f1a0:	e5ad1000 	subi      	r13, r13, 1      	//0x1
    f1a4:	0807      	bt      	0xf1b2	//f1b2 <__GI_sqrt+0x86>
    f1a6:	c6420082 	subu      	r2, r2, r18
    f1aa:	c412002c 	addu      	r12, r18, r0
    f1ae:	c4140034 	addu      	r20, r20, r0
    f1b2:	c4420035 	addu      	r21, r2, r2
    f1b6:	c6750022 	addu      	r2, r21, r19
    f1ba:	5924      	addu      	r1, r1, r1
    f1bc:	4801      	lsri      	r0, r0, 1
    f1be:	e92dffeb 	bnez      	r13, 0xf194	//f194 <__GI_sqrt+0x68>
    f1c2:	3480      	movi      	r4, 128      	//0x80
    f1c4:	4418      	lsli      	r0, r4, 24
    f1c6:	ea130020 	movi      	r19, 32      	//0x20
    f1ca:	c40d4836 	lsli      	r22, r13, 0
    f1ce:	c4004837 	lsli      	r23, r0, 0
    f1d2:	040e      	br      	0xf1ee	//f1ee <__GI_sqrt+0xc2>
    f1d4:	670a      	cmpne      	r2, r12
    f1d6:	0c62      	bf      	0xf29a	//f29a <__GI_sqrt+0x16e>
    f1d8:	c7e14852 	lsri      	r18, r1, 31
    f1dc:	5a48      	addu      	r2, r2, r2
    f1de:	e6731000 	subi      	r19, r19, 1      	//0x1
    f1e2:	c6420022 	addu      	r2, r2, r18
    f1e6:	5924      	addu      	r1, r1, r1
    f1e8:	4801      	lsri      	r0, r0, 1
    f1ea:	e9130029 	bez      	r19, 0xf23c	//f23c <__GI_sqrt+0x110>
    f1ee:	c6c00032 	addu      	r18, r0, r22
    f1f2:	c7f24859 	lsri      	r25, r18, 31
    f1f6:	64b1      	cmplt      	r12, r2
    f1f8:	c7f94835 	lsli      	r21, r25, 31
    f1fc:	0fec      	bf      	0xf1d4	//f1d4 <__GI_sqrt+0xa8>
    f1fe:	c6f50480 	cmpne      	r21, r23
    f202:	c4120036 	addu      	r22, r18, r0
    f206:	0c43      	bf      	0xf28c	//f28c <__GI_sqrt+0x160>
    f208:	c40c4835 	lsli      	r21, r12, 0
    f20c:	c6410420 	cmphs      	r1, r18
    f210:	c582008c 	subu      	r12, r2, r12
    f214:	c44c0c40 	inct      	r2, r12, 0
    f218:	c44c0c81 	decf      	r2, r12, 1
    f21c:	c6410081 	subu      	r1, r1, r18
    f220:	c7e14852 	lsri      	r18, r1, 31
    f224:	5a48      	addu      	r2, r2, r2
    f226:	e6731000 	subi      	r19, r19, 1      	//0x1
    f22a:	6340      	addu      	r13, r0
    f22c:	c415482c 	lsli      	r12, r21, 0
    f230:	c6420022 	addu      	r2, r2, r18
    f234:	5924      	addu      	r1, r1, r1
    f236:	4801      	lsri      	r0, r0, 1
    f238:	e933ffdb 	bnez      	r19, 0xf1ee	//f1ee <__GI_sqrt+0xc2>
    f23c:	6c48      	or      	r1, r2
    f23e:	e901000c 	bez      	r1, 0xf256	//f256 <__GI_sqrt+0x12a>
    f242:	ea160000 	movi      	r22, 0      	//0x0
    f246:	e4161000 	subi      	r0, r22, 1      	//0x1
    f24a:	6436      	cmpne      	r13, r0
    f24c:	0c83      	bf      	0xf352	//f352 <__GI_sqrt+0x226>
    f24e:	e66d2001 	andi      	r19, r13, 1
    f252:	c5b3002d 	addu      	r13, r19, r13
    f256:	c42d4853 	lsri      	r19, r13, 1
    f25a:	e5b42001 	andi      	r13, r20, 1
    f25e:	c4344894 	asri      	r20, r20, 1
    f262:	e92d002a 	bnez      	r13, 0xf2b6	//f2b6 <__GI_sqrt+0x18a>
    f266:	ea233fe0 	movih      	r3, 16352      	//0x3fe0
    f26a:	c6984837 	lsli      	r23, r24, 20
    f26e:	c4770038 	addu      	r24, r23, r3
    f272:	c6980024 	addu      	r4, r24, r20
    f276:	c4134823 	lsli      	r3, r19, 0
    f27a:	f4041b40 	fmtvrh      	fr0, r4
    f27e:	f4031b60 	fmtvrl      	fr0, r3
    f282:	f4001b01 	fmfvrh      	r1, fr0
    f286:	f4001b20 	fmfvrl      	r0, fr0
    f28a:	1491      	pop      	r4, r15
    f28c:	c7f62880 	btsti      	r22, 31
    f290:	c6ac0c40 	inct      	r21, r12, 0
    f294:	c6ac0c21 	incf      	r21, r12, 1
    f298:	07ba      	br      	0xf20c	//f20c <__GI_sqrt+0xe0>
    f29a:	c6410420 	cmphs      	r1, r18
    f29e:	0bb0      	bt      	0xf1fe	//f1fe <__GI_sqrt+0xd2>
    f2a0:	6f0b      	mov      	r12, r2
    f2a2:	079b      	br      	0xf1d8	//f1d8 <__GI_sqrt+0xac>
    f2a4:	c7f54857 	lsri      	r23, r21, 31
    f2a8:	c4420036 	addu      	r22, r2, r2
    f2ac:	c6f60022 	addu      	r2, r22, r23
    f2b0:	c6b50035 	addu      	r21, r21, r21
    f2b4:	075e      	br      	0xf170	//f170 <__GI_sqrt+0x44>
    f2b6:	c7f32853 	bseti      	r19, r19, 31
    f2ba:	07d6      	br      	0xf266	//f266 <__GI_sqrt+0x13a>
    f2bc:	ea0c0001 	movi      	r12, 1      	//0x1
    f2c0:	3280      	movi      	r2, 128      	//0x80
    f2c2:	422d      	lsli      	r1, r2, 13
    f2c4:	c4202022 	and      	r2, r0, r1
    f2c8:	e9220048 	bnez      	r2, 0xf358	//f358 <__GI_sqrt+0x22c>
    f2cc:	3480      	movi      	r4, 128      	//0x80
    f2ce:	5800      	addu      	r0, r0, r0
    f2d0:	c5a4482d 	lsli      	r13, r4, 13
    f2d4:	c5a02023 	and      	r3, r0, r13
    f2d8:	2200      	addi      	r2, 1      	//0x1
    f2da:	e903fff9 	bez      	r3, 0xf2cc	//f2cc <__GI_sqrt+0x1a0>
    f2de:	ea120020 	movi      	r18, 32      	//0x20
    f2e2:	c452008d 	subu      	r13, r18, r2
    f2e6:	c44c0081 	subu      	r1, r12, r2
    f2ea:	c5b54053 	lsr      	r19, r21, r13
    f2ee:	c6602420 	or      	r0, r0, r19
    f2f2:	e42113fe 	subi      	r1, r1, 1023      	//0x3ff
    f2f6:	c6605034 	bmaski      	r20, 20      	//0x14
    f2fa:	c6802020 	and      	r0, r0, r20
    f2fe:	e5812001 	andi      	r12, r1, 1
    f302:	c4554035 	lsl      	r21, r21, r2
    f306:	c6802842 	bseti      	r2, r0, 20
    f30a:	e90cff33 	bez      	r12, 0xf170	//f170 <__GI_sqrt+0x44>
    f30e:	07cb      	br      	0xf2a4	//f2a4 <__GI_sqrt+0x178>
    f310:	ea0c0000 	movi      	r12, 0      	//0x0
    f314:	6f73      	mov      	r13, r12
    f316:	c4024832 	lsli      	r18, r2, 0
    f31a:	c7c0502c 	bmaski      	r12, 31      	//0x1f
    f31e:	c64c202c 	and      	r12, r12, r18
    f322:	c66d202d 	and      	r13, r13, r19
    f326:	6f04      	or      	r12, r1
    f328:	e90cffad 	bez      	r12, 0xf282	//f282 <__GI_sqrt+0x156>
    f32c:	e922001a 	bnez      	r2, 0xf360	//f360 <__GI_sqrt+0x234>
    f330:	c5754840 	lsri      	r0, r21, 11
    f334:	2a14      	subi      	r2, 21      	//0x15
    f336:	c6b54835 	lsli      	r21, r21, 21
    f33a:	e900fffb 	bez      	r0, 0xf330	//f330 <__GI_sqrt+0x204>
    f33e:	e5820000 	addi      	r12, r2, 1      	//0x1
    f342:	07bf      	br      	0xf2c0	//f2c0 <__GI_sqrt+0x194>
    f344:	f4000a80 	fmacd      	fr0, fr0, fr0
    f348:	f4001b01 	fmfvrh      	r1, fr0
    f34c:	f4001b20 	fmfvrl      	r0, fr0
    f350:	1491      	pop      	r4, r15
    f352:	e6940000 	addi      	r20, r20, 1      	//0x1
    f356:	0782      	br      	0xf25a	//f25a <__GI_sqrt+0x12e>
    f358:	ea0d0020 	movi      	r13, 32      	//0x20
    f35c:	3200      	movi      	r2, 0      	//0x0
    f35e:	07c4      	br      	0xf2e6	//f2e6 <__GI_sqrt+0x1ba>
    f360:	f4000820 	fsubd      	fr0, fr0, fr0
    f364:	f4001b01 	fmfvrh      	r1, fr0
    f368:	f4001b20 	fmfvrl      	r0, fr0
    f36c:	f4001b03 	fmfvrh      	r3, fr0
    f370:	f4001b22 	fmfvrl      	r2, fr0
    f374:	e000009c 	bsr      	0xf4ac	//f4ac <__divdf3>
    f378:	c4004820 	lsli      	r0, r0, 0
    f37c:	f4011b40 	fmtvrh      	fr0, r1
    f380:	f4001b60 	fmtvrl      	fr0, r0
    f384:	077f      	br      	0xf282	//f282 <__GI_sqrt+0x156>
    f386:	0000      	.short	0x0000
    f388:	0000f4ac 	.long	0x0000f4ac

0000f38c <__memcpy_fast>:
    f38c:	14c1      	push      	r4
    f38e:	6f03      	mov      	r12, r0
    f390:	c401242d 	or      	r13, r1, r0
    f394:	e48d2003 	andi      	r4, r13, 3
    f398:	e904000e 	bez      	r4, 0xf3b4	//f3b4 <__memcpy_fast+0x28>
    f39c:	e902000b 	bez      	r2, 0xf3b2	//f3b2 <__memcpy_fast+0x26>
    f3a0:	8160      	ld.b      	r3, (r1, 0x0)
    f3a2:	2100      	addi      	r1, 1      	//0x1
    f3a4:	2a00      	subi      	r2, 1      	//0x1
    f3a6:	dc6c0000 	st.b      	r3, (r12, 0x0)
    f3aa:	e58c0000 	addi      	r12, r12, 1      	//0x1
    f3ae:	e922fff9 	bnez      	r2, 0xf3a0	//f3a0 <__memcpy_fast+0x14>
    f3b2:	1481      	pop      	r4
    f3b4:	3a2f      	cmplti      	r2, 16      	//0x10
    f3b6:	0815      	bt      	0xf3e0	//f3e0 <__memcpy_fast+0x54>
    f3b8:	d9a12000 	ld.w      	r13, (r1, 0x0)
    f3bc:	9161      	ld.w      	r3, (r1, 0x4)
    f3be:	9182      	ld.w      	r4, (r1, 0x8)
    f3c0:	da412003 	ld.w      	r18, (r1, 0xc)
    f3c4:	ddac2000 	st.w      	r13, (r12, 0x0)
    f3c8:	dc6c2001 	st.w      	r3, (r12, 0x4)
    f3cc:	dc8c2002 	st.w      	r4, (r12, 0x8)
    f3d0:	de4c2003 	st.w      	r18, (r12, 0xc)
    f3d4:	2a0f      	subi      	r2, 16      	//0x10
    f3d6:	210f      	addi      	r1, 16      	//0x10
    f3d8:	e58c000f 	addi      	r12, r12, 16      	//0x10
    f3dc:	3a2f      	cmplti      	r2, 16      	//0x10
    f3de:	0fed      	bf      	0xf3b8	//f3b8 <__memcpy_fast+0x2c>
    f3e0:	3a23      	cmplti      	r2, 4      	//0x4
    f3e2:	080a      	bt      	0xf3f6	//f3f6 <__memcpy_fast+0x6a>
    f3e4:	9160      	ld.w      	r3, (r1, 0x0)
    f3e6:	2a03      	subi      	r2, 4      	//0x4
    f3e8:	2103      	addi      	r1, 4      	//0x4
    f3ea:	dc6c2000 	st.w      	r3, (r12, 0x0)
    f3ee:	e58c0003 	addi      	r12, r12, 4      	//0x4
    f3f2:	3a23      	cmplti      	r2, 4      	//0x4
    f3f4:	0ff8      	bf      	0xf3e4	//f3e4 <__memcpy_fast+0x58>
    f3f6:	e902ffde 	bez      	r2, 0xf3b2	//f3b2 <__memcpy_fast+0x26>
    f3fa:	8160      	ld.b      	r3, (r1, 0x0)
    f3fc:	2100      	addi      	r1, 1      	//0x1
    f3fe:	2a00      	subi      	r2, 1      	//0x1
    f400:	dc6c0000 	st.b      	r3, (r12, 0x0)
    f404:	e58c0000 	addi      	r12, r12, 1      	//0x1
    f408:	07f7      	br      	0xf3f6	//f3f6 <__memcpy_fast+0x6a>
	...

0000f40c <__memset_fast>:
    f40c:	e9020023 	bez      	r2, 0xf452	//f452 <__memset_fast+0x46>
    f410:	6f43      	mov      	r13, r0
    f412:	e5802003 	andi      	r12, r0, 3
    f416:	e90c001f 	bez      	r12, 0xf454	//f454 <__memset_fast+0x48>
    f41a:	dc2d0000 	st.b      	r1, (r13, 0x0)
    f41e:	2a00      	subi      	r2, 1      	//0x1
    f420:	e9020019 	bez      	r2, 0xf452	//f452 <__memset_fast+0x46>
    f424:	e5ad0000 	addi      	r13, r13, 1      	//0x1
    f428:	e58d2003 	andi      	r12, r13, 3
    f42c:	e90c0014 	bez      	r12, 0xf454	//f454 <__memset_fast+0x48>
    f430:	dc2d0000 	st.b      	r1, (r13, 0x0)
    f434:	2a00      	subi      	r2, 1      	//0x1
    f436:	e902000e 	bez      	r2, 0xf452	//f452 <__memset_fast+0x46>
    f43a:	e5ad0000 	addi      	r13, r13, 1      	//0x1
    f43e:	e58d2003 	andi      	r12, r13, 3
    f442:	e90c0009 	bez      	r12, 0xf454	//f454 <__memset_fast+0x48>
    f446:	dc2d0000 	st.b      	r1, (r13, 0x0)
    f44a:	2a00      	subi      	r2, 1      	//0x1
    f44c:	e5ad0000 	addi      	r13, r13, 1      	//0x1
    f450:	0402      	br      	0xf454	//f454 <__memset_fast+0x48>
    f452:	783c      	rts
    f454:	4168      	lsli      	r3, r1, 8
    f456:	6c4c      	or      	r1, r3
    f458:	4170      	lsli      	r3, r1, 16
    f45a:	6c4c      	or      	r1, r3
    f45c:	3a2f      	cmplti      	r2, 16      	//0x10
    f45e:	080e      	bt      	0xf47a	//f47a <__memset_fast+0x6e>
    f460:	dc2d2000 	st.w      	r1, (r13, 0x0)
    f464:	dc2d2001 	st.w      	r1, (r13, 0x4)
    f468:	dc2d2002 	st.w      	r1, (r13, 0x8)
    f46c:	dc2d2003 	st.w      	r1, (r13, 0xc)
    f470:	2a0f      	subi      	r2, 16      	//0x10
    f472:	e5ad000f 	addi      	r13, r13, 16      	//0x10
    f476:	3a2f      	cmplti      	r2, 16      	//0x10
    f478:	0ff4      	bf      	0xf460	//f460 <__memset_fast+0x54>
    f47a:	3a23      	cmplti      	r2, 4      	//0x4
    f47c:	0808      	bt      	0xf48c	//f48c <__memset_fast+0x80>
    f47e:	2a03      	subi      	r2, 4      	//0x4
    f480:	dc2d2000 	st.w      	r1, (r13, 0x0)
    f484:	e5ad0003 	addi      	r13, r13, 4      	//0x4
    f488:	3a23      	cmplti      	r2, 4      	//0x4
    f48a:	0ffa      	bf      	0xf47e	//f47e <__memset_fast+0x72>
    f48c:	e902ffe3 	bez      	r2, 0xf452	//f452 <__memset_fast+0x46>
    f490:	2a00      	subi      	r2, 1      	//0x1
    f492:	dc2d0000 	st.b      	r1, (r13, 0x0)
    f496:	e902ffde 	bez      	r2, 0xf452	//f452 <__memset_fast+0x46>
    f49a:	2a00      	subi      	r2, 1      	//0x1
    f49c:	dc2d0001 	st.b      	r1, (r13, 0x1)
    f4a0:	e902ffd9 	bez      	r2, 0xf452	//f452 <__memset_fast+0x46>
    f4a4:	dc2d0002 	st.b      	r1, (r13, 0x2)
    f4a8:	783c      	rts
	...

0000f4ac <__divdf3>:
    f4ac:	ebe00058 	push      	r4-r11, r15, r16-r17
    f4b0:	1433      	subi      	sp, sp, 76
    f4b2:	e58e0027 	addi      	r12, sp, 40      	//0x28
    f4b6:	e5ae003b 	addi      	r13, sp, 60      	//0x3c
    f4ba:	e64e0043 	addi      	r18, sp, 68      	//0x44
    f4be:	dc122000 	st.w      	r0, (r18, 0x0)
    f4c2:	dc322001 	st.w      	r1, (r18, 0x4)
    f4c6:	dc4d2000 	st.w      	r2, (r13, 0x0)
    f4ca:	dc6d2001 	st.w      	r3, (r13, 0x4)
    f4ce:	6c73      	mov      	r1, r12
    f4d0:	c4124820 	lsli      	r0, r18, 0
    f4d4:	e64e0013 	addi      	r18, sp, 20      	//0x14
    f4d8:	dd8e2000 	st.w      	r12, (sp, 0x0)
    f4dc:	ddae2002 	st.w      	r13, (sp, 0x8)
    f4e0:	de4e2001 	st.w      	r18, (sp, 0x4)
    f4e4:	e00002b2 	bsr      	0xfa48	//fa48 <__unpack_d>
    f4e8:	c4004820 	lsli      	r0, r0, 0
    f4ec:	da4e2001 	ld.w      	r18, (sp, 0x4)
    f4f0:	d9ae2002 	ld.w      	r13, (sp, 0x8)
    f4f4:	c4124821 	lsli      	r1, r18, 0
    f4f8:	6c37      	mov      	r0, r13
    f4fa:	e00002a7 	bsr      	0xfa48	//fa48 <__unpack_d>
    f4fe:	c4004820 	lsli      	r0, r0, 0
    f502:	d98e2000 	ld.w      	r12, (sp, 0x0)
    f506:	d86c2000 	ld.w      	r3, (r12, 0x0)
    f50a:	3101      	movi      	r1, 1      	//0x1
    f50c:	64c4      	cmphs      	r1, r3
    f50e:	da4e2001 	ld.w      	r18, (sp, 0x4)
    f512:	08ff      	bt      	0xf710	//f710 <__divdf3+0x264>
    f514:	d8522000 	ld.w      	r2, (r18, 0x0)
    f518:	6484      	cmphs      	r1, r2
    f51a:	08f8      	bt      	0xf70a	//f70a <__divdf3+0x25e>
    f51c:	d82c2001 	ld.w      	r1, (r12, 0x4)
    f520:	d8122001 	ld.w      	r0, (r18, 0x4)
    f524:	6c41      	xor      	r1, r0
    f526:	dc2c2001 	st.w      	r1, (r12, 0x4)
    f52a:	3b44      	cmpnei      	r3, 4
    f52c:	0ca8      	bf      	0xf67c	//f67c <__divdf3+0x1d0>
    f52e:	3b42      	cmpnei      	r3, 2
    f530:	0ca6      	bf      	0xf67c	//f67c <__divdf3+0x1d0>
    f532:	3a44      	cmpnei      	r2, 4
    f534:	0ce2      	bf      	0xf6f8	//f6f8 <__divdf3+0x24c>
    f536:	3a42      	cmpnei      	r2, 2
    f538:	0cd4      	bf      	0xf6e0	//f6e0 <__divdf3+0x234>
    f53a:	d8722002 	ld.w      	r3, (r18, 0x8)
    f53e:	d82c2002 	ld.w      	r1, (r12, 0x8)
    f542:	592d      	subu      	r1, r1, r3
    f544:	da722004 	ld.w      	r19, (r18, 0x10)
    f548:	da522003 	ld.w      	r18, (r18, 0xc)
    f54c:	d84c2003 	ld.w      	r2, (r12, 0xc)
    f550:	d86c2004 	ld.w      	r3, (r12, 0x10)
    f554:	dc2c2002 	st.w      	r1, (r12, 0x8)
    f558:	c6630420 	cmphs      	r3, r19
    f55c:	0860      	bt      	0xf61c	//f61c <__divdf3+0x170>
    f55e:	2900      	subi      	r1, 1      	//0x1
    f560:	c6940440 	cmplt      	r20, r20
    f564:	c4420054 	addc      	r20, r2, r2
    f568:	c4630055 	addc      	r21, r3, r3
    f56c:	c4144822 	lsli      	r2, r20, 0
    f570:	c4154823 	lsli      	r3, r21, 0
    f574:	dc2c2002 	st.w      	r1, (r12, 0x8)
    f578:	3400      	movi      	r4, 0      	//0x0
    f57a:	3580      	movi      	r5, 128      	//0x80
    f57c:	6d93      	mov      	r6, r4
    f57e:	6dd3      	mov      	r7, r4
    f580:	ea0d003d 	movi      	r13, 61      	//0x3d
    f584:	45b5      	lsli      	r5, r5, 21
    f586:	042c      	br      	0xf5de	//f5de <__divdf3+0x132>
    f588:	c4730480 	cmpne      	r19, r3
    f58c:	0c57      	bf      	0xf63a	//f63a <__divdf3+0x18e>
    f58e:	c4144836 	lsli      	r22, r20, 0
    f592:	c4154837 	lsli      	r23, r21, 0
    f596:	c4244854 	lsri      	r20, r4, 1
    f59a:	c7e54835 	lsli      	r21, r5, 31
    f59e:	c6952435 	or      	r21, r21, r20
    f5a2:	c4254854 	lsri      	r20, r5, 1
    f5a6:	c4154822 	lsli      	r2, r21, 0
    f5aa:	c4144823 	lsli      	r3, r20, 0
    f5ae:	e5ad1000 	subi      	r13, r13, 1      	//0x1
    f5b2:	c6940440 	cmplt      	r20, r20
    f5b6:	c4000054 	addc      	r20, r0, r0
    f5ba:	c4210055 	addc      	r21, r1, r1
    f5be:	6d0b      	mov      	r4, r2
    f5c0:	6d4f      	mov      	r5, r3
    f5c2:	c4164826 	lsli      	r6, r22, 0
    f5c6:	c4174827 	lsli      	r7, r23, 0
    f5ca:	c4144820 	lsli      	r0, r20, 0
    f5ce:	c4154821 	lsli      	r1, r21, 0
    f5d2:	c4144822 	lsli      	r2, r20, 0
    f5d6:	c4154823 	lsli      	r3, r21, 0
    f5da:	e90d0038 	bez      	r13, 0xf64a	//f64a <__divdf3+0x19e>
    f5de:	6400      	cmphs      	r0, r0
    f5e0:	c6420100 	subc      	r0, r2, r18
    f5e4:	c6630101 	subc      	r1, r3, r19
    f5e8:	c6630420 	cmphs      	r3, r19
    f5ec:	c4862434 	or      	r20, r6, r4
    f5f0:	c4a72435 	or      	r21, r7, r5
    f5f4:	0c1e      	bf      	0xf630	//f630 <__divdf3+0x184>
    f5f6:	c4730480 	cmpne      	r19, r3
    f5fa:	0c18      	bf      	0xf62a	//f62a <__divdf3+0x17e>
    f5fc:	c4004836 	lsli      	r22, r0, 0
    f600:	c4014837 	lsli      	r23, r1, 0
    f604:	c6630420 	cmphs      	r3, r19
    f608:	c4164820 	lsli      	r0, r22, 0
    f60c:	c4174821 	lsli      	r1, r23, 0
    f610:	0bbc      	bt      	0xf588	//f588 <__divdf3+0xdc>
    f612:	c4064836 	lsli      	r22, r6, 0
    f616:	c4074837 	lsli      	r23, r7, 0
    f61a:	07be      	br      	0xf596	//f596 <__divdf3+0xea>
    f61c:	c4730480 	cmpne      	r19, r3
    f620:	0bac      	bt      	0xf578	//f578 <__divdf3+0xcc>
    f622:	c6420420 	cmphs      	r2, r18
    f626:	0ba9      	bt      	0xf578	//f578 <__divdf3+0xcc>
    f628:	079b      	br      	0xf55e	//f55e <__divdf3+0xb2>
    f62a:	c6420420 	cmphs      	r2, r18
    f62e:	0be7      	bt      	0xf5fc	//f5fc <__divdf3+0x150>
    f630:	c4024836 	lsli      	r22, r2, 0
    f634:	c4034837 	lsli      	r23, r3, 0
    f638:	07e6      	br      	0xf604	//f604 <__divdf3+0x158>
    f63a:	c6420420 	cmphs      	r2, r18
    f63e:	0ba8      	bt      	0xf58e	//f58e <__divdf3+0xe2>
    f640:	c4064836 	lsli      	r22, r6, 0
    f644:	c4074837 	lsli      	r23, r7, 0
    f648:	07a7      	br      	0xf596	//f596 <__divdf3+0xea>
    f64a:	34ff      	movi      	r4, 255      	//0xff
    f64c:	6e13      	mov      	r8, r4
    f64e:	6e77      	mov      	r9, r13
    f650:	6a18      	and      	r8, r6
    f652:	6a5c      	and      	r9, r7
    f654:	eb480080 	cmpnei      	r8, 128      	//0x80
    f658:	0c1f      	bf      	0xf696	//f696 <__divdf3+0x1ea>
    f65a:	dccc2003 	st.w      	r6, (r12, 0xc)
    f65e:	dcec2004 	st.w      	r7, (r12, 0x10)
    f662:	6c33      	mov      	r0, r12
    f664:	e000005c 	bsr      	0xf71c	//f71c <__pack_d>
    f668:	c4004820 	lsli      	r0, r0, 0
    f66c:	1413      	addi      	sp, sp, 76
    f66e:	ebc00058 	pop      	r4-r11, r15, r16-r17
    f672:	0000      	.short	0x0000
    f674:	0000fa48 	.long	0x0000fa48
    f678:	0000f71c 	.long	0x0000f71c
    f67c:	648e      	cmpne      	r3, r2
    f67e:	1166      	lrw      	r3, 0x11248	//11248 <__thenan_df>
    f680:	c40c0c40 	inct      	r0, r12, 0
    f684:	c4030c20 	incf      	r0, r3, 0
    f688:	e000004a 	bsr      	0xf71c	//f71c <__pack_d>
    f68c:	c4004820 	lsli      	r0, r0, 0
    f690:	1413      	addi      	sp, sp, 76
    f692:	ebc00058 	pop      	r4-r11, r15, r16-r17
    f696:	e929ffe2 	bnez      	r9, 0xf65a	//f65a <__divdf3+0x1ae>
    f69a:	ea0a0080 	movi      	r10, 128      	//0x80
    f69e:	c42a482a 	lsli      	r10, r10, 1
    f6a2:	6ee7      	mov      	r11, r9
    f6a4:	6a98      	and      	r10, r6
    f6a6:	6adc      	and      	r11, r7
    f6a8:	6eac      	or      	r10, r11
    f6aa:	e92affd8 	bnez      	r10, 0xf65a	//f65a <__divdf3+0x1ae>
    f6ae:	6c04      	or      	r0, r1
    f6b0:	e900ffd5 	bez      	r0, 0xf65a	//f65a <__divdf3+0x1ae>
    f6b4:	ea100000 	movi      	r16, 0      	//0x0
    f6b8:	dd0e2003 	st.w      	r8, (sp, 0xc)
    f6bc:	ddae2004 	st.w      	r13, (sp, 0x10)
    f6c0:	c4104831 	lsli      	r17, r16, 0
    f6c4:	9863      	ld.w      	r3, (sp, 0xc)
    f6c6:	9884      	ld.w      	r4, (sp, 0x10)
    f6c8:	e61010ff 	subi      	r16, r16, 256      	//0x100
    f6cc:	6599      	cmplt      	r6, r6
    f6ce:	618d      	addc      	r6, r3
    f6d0:	61d1      	addc      	r7, r4
    f6d2:	e6311000 	subi      	r17, r17, 1      	//0x1
    f6d6:	c6062026 	and      	r6, r6, r16
    f6da:	c6272027 	and      	r7, r7, r17
    f6de:	07be      	br      	0xf65a	//f65a <__divdf3+0x1ae>
    f6e0:	ea140004 	movi      	r20, 4      	//0x4
    f6e4:	de8c2000 	st.w      	r20, (r12, 0x0)
    f6e8:	6c33      	mov      	r0, r12
    f6ea:	e0000019 	bsr      	0xf71c	//f71c <__pack_d>
    f6ee:	c4004820 	lsli      	r0, r0, 0
    f6f2:	1413      	addi      	sp, sp, 76
    f6f4:	ebc00058 	pop      	r4-r11, r15, r16-r17
    f6f8:	3400      	movi      	r4, 0      	//0x0
    f6fa:	dc8c2003 	st.w      	r4, (r12, 0xc)
    f6fe:	dc8c2004 	st.w      	r4, (r12, 0x10)
    f702:	dc8c2002 	st.w      	r4, (r12, 0x8)
    f706:	6c33      	mov      	r0, r12
    f708:	07ae      	br      	0xf664	//f664 <__divdf3+0x1b8>
    f70a:	c4124820 	lsli      	r0, r18, 0
    f70e:	07ab      	br      	0xf664	//f664 <__divdf3+0x1b8>
    f710:	6c33      	mov      	r0, r12
    f712:	07a9      	br      	0xf664	//f664 <__divdf3+0x1b8>
    f714:	00011248 	.long	0x00011248
    f718:	0000f71c 	.long	0x0000f71c

0000f71c <__pack_d>:
    f71c:	ebe00057 	push      	r4-r10, r15, r16-r17
    f720:	1520      	subi      	sp, sp, 128
    f722:	9020      	ld.w      	r1, (r0, 0x0)
    f724:	3901      	cmphsi      	r1, 2      	//0x2
    f726:	9083      	ld.w      	r4, (r0, 0xc)
    f728:	90a4      	ld.w      	r5, (r0, 0x10)
    f72a:	d9402001 	ld.w      	r10, (r0, 0x4)
    f72e:	0c9c      	bf      	0xf866	//f866 <__pack_d+0x14a>
    f730:	3944      	cmpnei      	r1, 4
    f732:	0c94      	bf      	0xf85a	//f85a <__pack_d+0x13e>
    f734:	3942      	cmpnei      	r1, 2
    f736:	0c6b      	bf      	0xf80c	//f80c <__pack_d+0xf0>
    f738:	c4a42421 	or      	r1, r4, r5
    f73c:	e9010063 	bez      	r1, 0xf802	//f802 <__pack_d+0xe6>
    f740:	9022      	ld.w      	r1, (r0, 0x8)
    f742:	ea0003fd 	movi      	r0, 1021      	//0x3fd
    f746:	6c02      	nor      	r0, r0
    f748:	6405      	cmplt      	r1, r0
    f74a:	08ad      	bt      	0xf8a4	//f8a4 <__pack_d+0x188>
    f74c:	eb2103ff 	cmplti      	r1, 1024      	//0x400
    f750:	0c85      	bf      	0xf85a	//f85a <__pack_d+0x13e>
    f752:	ea180000 	movi      	r24, 0      	//0x0
    f756:	c4184839 	lsli      	r25, r24, 0
    f75a:	ea1800ff 	movi      	r24, 255      	//0xff
    f75e:	c4982038 	and      	r24, r24, r4
    f762:	c4b92039 	and      	r25, r25, r5
    f766:	eb580080 	cmpnei      	r24, 128      	//0x80
    f76a:	e42103fe 	addi      	r1, r1, 1023      	//0x3ff
    f76e:	0c54      	bf      	0xf816	//f816 <__pack_d+0xfa>
    f770:	ea100000 	movi      	r16, 0      	//0x0
    f774:	c4104831 	lsli      	r17, r16, 0
    f778:	ea10007f 	movi      	r16, 127      	//0x7f
    f77c:	6511      	cmplt      	r4, r4
    f77e:	c6040044 	addc      	r4, r4, r16
    f782:	c6250045 	addc      	r5, r5, r17
    f786:	c7805023 	bmaski      	r3, 29      	//0x1d
    f78a:	654c      	cmphs      	r3, r5
    f78c:	080d      	bt      	0xf7a6	//f7a6 <__pack_d+0x8a>
    f78e:	4c01      	lsri      	r0, r4, 1
    f790:	c7e54838 	lsli      	r24, r5, 31
    f794:	c4182438 	or      	r24, r24, r0
    f798:	4d01      	lsri      	r0, r5, 1
    f79a:	c4184822 	lsli      	r2, r24, 0
    f79e:	6cc3      	mov      	r3, r0
    f7a0:	6d0b      	mov      	r4, r2
    f7a2:	6d4f      	mov      	r5, r3
    f7a4:	2100      	addi      	r1, 1      	//0x1
    f7a6:	ea0c0000 	movi      	r12, 0      	//0x0
    f7aa:	6f73      	mov      	r13, r12
    f7ac:	4578      	lsli      	r3, r5, 24
    f7ae:	6f07      	mov      	r12, r1
    f7b0:	c40d4837 	lsli      	r23, r13, 0
    f7b4:	ea1607ff 	movi      	r22, 2047      	//0x7ff
    f7b8:	c5044854 	lsri      	r20, r4, 8
    f7bc:	c6832434 	or      	r20, r3, r20
    f7c0:	e64d1000 	subi      	r18, r13, 1      	//0x1
    f7c4:	c5962036 	and      	r22, r22, r12
    f7c8:	c5b72037 	and      	r23, r23, r13
    f7cc:	c5054855 	lsri      	r21, r5, 8
    f7d0:	c6605033 	bmaski      	r19, 20      	//0x14
    f7d4:	6db7      	mov      	r6, r13
    f7d6:	c6964827 	lsli      	r7, r22, 20
    f7da:	c6542022 	and      	r2, r20, r18
    f7de:	c6752023 	and      	r3, r21, r19
    f7e2:	ea110000 	movi      	r17, 0      	//0x0
    f7e6:	c7ea482a 	lsli      	r10, r10, 31
    f7ea:	c4114828 	lsli      	r8, r17, 0
    f7ee:	6e6b      	mov      	r9, r10
    f7f0:	6d88      	or      	r6, r2
    f7f2:	6dcc      	or      	r7, r3
    f7f4:	c5062420 	or      	r0, r6, r8
    f7f8:	c5272421 	or      	r1, r7, r9
    f7fc:	1500      	addi      	sp, sp, 128
    f7fe:	ebc00057 	pop      	r4-r10, r15, r16-r17
    f802:	6d87      	mov      	r6, r1
    f804:	6c87      	mov      	r2, r1
    f806:	6dc7      	mov      	r7, r1
    f808:	6cc7      	mov      	r3, r1
    f80a:	07ec      	br      	0xf7e2	//f7e2 <__pack_d+0xc6>
    f80c:	3600      	movi      	r6, 0      	//0x0
    f80e:	6ddb      	mov      	r7, r6
    f810:	6c9b      	mov      	r2, r6
    f812:	6cdb      	mov      	r3, r6
    f814:	07e7      	br      	0xf7e2	//f7e2 <__pack_d+0xc6>
    f816:	e939ffad 	bnez      	r25, 0xf770	//f770 <__pack_d+0x54>
    f81a:	ea110080 	movi      	r17, 128      	//0x80
    f81e:	c4314820 	lsli      	r0, r17, 1
    f822:	b802      	st.w      	r0, (sp, 0x8)
    f824:	df2e2003 	st.w      	r25, (sp, 0xc)
    f828:	da0e2002 	ld.w      	r16, (sp, 0x8)
    f82c:	da2e2003 	ld.w      	r17, (sp, 0xc)
    f830:	c6042022 	and      	r2, r4, r16
    f834:	c6252023 	and      	r3, r5, r17
    f838:	6c8c      	or      	r2, r3
    f83a:	e902ffa6 	bez      	r2, 0xf786	//f786 <__pack_d+0x6a>
    f83e:	df0e2004 	st.w      	r24, (sp, 0x10)
    f842:	df2e2005 	st.w      	r25, (sp, 0x14)
    f846:	da0e2004 	ld.w      	r16, (sp, 0x10)
    f84a:	da2e2005 	ld.w      	r17, (sp, 0x14)
    f84e:	6511      	cmplt      	r4, r4
    f850:	c6040044 	addc      	r4, r4, r16
    f854:	c6250045 	addc      	r5, r5, r17
    f858:	0797      	br      	0xf786	//f786 <__pack_d+0x6a>
    f85a:	3600      	movi      	r6, 0      	//0x0
    f85c:	6c9b      	mov      	r2, r6
    f85e:	6cdb      	mov      	r3, r6
    f860:	ea277ff0 	movih      	r7, 32752      	//0x7ff0
    f864:	07bf      	br      	0xf7e2	//f7e2 <__pack_d+0xc6>
    f866:	3180      	movi      	r1, 128      	//0x80
    f868:	3000      	movi      	r0, 0      	//0x0
    f86a:	414c      	lsli      	r2, r1, 12
    f86c:	b84d      	st.w      	r2, (sp, 0x34)
    f86e:	b80c      	st.w      	r0, (sp, 0x30)
    f870:	5863      	subi      	r3, r0, 1      	//0x1
    f872:	d98e200c 	ld.w      	r12, (sp, 0x30)
    f876:	d9ae200d 	ld.w      	r13, (sp, 0x34)
    f87a:	b86e      	st.w      	r3, (sp, 0x38)
    f87c:	c5842422 	or      	r2, r4, r12
    f880:	c5a52423 	or      	r3, r5, r13
    f884:	c660502d 	bmaski      	r13, 20      	//0x14
    f888:	ddae200f 	st.w      	r13, (sp, 0x3c)
    f88c:	da0e200e 	ld.w      	r16, (sp, 0x38)
    f890:	da2e200f 	ld.w      	r17, (sp, 0x3c)
    f894:	6d83      	mov      	r6, r0
    f896:	c6022022 	and      	r2, r2, r16
    f89a:	c6232023 	and      	r3, r3, r17
    f89e:	ea277ff0 	movih      	r7, 32752      	//0x7ff0
    f8a2:	07a0      	br      	0xf7e2	//f7e2 <__pack_d+0xc6>
    f8a4:	c4200090 	subu      	r16, r0, r1
    f8a8:	eb300038 	cmplti      	r16, 57      	//0x39
    f8ac:	0cb2      	bf      	0xfa10	//fa10 <__pack_d+0x2f4>
    f8ae:	c4104822 	lsli      	r2, r16, 0
    f8b2:	6c13      	mov      	r0, r4
    f8b4:	6c57      	mov      	r1, r5
    f8b6:	e0000153 	bsr      	0xfb5c	//fb5c <__lshrdi3>
    f8ba:	c4004820 	lsli      	r0, r0, 0
    f8be:	6f03      	mov      	r12, r0
    f8c0:	6f47      	mov      	r13, r1
    f8c2:	c4104822 	lsli      	r2, r16, 0
    f8c6:	3001      	movi      	r0, 1      	//0x1
    f8c8:	3100      	movi      	r1, 0      	//0x0
    f8ca:	dd8e2001 	st.w      	r12, (sp, 0x4)
    f8ce:	ddae2000 	st.w      	r13, (sp, 0x0)
    f8d2:	ea110000 	movi      	r17, 0      	//0x0
    f8d6:	e0000157 	bsr      	0xfb84	//fb84 <__ashldi3>
    f8da:	c4004820 	lsli      	r0, r0, 0
    f8de:	e6511000 	subi      	r18, r17, 1      	//0x1
    f8e2:	de4e200a 	st.w      	r18, (sp, 0x28)
    f8e6:	de4e200b 	st.w      	r18, (sp, 0x2c)
    f8ea:	da0e200a 	ld.w      	r16, (sp, 0x28)
    f8ee:	da2e200b 	ld.w      	r17, (sp, 0x2c)
    f8f2:	6489      	cmplt      	r2, r2
    f8f4:	c6000042 	addc      	r2, r0, r16
    f8f8:	c6210043 	addc      	r3, r1, r17
    f8fc:	6890      	and      	r2, r4
    f8fe:	68d4      	and      	r3, r5
    f900:	6c8c      	or      	r2, r3
    f902:	3a40      	cmpnei      	r2, 0
    f904:	ea110000 	movi      	r17, 0      	//0x0
    f908:	c4000512 	mvc      	r18
    f90c:	de2e2017 	st.w      	r17, (sp, 0x5c)
    f910:	de4e2016 	st.w      	r18, (sp, 0x58)
    f914:	d98e2001 	ld.w      	r12, (sp, 0x4)
    f918:	d9ae2000 	ld.w      	r13, (sp, 0x0)
    f91c:	9816      	ld.w      	r0, (sp, 0x58)
    f91e:	9837      	ld.w      	r1, (sp, 0x5c)
    f920:	6c30      	or      	r0, r12
    f922:	6c74      	or      	r1, r13
    f924:	ea1300ff 	movi      	r19, 255      	//0xff
    f928:	de2e201b 	st.w      	r17, (sp, 0x6c)
    f92c:	de6e201a 	st.w      	r19, (sp, 0x68)
    f930:	b806      	st.w      	r0, (sp, 0x18)
    f932:	b827      	st.w      	r1, (sp, 0x1c)
    f934:	9866      	ld.w      	r3, (sp, 0x18)
    f936:	9887      	ld.w      	r4, (sp, 0x1c)
    f938:	d98e201a 	ld.w      	r12, (sp, 0x68)
    f93c:	d9ae201b 	ld.w      	r13, (sp, 0x6c)
    f940:	68f0      	and      	r3, r12
    f942:	6934      	and      	r4, r13
    f944:	eb430080 	cmpnei      	r3, 128      	//0x80
    f948:	086a      	bt      	0xfa1c	//fa1c <__pack_d+0x300>
    f94a:	e9240069 	bnez      	r4, 0xfa1c	//fa1c <__pack_d+0x300>
    f94e:	ea0d0080 	movi      	r13, 128      	//0x80
    f952:	c42d4830 	lsli      	r16, r13, 1
    f956:	de0e2010 	st.w      	r16, (sp, 0x40)
    f95a:	b891      	st.w      	r4, (sp, 0x44)
    f95c:	9826      	ld.w      	r1, (sp, 0x18)
    f95e:	9847      	ld.w      	r2, (sp, 0x1c)
    f960:	da4e2010 	ld.w      	r18, (sp, 0x40)
    f964:	da6e2011 	ld.w      	r19, (sp, 0x44)
    f968:	c6412021 	and      	r1, r1, r18
    f96c:	c6622022 	and      	r2, r2, r19
    f970:	6c48      	or      	r1, r2
    f972:	e901000f 	bez      	r1, 0xf990	//f990 <__pack_d+0x274>
    f976:	b87c      	st.w      	r3, (sp, 0x70)
    f978:	b89d      	st.w      	r4, (sp, 0x74)
    f97a:	9846      	ld.w      	r2, (sp, 0x18)
    f97c:	9867      	ld.w      	r3, (sp, 0x1c)
    f97e:	d98e201c 	ld.w      	r12, (sp, 0x70)
    f982:	d9ae201d 	ld.w      	r13, (sp, 0x74)
    f986:	6489      	cmplt      	r2, r2
    f988:	60b1      	addc      	r2, r12
    f98a:	60f5      	addc      	r3, r13
    f98c:	b846      	st.w      	r2, (sp, 0x18)
    f98e:	b867      	st.w      	r3, (sp, 0x1c)
    f990:	9887      	ld.w      	r4, (sp, 0x1c)
    f992:	d98e2006 	ld.w      	r12, (sp, 0x18)
    f996:	ea0d0000 	movi      	r13, 0      	//0x0
    f99a:	4478      	lsli      	r3, r4, 24
    f99c:	c50c484c 	lsri      	r12, r12, 8
    f9a0:	c5832430 	or      	r16, r3, r12
    f9a4:	e62d1000 	subi      	r17, r13, 1      	//0x1
    f9a8:	c5044852 	lsri      	r18, r4, 8
    f9ac:	c6605033 	bmaski      	r19, 20      	//0x14
    f9b0:	de0e2012 	st.w      	r16, (sp, 0x48)
    f9b4:	de2e2014 	st.w      	r17, (sp, 0x50)
    f9b8:	de4e2013 	st.w      	r18, (sp, 0x4c)
    f9bc:	de6e2015 	st.w      	r19, (sp, 0x54)
    f9c0:	3001      	movi      	r0, 1      	//0x1
    f9c2:	c7605021 	bmaski      	r1, 28      	//0x1c
    f9c6:	ddae2009 	st.w      	r13, (sp, 0x24)
    f9ca:	9852      	ld.w      	r2, (sp, 0x48)
    f9cc:	9873      	ld.w      	r3, (sp, 0x4c)
    f9ce:	d98e2014 	ld.w      	r12, (sp, 0x50)
    f9d2:	d9ae2015 	ld.w      	r13, (sp, 0x54)
    f9d6:	b808      	st.w      	r0, (sp, 0x20)
    f9d8:	6504      	cmphs      	r1, r4
    f9da:	68b0      	and      	r2, r12
    f9dc:	68f4      	and      	r3, r13
    f9de:	c4044830 	lsli      	r16, r4, 0
    f9e2:	ea0d0000 	movi      	r13, 0      	//0x0
    f9e6:	0c03      	bf      	0xf9ec	//f9ec <__pack_d+0x2d0>
    f9e8:	ddae2008 	st.w      	r13, (sp, 0x20)
    f9ec:	ea0007ff 	movi      	r0, 2047      	//0x7ff
    f9f0:	ea130000 	movi      	r19, 0      	//0x0
    f9f4:	b818      	st.w      	r0, (sp, 0x60)
    f9f6:	de6e2019 	st.w      	r19, (sp, 0x64)
    f9fa:	d98e2018 	ld.w      	r12, (sp, 0x60)
    f9fe:	d9ae2019 	ld.w      	r13, (sp, 0x64)
    fa02:	9808      	ld.w      	r0, (sp, 0x20)
    fa04:	9829      	ld.w      	r1, (sp, 0x24)
    fa06:	6830      	and      	r0, r12
    fa08:	6874      	and      	r1, r13
    fa0a:	40f4      	lsli      	r7, r0, 20
    fa0c:	6db7      	mov      	r6, r13
    fa0e:	06ea      	br      	0xf7e2	//f7e2 <__pack_d+0xc6>
    fa10:	ea0d0000 	movi      	r13, 0      	//0x0
    fa14:	ddae2006 	st.w      	r13, (sp, 0x18)
    fa18:	ddae2007 	st.w      	r13, (sp, 0x1c)
    fa1c:	ea110000 	movi      	r17, 0      	//0x0
    fa20:	ea12007f 	movi      	r18, 127      	//0x7f
    fa24:	de2e201f 	st.w      	r17, (sp, 0x7c)
    fa28:	de4e201e 	st.w      	r18, (sp, 0x78)
    fa2c:	9806      	ld.w      	r0, (sp, 0x18)
    fa2e:	9827      	ld.w      	r1, (sp, 0x1c)
    fa30:	985e      	ld.w      	r2, (sp, 0x78)
    fa32:	987f      	ld.w      	r3, (sp, 0x7c)
    fa34:	6401      	cmplt      	r0, r0
    fa36:	6009      	addc      	r0, r2
    fa38:	604d      	addc      	r1, r3
    fa3a:	b806      	st.w      	r0, (sp, 0x18)
    fa3c:	b827      	st.w      	r1, (sp, 0x1c)
    fa3e:	07a9      	br      	0xf990	//f990 <__pack_d+0x274>
    fa40:	0000fb5c 	.long	0x0000fb5c
    fa44:	0000fb84 	.long	0x0000fb84

0000fa48 <__unpack_d>:
    fa48:	14c1      	push      	r4
    fa4a:	db002000 	ld.w      	r24, (r0, 0x0)
    fa4e:	db202001 	ld.w      	r25, (r0, 0x4)
    fa52:	ea0c0000 	movi      	r12, 0      	//0x0
    fa56:	c7f94840 	lsri      	r0, r25, 31
    fa5a:	e58c1000 	subi      	r12, r12, 1      	//0x1
    fa5e:	c660502d 	bmaski      	r13, 20      	//0x14
    fa62:	c69957c2 	zext      	r2, r25, 30, 20
    fa66:	b101      	st.w      	r0, (r1, 0x4)
    fa68:	c70c202c 	and      	r12, r12, r24
    fa6c:	c72d202d 	and      	r13, r13, r25
    fa70:	e9220030 	bnez      	r2, 0xfad0	//fad0 <__unpack_d+0x88>
    fa74:	c5ac2422 	or      	r2, r12, r13
    fa78:	e902004d 	bez      	r2, 0xfb12	//fb12 <__unpack_d+0xca>
    fa7c:	c70c4842 	lsri      	r2, r12, 24
    fa80:	c50d4824 	lsli      	r4, r13, 8
    fa84:	6d08      	or      	r4, r2
    fa86:	c50c4823 	lsli      	r3, r12, 8
    fa8a:	ea1203fd 	movi      	r18, 1021      	//0x3fd
    fa8e:	c6522492 	nor      	r18, r18, r18
    fa92:	c760502c 	bmaski      	r12, 28      	//0x1c
    fa96:	ea130003 	movi      	r19, 3      	//0x3
    fa9a:	de412002 	st.w      	r18, (r1, 0x8)
    fa9e:	de612000 	st.w      	r19, (r1, 0x0)
    faa2:	6530      	cmphs      	r12, r4
    faa4:	0c13      	bf      	0xfaca	//faca <__unpack_d+0x82>
    faa6:	ea0203fe 	movi      	r2, 1022      	//0x3fe
    faaa:	6c8a      	nor      	r2, r2
    faac:	c6520440 	cmplt      	r18, r18
    fab0:	c4630052 	addc      	r18, r3, r3
    fab4:	c4840053 	addc      	r19, r4, r4
    fab8:	c4124823 	lsli      	r3, r18, 0
    fabc:	c4134824 	lsli      	r4, r19, 0
    fac0:	6530      	cmphs      	r12, r4
    fac2:	6c0b      	mov      	r0, r2
    fac4:	2a00      	subi      	r2, 1      	//0x1
    fac6:	0bf3      	bt      	0xfaac	//faac <__unpack_d+0x64>
    fac8:	b102      	st.w      	r0, (r1, 0x8)
    faca:	b163      	st.w      	r3, (r1, 0xc)
    facc:	b184      	st.w      	r4, (r1, 0x10)
    face:	1481      	pop      	r4
    fad0:	eb4207ff 	cmpnei      	r2, 2047      	//0x7ff
    fad4:	0c22      	bf      	0xfb18	//fb18 <__unpack_d+0xd0>
    fad6:	ea140000 	movi      	r20, 0      	//0x0
    fada:	c70c4843 	lsri      	r3, r12, 24
    fade:	c50d4835 	lsli      	r21, r13, 8
    fae2:	ea130080 	movi      	r19, 128      	//0x80
    fae6:	c4144832 	lsli      	r18, r20, 0
    faea:	c6a32435 	or      	r21, r3, r21
    faee:	c50c4834 	lsli      	r20, r12, 8
    faf2:	c6b34833 	lsli      	r19, r19, 21
    faf6:	e44213fe 	subi      	r2, r2, 1023      	//0x3ff
    fafa:	c6922432 	or      	r18, r18, r20
    fafe:	c6b32433 	or      	r19, r19, r21
    fb02:	3303      	movi      	r3, 3      	//0x3
    fb04:	b142      	st.w      	r2, (r1, 0x8)
    fb06:	b160      	st.w      	r3, (r1, 0x0)
    fb08:	de412003 	st.w      	r18, (r1, 0xc)
    fb0c:	de612004 	st.w      	r19, (r1, 0x10)
    fb10:	1481      	pop      	r4
    fb12:	3202      	movi      	r2, 2      	//0x2
    fb14:	b140      	st.w      	r2, (r1, 0x0)
    fb16:	1481      	pop      	r4
    fb18:	c5ac2423 	or      	r3, r12, r13
    fb1c:	e903001a 	bez      	r3, 0xfb50	//fb50 <__unpack_d+0x108>
    fb20:	ea170080 	movi      	r23, 128      	//0x80
    fb24:	ea160000 	movi      	r22, 0      	//0x0
    fb28:	c5974837 	lsli      	r23, r23, 12
    fb2c:	c5962036 	and      	r22, r22, r12
    fb30:	c5b72037 	and      	r23, r23, r13
    fb34:	c6f62436 	or      	r22, r22, r23
    fb38:	eb560000 	cmpnei      	r22, 0      	//0x0
    fb3c:	3201      	movi      	r2, 1      	//0x1
    fb3e:	c6c20c40 	inct      	r22, r2, 0
    fb42:	dec12000 	st.w      	r22, (r1, 0x0)
    fb46:	dd812003 	st.w      	r12, (r1, 0xc)
    fb4a:	dda12004 	st.w      	r13, (r1, 0x10)
    fb4e:	1481      	pop      	r4
    fb50:	ea130004 	movi      	r19, 4      	//0x4
    fb54:	de612000 	st.w      	r19, (r1, 0x0)
    fb58:	1481      	pop      	r4
	...

0000fb5c <__lshrdi3>:
    fb5c:	e902000d 	bez      	r2, 0xfb76	//fb76 <__lshrdi3+0x1a>
    fb60:	3320      	movi      	r3, 32      	//0x20
    fb62:	5b69      	subu      	r3, r3, r2
    fb64:	e963000a 	blsz      	r3, 0xfb78	//fb78 <__lshrdi3+0x1c>
    fb68:	c4614023 	lsl      	r3, r1, r3
    fb6c:	7009      	lsr      	r0, r2
    fb6e:	c4414042 	lsr      	r2, r1, r2
    fb72:	6c0c      	or      	r0, r3
    fb74:	6c4b      	mov      	r1, r2
    fb76:	783c      	rts
    fb78:	3200      	movi      	r2, 0      	//0x0
    fb7a:	5a0d      	subu      	r0, r2, r3
    fb7c:	c4014040 	lsr      	r0, r1, r0
    fb80:	6c4b      	mov      	r1, r2
    fb82:	07fa      	br      	0xfb76	//fb76 <__lshrdi3+0x1a>

0000fb84 <__ashldi3>:
    fb84:	e902000d 	bez      	r2, 0xfb9e	//fb9e <__ashldi3+0x1a>
    fb88:	3320      	movi      	r3, 32      	//0x20
    fb8a:	5b69      	subu      	r3, r3, r2
    fb8c:	e963000a 	blsz      	r3, 0xfba0	//fba0 <__ashldi3+0x1c>
    fb90:	c4604043 	lsr      	r3, r0, r3
    fb94:	7048      	lsl      	r1, r2
    fb96:	c4404022 	lsl      	r2, r0, r2
    fb9a:	6c4c      	or      	r1, r3
    fb9c:	6c0b      	mov      	r0, r2
    fb9e:	783c      	rts
    fba0:	3200      	movi      	r2, 0      	//0x0
    fba2:	5a2d      	subu      	r1, r2, r3
    fba4:	c4204021 	lsl      	r1, r0, r1
    fba8:	6c0b      	mov      	r0, r2
    fbaa:	07fa      	br      	0xfb9e	//fb9e <__ashldi3+0x1a>
    fbac:	0000      	bkpt
	...
